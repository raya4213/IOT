
serial_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d2e4  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  100152e4  100152e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000031c4  10015364  10015364  00015364  2**2
                  ALLOC
  3 .stack        00000800  10018528  10018528  00015364  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00015364  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001538c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027314  00000000  00000000  00015440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bff  00000000  00000000  0003c754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000072bb  00000000  00000000  0003f353  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  0004660e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000780  00000000  00000000  00046d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c1d2  00000000  00000000  00047486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af4f  00000000  00000000  00063658  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010bcbc  00000000  00000000  0006e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000217c  00000000  00000000  0017a264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100152e4 	.word	0x100152e4
10008068:	100152e4 	.word	0x100152e4
1000806c:	10015364 	.word	0x10015364
10008070:	10018528 	.word	0x10018528
10008074:	10015364 	.word	0x10015364
10008078:	100152e8 	.word	0x100152e8
1000807c:	10015368 	.word	0x10015368
10008080:	1001306d 	.word	0x1001306d
10008084:	1000bcfd 	.word	0x1000bcfd

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10015364 	.word	0x10015364
100080a8:	00000000 	.word	0x00000000
100080ac:	100152e4 	.word	0x100152e4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10015368 	.word	0x10015368
100080dc:	100152e4 	.word	0x100152e4
100080e0:	100152e4 	.word	0x100152e4
100080e4:	00000000 	.word	0x00000000

100080e8 <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
100080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100080ea:	4647      	mov	r7, r8
100080ec:	b480      	push	{r7}
100080ee:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
100080f0:	2380      	movs	r3, #128	; 0x80
100080f2:	011b      	lsls	r3, r3, #4
100080f4:	4a3a      	ldr	r2, [pc, #232]	; (100081e0 <dma_isr_handler+0xf8>)
100080f6:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
100080f8:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
100080fa:	230f      	movs	r3, #15
100080fc:	401c      	ands	r4, r3
100080fe:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008100:	4b38      	ldr	r3, [pc, #224]	; (100081e4 <dma_isr_handler+0xfc>)
10008102:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008104:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
10008106:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
10008108:	2100      	movs	r1, #0
1000810a:	e000      	b.n	1000810e <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
1000810c:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
1000810e:	0852      	lsrs	r2, r2, #1
		index++;
10008110:	1c4b      	adds	r3, r1, #1
10008112:	b2db      	uxtb	r3, r3
	} while (channel);
10008114:	2a00      	cmp	r2, #0
10008116:	d1f9      	bne.n	1000810c <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008118:	0089      	lsls	r1, r1, #2
1000811a:	4643      	mov	r3, r8
1000811c:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
1000811e:	7803      	ldrb	r3, [r0, #0]
10008120:	021b      	lsls	r3, r3, #8
10008122:	4a31      	ldr	r2, [pc, #196]	; (100081e8 <dma_isr_handler+0x100>)
10008124:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008126:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008128:	4a30      	ldr	r2, [pc, #192]	; (100081ec <dma_isr_handler+0x104>)
1000812a:	589a      	ldr	r2, [r3, r2]
1000812c:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
1000812e:	22ff      	movs	r2, #255	; 0xff
10008130:	4022      	ands	r2, r4
10008132:	4215      	tst	r5, r2
10008134:	d003      	beq.n	1000813e <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
10008136:	2600      	movs	r6, #0
10008138:	2225      	movs	r2, #37	; 0x25
1000813a:	5486      	strb	r6, [r0, r2]
1000813c:	e02f      	b.n	1000819e <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
1000813e:	0797      	lsls	r7, r2, #30
10008140:	d504      	bpl.n	1000814c <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008142:	2610      	movs	r6, #16
10008144:	2225      	movs	r2, #37	; 0x25
10008146:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
10008148:	002e      	movs	r6, r5
1000814a:	e028      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
1000814c:	0757      	lsls	r7, r2, #29
1000814e:	d504      	bpl.n	1000815a <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008150:	2610      	movs	r6, #16
10008152:	2225      	movs	r2, #37	; 0x25
10008154:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
10008156:	3e0e      	subs	r6, #14
10008158:	e021      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
1000815a:	0717      	lsls	r7, r2, #28
1000815c:	d504      	bpl.n	10008168 <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000815e:	2610      	movs	r6, #16
10008160:	2225      	movs	r2, #37	; 0x25
10008162:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
10008164:	3e0d      	subs	r6, #13
10008166:	e01a      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
10008168:	06d7      	lsls	r7, r2, #27
1000816a:	d504      	bpl.n	10008176 <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000816c:	2610      	movs	r6, #16
1000816e:	2225      	movs	r2, #37	; 0x25
10008170:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
10008172:	3e0c      	subs	r6, #12
10008174:	e013      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
10008176:	0697      	lsls	r7, r2, #26
10008178:	d504      	bpl.n	10008184 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000817a:	2610      	movs	r6, #16
1000817c:	2225      	movs	r2, #37	; 0x25
1000817e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
10008180:	3e0b      	subs	r6, #11
10008182:	e00c      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008184:	0652      	lsls	r2, r2, #25
10008186:	d504      	bpl.n	10008192 <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008188:	2610      	movs	r6, #16
1000818a:	2225      	movs	r2, #37	; 0x25
1000818c:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
1000818e:	3e0a      	subs	r6, #10
10008190:	e005      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
10008192:	0622      	lsls	r2, r4, #24
10008194:	d503      	bpl.n	1000819e <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008196:	2610      	movs	r6, #16
10008198:	2225      	movs	r2, #37	; 0x25
1000819a:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
1000819c:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
1000819e:	2900      	cmp	r1, #0
100081a0:	d00e      	beq.n	100081c0 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100081a2:	4913      	ldr	r1, [pc, #76]	; (100081f0 <dma_isr_handler+0x108>)
100081a4:	002a      	movs	r2, r5
100081a6:	40b2      	lsls	r2, r6
100081a8:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
100081aa:	2324      	movs	r3, #36	; 0x24
100081ac:	5cc3      	ldrb	r3, [r0, r3]
100081ae:	4133      	asrs	r3, r6
100081b0:	421d      	tst	r5, r3
100081b2:	d005      	beq.n	100081c0 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
100081b4:	00b3      	lsls	r3, r6, #2
100081b6:	18c3      	adds	r3, r0, r3
100081b8:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
100081be:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
100081c0:	002b      	movs	r3, r5
100081c2:	40b3      	lsls	r3, r6
100081c4:	439c      	bics	r4, r3
100081c6:	b263      	sxtb	r3, r4
100081c8:	2b00      	cmp	r3, #0
100081ca:	d19c      	bne.n	10008106 <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100081cc:	2180      	movs	r1, #128	; 0x80
100081ce:	0209      	lsls	r1, r1, #8
100081d0:	3381      	adds	r3, #129	; 0x81
100081d2:	33ff      	adds	r3, #255	; 0xff
100081d4:	4a07      	ldr	r2, [pc, #28]	; (100081f4 <dma_isr_handler+0x10c>)
100081d6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
100081d8:	b002      	add	sp, #8
100081da:	bc04      	pop	{r2}
100081dc:	4690      	mov	r8, r2
100081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081e0:	40002000 	.word	0x40002000
100081e4:	10015380 	.word	0x10015380
100081e8:	400020ac 	.word	0x400020ac
100081ec:	40002050 	.word	0x40002050
100081f0:	400020a4 	.word	0x400020a4
100081f4:	e000e100 	.word	0xe000e100

100081f8 <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
100081f8:	2201      	movs	r2, #1
100081fa:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
100081fc:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
100081fe:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008200:	2300      	movs	r3, #0
10008202:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
10008204:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
10008206:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
10008208:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
1000820a:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
1000820c:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
1000820e:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
10008210:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
10008212:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
10008214:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
10008216:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
10008218:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
1000821a:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
1000821c:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
1000821e:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
10008220:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
10008222:	74c3      	strb	r3, [r0, #19]
}
10008224:	4770      	bx	lr
10008226:	46c0      	nop			; (mov r8, r8)

10008228 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
10008228:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
1000822a:	2325      	movs	r3, #37	; 0x25
1000822c:	5cc3      	ldrb	r3, [r0, r3]
1000822e:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
10008230:	2b05      	cmp	r3, #5
10008232:	d042      	beq.n	100082ba <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
10008234:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
10008236:	2a00      	cmp	r2, #0
10008238:	d007      	beq.n	1000824a <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000823a:	2303      	movs	r3, #3
1000823c:	68d4      	ldr	r4, [r2, #12]
1000823e:	439c      	bics	r4, r3
10008240:	0023      	movs	r3, r4
10008242:	2403      	movs	r4, #3
10008244:	2b00      	cmp	r3, #0
10008246:	d11f      	bne.n	10008288 <dma_add_descriptor+0x60>
10008248:	e02d      	b.n	100082a6 <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
1000824a:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000824c:	7803      	ldrb	r3, [r0, #0]
1000824e:	021b      	lsls	r3, r3, #8
10008250:	4a1b      	ldr	r2, [pc, #108]	; (100082c0 <dma_add_descriptor+0x98>)
10008252:	4694      	mov	ip, r2
10008254:	4463      	add	r3, ip
10008256:	680a      	ldr	r2, [r1, #0]
10008258:	601a      	str	r2, [r3, #0]
1000825a:	7803      	ldrb	r3, [r0, #0]
1000825c:	021b      	lsls	r3, r3, #8
1000825e:	4a19      	ldr	r2, [pc, #100]	; (100082c4 <dma_add_descriptor+0x9c>)
10008260:	4694      	mov	ip, r2
10008262:	4463      	add	r3, ip
10008264:	684a      	ldr	r2, [r1, #4]
10008266:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
10008268:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000826a:	7803      	ldrb	r3, [r0, #0]
1000826c:	021b      	lsls	r3, r3, #8
1000826e:	4916      	ldr	r1, [pc, #88]	; (100082c8 <dma_add_descriptor+0xa0>)
10008270:	468c      	mov	ip, r1
10008272:	4463      	add	r3, ip
10008274:	601a      	str	r2, [r3, #0]
10008276:	7803      	ldrb	r3, [r0, #0]
10008278:	021b      	lsls	r3, r3, #8
1000827a:	4a14      	ldr	r2, [pc, #80]	; (100082cc <dma_add_descriptor+0xa4>)
1000827c:	4694      	mov	ip, r2
1000827e:	4463      	add	r3, ip
10008280:	2203      	movs	r2, #3
10008282:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008284:	2300      	movs	r3, #0
10008286:	e018      	b.n	100082ba <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
10008288:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000828a:	68d3      	ldr	r3, [r2, #12]
1000828c:	43a3      	bics	r3, r4
1000828e:	d1fb      	bne.n	10008288 <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
10008290:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008292:	2303      	movs	r3, #3
10008294:	68ca      	ldr	r2, [r1, #12]
10008296:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008298:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000829a:	2a00      	cmp	r2, #0
1000829c:	d00d      	beq.n	100082ba <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
1000829e:	3303      	adds	r3, #3
100082a0:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
100082a2:	2300      	movs	r3, #0
100082a4:	e009      	b.n	100082ba <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082a6:	7803      	ldrb	r3, [r0, #0]
100082a8:	021b      	lsls	r3, r3, #8
100082aa:	4808      	ldr	r0, [pc, #32]	; (100082cc <dma_add_descriptor+0xa4>)
100082ac:	4684      	mov	ip, r0
100082ae:	4463      	add	r3, ip
100082b0:	2003      	movs	r0, #3
100082b2:	000c      	movs	r4, r1
100082b4:	4384      	bics	r4, r0
100082b6:	601c      	str	r4, [r3, #0]
100082b8:	e7ea      	b.n	10008290 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
100082ba:	0018      	movs	r0, r3
100082bc:	bd10      	pop	{r4, pc}
100082be:	46c0      	nop			; (mov r8, r8)
100082c0:	40002000 	.word	0x40002000
100082c4:	40002004 	.word	0x40002004
100082c8:	40002008 	.word	0x40002008
100082cc:	4000200c 	.word	0x4000200c

100082d0 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
100082d0:	b082      	sub	sp, #8
100082d2:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
100082d4:	2325      	movs	r3, #37	; 0x25
100082d6:	5cc3      	ldrb	r3, [r0, r3]
100082d8:	b2d8      	uxtb	r0, r3
100082da:	2805      	cmp	r0, #5
100082dc:	d027      	beq.n	1000832e <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
100082de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100082e0:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
100082e2:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
100082e4:	2b00      	cmp	r3, #0
100082e6:	d022      	beq.n	1000832e <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082e8:	7813      	ldrb	r3, [r2, #0]
100082ea:	021b      	lsls	r3, r3, #8
100082ec:	4911      	ldr	r1, [pc, #68]	; (10008334 <dma_start_transfer_job+0x64>)
100082ee:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100082f0:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
100082f2:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082f4:	4910      	ldr	r1, [pc, #64]	; (10008338 <dma_start_transfer_job+0x68>)
100082f6:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
100082f8:	2324      	movs	r3, #36	; 0x24
100082fa:	5cd3      	ldrb	r3, [r2, r3]
100082fc:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
100082fe:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008300:	7813      	ldrb	r3, [r2, #0]
10008302:	021b      	lsls	r3, r3, #8
10008304:	480d      	ldr	r0, [pc, #52]	; (1000833c <dma_start_transfer_job+0x6c>)
10008306:	4684      	mov	ip, r0
10008308:	4463      	add	r3, ip
1000830a:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
1000830c:	2105      	movs	r1, #5
1000830e:	2325      	movs	r3, #37	; 0x25
10008310:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008312:	7813      	ldrb	r3, [r2, #0]
10008314:	021b      	lsls	r3, r3, #8
10008316:	490a      	ldr	r1, [pc, #40]	; (10008340 <dma_start_transfer_job+0x70>)
10008318:	468c      	mov	ip, r1
1000831a:	4463      	add	r3, ip
1000831c:	2101      	movs	r1, #1
1000831e:	6019      	str	r1, [r3, #0]
10008320:	7813      	ldrb	r3, [r2, #0]
10008322:	021b      	lsls	r3, r3, #8
10008324:	4a07      	ldr	r2, [pc, #28]	; (10008344 <dma_start_transfer_job+0x74>)
10008326:	4694      	mov	ip, r2
10008328:	4463      	add	r3, ip
1000832a:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
1000832c:	2000      	movs	r0, #0
}
1000832e:	b002      	add	sp, #8
10008330:	4770      	bx	lr
10008332:	46c0      	nop			; (mov r8, r8)
10008334:	400020ac 	.word	0x400020ac
10008338:	400020a4 	.word	0x400020a4
1000833c:	400020a8 	.word	0x400020a8
10008340:	40002040 	.word	0x40002040
10008344:	40002044 	.word	0x40002044

10008348 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
10008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000834a:	0004      	movs	r4, r0
1000834c:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
1000834e:	4b62      	ldr	r3, [pc, #392]	; (100084d8 <dma_allocate+0x190>)
10008350:	781b      	ldrb	r3, [r3, #0]
10008352:	2b00      	cmp	r3, #0
10008354:	d112      	bne.n	1000837c <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
10008356:	2043      	movs	r0, #67	; 0x43
10008358:	4b60      	ldr	r3, [pc, #384]	; (100084dc <dma_allocate+0x194>)
1000835a:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
1000835c:	4960      	ldr	r1, [pc, #384]	; (100084e0 <dma_allocate+0x198>)
1000835e:	22cc      	movs	r2, #204	; 0xcc
10008360:	5888      	ldr	r0, [r1, r2]
10008362:	4b60      	ldr	r3, [pc, #384]	; (100084e4 <dma_allocate+0x19c>)
10008364:	4003      	ands	r3, r0
10008366:	2080      	movs	r0, #128	; 0x80
10008368:	0540      	lsls	r0, r0, #21
1000836a:	4303      	orrs	r3, r0
1000836c:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
1000836e:	495e      	ldr	r1, [pc, #376]	; (100084e8 <dma_allocate+0x1a0>)
10008370:	201f      	movs	r0, #31
10008372:	4b5e      	ldr	r3, [pc, #376]	; (100084ec <dma_allocate+0x1a4>)
10008374:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
10008376:	2201      	movs	r2, #1
10008378:	4b57      	ldr	r3, [pc, #348]	; (100084d8 <dma_allocate+0x190>)
1000837a:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
1000837c:	4b56      	ldr	r3, [pc, #344]	; (100084d8 <dma_allocate+0x190>)
1000837e:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008380:	07d3      	lsls	r3, r2, #31
10008382:	d500      	bpl.n	10008386 <dma_allocate+0x3e>
10008384:	e0a2      	b.n	100084cc <dma_allocate+0x184>
10008386:	e002      	b.n	1000838e <dma_allocate+0x46>
10008388:	4211      	tst	r1, r2
1000838a:	d10e      	bne.n	100083aa <dma_allocate+0x62>
1000838c:	e000      	b.n	10008390 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
1000838e:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008390:	4a51      	ldr	r2, [pc, #324]	; (100084d8 <dma_allocate+0x190>)
10008392:	6850      	ldr	r0, [r2, #4]
10008394:	2101      	movs	r1, #1
10008396:	4099      	lsls	r1, r3
10008398:	4301      	orrs	r1, r0
1000839a:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
1000839c:	7a11      	ldrb	r1, [r2, #8]
1000839e:	3901      	subs	r1, #1
100083a0:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100083a2:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
100083a4:	2bff      	cmp	r3, #255	; 0xff
100083a6:	d107      	bne.n	100083b8 <dma_allocate+0x70>
100083a8:	e094      	b.n	100084d4 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
100083aa:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100083ac:	3301      	adds	r3, #1
100083ae:	b2db      	uxtb	r3, r3
100083b0:	2b05      	cmp	r3, #5
100083b2:	d1e9      	bne.n	10008388 <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100083b4:	2014      	movs	r0, #20
100083b6:	e08d      	b.n	100084d4 <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
100083b8:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083ba:	021b      	lsls	r3, r3, #8
100083bc:	4a4c      	ldr	r2, [pc, #304]	; (100084f0 <dma_allocate+0x1a8>)
100083be:	4694      	mov	ip, r2
100083c0:	4463      	add	r3, ip
100083c2:	782a      	ldrb	r2, [r5, #0]
100083c4:	267f      	movs	r6, #127	; 0x7f
100083c6:	4032      	ands	r2, r6
100083c8:	78a9      	ldrb	r1, [r5, #2]
100083ca:	07c9      	lsls	r1, r1, #31
100083cc:	430a      	orrs	r2, r1
100083ce:	7869      	ldrb	r1, [r5, #1]
100083d0:	0409      	lsls	r1, r1, #16
100083d2:	20fc      	movs	r0, #252	; 0xfc
100083d4:	0380      	lsls	r0, r0, #14
100083d6:	4001      	ands	r1, r0
100083d8:	430a      	orrs	r2, r1
100083da:	601a      	str	r2, [r3, #0]
100083dc:	7823      	ldrb	r3, [r4, #0]
100083de:	021b      	lsls	r3, r3, #8
100083e0:	4a44      	ldr	r2, [pc, #272]	; (100084f4 <dma_allocate+0x1ac>)
100083e2:	4694      	mov	ip, r2
100083e4:	4463      	add	r3, ip
100083e6:	7a6a      	ldrb	r2, [r5, #9]
100083e8:	4032      	ands	r2, r6
100083ea:	7ae9      	ldrb	r1, [r5, #11]
100083ec:	07c9      	lsls	r1, r1, #31
100083ee:	430a      	orrs	r2, r1
100083f0:	7aa9      	ldrb	r1, [r5, #10]
100083f2:	0409      	lsls	r1, r1, #16
100083f4:	4008      	ands	r0, r1
100083f6:	4310      	orrs	r0, r2
100083f8:	6018      	str	r0, [r3, #0]
100083fa:	7823      	ldrb	r3, [r4, #0]
100083fc:	021b      	lsls	r3, r3, #8
100083fe:	4a3e      	ldr	r2, [pc, #248]	; (100084f8 <dma_allocate+0x1b0>)
10008400:	4694      	mov	ip, r2
10008402:	4463      	add	r3, ip
10008404:	7cea      	ldrb	r2, [r5, #19]
10008406:	0712      	lsls	r2, r2, #28
10008408:	21c0      	movs	r1, #192	; 0xc0
1000840a:	0589      	lsls	r1, r1, #22
1000840c:	400a      	ands	r2, r1
1000840e:	7ca9      	ldrb	r1, [r5, #18]
10008410:	0409      	lsls	r1, r1, #16
10008412:	430a      	orrs	r2, r1
10008414:	601a      	str	r2, [r3, #0]
10008416:	7823      	ldrb	r3, [r4, #0]
10008418:	021b      	lsls	r3, r3, #8
1000841a:	4a38      	ldr	r2, [pc, #224]	; (100084fc <dma_allocate+0x1b4>)
1000841c:	4694      	mov	ip, r2
1000841e:	4463      	add	r3, ip
10008420:	792f      	ldrb	r7, [r5, #4]
10008422:	023f      	lsls	r7, r7, #8
10008424:	21e0      	movs	r1, #224	; 0xe0
10008426:	00c9      	lsls	r1, r1, #3
10008428:	003a      	movs	r2, r7
1000842a:	400a      	ands	r2, r1
1000842c:	7b2e      	ldrb	r6, [r5, #12]
1000842e:	0436      	lsls	r6, r6, #16
10008430:	20f8      	movs	r0, #248	; 0xf8
10008432:	0340      	lsls	r0, r0, #13
10008434:	4006      	ands	r6, r0
10008436:	4332      	orrs	r2, r6
10008438:	0017      	movs	r7, r2
1000843a:	78e8      	ldrb	r0, [r5, #3]
1000843c:	221f      	movs	r2, #31
1000843e:	4002      	ands	r2, r0
10008440:	003e      	movs	r6, r7
10008442:	4316      	orrs	r6, r2
10008444:	7b6a      	ldrb	r2, [r5, #13]
10008446:	0612      	lsls	r2, r2, #24
10008448:	20e0      	movs	r0, #224	; 0xe0
1000844a:	04c0      	lsls	r0, r0, #19
1000844c:	4002      	ands	r2, r0
1000844e:	4332      	orrs	r2, r6
10008450:	601a      	str	r2, [r3, #0]
10008452:	7820      	ldrb	r0, [r4, #0]
10008454:	0200      	lsls	r0, r0, #8
10008456:	4b2a      	ldr	r3, [pc, #168]	; (10008500 <dma_allocate+0x1b8>)
10008458:	469c      	mov	ip, r3
1000845a:	4460      	add	r0, ip
1000845c:	79ab      	ldrb	r3, [r5, #6]
1000845e:	2607      	movs	r6, #7
10008460:	4033      	ands	r3, r6
10008462:	796e      	ldrb	r6, [r5, #5]
10008464:	2208      	movs	r2, #8
10008466:	40b2      	lsls	r2, r6
10008468:	4313      	orrs	r3, r2
1000846a:	79ee      	ldrb	r6, [r5, #7]
1000846c:	2280      	movs	r2, #128	; 0x80
1000846e:	40b2      	lsls	r2, r6
10008470:	4313      	orrs	r3, r2
10008472:	7bae      	ldrb	r6, [r5, #14]
10008474:	2280      	movs	r2, #128	; 0x80
10008476:	0112      	lsls	r2, r2, #4
10008478:	40b2      	lsls	r2, r6
1000847a:	4313      	orrs	r3, r2
1000847c:	7c2e      	ldrb	r6, [r5, #16]
1000847e:	2280      	movs	r2, #128	; 0x80
10008480:	0212      	lsls	r2, r2, #8
10008482:	40b2      	lsls	r2, r6
10008484:	4313      	orrs	r3, r2
10008486:	001e      	movs	r6, r3
10008488:	7a2a      	ldrb	r2, [r5, #8]
1000848a:	0112      	lsls	r2, r2, #4
1000848c:	2370      	movs	r3, #112	; 0x70
1000848e:	401a      	ands	r2, r3
10008490:	0033      	movs	r3, r6
10008492:	4313      	orrs	r3, r2
10008494:	7bea      	ldrb	r2, [r5, #15]
10008496:	0212      	lsls	r2, r2, #8
10008498:	4011      	ands	r1, r2
1000849a:	430b      	orrs	r3, r1
1000849c:	7c69      	ldrb	r1, [r5, #17]
1000849e:	0309      	lsls	r1, r1, #12
100084a0:	22e0      	movs	r2, #224	; 0xe0
100084a2:	01d2      	lsls	r2, r2, #7
100084a4:	4011      	ands	r1, r2
100084a6:	430b      	orrs	r3, r1
100084a8:	6003      	str	r3, [r0, #0]
100084aa:	1d23      	adds	r3, r4, #4
100084ac:	0021      	movs	r1, r4
100084ae:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
100084b0:	2200      	movs	r2, #0
100084b2:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
100084b4:	428b      	cmp	r3, r1
100084b6:	d1fc      	bne.n	100084b2 <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
100084b8:	2300      	movs	r3, #0
100084ba:	2224      	movs	r2, #36	; 0x24
100084bc:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
100084be:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
100084c0:	7823      	ldrb	r3, [r4, #0]
100084c2:	009b      	lsls	r3, r3, #2
100084c4:	4a0f      	ldr	r2, [pc, #60]	; (10008504 <dma_allocate+0x1bc>)
100084c6:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
100084c8:	2000      	movs	r0, #0
100084ca:	e003      	b.n	100084d4 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
100084cc:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100084ce:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
100084d0:	2101      	movs	r1, #1
100084d2:	e759      	b.n	10008388 <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
100084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100084d6:	46c0      	nop			; (mov r8, r8)
100084d8:	100152e4 	.word	0x100152e4
100084dc:	10008c95 	.word	0x10008c95
100084e0:	4000b000 	.word	0x4000b000
100084e4:	e0ffffff 	.word	0xe0ffffff
100084e8:	100080e9 	.word	0x100080e9
100084ec:	100090fd 	.word	0x100090fd
100084f0:	40002010 	.word	0x40002010
100084f4:	40002014 	.word	0x40002014
100084f8:	40002018 	.word	0x40002018
100084fc:	40002020 	.word	0x40002020
10008500:	40002838 	.word	0x40002838
10008504:	10015380 	.word	0x10015380

10008508 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008508:	2300      	movs	r3, #0
1000850a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000850c:	2201      	movs	r2, #1
1000850e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008510:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008512:	70c3      	strb	r3, [r0, #3]
}
10008514:	4770      	bx	lr
10008516:	46c0      	nop			; (mov r8, r8)

10008518 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008518:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000851a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000851c:	2801      	cmp	r0, #1
1000851e:	d800      	bhi.n	10008522 <gpio_pin_set_config+0xa>
10008520:	e0c8      	b.n	100086b4 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008522:	2807      	cmp	r0, #7
10008524:	d809      	bhi.n	1000853a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008526:	4d64      	ldr	r5, [pc, #400]	; (100086b8 <gpio_pin_set_config+0x1a0>)
10008528:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000852a:	3b10      	subs	r3, #16
1000852c:	4003      	ands	r3, r0
1000852e:	009b      	lsls	r3, r3, #2
10008530:	2407      	movs	r4, #7
10008532:	409c      	lsls	r4, r3
10008534:	43a2      	bics	r2, r4
10008536:	646a      	str	r2, [r5, #68]	; 0x44
10008538:	e029      	b.n	1000858e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000853a:	280f      	cmp	r0, #15
1000853c:	d809      	bhi.n	10008552 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000853e:	4d5e      	ldr	r5, [pc, #376]	; (100086b8 <gpio_pin_set_config+0x1a0>)
10008540:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008542:	2307      	movs	r3, #7
10008544:	4003      	ands	r3, r0
10008546:	009b      	lsls	r3, r3, #2
10008548:	2407      	movs	r4, #7
1000854a:	409c      	lsls	r4, r3
1000854c:	43a2      	bics	r2, r4
1000854e:	64aa      	str	r2, [r5, #72]	; 0x48
10008550:	e01d      	b.n	1000858e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008552:	2817      	cmp	r0, #23
10008554:	d809      	bhi.n	1000856a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008556:	4d58      	ldr	r5, [pc, #352]	; (100086b8 <gpio_pin_set_config+0x1a0>)
10008558:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000855a:	2307      	movs	r3, #7
1000855c:	4003      	ands	r3, r0
1000855e:	009b      	lsls	r3, r3, #2
10008560:	2407      	movs	r4, #7
10008562:	409c      	lsls	r4, r3
10008564:	43a2      	bics	r2, r4
10008566:	64ea      	str	r2, [r5, #76]	; 0x4c
10008568:	e011      	b.n	1000858e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000856a:	0003      	movs	r3, r0
1000856c:	3b2c      	subs	r3, #44	; 0x2c
1000856e:	2b03      	cmp	r3, #3
10008570:	d80d      	bhi.n	1000858e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008572:	4d52      	ldr	r5, [pc, #328]	; (100086bc <gpio_pin_set_config+0x1a4>)
10008574:	2482      	movs	r4, #130	; 0x82
10008576:	00e4      	lsls	r4, r4, #3
10008578:	5d2a      	ldrb	r2, [r5, r4]
1000857a:	0712      	lsls	r2, r2, #28
1000857c:	2601      	movs	r6, #1
1000857e:	409e      	lsls	r6, r3
10008580:	0f12      	lsrs	r2, r2, #28
10008582:	5d2b      	ldrb	r3, [r5, r4]
10008584:	43b2      	bics	r2, r6
10008586:	260f      	movs	r6, #15
10008588:	43b3      	bics	r3, r6
1000858a:	4313      	orrs	r3, r2
1000858c:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000858e:	0003      	movs	r3, r0
10008590:	3b1d      	subs	r3, #29
10008592:	2b02      	cmp	r3, #2
10008594:	d829      	bhi.n	100085ea <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008596:	784b      	ldrb	r3, [r1, #1]
10008598:	2b01      	cmp	r3, #1
1000859a:	d108      	bne.n	100085ae <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000859c:	4d47      	ldr	r5, [pc, #284]	; (100086bc <gpio_pin_set_config+0x1a4>)
1000859e:	7d2b      	ldrb	r3, [r5, #20]
100085a0:	241f      	movs	r4, #31
100085a2:	1a24      	subs	r4, r4, r0
100085a4:	2201      	movs	r2, #1
100085a6:	40a2      	lsls	r2, r4
100085a8:	4393      	bics	r3, r2
100085aa:	752b      	strb	r3, [r5, #20]
100085ac:	e008      	b.n	100085c0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100085ae:	4c43      	ldr	r4, [pc, #268]	; (100086bc <gpio_pin_set_config+0x1a4>)
100085b0:	7d25      	ldrb	r5, [r4, #20]
100085b2:	221f      	movs	r2, #31
100085b4:	1a12      	subs	r2, r2, r0
100085b6:	2301      	movs	r3, #1
100085b8:	4093      	lsls	r3, r2
100085ba:	432b      	orrs	r3, r5
100085bc:	b2db      	uxtb	r3, r3
100085be:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100085c0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085c2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100085c4:	2a00      	cmp	r2, #0
100085c6:	d075      	beq.n	100086b4 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100085c8:	493c      	ldr	r1, [pc, #240]	; (100086bc <gpio_pin_set_config+0x1a4>)
100085ca:	880c      	ldrh	r4, [r1, #0]
100085cc:	221f      	movs	r2, #31
100085ce:	1a10      	subs	r0, r2, r0
100085d0:	0080      	lsls	r0, r0, #2
100085d2:	3301      	adds	r3, #1
100085d4:	4083      	lsls	r3, r0
100085d6:	4323      	orrs	r3, r4
100085d8:	b29b      	uxth	r3, r3
100085da:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
100085dc:	4a38      	ldr	r2, [pc, #224]	; (100086c0 <gpio_pin_set_config+0x1a8>)
100085de:	7811      	ldrb	r1, [r2, #0]
100085e0:	2302      	movs	r3, #2
100085e2:	430b      	orrs	r3, r1
100085e4:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085e6:	2300      	movs	r3, #0
100085e8:	e064      	b.n	100086b4 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
100085ea:	780a      	ldrb	r2, [r1, #0]
100085ec:	2a00      	cmp	r2, #0
100085ee:	d140      	bne.n	10008672 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
100085f0:	280f      	cmp	r0, #15
100085f2:	d808      	bhi.n	10008606 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
100085f4:	2301      	movs	r3, #1
100085f6:	4083      	lsls	r3, r0
100085f8:	b29b      	uxth	r3, r3
100085fa:	4a32      	ldr	r2, [pc, #200]	; (100086c4 <gpio_pin_set_config+0x1ac>)
100085fc:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085fe:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008600:	281f      	cmp	r0, #31
10008602:	d857      	bhi.n	100086b4 <gpio_pin_set_config+0x19c>
10008604:	e012      	b.n	1000862c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008606:	281f      	cmp	r0, #31
10008608:	d807      	bhi.n	1000861a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000860a:	220f      	movs	r2, #15
1000860c:	4002      	ands	r2, r0
1000860e:	2301      	movs	r3, #1
10008610:	4093      	lsls	r3, r2
10008612:	b29b      	uxth	r3, r3
10008614:	4a2c      	ldr	r2, [pc, #176]	; (100086c8 <gpio_pin_set_config+0x1b0>)
10008616:	8293      	strh	r3, [r2, #20]
10008618:	e008      	b.n	1000862c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000861a:	230f      	movs	r3, #15
1000861c:	4018      	ands	r0, r3
1000861e:	3b0e      	subs	r3, #14
10008620:	4083      	lsls	r3, r0
10008622:	b29b      	uxth	r3, r3
10008624:	4a29      	ldr	r2, [pc, #164]	; (100086cc <gpio_pin_set_config+0x1b4>)
10008626:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008628:	2300      	movs	r3, #0
1000862a:	e043      	b.n	100086b4 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000862c:	784b      	ldrb	r3, [r1, #1]
1000862e:	2b01      	cmp	r3, #1
10008630:	d00c      	beq.n	1000864c <gpio_pin_set_config+0x134>
10008632:	2b00      	cmp	r3, #0
10008634:	d002      	beq.n	1000863c <gpio_pin_set_config+0x124>
10008636:	2b02      	cmp	r3, #2
10008638:	d010      	beq.n	1000865c <gpio_pin_set_config+0x144>
1000863a:	e03a      	b.n	100086b2 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000863c:	491e      	ldr	r1, [pc, #120]	; (100086b8 <gpio_pin_set_config+0x1a0>)
1000863e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008640:	2301      	movs	r3, #1
10008642:	4083      	lsls	r3, r0
10008644:	4313      	orrs	r3, r2
10008646:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008648:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000864a:	e033      	b.n	100086b4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000864c:	491a      	ldr	r1, [pc, #104]	; (100086b8 <gpio_pin_set_config+0x1a0>)
1000864e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008650:	2201      	movs	r2, #1
10008652:	4082      	lsls	r2, r0
10008654:	4393      	bics	r3, r2
10008656:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008658:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000865a:	e02b      	b.n	100086b4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000865c:	4b16      	ldr	r3, [pc, #88]	; (100086b8 <gpio_pin_set_config+0x1a0>)
1000865e:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008660:	2201      	movs	r2, #1
10008662:	4082      	lsls	r2, r0
10008664:	4311      	orrs	r1, r2
10008666:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008668:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000866a:	4391      	bics	r1, r2
1000866c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000866e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008670:	e020      	b.n	100086b4 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008672:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008674:	2a01      	cmp	r2, #1
10008676:	d11d      	bne.n	100086b4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008678:	280f      	cmp	r0, #15
1000867a:	d806      	bhi.n	1000868a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000867c:	3301      	adds	r3, #1
1000867e:	4083      	lsls	r3, r0
10008680:	b29b      	uxth	r3, r3
10008682:	4a10      	ldr	r2, [pc, #64]	; (100086c4 <gpio_pin_set_config+0x1ac>)
10008684:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008686:	2300      	movs	r3, #0
10008688:	e014      	b.n	100086b4 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000868a:	281f      	cmp	r0, #31
1000868c:	d808      	bhi.n	100086a0 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000868e:	230f      	movs	r3, #15
10008690:	4018      	ands	r0, r3
10008692:	3b0e      	subs	r3, #14
10008694:	4083      	lsls	r3, r0
10008696:	b29b      	uxth	r3, r3
10008698:	4a0b      	ldr	r2, [pc, #44]	; (100086c8 <gpio_pin_set_config+0x1b0>)
1000869a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000869c:	2300      	movs	r3, #0
1000869e:	e009      	b.n	100086b4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100086a0:	230f      	movs	r3, #15
100086a2:	4018      	ands	r0, r3
100086a4:	3b0e      	subs	r3, #14
100086a6:	4083      	lsls	r3, r0
100086a8:	b29b      	uxth	r3, r3
100086aa:	4a08      	ldr	r2, [pc, #32]	; (100086cc <gpio_pin_set_config+0x1b4>)
100086ac:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100086ae:	2300      	movs	r3, #0
100086b0:	e000      	b.n	100086b4 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100086b2:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100086b4:	0018      	movs	r0, r3
100086b6:	bd70      	pop	{r4, r5, r6, pc}
100086b8:	4000b000 	.word	0x4000b000
100086bc:	4000f000 	.word	0x4000f000
100086c0:	4000e000 	.word	0x4000e000
100086c4:	40010000 	.word	0x40010000
100086c8:	40011000 	.word	0x40011000
100086cc:	40013000 	.word	0x40013000

100086d0 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100086d0:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
100086d2:	280f      	cmp	r0, #15
100086d4:	d810      	bhi.n	100086f8 <gpio_pin_set_output_level+0x28>
		if(level) {
100086d6:	2900      	cmp	r1, #0
100086d8:	d007      	beq.n	100086ea <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100086da:	4a1d      	ldr	r2, [pc, #116]	; (10008750 <gpio_pin_set_output_level+0x80>)
100086dc:	8891      	ldrh	r1, [r2, #4]
100086de:	2301      	movs	r3, #1
100086e0:	4083      	lsls	r3, r0
100086e2:	430b      	orrs	r3, r1
100086e4:	b29b      	uxth	r3, r3
100086e6:	8093      	strh	r3, [r2, #4]
100086e8:	e031      	b.n	1000874e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100086ea:	4919      	ldr	r1, [pc, #100]	; (10008750 <gpio_pin_set_output_level+0x80>)
100086ec:	888b      	ldrh	r3, [r1, #4]
100086ee:	2201      	movs	r2, #1
100086f0:	4082      	lsls	r2, r0
100086f2:	4393      	bics	r3, r2
100086f4:	808b      	strh	r3, [r1, #4]
100086f6:	e02a      	b.n	1000874e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
100086f8:	281f      	cmp	r0, #31
100086fa:	d814      	bhi.n	10008726 <gpio_pin_set_output_level+0x56>
		if(level) {
100086fc:	2900      	cmp	r1, #0
100086fe:	d009      	beq.n	10008714 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008700:	4914      	ldr	r1, [pc, #80]	; (10008754 <gpio_pin_set_output_level+0x84>)
10008702:	888c      	ldrh	r4, [r1, #4]
10008704:	220f      	movs	r2, #15
10008706:	4010      	ands	r0, r2
10008708:	2301      	movs	r3, #1
1000870a:	4083      	lsls	r3, r0
1000870c:	4323      	orrs	r3, r4
1000870e:	b29b      	uxth	r3, r3
10008710:	808b      	strh	r3, [r1, #4]
10008712:	e01c      	b.n	1000874e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008714:	490f      	ldr	r1, [pc, #60]	; (10008754 <gpio_pin_set_output_level+0x84>)
10008716:	888b      	ldrh	r3, [r1, #4]
10008718:	220f      	movs	r2, #15
1000871a:	4010      	ands	r0, r2
1000871c:	3a0e      	subs	r2, #14
1000871e:	4082      	lsls	r2, r0
10008720:	4393      	bics	r3, r2
10008722:	808b      	strh	r3, [r1, #4]
10008724:	e013      	b.n	1000874e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008726:	2900      	cmp	r1, #0
10008728:	d009      	beq.n	1000873e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000872a:	490b      	ldr	r1, [pc, #44]	; (10008758 <gpio_pin_set_output_level+0x88>)
1000872c:	888c      	ldrh	r4, [r1, #4]
1000872e:	220f      	movs	r2, #15
10008730:	4010      	ands	r0, r2
10008732:	2301      	movs	r3, #1
10008734:	4083      	lsls	r3, r0
10008736:	4323      	orrs	r3, r4
10008738:	b29b      	uxth	r3, r3
1000873a:	808b      	strh	r3, [r1, #4]
1000873c:	e007      	b.n	1000874e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000873e:	4906      	ldr	r1, [pc, #24]	; (10008758 <gpio_pin_set_output_level+0x88>)
10008740:	888b      	ldrh	r3, [r1, #4]
10008742:	220f      	movs	r2, #15
10008744:	4010      	ands	r0, r2
10008746:	3a0e      	subs	r2, #14
10008748:	4082      	lsls	r2, r0
1000874a:	4393      	bics	r3, r2
1000874c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000874e:	bd10      	pop	{r4, pc}
10008750:	40010000 	.word	0x40010000
10008754:	40011000 	.word	0x40011000
10008758:	40013000 	.word	0x40013000

1000875c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000875c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000875e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008760:	23ff      	movs	r3, #255	; 0xff
10008762:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008764:	2807      	cmp	r0, #7
10008766:	d833      	bhi.n	100087d0 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008768:	4a4e      	ldr	r2, [pc, #312]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
1000876a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000876c:	3bf8      	subs	r3, #248	; 0xf8
1000876e:	4003      	ands	r3, r0
10008770:	009b      	lsls	r3, r3, #2
10008772:	2607      	movs	r6, #7
10008774:	409e      	lsls	r6, r3
10008776:	43b4      	bics	r4, r6
10008778:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000877a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000877c:	000e      	movs	r6, r1
1000877e:	409e      	lsls	r6, r3
10008780:	0033      	movs	r3, r6
10008782:	4323      	orrs	r3, r4
10008784:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008786:	2901      	cmp	r1, #1
10008788:	d000      	beq.n	1000878c <gpio_pinmux_cofiguration+0x30>
1000878a:	e08a      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000878c:	2803      	cmp	r0, #3
1000878e:	d80f      	bhi.n	100087b0 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008790:	0011      	movs	r1, r2
10008792:	22d0      	movs	r2, #208	; 0xd0
10008794:	0052      	lsls	r2, r2, #1
10008796:	588c      	ldr	r4, [r1, r2]
10008798:	2303      	movs	r3, #3
1000879a:	4018      	ands	r0, r3
1000879c:	00c0      	lsls	r0, r0, #3
1000879e:	333c      	adds	r3, #60	; 0x3c
100087a0:	4083      	lsls	r3, r0
100087a2:	439c      	bics	r4, r3
100087a4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100087a6:	588b      	ldr	r3, [r1, r2]
100087a8:	4085      	lsls	r5, r0
100087aa:	431d      	orrs	r5, r3
100087ac:	508d      	str	r5, [r1, r2]
100087ae:	e078      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100087b0:	493c      	ldr	r1, [pc, #240]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
100087b2:	22d2      	movs	r2, #210	; 0xd2
100087b4:	0052      	lsls	r2, r2, #1
100087b6:	588c      	ldr	r4, [r1, r2]
100087b8:	2303      	movs	r3, #3
100087ba:	4018      	ands	r0, r3
100087bc:	00c0      	lsls	r0, r0, #3
100087be:	333c      	adds	r3, #60	; 0x3c
100087c0:	4083      	lsls	r3, r0
100087c2:	439c      	bics	r4, r3
100087c4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100087c6:	588b      	ldr	r3, [r1, r2]
100087c8:	4085      	lsls	r5, r0
100087ca:	431d      	orrs	r5, r3
100087cc:	508d      	str	r5, [r1, r2]
100087ce:	e068      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100087d0:	280f      	cmp	r0, #15
100087d2:	d832      	bhi.n	1000883a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100087d4:	4a33      	ldr	r2, [pc, #204]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
100087d6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100087d8:	2307      	movs	r3, #7
100087da:	4003      	ands	r3, r0
100087dc:	009b      	lsls	r3, r3, #2
100087de:	2607      	movs	r6, #7
100087e0:	409e      	lsls	r6, r3
100087e2:	43b4      	bics	r4, r6
100087e4:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100087e6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100087e8:	000e      	movs	r6, r1
100087ea:	409e      	lsls	r6, r3
100087ec:	0033      	movs	r3, r6
100087ee:	4323      	orrs	r3, r4
100087f0:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100087f2:	2901      	cmp	r1, #1
100087f4:	d155      	bne.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100087f6:	280b      	cmp	r0, #11
100087f8:	d80f      	bhi.n	1000881a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100087fa:	0011      	movs	r1, r2
100087fc:	22d4      	movs	r2, #212	; 0xd4
100087fe:	0052      	lsls	r2, r2, #1
10008800:	588c      	ldr	r4, [r1, r2]
10008802:	2303      	movs	r3, #3
10008804:	4018      	ands	r0, r3
10008806:	00c0      	lsls	r0, r0, #3
10008808:	333c      	adds	r3, #60	; 0x3c
1000880a:	4083      	lsls	r3, r0
1000880c:	439c      	bics	r4, r3
1000880e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008810:	588b      	ldr	r3, [r1, r2]
10008812:	4085      	lsls	r5, r0
10008814:	431d      	orrs	r5, r3
10008816:	508d      	str	r5, [r1, r2]
10008818:	e043      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000881a:	4922      	ldr	r1, [pc, #136]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
1000881c:	22d6      	movs	r2, #214	; 0xd6
1000881e:	0052      	lsls	r2, r2, #1
10008820:	588c      	ldr	r4, [r1, r2]
10008822:	2303      	movs	r3, #3
10008824:	4018      	ands	r0, r3
10008826:	00c0      	lsls	r0, r0, #3
10008828:	333c      	adds	r3, #60	; 0x3c
1000882a:	4083      	lsls	r3, r0
1000882c:	439c      	bics	r4, r3
1000882e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008830:	588b      	ldr	r3, [r1, r2]
10008832:	4085      	lsls	r5, r0
10008834:	431d      	orrs	r5, r3
10008836:	508d      	str	r5, [r1, r2]
10008838:	e033      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000883a:	2817      	cmp	r0, #23
1000883c:	d831      	bhi.n	100088a2 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000883e:	4a19      	ldr	r2, [pc, #100]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
10008840:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008842:	2307      	movs	r3, #7
10008844:	4003      	ands	r3, r0
10008846:	009b      	lsls	r3, r3, #2
10008848:	2607      	movs	r6, #7
1000884a:	409e      	lsls	r6, r3
1000884c:	43b4      	bics	r4, r6
1000884e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008850:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008852:	000e      	movs	r6, r1
10008854:	409e      	lsls	r6, r3
10008856:	0033      	movs	r3, r6
10008858:	4323      	orrs	r3, r4
1000885a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000885c:	2901      	cmp	r1, #1
1000885e:	d120      	bne.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008860:	2813      	cmp	r0, #19
10008862:	d80f      	bhi.n	10008884 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008864:	0011      	movs	r1, r2
10008866:	22d8      	movs	r2, #216	; 0xd8
10008868:	0052      	lsls	r2, r2, #1
1000886a:	588c      	ldr	r4, [r1, r2]
1000886c:	2303      	movs	r3, #3
1000886e:	4018      	ands	r0, r3
10008870:	00c0      	lsls	r0, r0, #3
10008872:	333c      	adds	r3, #60	; 0x3c
10008874:	4083      	lsls	r3, r0
10008876:	439c      	bics	r4, r3
10008878:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000887a:	588b      	ldr	r3, [r1, r2]
1000887c:	4085      	lsls	r5, r0
1000887e:	431d      	orrs	r5, r3
10008880:	508d      	str	r5, [r1, r2]
10008882:	e00e      	b.n	100088a2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008884:	4a07      	ldr	r2, [pc, #28]	; (100088a4 <gpio_pinmux_cofiguration+0x148>)
10008886:	23da      	movs	r3, #218	; 0xda
10008888:	005b      	lsls	r3, r3, #1
1000888a:	58d1      	ldr	r1, [r2, r3]
1000888c:	2403      	movs	r4, #3
1000888e:	4020      	ands	r0, r4
10008890:	00c0      	lsls	r0, r0, #3
10008892:	343c      	adds	r4, #60	; 0x3c
10008894:	4084      	lsls	r4, r0
10008896:	43a1      	bics	r1, r4
10008898:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000889a:	58d1      	ldr	r1, [r2, r3]
1000889c:	4085      	lsls	r5, r0
1000889e:	430d      	orrs	r5, r1
100088a0:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
100088a2:	bd70      	pop	{r4, r5, r6, pc}
100088a4:	4000b000 	.word	0x4000b000

100088a8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
100088a8:	2801      	cmp	r0, #1
100088aa:	d00d      	beq.n	100088c8 <system_clock_config+0x20>
100088ac:	2800      	cmp	r0, #0
100088ae:	d002      	beq.n	100088b6 <system_clock_config+0xe>
100088b0:	2802      	cmp	r0, #2
100088b2:	d01c      	beq.n	100088ee <system_clock_config+0x46>
100088b4:	e02e      	b.n	10008914 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100088b6:	4a18      	ldr	r2, [pc, #96]	; (10008918 <system_clock_config+0x70>)
100088b8:	6990      	ldr	r0, [r2, #24]
100088ba:	230c      	movs	r3, #12
100088bc:	4303      	orrs	r3, r0
100088be:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
100088c0:	4a16      	ldr	r2, [pc, #88]	; (1000891c <system_clock_config+0x74>)
100088c2:	4b17      	ldr	r3, [pc, #92]	; (10008920 <system_clock_config+0x78>)
100088c4:	601a      	str	r2, [r3, #0]
			break;
100088c6:	e01a      	b.n	100088fe <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100088c8:	4b13      	ldr	r3, [pc, #76]	; (10008918 <system_clock_config+0x70>)
100088ca:	6998      	ldr	r0, [r3, #24]
100088cc:	2208      	movs	r2, #8
100088ce:	4302      	orrs	r2, r0
100088d0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
100088d2:	699a      	ldr	r2, [r3, #24]
100088d4:	2004      	movs	r0, #4
100088d6:	4382      	bics	r2, r0
100088d8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
100088da:	4a12      	ldr	r2, [pc, #72]	; (10008924 <system_clock_config+0x7c>)
100088dc:	6853      	ldr	r3, [r2, #4]
100088de:	2080      	movs	r0, #128	; 0x80
100088e0:	0300      	lsls	r0, r0, #12
100088e2:	4303      	orrs	r3, r0
100088e4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
100088e6:	4a10      	ldr	r2, [pc, #64]	; (10008928 <system_clock_config+0x80>)
100088e8:	4b0d      	ldr	r3, [pc, #52]	; (10008920 <system_clock_config+0x78>)
100088ea:	601a      	str	r2, [r3, #0]
			break;
100088ec:	e007      	b.n	100088fe <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
100088ee:	4a0a      	ldr	r2, [pc, #40]	; (10008918 <system_clock_config+0x70>)
100088f0:	6993      	ldr	r3, [r2, #24]
100088f2:	200c      	movs	r0, #12
100088f4:	4383      	bics	r3, r0
100088f6:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
100088f8:	4a08      	ldr	r2, [pc, #32]	; (1000891c <system_clock_config+0x74>)
100088fa:	4b09      	ldr	r3, [pc, #36]	; (10008920 <system_clock_config+0x78>)
100088fc:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
100088fe:	4b06      	ldr	r3, [pc, #24]	; (10008918 <system_clock_config+0x70>)
10008900:	699a      	ldr	r2, [r3, #24]
10008902:	2003      	movs	r0, #3
10008904:	4382      	bics	r2, r0
10008906:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008908:	699a      	ldr	r2, [r3, #24]
1000890a:	4001      	ands	r1, r0
1000890c:	4311      	orrs	r1, r2
1000890e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008910:	2000      	movs	r0, #0
10008912:	e000      	b.n	10008916 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008914:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008916:	4770      	bx	lr
10008918:	4000b000 	.word	0x4000b000
1000891c:	018cba80 	.word	0x018cba80
10008920:	10016e38 	.word	0x10016e38
10008924:	4000f000 	.word	0x4000f000
10008928:	001e8480 	.word	0x001e8480

1000892c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000892c:	4b01      	ldr	r3, [pc, #4]	; (10008934 <system_clock_get_value+0x8>)
1000892e:	6818      	ldr	r0, [r3, #0]
}
10008930:	4770      	bx	lr
10008932:	46c0      	nop			; (mov r8, r8)
10008934:	10016e38 	.word	0x10016e38

10008938 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008938:	b500      	push	{lr}
	switch (peripheral) {
1000893a:	2835      	cmp	r0, #53	; 0x35
1000893c:	d900      	bls.n	10008940 <system_clock_peripheral_enable+0x8>
1000893e:	e1a2      	b.n	10008c86 <system_clock_peripheral_enable+0x34e>
10008940:	0080      	lsls	r0, r0, #2
10008942:	4bd2      	ldr	r3, [pc, #840]	; (10008c8c <system_clock_peripheral_enable+0x354>)
10008944:	581b      	ldr	r3, [r3, r0]
10008946:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008948:	4ad1      	ldr	r2, [pc, #836]	; (10008c90 <system_clock_peripheral_enable+0x358>)
1000894a:	68d1      	ldr	r1, [r2, #12]
1000894c:	2302      	movs	r3, #2
1000894e:	430b      	orrs	r3, r1
10008950:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008952:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008954:	e198      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008956:	4ace      	ldr	r2, [pc, #824]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008958:	68d1      	ldr	r1, [r2, #12]
1000895a:	2304      	movs	r3, #4
1000895c:	430b      	orrs	r3, r1
1000895e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008960:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008962:	e191      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008964:	4aca      	ldr	r2, [pc, #808]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008966:	68d1      	ldr	r1, [r2, #12]
10008968:	2308      	movs	r3, #8
1000896a:	430b      	orrs	r3, r1
1000896c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000896e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008970:	e18a      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008972:	4ac7      	ldr	r2, [pc, #796]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008974:	68d1      	ldr	r1, [r2, #12]
10008976:	2310      	movs	r3, #16
10008978:	430b      	orrs	r3, r1
1000897a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000897c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000897e:	e183      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008980:	4ac3      	ldr	r2, [pc, #780]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008982:	68d1      	ldr	r1, [r2, #12]
10008984:	2320      	movs	r3, #32
10008986:	430b      	orrs	r3, r1
10008988:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000898a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
1000898c:	e17c      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000898e:	4ac0      	ldr	r2, [pc, #768]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008990:	68d1      	ldr	r1, [r2, #12]
10008992:	2380      	movs	r3, #128	; 0x80
10008994:	430b      	orrs	r3, r1
10008996:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000899a:	e175      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000899c:	4abc      	ldr	r2, [pc, #752]	; (10008c90 <system_clock_peripheral_enable+0x358>)
1000899e:	68d3      	ldr	r3, [r2, #12]
100089a0:	2180      	movs	r1, #128	; 0x80
100089a2:	0049      	lsls	r1, r1, #1
100089a4:	430b      	orrs	r3, r1
100089a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
100089aa:	e16d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089ac:	4ab8      	ldr	r2, [pc, #736]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089ae:	68d3      	ldr	r3, [r2, #12]
100089b0:	2180      	movs	r1, #128	; 0x80
100089b2:	0109      	lsls	r1, r1, #4
100089b4:	430b      	orrs	r3, r1
100089b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
100089ba:	e165      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089bc:	4ab4      	ldr	r2, [pc, #720]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089be:	68d3      	ldr	r3, [r2, #12]
100089c0:	2180      	movs	r1, #128	; 0x80
100089c2:	0149      	lsls	r1, r1, #5
100089c4:	430b      	orrs	r3, r1
100089c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
100089ca:	e15d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089cc:	4ab0      	ldr	r2, [pc, #704]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089ce:	68d3      	ldr	r3, [r2, #12]
100089d0:	2180      	movs	r1, #128	; 0x80
100089d2:	0189      	lsls	r1, r1, #6
100089d4:	430b      	orrs	r3, r1
100089d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
100089da:	e155      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089dc:	4aac      	ldr	r2, [pc, #688]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089de:	68d3      	ldr	r3, [r2, #12]
100089e0:	2180      	movs	r1, #128	; 0x80
100089e2:	01c9      	lsls	r1, r1, #7
100089e4:	430b      	orrs	r3, r1
100089e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
100089ea:	e14d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089ec:	4aa8      	ldr	r2, [pc, #672]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089ee:	68d3      	ldr	r3, [r2, #12]
100089f0:	2180      	movs	r1, #128	; 0x80
100089f2:	0209      	lsls	r1, r1, #8
100089f4:	430b      	orrs	r3, r1
100089f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
100089fa:	e145      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089fc:	4aa4      	ldr	r2, [pc, #656]	; (10008c90 <system_clock_peripheral_enable+0x358>)
100089fe:	68d3      	ldr	r3, [r2, #12]
10008a00:	2180      	movs	r1, #128	; 0x80
10008a02:	0249      	lsls	r1, r1, #9
10008a04:	430b      	orrs	r3, r1
10008a06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008a0a:	e13d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a0c:	4aa0      	ldr	r2, [pc, #640]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a0e:	68d3      	ldr	r3, [r2, #12]
10008a10:	2180      	movs	r1, #128	; 0x80
10008a12:	0289      	lsls	r1, r1, #10
10008a14:	430b      	orrs	r3, r1
10008a16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008a1a:	e135      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a1c:	4a9c      	ldr	r2, [pc, #624]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a1e:	68d3      	ldr	r3, [r2, #12]
10008a20:	2180      	movs	r1, #128	; 0x80
10008a22:	02c9      	lsls	r1, r1, #11
10008a24:	430b      	orrs	r3, r1
10008a26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008a2a:	e12d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a2c:	4a98      	ldr	r2, [pc, #608]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a2e:	68d3      	ldr	r3, [r2, #12]
10008a30:	2180      	movs	r1, #128	; 0x80
10008a32:	0309      	lsls	r1, r1, #12
10008a34:	430b      	orrs	r3, r1
10008a36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008a3a:	e125      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a3c:	4a94      	ldr	r2, [pc, #592]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a3e:	68d3      	ldr	r3, [r2, #12]
10008a40:	2180      	movs	r1, #128	; 0x80
10008a42:	0349      	lsls	r1, r1, #13
10008a44:	430b      	orrs	r3, r1
10008a46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008a4a:	e11d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a4c:	4a90      	ldr	r2, [pc, #576]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a4e:	68d3      	ldr	r3, [r2, #12]
10008a50:	2180      	movs	r1, #128	; 0x80
10008a52:	0389      	lsls	r1, r1, #14
10008a54:	430b      	orrs	r3, r1
10008a56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008a5a:	e115      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a5c:	4a8c      	ldr	r2, [pc, #560]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a5e:	68d3      	ldr	r3, [r2, #12]
10008a60:	2180      	movs	r1, #128	; 0x80
10008a62:	03c9      	lsls	r1, r1, #15
10008a64:	430b      	orrs	r3, r1
10008a66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008a6a:	e10d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a6c:	4a88      	ldr	r2, [pc, #544]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a6e:	68d3      	ldr	r3, [r2, #12]
10008a70:	2180      	movs	r1, #128	; 0x80
10008a72:	0409      	lsls	r1, r1, #16
10008a74:	430b      	orrs	r3, r1
10008a76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008a7a:	e105      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a7c:	4a84      	ldr	r2, [pc, #528]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a7e:	68d3      	ldr	r3, [r2, #12]
10008a80:	2180      	movs	r1, #128	; 0x80
10008a82:	0449      	lsls	r1, r1, #17
10008a84:	430b      	orrs	r3, r1
10008a86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008a8a:	e0fd      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a8c:	4a80      	ldr	r2, [pc, #512]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a8e:	68d3      	ldr	r3, [r2, #12]
10008a90:	2180      	movs	r1, #128	; 0x80
10008a92:	0489      	lsls	r1, r1, #18
10008a94:	430b      	orrs	r3, r1
10008a96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008a9a:	e0f5      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a9c:	4a7c      	ldr	r2, [pc, #496]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008a9e:	68d3      	ldr	r3, [r2, #12]
10008aa0:	2180      	movs	r1, #128	; 0x80
10008aa2:	04c9      	lsls	r1, r1, #19
10008aa4:	430b      	orrs	r3, r1
10008aa6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008aaa:	e0ed      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008aac:	4a78      	ldr	r2, [pc, #480]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008aae:	68d3      	ldr	r3, [r2, #12]
10008ab0:	2180      	movs	r1, #128	; 0x80
10008ab2:	0509      	lsls	r1, r1, #20
10008ab4:	430b      	orrs	r3, r1
10008ab6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ab8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008aba:	e0e5      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008abc:	4a74      	ldr	r2, [pc, #464]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008abe:	68d3      	ldr	r3, [r2, #12]
10008ac0:	2180      	movs	r1, #128	; 0x80
10008ac2:	0549      	lsls	r1, r1, #21
10008ac4:	430b      	orrs	r3, r1
10008ac6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008aca:	e0dd      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008acc:	4a70      	ldr	r2, [pc, #448]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008ace:	68d3      	ldr	r3, [r2, #12]
10008ad0:	2180      	movs	r1, #128	; 0x80
10008ad2:	0589      	lsls	r1, r1, #22
10008ad4:	430b      	orrs	r3, r1
10008ad6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ad8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008ada:	e0d5      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008adc:	4a6c      	ldr	r2, [pc, #432]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008ade:	68d3      	ldr	r3, [r2, #12]
10008ae0:	2180      	movs	r1, #128	; 0x80
10008ae2:	05c9      	lsls	r1, r1, #23
10008ae4:	430b      	orrs	r3, r1
10008ae6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008aea:	e0cd      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aec:	4a68      	ldr	r2, [pc, #416]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008aee:	6911      	ldr	r1, [r2, #16]
10008af0:	2301      	movs	r3, #1
10008af2:	430b      	orrs	r3, r1
10008af4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008af8:	e0c6      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008afa:	4a65      	ldr	r2, [pc, #404]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008afc:	6911      	ldr	r1, [r2, #16]
10008afe:	2302      	movs	r3, #2
10008b00:	430b      	orrs	r3, r1
10008b02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008b06:	e0bf      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b08:	4a61      	ldr	r2, [pc, #388]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b0a:	6911      	ldr	r1, [r2, #16]
10008b0c:	2304      	movs	r3, #4
10008b0e:	430b      	orrs	r3, r1
10008b10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008b14:	e0b8      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b16:	4a5e      	ldr	r2, [pc, #376]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b18:	6911      	ldr	r1, [r2, #16]
10008b1a:	2308      	movs	r3, #8
10008b1c:	430b      	orrs	r3, r1
10008b1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008b22:	e0b1      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b24:	4a5a      	ldr	r2, [pc, #360]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b26:	6911      	ldr	r1, [r2, #16]
10008b28:	2310      	movs	r3, #16
10008b2a:	430b      	orrs	r3, r1
10008b2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008b30:	e0aa      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b32:	4a57      	ldr	r2, [pc, #348]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b34:	6911      	ldr	r1, [r2, #16]
10008b36:	2320      	movs	r3, #32
10008b38:	430b      	orrs	r3, r1
10008b3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008b3e:	e0a3      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b40:	4a53      	ldr	r2, [pc, #332]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b42:	6911      	ldr	r1, [r2, #16]
10008b44:	2340      	movs	r3, #64	; 0x40
10008b46:	430b      	orrs	r3, r1
10008b48:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008b4c:	e09c      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b4e:	4a50      	ldr	r2, [pc, #320]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b50:	6911      	ldr	r1, [r2, #16]
10008b52:	2380      	movs	r3, #128	; 0x80
10008b54:	430b      	orrs	r3, r1
10008b56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008b5a:	e095      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b5c:	4a4c      	ldr	r2, [pc, #304]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b5e:	6913      	ldr	r3, [r2, #16]
10008b60:	2180      	movs	r1, #128	; 0x80
10008b62:	0049      	lsls	r1, r1, #1
10008b64:	430b      	orrs	r3, r1
10008b66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008b6a:	e08d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b6c:	4a48      	ldr	r2, [pc, #288]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b6e:	6913      	ldr	r3, [r2, #16]
10008b70:	2180      	movs	r1, #128	; 0x80
10008b72:	0089      	lsls	r1, r1, #2
10008b74:	430b      	orrs	r3, r1
10008b76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008b7a:	e085      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b7c:	4a44      	ldr	r2, [pc, #272]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b7e:	6913      	ldr	r3, [r2, #16]
10008b80:	2180      	movs	r1, #128	; 0x80
10008b82:	00c9      	lsls	r1, r1, #3
10008b84:	430b      	orrs	r3, r1
10008b86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008b8a:	e07d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b8c:	4a40      	ldr	r2, [pc, #256]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b8e:	6913      	ldr	r3, [r2, #16]
10008b90:	2180      	movs	r1, #128	; 0x80
10008b92:	0109      	lsls	r1, r1, #4
10008b94:	430b      	orrs	r3, r1
10008b96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008b9a:	e075      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b9c:	4a3c      	ldr	r2, [pc, #240]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008b9e:	6913      	ldr	r3, [r2, #16]
10008ba0:	2180      	movs	r1, #128	; 0x80
10008ba2:	0149      	lsls	r1, r1, #5
10008ba4:	430b      	orrs	r3, r1
10008ba6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ba8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008baa:	e06d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bac:	4a38      	ldr	r2, [pc, #224]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bae:	6913      	ldr	r3, [r2, #16]
10008bb0:	2180      	movs	r1, #128	; 0x80
10008bb2:	0189      	lsls	r1, r1, #6
10008bb4:	430b      	orrs	r3, r1
10008bb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008bba:	e065      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bbc:	4a34      	ldr	r2, [pc, #208]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bbe:	6913      	ldr	r3, [r2, #16]
10008bc0:	2180      	movs	r1, #128	; 0x80
10008bc2:	01c9      	lsls	r1, r1, #7
10008bc4:	430b      	orrs	r3, r1
10008bc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008bca:	e05d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bcc:	4a30      	ldr	r2, [pc, #192]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bce:	6913      	ldr	r3, [r2, #16]
10008bd0:	2180      	movs	r1, #128	; 0x80
10008bd2:	0209      	lsls	r1, r1, #8
10008bd4:	430b      	orrs	r3, r1
10008bd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008bda:	e055      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bdc:	4a2c      	ldr	r2, [pc, #176]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bde:	6913      	ldr	r3, [r2, #16]
10008be0:	2180      	movs	r1, #128	; 0x80
10008be2:	0249      	lsls	r1, r1, #9
10008be4:	430b      	orrs	r3, r1
10008be6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008bea:	e04d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bec:	4a28      	ldr	r2, [pc, #160]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bee:	6913      	ldr	r3, [r2, #16]
10008bf0:	2180      	movs	r1, #128	; 0x80
10008bf2:	0289      	lsls	r1, r1, #10
10008bf4:	430b      	orrs	r3, r1
10008bf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008bfa:	e045      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bfc:	4a24      	ldr	r2, [pc, #144]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008bfe:	6913      	ldr	r3, [r2, #16]
10008c00:	2180      	movs	r1, #128	; 0x80
10008c02:	02c9      	lsls	r1, r1, #11
10008c04:	430b      	orrs	r3, r1
10008c06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008c0a:	e03d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c0c:	4a20      	ldr	r2, [pc, #128]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c0e:	6913      	ldr	r3, [r2, #16]
10008c10:	2180      	movs	r1, #128	; 0x80
10008c12:	0309      	lsls	r1, r1, #12
10008c14:	430b      	orrs	r3, r1
10008c16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008c1a:	e035      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c1c:	4a1c      	ldr	r2, [pc, #112]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c1e:	6913      	ldr	r3, [r2, #16]
10008c20:	2180      	movs	r1, #128	; 0x80
10008c22:	0349      	lsls	r1, r1, #13
10008c24:	430b      	orrs	r3, r1
10008c26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008c2a:	e02d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c2c:	4a18      	ldr	r2, [pc, #96]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c2e:	6913      	ldr	r3, [r2, #16]
10008c30:	2180      	movs	r1, #128	; 0x80
10008c32:	0389      	lsls	r1, r1, #14
10008c34:	430b      	orrs	r3, r1
10008c36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008c3a:	e025      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c3c:	4a14      	ldr	r2, [pc, #80]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c3e:	6913      	ldr	r3, [r2, #16]
10008c40:	2180      	movs	r1, #128	; 0x80
10008c42:	03c9      	lsls	r1, r1, #15
10008c44:	430b      	orrs	r3, r1
10008c46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008c4a:	e01d      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c4c:	4a10      	ldr	r2, [pc, #64]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c4e:	6913      	ldr	r3, [r2, #16]
10008c50:	2180      	movs	r1, #128	; 0x80
10008c52:	0409      	lsls	r1, r1, #16
10008c54:	430b      	orrs	r3, r1
10008c56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008c5a:	e015      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008c5c:	4a0c      	ldr	r2, [pc, #48]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c5e:	7d11      	ldrb	r1, [r2, #20]
10008c60:	2301      	movs	r3, #1
10008c62:	430b      	orrs	r3, r1
10008c64:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008c68:	e00e      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008c6a:	4a09      	ldr	r2, [pc, #36]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c6c:	7d11      	ldrb	r1, [r2, #20]
10008c6e:	2302      	movs	r3, #2
10008c70:	430b      	orrs	r3, r1
10008c72:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008c76:	e007      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008c78:	4a05      	ldr	r2, [pc, #20]	; (10008c90 <system_clock_peripheral_enable+0x358>)
10008c7a:	7d11      	ldrb	r1, [r2, #20]
10008c7c:	2304      	movs	r3, #4
10008c7e:	430b      	orrs	r3, r1
10008c80:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008c84:	e000      	b.n	10008c88 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008c86:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008c88:	bd00      	pop	{pc}
10008c8a:	46c0      	nop			; (mov r8, r8)
10008c8c:	10014404 	.word	0x10014404
10008c90:	4000b000 	.word	0x4000b000

10008c94 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008c94:	b500      	push	{lr}
	switch (peripheral) {
10008c96:	2843      	cmp	r0, #67	; 0x43
10008c98:	d900      	bls.n	10008c9c <system_peripheral_reset+0x8>
10008c9a:	e223      	b.n	100090e4 <system_peripheral_reset+0x450>
10008c9c:	0080      	lsls	r0, r0, #2
10008c9e:	4be0      	ldr	r3, [pc, #896]	; (10009020 <system_peripheral_reset+0x38c>)
10008ca0:	581b      	ldr	r3, [r3, r0]
10008ca2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ca4:	4bdf      	ldr	r3, [pc, #892]	; (10009024 <system_peripheral_reset+0x390>)
10008ca6:	6859      	ldr	r1, [r3, #4]
10008ca8:	2202      	movs	r2, #2
10008caa:	4391      	bics	r1, r2
10008cac:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cae:	6859      	ldr	r1, [r3, #4]
10008cb0:	430a      	orrs	r2, r1
10008cb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cb4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008cb6:	e216      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cb8:	4bda      	ldr	r3, [pc, #872]	; (10009024 <system_peripheral_reset+0x390>)
10008cba:	6859      	ldr	r1, [r3, #4]
10008cbc:	2204      	movs	r2, #4
10008cbe:	4391      	bics	r1, r2
10008cc0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cc2:	6859      	ldr	r1, [r3, #4]
10008cc4:	430a      	orrs	r2, r1
10008cc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008cca:	e20c      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ccc:	4bd5      	ldr	r3, [pc, #852]	; (10009024 <system_peripheral_reset+0x390>)
10008cce:	6859      	ldr	r1, [r3, #4]
10008cd0:	2208      	movs	r2, #8
10008cd2:	4391      	bics	r1, r2
10008cd4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cd6:	6859      	ldr	r1, [r3, #4]
10008cd8:	430a      	orrs	r2, r1
10008cda:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cdc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008cde:	e202      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ce0:	4bd0      	ldr	r3, [pc, #832]	; (10009024 <system_peripheral_reset+0x390>)
10008ce2:	6859      	ldr	r1, [r3, #4]
10008ce4:	2210      	movs	r2, #16
10008ce6:	4391      	bics	r1, r2
10008ce8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cea:	6859      	ldr	r1, [r3, #4]
10008cec:	430a      	orrs	r2, r1
10008cee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cf0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008cf2:	e1f8      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cf4:	4bcb      	ldr	r3, [pc, #812]	; (10009024 <system_peripheral_reset+0x390>)
10008cf6:	6859      	ldr	r1, [r3, #4]
10008cf8:	2220      	movs	r2, #32
10008cfa:	4391      	bics	r1, r2
10008cfc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cfe:	6859      	ldr	r1, [r3, #4]
10008d00:	430a      	orrs	r2, r1
10008d02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d04:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008d06:	e1ee      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d08:	4bc6      	ldr	r3, [pc, #792]	; (10009024 <system_peripheral_reset+0x390>)
10008d0a:	6859      	ldr	r1, [r3, #4]
10008d0c:	2240      	movs	r2, #64	; 0x40
10008d0e:	4391      	bics	r1, r2
10008d10:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d12:	6859      	ldr	r1, [r3, #4]
10008d14:	430a      	orrs	r2, r1
10008d16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d18:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008d1a:	e1e4      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d1c:	4bc1      	ldr	r3, [pc, #772]	; (10009024 <system_peripheral_reset+0x390>)
10008d1e:	6859      	ldr	r1, [r3, #4]
10008d20:	2280      	movs	r2, #128	; 0x80
10008d22:	4391      	bics	r1, r2
10008d24:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d26:	6859      	ldr	r1, [r3, #4]
10008d28:	430a      	orrs	r2, r1
10008d2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d2c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008d2e:	e1da      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d30:	4bbc      	ldr	r3, [pc, #752]	; (10009024 <system_peripheral_reset+0x390>)
10008d32:	6859      	ldr	r1, [r3, #4]
10008d34:	4abc      	ldr	r2, [pc, #752]	; (10009028 <system_peripheral_reset+0x394>)
10008d36:	400a      	ands	r2, r1
10008d38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d3a:	685a      	ldr	r2, [r3, #4]
10008d3c:	2180      	movs	r1, #128	; 0x80
10008d3e:	0049      	lsls	r1, r1, #1
10008d40:	430a      	orrs	r2, r1
10008d42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d44:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008d46:	e1ce      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d48:	4bb6      	ldr	r3, [pc, #728]	; (10009024 <system_peripheral_reset+0x390>)
10008d4a:	6859      	ldr	r1, [r3, #4]
10008d4c:	4ab7      	ldr	r2, [pc, #732]	; (1000902c <system_peripheral_reset+0x398>)
10008d4e:	400a      	ands	r2, r1
10008d50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d52:	685a      	ldr	r2, [r3, #4]
10008d54:	2180      	movs	r1, #128	; 0x80
10008d56:	0089      	lsls	r1, r1, #2
10008d58:	430a      	orrs	r2, r1
10008d5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d5c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10008d5e:	e1c2      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d60:	4bb0      	ldr	r3, [pc, #704]	; (10009024 <system_peripheral_reset+0x390>)
10008d62:	6859      	ldr	r1, [r3, #4]
10008d64:	4ab2      	ldr	r2, [pc, #712]	; (10009030 <system_peripheral_reset+0x39c>)
10008d66:	400a      	ands	r2, r1
10008d68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d6a:	685a      	ldr	r2, [r3, #4]
10008d6c:	2180      	movs	r1, #128	; 0x80
10008d6e:	00c9      	lsls	r1, r1, #3
10008d70:	430a      	orrs	r2, r1
10008d72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d74:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008d76:	e1b6      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d78:	4baa      	ldr	r3, [pc, #680]	; (10009024 <system_peripheral_reset+0x390>)
10008d7a:	6859      	ldr	r1, [r3, #4]
10008d7c:	4aad      	ldr	r2, [pc, #692]	; (10009034 <system_peripheral_reset+0x3a0>)
10008d7e:	400a      	ands	r2, r1
10008d80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d82:	685a      	ldr	r2, [r3, #4]
10008d84:	2180      	movs	r1, #128	; 0x80
10008d86:	0109      	lsls	r1, r1, #4
10008d88:	430a      	orrs	r2, r1
10008d8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d8c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10008d8e:	e1aa      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d90:	4ba4      	ldr	r3, [pc, #656]	; (10009024 <system_peripheral_reset+0x390>)
10008d92:	6859      	ldr	r1, [r3, #4]
10008d94:	4aa8      	ldr	r2, [pc, #672]	; (10009038 <system_peripheral_reset+0x3a4>)
10008d96:	400a      	ands	r2, r1
10008d98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d9a:	685a      	ldr	r2, [r3, #4]
10008d9c:	2180      	movs	r1, #128	; 0x80
10008d9e:	0149      	lsls	r1, r1, #5
10008da0:	430a      	orrs	r2, r1
10008da2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10008da6:	e19e      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008da8:	4b9e      	ldr	r3, [pc, #632]	; (10009024 <system_peripheral_reset+0x390>)
10008daa:	6859      	ldr	r1, [r3, #4]
10008dac:	4aa3      	ldr	r2, [pc, #652]	; (1000903c <system_peripheral_reset+0x3a8>)
10008dae:	400a      	ands	r2, r1
10008db0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008db2:	685a      	ldr	r2, [r3, #4]
10008db4:	2180      	movs	r1, #128	; 0x80
10008db6:	0189      	lsls	r1, r1, #6
10008db8:	430a      	orrs	r2, r1
10008dba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dbc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10008dbe:	e192      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dc0:	4b98      	ldr	r3, [pc, #608]	; (10009024 <system_peripheral_reset+0x390>)
10008dc2:	6859      	ldr	r1, [r3, #4]
10008dc4:	4a9e      	ldr	r2, [pc, #632]	; (10009040 <system_peripheral_reset+0x3ac>)
10008dc6:	400a      	ands	r2, r1
10008dc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dca:	685a      	ldr	r2, [r3, #4]
10008dcc:	2180      	movs	r1, #128	; 0x80
10008dce:	01c9      	lsls	r1, r1, #7
10008dd0:	430a      	orrs	r2, r1
10008dd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10008dd6:	e186      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dd8:	4b92      	ldr	r3, [pc, #584]	; (10009024 <system_peripheral_reset+0x390>)
10008dda:	6859      	ldr	r1, [r3, #4]
10008ddc:	4a99      	ldr	r2, [pc, #612]	; (10009044 <system_peripheral_reset+0x3b0>)
10008dde:	400a      	ands	r2, r1
10008de0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008de2:	685a      	ldr	r2, [r3, #4]
10008de4:	2180      	movs	r1, #128	; 0x80
10008de6:	0209      	lsls	r1, r1, #8
10008de8:	430a      	orrs	r2, r1
10008dea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dec:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
10008dee:	e17a      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008df0:	4b8c      	ldr	r3, [pc, #560]	; (10009024 <system_peripheral_reset+0x390>)
10008df2:	6859      	ldr	r1, [r3, #4]
10008df4:	4a94      	ldr	r2, [pc, #592]	; (10009048 <system_peripheral_reset+0x3b4>)
10008df6:	400a      	ands	r2, r1
10008df8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dfa:	685a      	ldr	r2, [r3, #4]
10008dfc:	2180      	movs	r1, #128	; 0x80
10008dfe:	0249      	lsls	r1, r1, #9
10008e00:	430a      	orrs	r2, r1
10008e02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e04:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10008e06:	e16e      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e08:	4b86      	ldr	r3, [pc, #536]	; (10009024 <system_peripheral_reset+0x390>)
10008e0a:	6859      	ldr	r1, [r3, #4]
10008e0c:	4a8f      	ldr	r2, [pc, #572]	; (1000904c <system_peripheral_reset+0x3b8>)
10008e0e:	400a      	ands	r2, r1
10008e10:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e12:	685a      	ldr	r2, [r3, #4]
10008e14:	2180      	movs	r1, #128	; 0x80
10008e16:	0289      	lsls	r1, r1, #10
10008e18:	430a      	orrs	r2, r1
10008e1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e1c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10008e1e:	e162      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e20:	4b80      	ldr	r3, [pc, #512]	; (10009024 <system_peripheral_reset+0x390>)
10008e22:	6859      	ldr	r1, [r3, #4]
10008e24:	4a8a      	ldr	r2, [pc, #552]	; (10009050 <system_peripheral_reset+0x3bc>)
10008e26:	400a      	ands	r2, r1
10008e28:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e2a:	685a      	ldr	r2, [r3, #4]
10008e2c:	2180      	movs	r1, #128	; 0x80
10008e2e:	02c9      	lsls	r1, r1, #11
10008e30:	430a      	orrs	r2, r1
10008e32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e34:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008e36:	e156      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e38:	4b7a      	ldr	r3, [pc, #488]	; (10009024 <system_peripheral_reset+0x390>)
10008e3a:	6859      	ldr	r1, [r3, #4]
10008e3c:	4a85      	ldr	r2, [pc, #532]	; (10009054 <system_peripheral_reset+0x3c0>)
10008e3e:	400a      	ands	r2, r1
10008e40:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e42:	685a      	ldr	r2, [r3, #4]
10008e44:	2180      	movs	r1, #128	; 0x80
10008e46:	0309      	lsls	r1, r1, #12
10008e48:	430a      	orrs	r2, r1
10008e4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008e4e:	e14a      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e50:	4b74      	ldr	r3, [pc, #464]	; (10009024 <system_peripheral_reset+0x390>)
10008e52:	6859      	ldr	r1, [r3, #4]
10008e54:	4a80      	ldr	r2, [pc, #512]	; (10009058 <system_peripheral_reset+0x3c4>)
10008e56:	400a      	ands	r2, r1
10008e58:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e5a:	685a      	ldr	r2, [r3, #4]
10008e5c:	2180      	movs	r1, #128	; 0x80
10008e5e:	0349      	lsls	r1, r1, #13
10008e60:	430a      	orrs	r2, r1
10008e62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e64:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008e66:	e13e      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e68:	4b6e      	ldr	r3, [pc, #440]	; (10009024 <system_peripheral_reset+0x390>)
10008e6a:	6859      	ldr	r1, [r3, #4]
10008e6c:	4a7b      	ldr	r2, [pc, #492]	; (1000905c <system_peripheral_reset+0x3c8>)
10008e6e:	400a      	ands	r2, r1
10008e70:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e72:	685a      	ldr	r2, [r3, #4]
10008e74:	2180      	movs	r1, #128	; 0x80
10008e76:	0389      	lsls	r1, r1, #14
10008e78:	430a      	orrs	r2, r1
10008e7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e7c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008e7e:	e132      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e80:	4b68      	ldr	r3, [pc, #416]	; (10009024 <system_peripheral_reset+0x390>)
10008e82:	6859      	ldr	r1, [r3, #4]
10008e84:	4a76      	ldr	r2, [pc, #472]	; (10009060 <system_peripheral_reset+0x3cc>)
10008e86:	400a      	ands	r2, r1
10008e88:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e8a:	685a      	ldr	r2, [r3, #4]
10008e8c:	2180      	movs	r1, #128	; 0x80
10008e8e:	03c9      	lsls	r1, r1, #15
10008e90:	430a      	orrs	r2, r1
10008e92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e94:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008e96:	e126      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e98:	4b62      	ldr	r3, [pc, #392]	; (10009024 <system_peripheral_reset+0x390>)
10008e9a:	6859      	ldr	r1, [r3, #4]
10008e9c:	4a71      	ldr	r2, [pc, #452]	; (10009064 <system_peripheral_reset+0x3d0>)
10008e9e:	400a      	ands	r2, r1
10008ea0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ea2:	685a      	ldr	r2, [r3, #4]
10008ea4:	2180      	movs	r1, #128	; 0x80
10008ea6:	0409      	lsls	r1, r1, #16
10008ea8:	430a      	orrs	r2, r1
10008eaa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eac:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008eae:	e11a      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008eb0:	4b5c      	ldr	r3, [pc, #368]	; (10009024 <system_peripheral_reset+0x390>)
10008eb2:	6859      	ldr	r1, [r3, #4]
10008eb4:	4a6c      	ldr	r2, [pc, #432]	; (10009068 <system_peripheral_reset+0x3d4>)
10008eb6:	400a      	ands	r2, r1
10008eb8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008eba:	685a      	ldr	r2, [r3, #4]
10008ebc:	2180      	movs	r1, #128	; 0x80
10008ebe:	0449      	lsls	r1, r1, #17
10008ec0:	430a      	orrs	r2, r1
10008ec2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008ec6:	e10e      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ec8:	4b56      	ldr	r3, [pc, #344]	; (10009024 <system_peripheral_reset+0x390>)
10008eca:	6859      	ldr	r1, [r3, #4]
10008ecc:	4a67      	ldr	r2, [pc, #412]	; (1000906c <system_peripheral_reset+0x3d8>)
10008ece:	400a      	ands	r2, r1
10008ed0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ed2:	685a      	ldr	r2, [r3, #4]
10008ed4:	2180      	movs	r1, #128	; 0x80
10008ed6:	0489      	lsls	r1, r1, #18
10008ed8:	430a      	orrs	r2, r1
10008eda:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008edc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10008ede:	e102      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ee0:	4b50      	ldr	r3, [pc, #320]	; (10009024 <system_peripheral_reset+0x390>)
10008ee2:	6859      	ldr	r1, [r3, #4]
10008ee4:	4a62      	ldr	r2, [pc, #392]	; (10009070 <system_peripheral_reset+0x3dc>)
10008ee6:	400a      	ands	r2, r1
10008ee8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008eea:	685a      	ldr	r2, [r3, #4]
10008eec:	2180      	movs	r1, #128	; 0x80
10008eee:	04c9      	lsls	r1, r1, #19
10008ef0:	430a      	orrs	r2, r1
10008ef2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10008ef6:	e0f6      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ef8:	4b4a      	ldr	r3, [pc, #296]	; (10009024 <system_peripheral_reset+0x390>)
10008efa:	6859      	ldr	r1, [r3, #4]
10008efc:	4a5d      	ldr	r2, [pc, #372]	; (10009074 <system_peripheral_reset+0x3e0>)
10008efe:	400a      	ands	r2, r1
10008f00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f02:	685a      	ldr	r2, [r3, #4]
10008f04:	2180      	movs	r1, #128	; 0x80
10008f06:	0509      	lsls	r1, r1, #20
10008f08:	430a      	orrs	r2, r1
10008f0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f0c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10008f0e:	e0ea      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f10:	4b44      	ldr	r3, [pc, #272]	; (10009024 <system_peripheral_reset+0x390>)
10008f12:	6859      	ldr	r1, [r3, #4]
10008f14:	4a58      	ldr	r2, [pc, #352]	; (10009078 <system_peripheral_reset+0x3e4>)
10008f16:	400a      	ands	r2, r1
10008f18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f1a:	685a      	ldr	r2, [r3, #4]
10008f1c:	2180      	movs	r1, #128	; 0x80
10008f1e:	0549      	lsls	r1, r1, #21
10008f20:	430a      	orrs	r2, r1
10008f22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f24:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10008f26:	e0de      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f28:	4b3e      	ldr	r3, [pc, #248]	; (10009024 <system_peripheral_reset+0x390>)
10008f2a:	6859      	ldr	r1, [r3, #4]
10008f2c:	4a53      	ldr	r2, [pc, #332]	; (1000907c <system_peripheral_reset+0x3e8>)
10008f2e:	400a      	ands	r2, r1
10008f30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f32:	685a      	ldr	r2, [r3, #4]
10008f34:	2180      	movs	r1, #128	; 0x80
10008f36:	0589      	lsls	r1, r1, #22
10008f38:	430a      	orrs	r2, r1
10008f3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f3c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10008f3e:	e0d2      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f40:	4b38      	ldr	r3, [pc, #224]	; (10009024 <system_peripheral_reset+0x390>)
10008f42:	6859      	ldr	r1, [r3, #4]
10008f44:	4a4e      	ldr	r2, [pc, #312]	; (10009080 <system_peripheral_reset+0x3ec>)
10008f46:	400a      	ands	r2, r1
10008f48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f4a:	685a      	ldr	r2, [r3, #4]
10008f4c:	2180      	movs	r1, #128	; 0x80
10008f4e:	05c9      	lsls	r1, r1, #23
10008f50:	430a      	orrs	r2, r1
10008f52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f54:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10008f56:	e0c6      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f58:	4a32      	ldr	r2, [pc, #200]	; (10009024 <system_peripheral_reset+0x390>)
10008f5a:	6853      	ldr	r3, [r2, #4]
10008f5c:	005b      	lsls	r3, r3, #1
10008f5e:	085b      	lsrs	r3, r3, #1
10008f60:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f62:	6853      	ldr	r3, [r2, #4]
10008f64:	2180      	movs	r1, #128	; 0x80
10008f66:	0609      	lsls	r1, r1, #24
10008f68:	430b      	orrs	r3, r1
10008f6a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f6c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10008f6e:	e0ba      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f70:	4b2c      	ldr	r3, [pc, #176]	; (10009024 <system_peripheral_reset+0x390>)
10008f72:	891a      	ldrh	r2, [r3, #8]
10008f74:	2101      	movs	r1, #1
10008f76:	438a      	bics	r2, r1
10008f78:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f7a:	8919      	ldrh	r1, [r3, #8]
10008f7c:	2201      	movs	r2, #1
10008f7e:	430a      	orrs	r2, r1
10008f80:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f82:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10008f84:	e0af      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f86:	4b27      	ldr	r3, [pc, #156]	; (10009024 <system_peripheral_reset+0x390>)
10008f88:	891a      	ldrh	r2, [r3, #8]
10008f8a:	2102      	movs	r1, #2
10008f8c:	438a      	bics	r2, r1
10008f8e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f90:	8919      	ldrh	r1, [r3, #8]
10008f92:	2202      	movs	r2, #2
10008f94:	430a      	orrs	r2, r1
10008f96:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f98:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10008f9a:	e0a4      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f9c:	4b21      	ldr	r3, [pc, #132]	; (10009024 <system_peripheral_reset+0x390>)
10008f9e:	891a      	ldrh	r2, [r3, #8]
10008fa0:	2104      	movs	r1, #4
10008fa2:	438a      	bics	r2, r1
10008fa4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fa6:	8919      	ldrh	r1, [r3, #8]
10008fa8:	2204      	movs	r2, #4
10008faa:	430a      	orrs	r2, r1
10008fac:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fae:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10008fb0:	e099      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fb2:	4b1c      	ldr	r3, [pc, #112]	; (10009024 <system_peripheral_reset+0x390>)
10008fb4:	891a      	ldrh	r2, [r3, #8]
10008fb6:	2108      	movs	r1, #8
10008fb8:	438a      	bics	r2, r1
10008fba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fbc:	8919      	ldrh	r1, [r3, #8]
10008fbe:	2208      	movs	r2, #8
10008fc0:	430a      	orrs	r2, r1
10008fc2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc4:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008fc6:	e08e      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fc8:	4b16      	ldr	r3, [pc, #88]	; (10009024 <system_peripheral_reset+0x390>)
10008fca:	891a      	ldrh	r2, [r3, #8]
10008fcc:	2110      	movs	r1, #16
10008fce:	438a      	bics	r2, r1
10008fd0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fd2:	8919      	ldrh	r1, [r3, #8]
10008fd4:	2210      	movs	r2, #16
10008fd6:	430a      	orrs	r2, r1
10008fd8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fda:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008fdc:	e083      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fde:	4b11      	ldr	r3, [pc, #68]	; (10009024 <system_peripheral_reset+0x390>)
10008fe0:	891a      	ldrh	r2, [r3, #8]
10008fe2:	2120      	movs	r1, #32
10008fe4:	438a      	bics	r2, r1
10008fe6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fe8:	8919      	ldrh	r1, [r3, #8]
10008fea:	2220      	movs	r2, #32
10008fec:	430a      	orrs	r2, r1
10008fee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff0:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008ff2:	e078      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008ff4:	4b0b      	ldr	r3, [pc, #44]	; (10009024 <system_peripheral_reset+0x390>)
10008ff6:	891a      	ldrh	r2, [r3, #8]
10008ff8:	2140      	movs	r1, #64	; 0x40
10008ffa:	438a      	bics	r2, r1
10008ffc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008ffe:	8919      	ldrh	r1, [r3, #8]
10009000:	2240      	movs	r2, #64	; 0x40
10009002:	430a      	orrs	r2, r1
10009004:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009006:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009008:	e06d      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000900a:	4b06      	ldr	r3, [pc, #24]	; (10009024 <system_peripheral_reset+0x390>)
1000900c:	891a      	ldrh	r2, [r3, #8]
1000900e:	2180      	movs	r1, #128	; 0x80
10009010:	438a      	bics	r2, r1
10009012:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009014:	8919      	ldrh	r1, [r3, #8]
10009016:	2280      	movs	r2, #128	; 0x80
10009018:	430a      	orrs	r2, r1
1000901a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000901c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000901e:	e062      	b.n	100090e6 <system_peripheral_reset+0x452>
10009020:	100144dc 	.word	0x100144dc
10009024:	4000b000 	.word	0x4000b000
10009028:	fffffeff 	.word	0xfffffeff
1000902c:	fffffdff 	.word	0xfffffdff
10009030:	fffffbff 	.word	0xfffffbff
10009034:	fffff7ff 	.word	0xfffff7ff
10009038:	ffffefff 	.word	0xffffefff
1000903c:	ffffdfff 	.word	0xffffdfff
10009040:	ffffbfff 	.word	0xffffbfff
10009044:	ffff7fff 	.word	0xffff7fff
10009048:	fffeffff 	.word	0xfffeffff
1000904c:	fffdffff 	.word	0xfffdffff
10009050:	fffbffff 	.word	0xfffbffff
10009054:	fff7ffff 	.word	0xfff7ffff
10009058:	ffefffff 	.word	0xffefffff
1000905c:	ffdfffff 	.word	0xffdfffff
10009060:	ffbfffff 	.word	0xffbfffff
10009064:	ff7fffff 	.word	0xff7fffff
10009068:	feffffff 	.word	0xfeffffff
1000906c:	fdffffff 	.word	0xfdffffff
10009070:	fbffffff 	.word	0xfbffffff
10009074:	f7ffffff 	.word	0xf7ffffff
10009078:	efffffff 	.word	0xefffffff
1000907c:	dfffffff 	.word	0xdfffffff
10009080:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009084:	4b18      	ldr	r3, [pc, #96]	; (100090e8 <system_peripheral_reset+0x454>)
10009086:	8919      	ldrh	r1, [r3, #8]
10009088:	4a18      	ldr	r2, [pc, #96]	; (100090ec <system_peripheral_reset+0x458>)
1000908a:	400a      	ands	r2, r1
1000908c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000908e:	8919      	ldrh	r1, [r3, #8]
10009090:	2280      	movs	r2, #128	; 0x80
10009092:	0052      	lsls	r2, r2, #1
10009094:	430a      	orrs	r2, r1
10009096:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009098:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000909a:	e024      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000909c:	4b12      	ldr	r3, [pc, #72]	; (100090e8 <system_peripheral_reset+0x454>)
1000909e:	8919      	ldrh	r1, [r3, #8]
100090a0:	4a13      	ldr	r2, [pc, #76]	; (100090f0 <system_peripheral_reset+0x45c>)
100090a2:	400a      	ands	r2, r1
100090a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090a6:	8919      	ldrh	r1, [r3, #8]
100090a8:	2280      	movs	r2, #128	; 0x80
100090aa:	0092      	lsls	r2, r2, #2
100090ac:	430a      	orrs	r2, r1
100090ae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
100090b2:	e018      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090b4:	4b0c      	ldr	r3, [pc, #48]	; (100090e8 <system_peripheral_reset+0x454>)
100090b6:	8919      	ldrh	r1, [r3, #8]
100090b8:	4a0e      	ldr	r2, [pc, #56]	; (100090f4 <system_peripheral_reset+0x460>)
100090ba:	400a      	ands	r2, r1
100090bc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090be:	8919      	ldrh	r1, [r3, #8]
100090c0:	2280      	movs	r2, #128	; 0x80
100090c2:	00d2      	lsls	r2, r2, #3
100090c4:	430a      	orrs	r2, r1
100090c6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100090ca:	e00c      	b.n	100090e6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090cc:	4b06      	ldr	r3, [pc, #24]	; (100090e8 <system_peripheral_reset+0x454>)
100090ce:	8919      	ldrh	r1, [r3, #8]
100090d0:	4a09      	ldr	r2, [pc, #36]	; (100090f8 <system_peripheral_reset+0x464>)
100090d2:	400a      	ands	r2, r1
100090d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090d6:	8919      	ldrh	r1, [r3, #8]
100090d8:	2280      	movs	r2, #128	; 0x80
100090da:	0112      	lsls	r2, r2, #4
100090dc:	430a      	orrs	r2, r1
100090de:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e0:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
100090e2:	e000      	b.n	100090e6 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100090e4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100090e6:	bd00      	pop	{pc}
100090e8:	4000b000 	.word	0x4000b000
100090ec:	fffffeff 	.word	0xfffffeff
100090f0:	fffffdff 	.word	0xfffffdff
100090f4:	fffffbff 	.word	0xfffffbff
100090f8:	fffff7ff 	.word	0xfffff7ff

100090fc <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100090fc:	2380      	movs	r3, #128	; 0x80
100090fe:	04db      	lsls	r3, r3, #19
10009100:	469c      	mov	ip, r3
10009102:	4460      	add	r0, ip
10009104:	0080      	lsls	r0, r0, #2
10009106:	6001      	str	r1, [r0, #0]
}
10009108:	4770      	bx	lr
1000910a:	46c0      	nop			; (mov r8, r8)

1000910c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000910c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000910e:	4b20      	ldr	r3, [pc, #128]	; (10009190 <uart_rx0_isr_handler+0x84>)
10009110:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009112:	6823      	ldr	r3, [r4, #0]
10009114:	7d1d      	ldrb	r5, [r3, #20]
10009116:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009118:	066a      	lsls	r2, r5, #25
1000911a:	d513      	bpl.n	10009144 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000911c:	211e      	movs	r1, #30
1000911e:	2222      	movs	r2, #34	; 0x22
10009120:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009122:	7e1a      	ldrb	r2, [r3, #24]
10009124:	3123      	adds	r1, #35	; 0x23
10009126:	438a      	bics	r2, r1
10009128:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000912a:	2321      	movs	r3, #33	; 0x21
1000912c:	5ce3      	ldrb	r3, [r4, r3]
1000912e:	071b      	lsls	r3, r3, #28
10009130:	d506      	bpl.n	10009140 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009132:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009134:	5ce3      	ldrb	r3, [r4, r3]
10009136:	071b      	lsls	r3, r3, #28
10009138:	d502      	bpl.n	10009140 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000913a:	0020      	movs	r0, r4
1000913c:	6923      	ldr	r3, [r4, #16]
1000913e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009140:	6823      	ldr	r3, [r4, #0]
10009142:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009144:	07eb      	lsls	r3, r5, #31
10009146:	d522      	bpl.n	1000918e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009148:	6823      	ldr	r3, [r4, #0]
1000914a:	7c1b      	ldrb	r3, [r3, #16]
1000914c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000914e:	6962      	ldr	r2, [r4, #20]
10009150:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009152:	6963      	ldr	r3, [r4, #20]
10009154:	3301      	adds	r3, #1
10009156:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009158:	8ba3      	ldrh	r3, [r4, #28]
1000915a:	3b01      	subs	r3, #1
1000915c:	b29b      	uxth	r3, r3
1000915e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009160:	8ba3      	ldrh	r3, [r4, #28]
10009162:	b29b      	uxth	r3, r3
10009164:	2b00      	cmp	r3, #0
10009166:	d112      	bne.n	1000918e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009168:	3321      	adds	r3, #33	; 0x21
1000916a:	5ce3      	ldrb	r3, [r4, r3]
1000916c:	075b      	lsls	r3, r3, #29
1000916e:	d50e      	bpl.n	1000918e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009170:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009172:	5ce3      	ldrb	r3, [r4, r3]
10009174:	075b      	lsls	r3, r3, #29
10009176:	d50a      	bpl.n	1000918e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009178:	2200      	movs	r2, #0
1000917a:	2322      	movs	r3, #34	; 0x22
1000917c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000917e:	6822      	ldr	r2, [r4, #0]
10009180:	7e13      	ldrb	r3, [r2, #24]
10009182:	2101      	movs	r1, #1
10009184:	438b      	bics	r3, r1
10009186:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009188:	68e3      	ldr	r3, [r4, #12]
1000918a:	0020      	movs	r0, r4
1000918c:	4798      	blx	r3
			}
		}
	}
}
1000918e:	bd70      	pop	{r4, r5, r6, pc}
10009190:	10016e3c 	.word	0x10016e3c

10009194 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009194:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009196:	4b21      	ldr	r3, [pc, #132]	; (1000921c <uart_tx0_isr_handler+0x88>)
10009198:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000919a:	6823      	ldr	r3, [r4, #0]
1000919c:	791d      	ldrb	r5, [r3, #4]
1000919e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100091a0:	07ea      	lsls	r2, r5, #31
100091a2:	d517      	bpl.n	100091d4 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100091a4:	69a2      	ldr	r2, [r4, #24]
100091a6:	7811      	ldrb	r1, [r2, #0]
100091a8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100091aa:	3201      	adds	r2, #1
100091ac:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100091ae:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100091b0:	8be3      	ldrh	r3, [r4, #30]
100091b2:	3b01      	subs	r3, #1
100091b4:	b29b      	uxth	r3, r3
100091b6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100091b8:	8be3      	ldrh	r3, [r4, #30]
100091ba:	b29b      	uxth	r3, r3
100091bc:	2b00      	cmp	r3, #0
100091be:	d109      	bne.n	100091d4 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100091c0:	6822      	ldr	r2, [r4, #0]
100091c2:	7a13      	ldrb	r3, [r2, #8]
100091c4:	2101      	movs	r1, #1
100091c6:	438b      	bics	r3, r1
100091c8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100091ca:	6822      	ldr	r2, [r4, #0]
100091cc:	7a11      	ldrb	r1, [r2, #8]
100091ce:	2310      	movs	r3, #16
100091d0:	430b      	orrs	r3, r1
100091d2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100091d4:	06eb      	lsls	r3, r5, #27
100091d6:	d512      	bpl.n	100091fe <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100091d8:	2321      	movs	r3, #33	; 0x21
100091da:	5ce3      	ldrb	r3, [r4, r3]
100091dc:	07db      	lsls	r3, r3, #31
100091de:	d50e      	bpl.n	100091fe <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100091e0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100091e2:	5ce3      	ldrb	r3, [r4, r3]
100091e4:	07db      	lsls	r3, r3, #31
100091e6:	d50a      	bpl.n	100091fe <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100091e8:	2200      	movs	r2, #0
100091ea:	2322      	movs	r3, #34	; 0x22
100091ec:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100091ee:	6822      	ldr	r2, [r4, #0]
100091f0:	7a13      	ldrb	r3, [r2, #8]
100091f2:	2110      	movs	r1, #16
100091f4:	438b      	bics	r3, r1
100091f6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100091f8:	0020      	movs	r0, r4
100091fa:	6863      	ldr	r3, [r4, #4]
100091fc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100091fe:	06ab      	lsls	r3, r5, #26
10009200:	d50a      	bpl.n	10009218 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009202:	2321      	movs	r3, #33	; 0x21
10009204:	5ce3      	ldrb	r3, [r4, r3]
10009206:	079b      	lsls	r3, r3, #30
10009208:	d506      	bpl.n	10009218 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000920a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000920c:	5ce3      	ldrb	r3, [r4, r3]
1000920e:	079b      	lsls	r3, r3, #30
10009210:	d502      	bpl.n	10009218 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009212:	68a3      	ldr	r3, [r4, #8]
10009214:	0020      	movs	r0, r4
10009216:	4798      	blx	r3
		}

	}
}
10009218:	bd70      	pop	{r4, r5, r6, pc}
1000921a:	46c0      	nop			; (mov r8, r8)
1000921c:	10016e3c 	.word	0x10016e3c

10009220 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009220:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009222:	4b20      	ldr	r3, [pc, #128]	; (100092a4 <uart_rx1_isr_handler+0x84>)
10009224:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009226:	6823      	ldr	r3, [r4, #0]
10009228:	7d1d      	ldrb	r5, [r3, #20]
1000922a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000922c:	066a      	lsls	r2, r5, #25
1000922e:	d513      	bpl.n	10009258 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009230:	211e      	movs	r1, #30
10009232:	2222      	movs	r2, #34	; 0x22
10009234:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009236:	7e1a      	ldrb	r2, [r3, #24]
10009238:	3123      	adds	r1, #35	; 0x23
1000923a:	438a      	bics	r2, r1
1000923c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000923e:	2321      	movs	r3, #33	; 0x21
10009240:	5ce3      	ldrb	r3, [r4, r3]
10009242:	071b      	lsls	r3, r3, #28
10009244:	d506      	bpl.n	10009254 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009246:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009248:	5ce3      	ldrb	r3, [r4, r3]
1000924a:	071b      	lsls	r3, r3, #28
1000924c:	d502      	bpl.n	10009254 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000924e:	0020      	movs	r0, r4
10009250:	6923      	ldr	r3, [r4, #16]
10009252:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009254:	6823      	ldr	r3, [r4, #0]
10009256:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009258:	07eb      	lsls	r3, r5, #31
1000925a:	d522      	bpl.n	100092a2 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000925c:	6823      	ldr	r3, [r4, #0]
1000925e:	7c1b      	ldrb	r3, [r3, #16]
10009260:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009262:	6962      	ldr	r2, [r4, #20]
10009264:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009266:	6963      	ldr	r3, [r4, #20]
10009268:	3301      	adds	r3, #1
1000926a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000926c:	8ba3      	ldrh	r3, [r4, #28]
1000926e:	3b01      	subs	r3, #1
10009270:	b29b      	uxth	r3, r3
10009272:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009274:	8ba3      	ldrh	r3, [r4, #28]
10009276:	b29b      	uxth	r3, r3
10009278:	2b00      	cmp	r3, #0
1000927a:	d112      	bne.n	100092a2 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000927c:	3321      	adds	r3, #33	; 0x21
1000927e:	5ce3      	ldrb	r3, [r4, r3]
10009280:	075b      	lsls	r3, r3, #29
10009282:	d50e      	bpl.n	100092a2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009284:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009286:	5ce3      	ldrb	r3, [r4, r3]
10009288:	075b      	lsls	r3, r3, #29
1000928a:	d50a      	bpl.n	100092a2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000928c:	2200      	movs	r2, #0
1000928e:	2322      	movs	r3, #34	; 0x22
10009290:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009292:	6822      	ldr	r2, [r4, #0]
10009294:	7e13      	ldrb	r3, [r2, #24]
10009296:	2101      	movs	r1, #1
10009298:	438b      	bics	r3, r1
1000929a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000929c:	68e3      	ldr	r3, [r4, #12]
1000929e:	0020      	movs	r0, r4
100092a0:	4798      	blx	r3
			}
		}
	}
}
100092a2:	bd70      	pop	{r4, r5, r6, pc}
100092a4:	10016e3c 	.word	0x10016e3c

100092a8 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
100092a8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100092aa:	4b21      	ldr	r3, [pc, #132]	; (10009330 <uart_tx1_isr_handler+0x88>)
100092ac:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100092ae:	6823      	ldr	r3, [r4, #0]
100092b0:	791d      	ldrb	r5, [r3, #4]
100092b2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100092b4:	07ea      	lsls	r2, r5, #31
100092b6:	d517      	bpl.n	100092e8 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100092b8:	69a2      	ldr	r2, [r4, #24]
100092ba:	7811      	ldrb	r1, [r2, #0]
100092bc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100092be:	3201      	adds	r2, #1
100092c0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100092c2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100092c4:	8be3      	ldrh	r3, [r4, #30]
100092c6:	3b01      	subs	r3, #1
100092c8:	b29b      	uxth	r3, r3
100092ca:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100092cc:	8be3      	ldrh	r3, [r4, #30]
100092ce:	b29b      	uxth	r3, r3
100092d0:	2b00      	cmp	r3, #0
100092d2:	d109      	bne.n	100092e8 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100092d4:	6822      	ldr	r2, [r4, #0]
100092d6:	7a13      	ldrb	r3, [r2, #8]
100092d8:	2101      	movs	r1, #1
100092da:	438b      	bics	r3, r1
100092dc:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100092de:	6822      	ldr	r2, [r4, #0]
100092e0:	7a11      	ldrb	r1, [r2, #8]
100092e2:	2310      	movs	r3, #16
100092e4:	430b      	orrs	r3, r1
100092e6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100092e8:	06eb      	lsls	r3, r5, #27
100092ea:	d512      	bpl.n	10009312 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100092ec:	2321      	movs	r3, #33	; 0x21
100092ee:	5ce3      	ldrb	r3, [r4, r3]
100092f0:	07db      	lsls	r3, r3, #31
100092f2:	d50e      	bpl.n	10009312 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100092f4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100092f6:	5ce3      	ldrb	r3, [r4, r3]
100092f8:	07db      	lsls	r3, r3, #31
100092fa:	d50a      	bpl.n	10009312 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100092fc:	2200      	movs	r2, #0
100092fe:	2322      	movs	r3, #34	; 0x22
10009300:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009302:	6822      	ldr	r2, [r4, #0]
10009304:	7a13      	ldrb	r3, [r2, #8]
10009306:	2110      	movs	r1, #16
10009308:	438b      	bics	r3, r1
1000930a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000930c:	0020      	movs	r0, r4
1000930e:	6863      	ldr	r3, [r4, #4]
10009310:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009312:	06ab      	lsls	r3, r5, #26
10009314:	d50a      	bpl.n	1000932c <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009316:	2321      	movs	r3, #33	; 0x21
10009318:	5ce3      	ldrb	r3, [r4, r3]
1000931a:	079b      	lsls	r3, r3, #30
1000931c:	d506      	bpl.n	1000932c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000931e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009320:	5ce3      	ldrb	r3, [r4, r3]
10009322:	079b      	lsls	r3, r3, #30
10009324:	d502      	bpl.n	1000932c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009326:	68a3      	ldr	r3, [r4, #8]
10009328:	0020      	movs	r0, r4
1000932a:	4798      	blx	r3
		}

	}
}
1000932c:	bd70      	pop	{r4, r5, r6, pc}
1000932e:	46c0      	nop			; (mov r8, r8)
10009330:	10016e3c 	.word	0x10016e3c

10009334 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009334:	23e1      	movs	r3, #225	; 0xe1
10009336:	025b      	lsls	r3, r3, #9
10009338:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000933a:	2300      	movs	r3, #0
1000933c:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000933e:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009340:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009342:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009344:	3302      	adds	r3, #2
10009346:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009348:	2203      	movs	r2, #3
1000934a:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
1000934c:	3201      	adds	r2, #1
1000934e:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009350:	3201      	adds	r2, #1
10009352:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009354:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009356:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009358:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000935a:	6243      	str	r3, [r0, #36]	; 0x24
}
1000935c:	4770      	bx	lr
1000935e:	46c0      	nop			; (mov r8, r8)

10009360 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009362:	464f      	mov	r7, r9
10009364:	4646      	mov	r6, r8
10009366:	b4c0      	push	{r6, r7}
10009368:	0005      	movs	r5, r0
1000936a:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000936c:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000936e:	2300      	movs	r3, #0
10009370:	6043      	str	r3, [r0, #4]
10009372:	6083      	str	r3, [r0, #8]
10009374:	60c3      	str	r3, [r0, #12]
10009376:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009378:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000937a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000937c:	2200      	movs	r2, #0
1000937e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009380:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009382:	3320      	adds	r3, #32
10009384:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009386:	3301      	adds	r3, #1
10009388:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000938a:	3301      	adds	r3, #1
1000938c:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000938e:	4b55      	ldr	r3, [pc, #340]	; (100094e4 <uart_init+0x184>)
10009390:	4299      	cmp	r1, r3
10009392:	d118      	bne.n	100093c6 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009394:	2009      	movs	r0, #9
10009396:	4c54      	ldr	r4, [pc, #336]	; (100094e8 <uart_init+0x188>)
10009398:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000939a:	200a      	movs	r0, #10
1000939c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000939e:	2009      	movs	r0, #9
100093a0:	4c52      	ldr	r4, [pc, #328]	; (100094ec <uart_init+0x18c>)
100093a2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100093a4:	200a      	movs	r0, #10
100093a6:	47a0      	blx	r4
		_uart_instances[0] = module;
100093a8:	4b51      	ldr	r3, [pc, #324]	; (100094f0 <uart_init+0x190>)
100093aa:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100093ac:	4951      	ldr	r1, [pc, #324]	; (100094f4 <uart_init+0x194>)
100093ae:	2010      	movs	r0, #16
100093b0:	4c51      	ldr	r4, [pc, #324]	; (100094f8 <uart_init+0x198>)
100093b2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
100093b4:	4951      	ldr	r1, [pc, #324]	; (100094fc <uart_init+0x19c>)
100093b6:	2011      	movs	r0, #17
100093b8:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100093ba:	4b51      	ldr	r3, [pc, #324]	; (10009500 <uart_init+0x1a0>)
100093bc:	2201      	movs	r2, #1
100093be:	601a      	str	r2, [r3, #0]
100093c0:	3201      	adds	r2, #1
100093c2:	601a      	str	r2, [r3, #0]
100093c4:	e01a      	b.n	100093fc <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
100093c6:	4b4f      	ldr	r3, [pc, #316]	; (10009504 <uart_init+0x1a4>)
100093c8:	4299      	cmp	r1, r3
100093ca:	d117      	bne.n	100093fc <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
100093cc:	200b      	movs	r0, #11
100093ce:	4c46      	ldr	r4, [pc, #280]	; (100094e8 <uart_init+0x188>)
100093d0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
100093d2:	200c      	movs	r0, #12
100093d4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
100093d6:	200b      	movs	r0, #11
100093d8:	4c44      	ldr	r4, [pc, #272]	; (100094ec <uart_init+0x18c>)
100093da:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
100093dc:	200c      	movs	r0, #12
100093de:	47a0      	blx	r4
		_uart_instances[1] = module;
100093e0:	4b43      	ldr	r3, [pc, #268]	; (100094f0 <uart_init+0x190>)
100093e2:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100093e4:	4948      	ldr	r1, [pc, #288]	; (10009508 <uart_init+0x1a8>)
100093e6:	2012      	movs	r0, #18
100093e8:	4c43      	ldr	r4, [pc, #268]	; (100094f8 <uart_init+0x198>)
100093ea:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100093ec:	4947      	ldr	r1, [pc, #284]	; (1000950c <uart_init+0x1ac>)
100093ee:	2013      	movs	r0, #19
100093f0:	47a0      	blx	r4
100093f2:	4b43      	ldr	r3, [pc, #268]	; (10009500 <uart_init+0x1a0>)
100093f4:	2204      	movs	r2, #4
100093f6:	601a      	str	r2, [r3, #0]
100093f8:	3204      	adds	r2, #4
100093fa:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100093fc:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
100093fe:	2204      	movs	r2, #4
10009400:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009402:	2b00      	cmp	r3, #0
10009404:	d152      	bne.n	100094ac <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009406:	3302      	adds	r3, #2
10009408:	4698      	mov	r8, r3
1000940a:	e04f      	b.n	100094ac <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000940c:	8a31      	ldrh	r1, [r6, #16]
1000940e:	ce01      	ldmia	r6!, {r0}
10009410:	b2c0      	uxtb	r0, r0
10009412:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009414:	3401      	adds	r4, #1
10009416:	b2e4      	uxtb	r4, r4
10009418:	4544      	cmp	r4, r8
1000941a:	d3f7      	bcc.n	1000940c <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000941c:	682b      	ldr	r3, [r5, #0]
1000941e:	7d1a      	ldrb	r2, [r3, #20]
10009420:	07d2      	lsls	r2, r2, #31
10009422:	d504      	bpl.n	1000942e <uart_init+0xce>
10009424:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009426:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009428:	7d1a      	ldrb	r2, [r3, #20]
1000942a:	420a      	tst	r2, r1
1000942c:	d1fb      	bne.n	10009426 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000942e:	2100      	movs	r1, #0
10009430:	2220      	movs	r2, #32
10009432:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009434:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009436:	1e59      	subs	r1, r3, #1
10009438:	418b      	sbcs	r3, r1
1000943a:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000943c:	793b      	ldrb	r3, [r7, #4]
1000943e:	797a      	ldrb	r2, [r7, #5]
10009440:	4313      	orrs	r3, r2
10009442:	430b      	orrs	r3, r1
	switch(config->parity) {
10009444:	79ba      	ldrb	r2, [r7, #6]
10009446:	2a02      	cmp	r2, #2
10009448:	d00d      	beq.n	10009466 <uart_init+0x106>
1000944a:	b2d1      	uxtb	r1, r2
1000944c:	2902      	cmp	r1, #2
1000944e:	d802      	bhi.n	10009456 <uart_init+0xf6>
10009450:	2a01      	cmp	r2, #1
10009452:	d005      	beq.n	10009460 <uart_init+0x100>
10009454:	e00f      	b.n	10009476 <uart_init+0x116>
10009456:	2a03      	cmp	r2, #3
10009458:	d008      	beq.n	1000946c <uart_init+0x10c>
1000945a:	2a04      	cmp	r2, #4
1000945c:	d009      	beq.n	10009472 <uart_init+0x112>
1000945e:	e00a      	b.n	10009476 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009460:	2202      	movs	r2, #2
10009462:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009464:	e007      	b.n	10009476 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10009466:	2206      	movs	r2, #6
10009468:	4313      	orrs	r3, r2
			break;
1000946a:	e004      	b.n	10009476 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
1000946c:	220a      	movs	r2, #10
1000946e:	4313      	orrs	r3, r2
			break;
10009470:	e001      	b.n	10009476 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009472:	220e      	movs	r2, #14
10009474:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009476:	2220      	movs	r2, #32
10009478:	6829      	ldr	r1, [r5, #0]
1000947a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000947c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000947e:	4b24      	ldr	r3, [pc, #144]	; (10009510 <uart_init+0x1b0>)
10009480:	4798      	blx	r3
10009482:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009484:	0031      	movs	r1, r6
10009486:	4b23      	ldr	r3, [pc, #140]	; (10009514 <uart_init+0x1b4>)
10009488:	4798      	blx	r3
1000948a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000948c:	0400      	lsls	r0, r0, #16
1000948e:	0c00      	lsrs	r0, r0, #16
10009490:	4370      	muls	r0, r6
10009492:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009494:	0931      	lsrs	r1, r6, #4
10009496:	4288      	cmp	r0, r1
10009498:	d906      	bls.n	100094a8 <uart_init+0x148>
1000949a:	2300      	movs	r3, #0
		i++;
1000949c:	3301      	adds	r3, #1
1000949e:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100094a0:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100094a2:	4288      	cmp	r0, r1
100094a4:	d8fa      	bhi.n	1000949c <uart_init+0x13c>
100094a6:	e007      	b.n	100094b8 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100094a8:	2300      	movs	r3, #0
100094aa:	e005      	b.n	100094b8 <uart_init+0x158>
100094ac:	003e      	movs	r6, r7
100094ae:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100094b0:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100094b2:	4b19      	ldr	r3, [pc, #100]	; (10009518 <uart_init+0x1b8>)
100094b4:	4699      	mov	r9, r3
100094b6:	e7a9      	b.n	1000940c <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
100094b8:	2100      	movs	r1, #0
100094ba:	2028      	movs	r0, #40	; 0x28
100094bc:	682c      	ldr	r4, [r5, #0]
100094be:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
100094c0:	3301      	adds	r3, #1
100094c2:	071b      	lsls	r3, r3, #28
100094c4:	0f5b      	lsrs	r3, r3, #29
100094c6:	00d2      	lsls	r2, r2, #3
100094c8:	4313      	orrs	r3, r2
100094ca:	b29b      	uxth	r3, r3
100094cc:	682a      	ldr	r2, [r5, #0]
100094ce:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
100094d0:	682b      	ldr	r3, [r5, #0]
100094d2:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
100094d4:	682b      	ldr	r3, [r5, #0]
100094d6:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
100094d8:	2000      	movs	r0, #0
100094da:	bc0c      	pop	{r2, r3}
100094dc:	4690      	mov	r8, r2
100094de:	4699      	mov	r9, r3
100094e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100094e2:	46c0      	nop			; (mov r8, r8)
100094e4:	40004000 	.word	0x40004000
100094e8:	10008c95 	.word	0x10008c95
100094ec:	10008939 	.word	0x10008939
100094f0:	10016e3c 	.word	0x10016e3c
100094f4:	1000910d 	.word	0x1000910d
100094f8:	100090fd 	.word	0x100090fd
100094fc:	10009195 	.word	0x10009195
10009500:	e000e100 	.word	0xe000e100
10009504:	40005000 	.word	0x40005000
10009508:	10009221 	.word	0x10009221
1000950c:	100092a9 	.word	0x100092a9
10009510:	1000892d 	.word	0x1000892d
10009514:	100107b1 	.word	0x100107b1
10009518:	1000875d 	.word	0x1000875d

1000951c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000951c:	6802      	ldr	r2, [r0, #0]
1000951e:	2001      	movs	r0, #1
10009520:	7913      	ldrb	r3, [r2, #4]
10009522:	4203      	tst	r3, r0
10009524:	d0fc      	beq.n	10009520 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009526:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009528:	2000      	movs	r0, #0
1000952a:	4770      	bx	lr

1000952c <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000952c:	6802      	ldr	r2, [r0, #0]
1000952e:	2001      	movs	r0, #1
10009530:	7d13      	ldrb	r3, [r2, #20]
10009532:	4203      	tst	r3, r0
10009534:	d0fc      	beq.n	10009530 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009536:	7c13      	ldrb	r3, [r2, #16]
10009538:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000953a:	2000      	movs	r0, #0
1000953c:	4770      	bx	lr
1000953e:	46c0      	nop			; (mov r8, r8)

10009540 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009540:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009542:	2a00      	cmp	r2, #0
10009544:	d00d      	beq.n	10009562 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009546:	330b      	adds	r3, #11
10009548:	5cc3      	ldrb	r3, [r0, r3]
1000954a:	b2db      	uxtb	r3, r3
1000954c:	2b05      	cmp	r3, #5
1000954e:	d008      	beq.n	10009562 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009550:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009552:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009554:	2205      	movs	r2, #5
10009556:	2322      	movs	r3, #34	; 0x22
10009558:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000955a:	6803      	ldr	r3, [r0, #0]
1000955c:	3a04      	subs	r2, #4
1000955e:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009560:	2300      	movs	r3, #0
}
10009562:	0018      	movs	r0, r3
10009564:	4770      	bx	lr
10009566:	46c0      	nop			; (mov r8, r8)

10009568 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009568:	0093      	lsls	r3, r2, #2
1000956a:	18c3      	adds	r3, r0, r3
1000956c:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000956e:	2120      	movs	r1, #32
10009570:	2301      	movs	r3, #1
10009572:	4093      	lsls	r3, r2
10009574:	5c42      	ldrb	r2, [r0, r1]
10009576:	4313      	orrs	r3, r2
10009578:	5443      	strb	r3, [r0, r1]
}
1000957a:	4770      	bx	lr

1000957c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000957c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000957e:	2221      	movs	r2, #33	; 0x21
10009580:	2301      	movs	r3, #1
10009582:	408b      	lsls	r3, r1
10009584:	5c84      	ldrb	r4, [r0, r2]
10009586:	4323      	orrs	r3, r4
10009588:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000958a:	2901      	cmp	r1, #1
1000958c:	d104      	bne.n	10009598 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000958e:	6802      	ldr	r2, [r0, #0]
10009590:	7a11      	ldrb	r1, [r2, #8]
10009592:	2320      	movs	r3, #32
10009594:	430b      	orrs	r3, r1
10009596:	7213      	strb	r3, [r2, #8]
	}
}
10009598:	bd10      	pop	{r4, pc}
1000959a:	46c0      	nop			; (mov r8, r8)

1000959c <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000959c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000959e:	2201      	movs	r2, #1
100095a0:	408a      	lsls	r2, r1
100095a2:	2421      	movs	r4, #33	; 0x21
100095a4:	5d03      	ldrb	r3, [r0, r4]
100095a6:	4393      	bics	r3, r2
100095a8:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
100095aa:	2901      	cmp	r1, #1
100095ac:	d104      	bne.n	100095b8 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100095ae:	6802      	ldr	r2, [r0, #0]
100095b0:	7a13      	ldrb	r3, [r2, #8]
100095b2:	311f      	adds	r1, #31
100095b4:	438b      	bics	r3, r1
100095b6:	7213      	strb	r3, [r2, #8]
	}

}
100095b8:	bd10      	pop	{r4, pc}
100095ba:	46c0      	nop			; (mov r8, r8)

100095bc <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100095bc:	6802      	ldr	r2, [r0, #0]
100095be:	7a11      	ldrb	r1, [r2, #8]
100095c0:	2310      	movs	r3, #16
100095c2:	430b      	orrs	r3, r1
100095c4:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
100095c6:	6803      	ldr	r3, [r0, #0]
100095c8:	4a07      	ldr	r2, [pc, #28]	; (100095e8 <uart_enable_transmit_dma+0x2c>)
100095ca:	4293      	cmp	r3, r2
100095cc:	d104      	bne.n	100095d8 <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100095ce:	2102      	movs	r1, #2
100095d0:	2380      	movs	r3, #128	; 0x80
100095d2:	4a06      	ldr	r2, [pc, #24]	; (100095ec <uart_enable_transmit_dma+0x30>)
100095d4:	50d1      	str	r1, [r2, r3]
100095d6:	e006      	b.n	100095e6 <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
100095d8:	4a05      	ldr	r2, [pc, #20]	; (100095f0 <uart_enable_transmit_dma+0x34>)
100095da:	4293      	cmp	r3, r2
100095dc:	d103      	bne.n	100095e6 <uart_enable_transmit_dma+0x2a>
100095de:	2108      	movs	r1, #8
100095e0:	2380      	movs	r3, #128	; 0x80
100095e2:	4a02      	ldr	r2, [pc, #8]	; (100095ec <uart_enable_transmit_dma+0x30>)
100095e4:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
100095e6:	4770      	bx	lr
100095e8:	40004000 	.word	0x40004000
100095ec:	e000e100 	.word	0xe000e100
100095f0:	40005000 	.word	0x40005000

100095f4 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100095f4:	6802      	ldr	r2, [r0, #0]
100095f6:	7e11      	ldrb	r1, [r2, #24]
100095f8:	2301      	movs	r3, #1
100095fa:	430b      	orrs	r3, r1
100095fc:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
100095fe:	6803      	ldr	r3, [r0, #0]
10009600:	4a07      	ldr	r2, [pc, #28]	; (10009620 <uart_enable_receive_dma+0x2c>)
10009602:	4293      	cmp	r3, r2
10009604:	d104      	bne.n	10009610 <uart_enable_receive_dma+0x1c>
10009606:	2102      	movs	r1, #2
10009608:	2380      	movs	r3, #128	; 0x80
1000960a:	4a06      	ldr	r2, [pc, #24]	; (10009624 <uart_enable_receive_dma+0x30>)
1000960c:	50d1      	str	r1, [r2, r3]
1000960e:	e006      	b.n	1000961e <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009610:	4a05      	ldr	r2, [pc, #20]	; (10009628 <uart_enable_receive_dma+0x34>)
10009612:	4293      	cmp	r3, r2
10009614:	d103      	bne.n	1000961e <uart_enable_receive_dma+0x2a>
10009616:	2108      	movs	r1, #8
10009618:	2380      	movs	r3, #128	; 0x80
1000961a:	4a02      	ldr	r2, [pc, #8]	; (10009624 <uart_enable_receive_dma+0x30>)
1000961c:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
1000961e:	4770      	bx	lr
10009620:	40004000 	.word	0x40004000
10009624:	e000e100 	.word	0xe000e100
10009628:	40005000 	.word	0x40005000

1000962c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000962c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000962e:	4647      	mov	r7, r8
10009630:	b480      	push	{r7}
10009632:	000c      	movs	r4, r1
10009634:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009636:	2800      	cmp	r0, #0
10009638:	d10d      	bne.n	10009656 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000963a:	2a00      	cmp	r2, #0
1000963c:	dd0e      	ble.n	1000965c <_read+0x30>
1000963e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009640:	4e08      	ldr	r6, [pc, #32]	; (10009664 <_read+0x38>)
10009642:	4d09      	ldr	r5, [pc, #36]	; (10009668 <_read+0x3c>)
10009644:	6830      	ldr	r0, [r6, #0]
10009646:	0021      	movs	r1, r4
10009648:	682b      	ldr	r3, [r5, #0]
1000964a:	4798      	blx	r3
		ptr++;
1000964c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000964e:	42a7      	cmp	r7, r4
10009650:	d1f8      	bne.n	10009644 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009652:	4640      	mov	r0, r8
10009654:	e003      	b.n	1000965e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009656:	2001      	movs	r0, #1
10009658:	4240      	negs	r0, r0
1000965a:	e000      	b.n	1000965e <_read+0x32>
	}

	for (; len > 0; --len) {
1000965c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000965e:	bc04      	pop	{r2}
10009660:	4690      	mov	r8, r2
10009662:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009664:	10016e4c 	.word	0x10016e4c
10009668:	10016e44 	.word	0x10016e44

1000966c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000966c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000966e:	4647      	mov	r7, r8
10009670:	b480      	push	{r7}
10009672:	000e      	movs	r6, r1
10009674:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009676:	3801      	subs	r0, #1
10009678:	2802      	cmp	r0, #2
1000967a:	d811      	bhi.n	100096a0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000967c:	2a00      	cmp	r2, #0
1000967e:	d012      	beq.n	100096a6 <_write+0x3a>
10009680:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009682:	4b0c      	ldr	r3, [pc, #48]	; (100096b4 <_write+0x48>)
10009684:	4698      	mov	r8, r3
10009686:	4f0c      	ldr	r7, [pc, #48]	; (100096b8 <_write+0x4c>)
10009688:	4643      	mov	r3, r8
1000968a:	6818      	ldr	r0, [r3, #0]
1000968c:	5d31      	ldrb	r1, [r6, r4]
1000968e:	683b      	ldr	r3, [r7, #0]
10009690:	4798      	blx	r3
10009692:	2800      	cmp	r0, #0
10009694:	db09      	blt.n	100096aa <_write+0x3e>
			return -1;
		}
		++nChars;
10009696:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009698:	42a5      	cmp	r5, r4
1000969a:	d1f5      	bne.n	10009688 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000969c:	0020      	movs	r0, r4
1000969e:	e006      	b.n	100096ae <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100096a0:	2001      	movs	r0, #1
100096a2:	4240      	negs	r0, r0
100096a4:	e003      	b.n	100096ae <_write+0x42>
	}

	for (; len != 0; --len) {
100096a6:	2000      	movs	r0, #0
100096a8:	e001      	b.n	100096ae <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100096aa:	2001      	movs	r0, #1
100096ac:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100096ae:	bc04      	pop	{r2}
100096b0:	4690      	mov	r8, r2
100096b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096b4:	10016e4c 	.word	0x10016e4c
100096b8:	10016e48 	.word	0x10016e48

100096bc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100096bc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100096be:	4a06      	ldr	r2, [pc, #24]	; (100096d8 <_sbrk+0x1c>)
100096c0:	6812      	ldr	r2, [r2, #0]
100096c2:	2a00      	cmp	r2, #0
100096c4:	d102      	bne.n	100096cc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100096c6:	4905      	ldr	r1, [pc, #20]	; (100096dc <_sbrk+0x20>)
100096c8:	4a03      	ldr	r2, [pc, #12]	; (100096d8 <_sbrk+0x1c>)
100096ca:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100096cc:	4a02      	ldr	r2, [pc, #8]	; (100096d8 <_sbrk+0x1c>)
100096ce:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100096d0:	18c3      	adds	r3, r0, r3
100096d2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100096d4:	4770      	bx	lr
100096d6:	46c0      	nop			; (mov r8, r8)
100096d8:	10015394 	.word	0x10015394
100096dc:	10018d28 	.word	0x10018d28

100096e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100096e0:	2001      	movs	r0, #1
100096e2:	4240      	negs	r0, r0
100096e4:	4770      	bx	lr
100096e6:	46c0      	nop			; (mov r8, r8)

100096e8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100096e8:	2380      	movs	r3, #128	; 0x80
100096ea:	019b      	lsls	r3, r3, #6
100096ec:	604b      	str	r3, [r1, #4]

	return 0;
}
100096ee:	2000      	movs	r0, #0
100096f0:	4770      	bx	lr
100096f2:	46c0      	nop			; (mov r8, r8)

100096f4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100096f4:	2001      	movs	r0, #1
100096f6:	4770      	bx	lr

100096f8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100096f8:	2000      	movs	r0, #0
100096fa:	4770      	bx	lr

100096fc <csc_prf_disconnect_event_handler>:
* \CSC device disconnected handler function
*/

at_ble_status_t csc_prf_disconnect_event_handler(void *params)
{
	app_csc_info.devicedb = false;
100096fc:	2200      	movs	r2, #0
100096fe:	4b02      	ldr	r3, [pc, #8]	; (10009708 <csc_prf_disconnect_event_handler+0xc>)
10009700:	719a      	strb	r2, [r3, #6]

	return AT_BLE_SUCCESS;
}
10009702:	2000      	movs	r0, #0
10009704:	4770      	bx	lr
10009706:	46c0      	nop			; (mov r8, r8)
10009708:	10016e50 	.word	0x10016e50

1000970c <csc_notification_confirmation_handler>:
	} else {
		DBG_LOG_DEV("Sending Notification over the air failed");
		DBG_LOG_DEV("\r\n");
	}
	return AT_BLE_SUCCESS;
}
1000970c:	2000      	movs	r0, #0
1000970e:	4770      	bx	lr

10009710 <csc_prf_service_found_handler>:

/**
 * @brief Service found handler invoked by ble manager
 */
at_ble_status_t csc_prf_service_found_handler(void * params)
{
10009710:	b510      	push	{r4, lr}
10009712:	0001      	movs	r1, r0
	DBG_LOG_DEV("Service Found handler");
	memcpy((uint8_t *)&app_csc_info.csc_serv, params, sizeof(at_ble_primary_service_found_t));
10009714:	2218      	movs	r2, #24
10009716:	4802      	ldr	r0, [pc, #8]	; (10009720 <csc_prf_service_found_handler+0x10>)
10009718:	4b02      	ldr	r3, [pc, #8]	; (10009724 <csc_prf_service_found_handler+0x14>)
1000971a:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000971c:	2000      	movs	r0, #0
1000971e:	bd10      	pop	{r4, pc}
10009720:	10016e6a 	.word	0x10016e6a
10009724:	1001310d 	.word	0x1001310d

10009728 <csc_prf_characteristic_found_handler>:

/**
 * @brief characteristic found handler invoked by ble manager
 */
at_ble_status_t csc_prf_characteristic_found_handler(void *params)
{
10009728:	b510      	push	{r4, lr}
1000972a:	0001      	movs	r1, r0
	memcpy((uint8_t *)&app_csc_info.csc_char, params, sizeof(at_ble_characteristic_found_t));
1000972c:	2218      	movs	r2, #24
1000972e:	4802      	ldr	r0, [pc, #8]	; (10009738 <csc_prf_characteristic_found_handler+0x10>)
10009730:	4b02      	ldr	r3, [pc, #8]	; (1000973c <csc_prf_characteristic_found_handler+0x14>)
10009732:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009734:	2000      	movs	r0, #0
10009736:	bd10      	pop	{r4, pc}
10009738:	10016e82 	.word	0x10016e82
1000973c:	1001310d 	.word	0x1001310d

10009740 <csc_prf_descriptor_found_handler>:

/**
 * @brief client descriptor found handler invoked by ble manager
 */
at_ble_status_t csc_prf_descriptor_found_handler(void *params)
{
10009740:	b510      	push	{r4, lr}
10009742:	0001      	movs	r1, r0
		memcpy((uint8_t *)&app_csc_info.csc_desc, params, sizeof(at_ble_descriptor_found_t));
10009744:	2216      	movs	r2, #22
10009746:	4802      	ldr	r0, [pc, #8]	; (10009750 <csc_prf_descriptor_found_handler+0x10>)
10009748:	4b02      	ldr	r3, [pc, #8]	; (10009754 <csc_prf_descriptor_found_handler+0x14>)
1000974a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
}
1000974c:	2000      	movs	r0, #0
1000974e:	bd10      	pop	{r4, pc}
10009750:	10016e9a 	.word	0x10016e9a
10009754:	1001310d 	.word	0x1001310d

10009758 <csc_prf_notification_handler>:

/**
 * @brief invoked by ble manager on receiving notification
 */
at_ble_status_t csc_prf_notification_handler(void *params)
{
10009758:	b580      	push	{r7, lr}
1000975a:	4f0c      	ldr	r7, [pc, #48]	; (1000978c <csc_prf_notification_handler+0x34>)
1000975c:	44bd      	add	sp, r7
1000975e:	0001      	movs	r1, r0
	 at_ble_notification_recieved_t notif;
	 csc_report_ntf_t ntf_info;
	 memcpy((uint8_t *)&notif, params, sizeof(at_ble_notification_recieved_t));
10009760:	4a0b      	ldr	r2, [pc, #44]	; (10009790 <csc_prf_notification_handler+0x38>)
10009762:	a802      	add	r0, sp, #8
10009764:	4b0b      	ldr	r3, [pc, #44]	; (10009794 <csc_prf_notification_handler+0x3c>)
10009766:	4798      	blx	r3
	 ntf_info.conn_handle = notif.conn_handle;
10009768:	466b      	mov	r3, sp
1000976a:	891b      	ldrh	r3, [r3, #8]
1000976c:	466a      	mov	r2, sp
1000976e:	80d3      	strh	r3, [r2, #6]
	 ntf_info.recv_buff_len = notif.char_len;
10009770:	7a93      	ldrb	r3, [r2, #10]
10009772:	7113      	strb	r3, [r2, #4]
	 ntf_info.recv_buff = &notif.char_value[0];
10009774:	230e      	movs	r3, #14
10009776:	446b      	add	r3, sp
10009778:	9300      	str	r3, [sp, #0]
	 recv_ntf_cb(&ntf_info);
1000977a:	4b07      	ldr	r3, [pc, #28]	; (10009798 <csc_prf_notification_handler+0x40>)
1000977c:	681b      	ldr	r3, [r3, #0]
1000977e:	4668      	mov	r0, sp
10009780:	4798      	blx	r3
	 return AT_BLE_SUCCESS;
}
10009782:	2000      	movs	r0, #0
10009784:	2384      	movs	r3, #132	; 0x84
10009786:	009b      	lsls	r3, r3, #2
10009788:	449d      	add	sp, r3
1000978a:	bd80      	pop	{r7, pc}
1000978c:	fffffdf0 	.word	0xfffffdf0
10009790:	00000206 	.word	0x00000206
10009794:	1001310d 	.word	0x1001310d
10009798:	10016eb0 	.word	0x10016eb0

1000979c <csc_prf_char_changed_handler>:
at_ble_status_t csc_prf_char_changed_handler(void *params)
{
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, params, sizeof(at_ble_characteristic_changed_t));
	return AT_BLE_SUCCESS;
}
1000979c:	2000      	movs	r0, #0
1000979e:	4770      	bx	lr

100097a0 <csc_prf_connected_state_handler>:

/**
 * @brief Connection handler invoked by ble manager
 */
at_ble_status_t csc_prf_connected_state_handler(void *params)
{
100097a0:	b510      	push	{r4, lr}
100097a2:	0001      	movs	r1, r0
	at_ble_status_t status;
	memcpy((uint8_t *)&app_csc_info.conn_params, params, sizeof(at_ble_connected_t));
100097a4:	4c13      	ldr	r4, [pc, #76]	; (100097f4 <csc_prf_connected_state_handler+0x54>)
100097a6:	2212      	movs	r2, #18
100097a8:	0020      	movs	r0, r4
100097aa:	4b13      	ldr	r3, [pc, #76]	; (100097f8 <csc_prf_connected_state_handler+0x58>)
100097ac:	4798      	blx	r3
	if(!app_csc_info.devicedb){		
100097ae:	3c08      	subs	r4, #8
100097b0:	79a3      	ldrb	r3, [r4, #6]
100097b2:	2b00      	cmp	r3, #0
100097b4:	d11b      	bne.n	100097ee <csc_prf_connected_state_handler+0x4e>
		app_csc_info.discover_role = DISCOVER_SERVICE;	
100097b6:	4c11      	ldr	r4, [pc, #68]	; (100097fc <csc_prf_connected_state_handler+0x5c>)
100097b8:	3301      	adds	r3, #1
100097ba:	71e3      	strb	r3, [r4, #7]
		app_csc_info.csc_serv.service_uuid.type = AT_BLE_UUID_128;
100097bc:	2202      	movs	r2, #2
100097be:	331f      	adds	r3, #31
100097c0:	54e2      	strb	r2, [r4, r3]
		memcpy(&app_csc_info.csc_serv.service_uuid.uuid[0], CSC_SERVICE_UUID, CSC_UUID_128_LEN);
100097c2:	0020      	movs	r0, r4
100097c4:	3021      	adds	r0, #33	; 0x21
100097c6:	320e      	adds	r2, #14
100097c8:	490d      	ldr	r1, [pc, #52]	; (10009800 <csc_prf_connected_state_handler+0x60>)
100097ca:	4b0b      	ldr	r3, [pc, #44]	; (100097f8 <csc_prf_connected_state_handler+0x58>)
100097cc:	4798      	blx	r3
		/* Discover Remote Service by service UUID */
		status = at_ble_primary_service_discover_by_uuid(app_csc_info.conn_params.handle,START_HANDLE, END_HANDLE, &app_csc_info.csc_serv.service_uuid);
100097ce:	0023      	movs	r3, r4
100097d0:	3320      	adds	r3, #32
100097d2:	8a20      	ldrh	r0, [r4, #16]
100097d4:	4a0b      	ldr	r2, [pc, #44]	; (10009804 <csc_prf_connected_state_handler+0x64>)
100097d6:	2101      	movs	r1, #1
100097d8:	4c0b      	ldr	r4, [pc, #44]	; (10009808 <csc_prf_connected_state_handler+0x68>)
100097da:	47a0      	blx	r4
100097dc:	1e04      	subs	r4, r0, #0
		if(status != AT_BLE_SUCCESS){
100097de:	d006      	beq.n	100097ee <csc_prf_connected_state_handler+0x4e>
			DBG_LOG("Failed to start service discovery. status = %d", status);
100097e0:	480a      	ldr	r0, [pc, #40]	; (1000980c <csc_prf_connected_state_handler+0x6c>)
100097e2:	4b0b      	ldr	r3, [pc, #44]	; (10009810 <csc_prf_connected_state_handler+0x70>)
100097e4:	4798      	blx	r3
100097e6:	0021      	movs	r1, r4
100097e8:	480a      	ldr	r0, [pc, #40]	; (10009814 <csc_prf_connected_state_handler+0x74>)
100097ea:	4b0b      	ldr	r3, [pc, #44]	; (10009818 <csc_prf_connected_state_handler+0x78>)
100097ec:	4798      	blx	r3
		} else {
			DBG_LOG_DEV("Started service discovery");
		}		
	}
	return AT_BLE_SUCCESS;
}
100097ee:	2000      	movs	r0, #0
100097f0:	bd10      	pop	{r4, pc}
100097f2:	46c0      	nop			; (mov r8, r8)
100097f4:	10016e58 	.word	0x10016e58
100097f8:	1001310d 	.word	0x1001310d
100097fc:	10016e50 	.word	0x10016e50
10009800:	100145ec 	.word	0x100145ec
10009804:	0000ffff 	.word	0x0000ffff
10009808:	1000cd41 	.word	0x1000cd41
1000980c:	10014674 	.word	0x10014674
10009810:	10013251 	.word	0x10013251
10009814:	10014678 	.word	0x10014678
10009818:	10013131 	.word	0x10013131

1000981c <csc_prf_discovery_complete_handler>:

/**
 * @brief Discovery Complete handler invoked by ble manager
 */
at_ble_status_t csc_prf_discovery_complete_handler(void *params)
{
1000981c:	b510      	push	{r4, lr}
1000981e:	b082      	sub	sp, #8
10009820:	0001      	movs	r1, r0
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
10009822:	ac01      	add	r4, sp, #4
10009824:	2204      	movs	r2, #4
10009826:	0020      	movs	r0, r4
10009828:	4b19      	ldr	r3, [pc, #100]	; (10009890 <csc_prf_discovery_complete_handler+0x74>)
1000982a:	4798      	blx	r3
		if(discover_status.status == AT_DISCOVER_SUCCESS){
1000982c:	78e3      	ldrb	r3, [r4, #3]
1000982e:	2b0a      	cmp	r3, #10
10009830:	d12a      	bne.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
10009832:	ab01      	add	r3, sp, #4
10009834:	789b      	ldrb	r3, [r3, #2]
10009836:	2b03      	cmp	r3, #3
10009838:	d10e      	bne.n	10009858 <csc_prf_discovery_complete_handler+0x3c>
				DBG_LOG_DEV("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x",
				app_csc_info.csc_serv.conn_handle,
				app_csc_info.csc_serv.start_handle,
				app_csc_info.csc_serv.end_handle);				
				if(at_ble_characteristic_discover_all(app_csc_info.conn_params.handle, app_csc_info.csc_serv.start_handle, app_csc_info.csc_serv.end_handle) != AT_BLE_SUCCESS){
1000983a:	4b16      	ldr	r3, [pc, #88]	; (10009894 <csc_prf_discovery_complete_handler+0x78>)
1000983c:	8bda      	ldrh	r2, [r3, #30]
1000983e:	8b99      	ldrh	r1, [r3, #28]
10009840:	8a18      	ldrh	r0, [r3, #16]
10009842:	4b15      	ldr	r3, [pc, #84]	; (10009898 <csc_prf_discovery_complete_handler+0x7c>)
10009844:	4798      	blx	r3
10009846:	2800      	cmp	r0, #0
10009848:	d01e      	beq.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
					DBG_LOG("Fail to start discover characteristic");
1000984a:	4814      	ldr	r0, [pc, #80]	; (1000989c <csc_prf_discovery_complete_handler+0x80>)
1000984c:	4b14      	ldr	r3, [pc, #80]	; (100098a0 <csc_prf_discovery_complete_handler+0x84>)
1000984e:	4798      	blx	r3
10009850:	4814      	ldr	r0, [pc, #80]	; (100098a4 <csc_prf_discovery_complete_handler+0x88>)
10009852:	4b15      	ldr	r3, [pc, #84]	; (100098a8 <csc_prf_discovery_complete_handler+0x8c>)
10009854:	4798      	blx	r3
10009856:	e017      	b.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_ALL_CHAR){
10009858:	2b05      	cmp	r3, #5
1000985a:	d110      	bne.n	1000987e <csc_prf_discovery_complete_handler+0x62>
				if(at_ble_descriptor_discover_all(app_csc_info.csc_char.conn_handle,(app_csc_info.csc_char.value_handle+1), (app_csc_info.csc_serv.end_handle)) != AT_BLE_SUCCESS){
1000985c:	4b0d      	ldr	r3, [pc, #52]	; (10009894 <csc_prf_discovery_complete_handler+0x78>)
1000985e:	8bda      	ldrh	r2, [r3, #30]
10009860:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
10009862:	3101      	adds	r1, #1
10009864:	b289      	uxth	r1, r1
10009866:	8e58      	ldrh	r0, [r3, #50]	; 0x32
10009868:	4b10      	ldr	r3, [pc, #64]	; (100098ac <csc_prf_discovery_complete_handler+0x90>)
1000986a:	4798      	blx	r3
1000986c:	2800      	cmp	r0, #0
1000986e:	d00b      	beq.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
					DBG_LOG("Descriptor Discovery Failed");
10009870:	480a      	ldr	r0, [pc, #40]	; (1000989c <csc_prf_discovery_complete_handler+0x80>)
10009872:	4b0b      	ldr	r3, [pc, #44]	; (100098a0 <csc_prf_discovery_complete_handler+0x84>)
10009874:	4798      	blx	r3
10009876:	480e      	ldr	r0, [pc, #56]	; (100098b0 <csc_prf_discovery_complete_handler+0x94>)
10009878:	4b0b      	ldr	r3, [pc, #44]	; (100098a8 <csc_prf_discovery_complete_handler+0x8c>)
1000987a:	4798      	blx	r3
1000987c:	e004      	b.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_DESC_CHAR){
1000987e:	2b07      	cmp	r3, #7
10009880:	d102      	bne.n	10009888 <csc_prf_discovery_complete_handler+0x6c>
				app_csc_info.devicedb = true;
10009882:	2201      	movs	r2, #1
10009884:	4b03      	ldr	r3, [pc, #12]	; (10009894 <csc_prf_discovery_complete_handler+0x78>)
10009886:	719a      	strb	r2, [r3, #6]
			}
		}
		return AT_BLE_SUCCESS;
}
10009888:	2000      	movs	r0, #0
1000988a:	b002      	add	sp, #8
1000988c:	bd10      	pop	{r4, pc}
1000988e:	46c0      	nop			; (mov r8, r8)
10009890:	1001310d 	.word	0x1001310d
10009894:	10016e50 	.word	0x10016e50
10009898:	1000cd99 	.word	0x1000cd99
1000989c:	10014674 	.word	0x10014674
100098a0:	10013251 	.word	0x10013251
100098a4:	100146a8 	.word	0x100146a8
100098a8:	10013131 	.word	0x10013131
100098ac:	1000cdc1 	.word	0x1000cdc1
100098b0:	100146d0 	.word	0x100146d0

100098b4 <csc_prf_write_notification_handler>:

/**
 * @brief invoked by ble manager for setting the notification 
 */
at_ble_status_t csc_prf_write_notification_handler(void *params)
{
100098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100098b6:	b087      	sub	sp, #28
	uint8_t data[2] = {1, 0};
100098b8:	ac05      	add	r4, sp, #20
100098ba:	2601      	movs	r6, #1
100098bc:	7026      	strb	r6, [r4, #0]
100098be:	2500      	movs	r5, #0
100098c0:	7065      	strb	r5, [r4, #1]
	DBG_LOG("\r\n");
100098c2:	480e      	ldr	r0, [pc, #56]	; (100098fc <csc_prf_write_notification_handler+0x48>)
100098c4:	4f0e      	ldr	r7, [pc, #56]	; (10009900 <csc_prf_write_notification_handler+0x4c>)
100098c6:	47b8      	blx	r7
100098c8:	480c      	ldr	r0, [pc, #48]	; (100098fc <csc_prf_write_notification_handler+0x48>)
100098ca:	47b8      	blx	r7
	if(at_ble_characteristic_write(app_csc_info.csc_desc.conn_handle, app_csc_info.csc_desc.desc_handle, 0, 2, data, false, true) == AT_BLE_FAILURE){
100098cc:	4b0d      	ldr	r3, [pc, #52]	; (10009904 <csc_prf_write_notification_handler+0x50>)
100098ce:	224c      	movs	r2, #76	; 0x4c
100098d0:	5a99      	ldrh	r1, [r3, r2]
100098d2:	3a02      	subs	r2, #2
100098d4:	5a98      	ldrh	r0, [r3, r2]
100098d6:	9602      	str	r6, [sp, #8]
100098d8:	9501      	str	r5, [sp, #4]
100098da:	9400      	str	r4, [sp, #0]
100098dc:	2302      	movs	r3, #2
100098de:	2200      	movs	r2, #0
100098e0:	4c09      	ldr	r4, [pc, #36]	; (10009908 <csc_prf_write_notification_handler+0x54>)
100098e2:	47a0      	blx	r4
100098e4:	28e2      	cmp	r0, #226	; 0xe2
100098e6:	d105      	bne.n	100098f4 <csc_prf_write_notification_handler+0x40>
		DBG_LOG("\r\nFailed to send characteristic Write Request");
100098e8:	4804      	ldr	r0, [pc, #16]	; (100098fc <csc_prf_write_notification_handler+0x48>)
100098ea:	4b05      	ldr	r3, [pc, #20]	; (10009900 <csc_prf_write_notification_handler+0x4c>)
100098ec:	4798      	blx	r3
100098ee:	4807      	ldr	r0, [pc, #28]	; (1000990c <csc_prf_write_notification_handler+0x58>)
100098f0:	4b07      	ldr	r3, [pc, #28]	; (10009910 <csc_prf_write_notification_handler+0x5c>)
100098f2:	4798      	blx	r3
	}

	return AT_BLE_SUCCESS;
}
100098f4:	2000      	movs	r0, #0
100098f6:	b007      	add	sp, #28
100098f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100098fa:	46c0      	nop			; (mov r8, r8)
100098fc:	10014674 	.word	0x10014674
10009900:	10013251 	.word	0x10013251
10009904:	10016e50 	.word	0x10016e50
10009908:	1000cde9 	.word	0x1000cde9
1000990c:	100146ec 	.word	0x100146ec
10009910:	10013131 	.word	0x10013131

10009914 <csc_prf_buf_init>:
/**
* \CSC buffer initialization function
*/
void csc_prf_buf_init(uint8_t *databuf, uint16_t datalen)
{
	app_csc_info.buff_ptr = databuf;
10009914:	4b01      	ldr	r3, [pc, #4]	; (1000991c <csc_prf_buf_init+0x8>)
10009916:	6018      	str	r0, [r3, #0]
	app_csc_info.buff_len = datalen;
10009918:	8099      	strh	r1, [r3, #4]
}
1000991a:	4770      	bx	lr
1000991c:	10016e50 	.word	0x10016e50

10009920 <csc_prf_init>:

/**
* \CSC profile initialization function
*/
void csc_prf_init(void *param)
{ 
10009920:	b510      	push	{r4, lr}
	at_ble_status_t status;
	csc_serv_init(app_csc_info.buff_ptr, app_csc_info.buff_len);
10009922:	4b0f      	ldr	r3, [pc, #60]	; (10009960 <csc_prf_init+0x40>)
10009924:	8899      	ldrh	r1, [r3, #4]
10009926:	6818      	ldr	r0, [r3, #0]
10009928:	4b0e      	ldr	r3, [pc, #56]	; (10009964 <csc_prf_init+0x44>)
1000992a:	4798      	blx	r3
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000992c:	4a0e      	ldr	r2, [pc, #56]	; (10009968 <csc_prf_init+0x48>)
1000992e:	2100      	movs	r1, #0
10009930:	2000      	movs	r0, #0
10009932:	4c0e      	ldr	r4, [pc, #56]	; (1000996c <csc_prf_init+0x4c>)
10009934:	47a0      	blx	r4
	BLE_GAP_EVENT_TYPE,
	csc_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009936:	4a0e      	ldr	r2, [pc, #56]	; (10009970 <csc_prf_init+0x50>)
10009938:	2101      	movs	r1, #1
1000993a:	2000      	movs	r0, #0
1000993c:	47a0      	blx	r4
	BLE_GATT_CLIENT_EVENT_TYPE,
	csc_gatt_client_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000993e:	4a0d      	ldr	r2, [pc, #52]	; (10009974 <csc_prf_init+0x54>)
10009940:	2102      	movs	r1, #2
10009942:	2000      	movs	r0, #0
10009944:	47a0      	blx	r4
	BLE_GATT_SERVER_EVENT_TYPE,
	csc_gatt_server_handle);
	
	status = ble_advertisement_data_set();
10009946:	4b0c      	ldr	r3, [pc, #48]	; (10009978 <csc_prf_init+0x58>)
10009948:	4798      	blx	r3
1000994a:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS) {
1000994c:	d006      	beq.n	1000995c <csc_prf_init+0x3c>
		DBG_LOG("Advertisement data set failed reason %d",status);
1000994e:	480b      	ldr	r0, [pc, #44]	; (1000997c <csc_prf_init+0x5c>)
10009950:	4b0b      	ldr	r3, [pc, #44]	; (10009980 <csc_prf_init+0x60>)
10009952:	4798      	blx	r3
10009954:	0021      	movs	r1, r4
10009956:	480b      	ldr	r0, [pc, #44]	; (10009984 <csc_prf_init+0x64>)
10009958:	4b0b      	ldr	r3, [pc, #44]	; (10009988 <csc_prf_init+0x68>)
1000995a:	4798      	blx	r3
	}
}
1000995c:	bd10      	pop	{r4, pc}
1000995e:	46c0      	nop			; (mov r8, r8)
10009960:	10016e50 	.word	0x10016e50
10009964:	1000abfd 	.word	0x1000abfd
10009968:	10014628 	.word	0x10014628
1000996c:	1000a309 	.word	0x1000a309
10009970:	10014600 	.word	0x10014600
10009974:	10014780 	.word	0x10014780
10009978:	1000ab4d 	.word	0x1000ab4d
1000997c:	10014674 	.word	0x10014674
10009980:	10013251 	.word	0x10013251
10009984:	1001471c 	.word	0x1001471c
10009988:	10013131 	.word	0x10013131

1000998c <csc_prf_send_data>:

/**
* \CSC profile send data function
*/
void csc_prf_send_data(uint8_t *databuf, uint16_t datalen)
{
1000998c:	b510      	push	{r4, lr}
1000998e:	0003      	movs	r3, r0
	if(datalen <= app_csc_info.buff_len){
10009990:	4a08      	ldr	r2, [pc, #32]	; (100099b4 <csc_prf_send_data+0x28>)
10009992:	8892      	ldrh	r2, [r2, #4]
10009994:	428a      	cmp	r2, r1
10009996:	d306      	bcc.n	100099a6 <csc_prf_send_data+0x1a>
		csc_serv_send_data(app_csc_info.conn_params.handle, databuf, datalen);
10009998:	4a06      	ldr	r2, [pc, #24]	; (100099b4 <csc_prf_send_data+0x28>)
1000999a:	8a10      	ldrh	r0, [r2, #16]
1000999c:	000a      	movs	r2, r1
1000999e:	0019      	movs	r1, r3
100099a0:	4b05      	ldr	r3, [pc, #20]	; (100099b8 <csc_prf_send_data+0x2c>)
100099a2:	4798      	blx	r3
100099a4:	e004      	b.n	100099b0 <csc_prf_send_data+0x24>
	}else{
		csc_serv_send_data(app_csc_info.conn_params.handle, databuf, app_csc_info.buff_len);
100099a6:	4903      	ldr	r1, [pc, #12]	; (100099b4 <csc_prf_send_data+0x28>)
100099a8:	8a08      	ldrh	r0, [r1, #16]
100099aa:	0019      	movs	r1, r3
100099ac:	4b02      	ldr	r3, [pc, #8]	; (100099b8 <csc_prf_send_data+0x2c>)
100099ae:	4798      	blx	r3
	}
}
100099b0:	bd10      	pop	{r4, pc}
100099b2:	46c0      	nop			; (mov r8, r8)
100099b4:	10016e50 	.word	0x10016e50
100099b8:	1000ac79 	.word	0x1000ac79

100099bc <csc_prf_dev_adv>:

/**
* \CSC device advertisement handler function
*/
void csc_prf_dev_adv(void)
{
100099bc:	b510      	push	{r4, lr}
100099be:	b084      	sub	sp, #16
	/* Start of advertisement */
	if(at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_CSC_FAST_ADV, APP_CSC_ADV_TIMEOUT, 0) == AT_BLE_SUCCESS){
100099c0:	2300      	movs	r3, #0
100099c2:	9302      	str	r3, [sp, #8]
100099c4:	4b0d      	ldr	r3, [pc, #52]	; (100099fc <csc_prf_dev_adv+0x40>)
100099c6:	9301      	str	r3, [sp, #4]
100099c8:	23c8      	movs	r3, #200	; 0xc8
100099ca:	00db      	lsls	r3, r3, #3
100099cc:	9300      	str	r3, [sp, #0]
100099ce:	2300      	movs	r3, #0
100099d0:	2200      	movs	r2, #0
100099d2:	2101      	movs	r1, #1
100099d4:	2000      	movs	r0, #0
100099d6:	4c0a      	ldr	r4, [pc, #40]	; (10009a00 <csc_prf_dev_adv+0x44>)
100099d8:	47a0      	blx	r4
100099da:	2800      	cmp	r0, #0
100099dc:	d106      	bne.n	100099ec <csc_prf_dev_adv+0x30>
		DBG_LOG("Device Started Advertisement");
100099de:	4809      	ldr	r0, [pc, #36]	; (10009a04 <csc_prf_dev_adv+0x48>)
100099e0:	4b09      	ldr	r3, [pc, #36]	; (10009a08 <csc_prf_dev_adv+0x4c>)
100099e2:	4798      	blx	r3
100099e4:	4809      	ldr	r0, [pc, #36]	; (10009a0c <csc_prf_dev_adv+0x50>)
100099e6:	4b0a      	ldr	r3, [pc, #40]	; (10009a10 <csc_prf_dev_adv+0x54>)
100099e8:	4798      	blx	r3
100099ea:	e005      	b.n	100099f8 <csc_prf_dev_adv+0x3c>
	}else{
		DBG_LOG("Device Advertisement Failed");
100099ec:	4805      	ldr	r0, [pc, #20]	; (10009a04 <csc_prf_dev_adv+0x48>)
100099ee:	4b06      	ldr	r3, [pc, #24]	; (10009a08 <csc_prf_dev_adv+0x4c>)
100099f0:	4798      	blx	r3
100099f2:	4808      	ldr	r0, [pc, #32]	; (10009a14 <csc_prf_dev_adv+0x58>)
100099f4:	4b06      	ldr	r3, [pc, #24]	; (10009a10 <csc_prf_dev_adv+0x54>)
100099f6:	4798      	blx	r3
	}
}
100099f8:	b004      	add	sp, #16
100099fa:	bd10      	pop	{r4, pc}
100099fc:	0000028f 	.word	0x0000028f
10009a00:	1000cb5d 	.word	0x1000cb5d
10009a04:	10014674 	.word	0x10014674
10009a08:	10013251 	.word	0x10013251
10009a0c:	10014744 	.word	0x10014744
10009a10:	10013131 	.word	0x10013131
10009a14:	10014764 	.word	0x10014764

10009a18 <notify_recv_ntf_handler>:
/**
* \Notify to user about the new data received
*/
void notify_recv_ntf_handler(recv_ntf_callback_t recv_ntf_fn)
{
	recv_ntf_cb = recv_ntf_fn;
10009a18:	4b01      	ldr	r3, [pc, #4]	; (10009a20 <notify_recv_ntf_handler+0x8>)
10009a1a:	6018      	str	r0, [r3, #0]
}
10009a1c:	4770      	bx	lr
10009a1e:	46c0      	nop			; (mov r8, r8)
10009a20:	10016eb0 	.word	0x10016eb0

10009a24 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009a24:	2000      	movs	r0, #0
10009a26:	4770      	bx	lr

10009a28 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009a28:	2000      	movs	r0, #0
10009a2a:	4770      	bx	lr

10009a2c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009a2c:	78c0      	ldrb	r0, [r0, #3]
10009a2e:	2800      	cmp	r0, #0
10009a30:	d000      	beq.n	10009a34 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009a32:	20e2      	movs	r0, #226	; 0xe2
}
10009a34:	4770      	bx	lr
10009a36:	46c0      	nop			; (mov r8, r8)

10009a38 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009a38:	2000      	movs	r0, #0
10009a3a:	4770      	bx	lr

10009a3c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009a3c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009a3e:	7800      	ldrb	r0, [r0, #0]
10009a40:	2800      	cmp	r0, #0
10009a42:	d006      	beq.n	10009a52 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009a44:	4803      	ldr	r0, [pc, #12]	; (10009a54 <ble_scan_report_handler+0x18>)
10009a46:	4b04      	ldr	r3, [pc, #16]	; (10009a58 <ble_scan_report_handler+0x1c>)
10009a48:	4798      	blx	r3
10009a4a:	4804      	ldr	r0, [pc, #16]	; (10009a5c <ble_scan_report_handler+0x20>)
10009a4c:	4b04      	ldr	r3, [pc, #16]	; (10009a60 <ble_scan_report_handler+0x24>)
10009a4e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009a50:	20e2      	movs	r0, #226	; 0xe2
}
10009a52:	bd10      	pop	{r4, pc}
10009a54:	10014674 	.word	0x10014674
10009a58:	10013251 	.word	0x10013251
10009a5c:	1001492c 	.word	0x1001492c
10009a60:	10013131 	.word	0x10013131

10009a64 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009a64:	b510      	push	{r4, lr}
10009a66:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009a68:	78c0      	ldrb	r0, [r0, #3]
10009a6a:	2800      	cmp	r0, #0
10009a6c:	d008      	beq.n	10009a80 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009a6e:	4805      	ldr	r0, [pc, #20]	; (10009a84 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009a70:	4b05      	ldr	r3, [pc, #20]	; (10009a88 <ble_mtu_changed_cmd_complete_handler+0x24>)
10009a72:	4798      	blx	r3
10009a74:	78a2      	ldrb	r2, [r4, #2]
10009a76:	8821      	ldrh	r1, [r4, #0]
10009a78:	4804      	ldr	r0, [pc, #16]	; (10009a8c <ble_mtu_changed_cmd_complete_handler+0x28>)
10009a7a:	4b05      	ldr	r3, [pc, #20]	; (10009a90 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009a7c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009a7e:	20e2      	movs	r0, #226	; 0xe2
}
10009a80:	bd10      	pop	{r4, pc}
10009a82:	46c0      	nop			; (mov r8, r8)
10009a84:	10014674 	.word	0x10014674
10009a88:	10013251 	.word	0x10013251
10009a8c:	10014940 	.word	0x10014940
10009a90:	10013131 	.word	0x10013131

10009a94 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a96:	0004      	movs	r4, r0
10009a98:	4b19      	ldr	r3, [pc, #100]	; (10009b00 <ble_disconnected_state_handler+0x6c>)
10009a9a:	229b      	movs	r2, #155	; 0x9b
10009a9c:	0092      	lsls	r2, r2, #2
10009a9e:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009aa0:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009aa2:	2600      	movs	r6, #0
10009aa4:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009aa6:	001a      	movs	r2, r3
10009aa8:	3a56      	subs	r2, #86	; 0x56
10009aaa:	8811      	ldrh	r1, [r2, #0]
10009aac:	8822      	ldrh	r2, [r4, #0]
10009aae:	4291      	cmp	r1, r2
10009ab0:	d119      	bne.n	10009ae6 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ab2:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ab4:	2a05      	cmp	r2, #5
10009ab6:	d001      	beq.n	10009abc <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ab8:	2a08      	cmp	r2, #8
10009aba:	d101      	bne.n	10009ac0 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009abc:	7007      	strb	r7, [r0, #0]
10009abe:	e012      	b.n	10009ae6 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009ac0:	2a07      	cmp	r2, #7
10009ac2:	d80f      	bhi.n	10009ae4 <ble_disconnected_state_handler+0x50>
10009ac4:	0092      	lsls	r2, r2, #2
10009ac6:	490f      	ldr	r1, [pc, #60]	; (10009b04 <ble_disconnected_state_handler+0x70>)
10009ac8:	588a      	ldr	r2, [r1, r2]
10009aca:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009acc:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009ace:	4a0e      	ldr	r2, [pc, #56]	; (10009b08 <ble_disconnected_state_handler+0x74>)
10009ad0:	7812      	ldrb	r2, [r2, #0]
10009ad2:	2a00      	cmp	r2, #0
10009ad4:	d007      	beq.n	10009ae6 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009ad6:	4a0c      	ldr	r2, [pc, #48]	; (10009b08 <ble_disconnected_state_handler+0x74>)
10009ad8:	7812      	ldrb	r2, [r2, #0]
10009ada:	3a01      	subs	r2, #1
10009adc:	b2d2      	uxtb	r2, r2
10009ade:	490a      	ldr	r1, [pc, #40]	; (10009b08 <ble_disconnected_state_handler+0x74>)
10009ae0:	700a      	strb	r2, [r1, #0]
10009ae2:	e000      	b.n	10009ae6 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009ae4:	7006      	strb	r6, [r0, #0]
10009ae6:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ae8:	42ab      	cmp	r3, r5
10009aea:	d1db      	bne.n	10009aa4 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009aec:	4807      	ldr	r0, [pc, #28]	; (10009b0c <ble_disconnected_state_handler+0x78>)
10009aee:	4b08      	ldr	r3, [pc, #32]	; (10009b10 <ble_disconnected_state_handler+0x7c>)
10009af0:	4798      	blx	r3
10009af2:	8822      	ldrh	r2, [r4, #0]
10009af4:	78a1      	ldrb	r1, [r4, #2]
10009af6:	4807      	ldr	r0, [pc, #28]	; (10009b14 <ble_disconnected_state_handler+0x80>)
10009af8:	4b07      	ldr	r3, [pc, #28]	; (10009b18 <ble_disconnected_state_handler+0x84>)
10009afa:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009afc:	2000      	movs	r0, #0
10009afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009b00:	10016f2a 	.word	0x10016f2a
10009b04:	100147a8 	.word	0x100147a8
10009b08:	10017138 	.word	0x10017138
10009b0c:	10014674 	.word	0x10014674
10009b10:	10013251 	.word	0x10013251
10009b14:	10014978 	.word	0x10014978
10009b18:	10013131 	.word	0x10013131

10009b1c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009b1e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009b20:	8801      	ldrh	r1, [r0, #0]
10009b22:	4b28      	ldr	r3, [pc, #160]	; (10009bc4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b24:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009b26:	891a      	ldrh	r2, [r3, #8]
10009b28:	428a      	cmp	r2, r1
10009b2a:	d104      	bne.n	10009b36 <ble_encryption_status_change_handler+0x1a>
10009b2c:	001a      	movs	r2, r3
10009b2e:	325e      	adds	r2, #94	; 0x5e
10009b30:	7812      	ldrb	r2, [r2, #0]
10009b32:	2a06      	cmp	r2, #6
10009b34:	d02e      	beq.n	10009b94 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b36:	3401      	adds	r4, #1
10009b38:	b2e4      	uxtb	r4, r4
10009b3a:	337c      	adds	r3, #124	; 0x7c
10009b3c:	2c05      	cmp	r4, #5
10009b3e:	d1f2      	bne.n	10009b26 <ble_encryption_status_change_handler+0xa>
10009b40:	e039      	b.n	10009bb6 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009b42:	4920      	ldr	r1, [pc, #128]	; (10009bc4 <ble_encryption_status_change_handler+0xa8>)
10009b44:	0163      	lsls	r3, r4, #5
10009b46:	1b1a      	subs	r2, r3, r4
10009b48:	0092      	lsls	r2, r2, #2
10009b4a:	188a      	adds	r2, r1, r2
10009b4c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009b4e:	0014      	movs	r4, r2
10009b50:	345e      	adds	r4, #94	; 0x5e
10009b52:	2307      	movs	r3, #7
10009b54:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009b56:	481c      	ldr	r0, [pc, #112]	; (10009bc8 <ble_encryption_status_change_handler+0xac>)
10009b58:	4b1c      	ldr	r3, [pc, #112]	; (10009bcc <ble_encryption_status_change_handler+0xb0>)
10009b5a:	4798      	blx	r3
10009b5c:	481c      	ldr	r0, [pc, #112]	; (10009bd0 <ble_encryption_status_change_handler+0xb4>)
10009b5e:	4b1d      	ldr	r3, [pc, #116]	; (10009bd4 <ble_encryption_status_change_handler+0xb8>)
10009b60:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009b62:	25e2      	movs	r5, #226	; 0xe2
10009b64:	e02b      	b.n	10009bbe <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009b66:	4818      	ldr	r0, [pc, #96]	; (10009bc8 <ble_encryption_status_change_handler+0xac>)
10009b68:	4b18      	ldr	r3, [pc, #96]	; (10009bcc <ble_encryption_status_change_handler+0xb0>)
10009b6a:	4798      	blx	r3
10009b6c:	481a      	ldr	r0, [pc, #104]	; (10009bd8 <ble_encryption_status_change_handler+0xbc>)
10009b6e:	4b19      	ldr	r3, [pc, #100]	; (10009bd4 <ble_encryption_status_change_handler+0xb8>)
10009b70:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009b72:	4914      	ldr	r1, [pc, #80]	; (10009bc4 <ble_encryption_status_change_handler+0xa8>)
10009b74:	0163      	lsls	r3, r4, #5
10009b76:	1b1a      	subs	r2, r3, r4
10009b78:	0092      	lsls	r2, r2, #2
10009b7a:	188a      	adds	r2, r1, r2
10009b7c:	0010      	movs	r0, r2
10009b7e:	305e      	adds	r0, #94	; 0x5e
10009b80:	2708      	movs	r7, #8
10009b82:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009b84:	78f0      	ldrb	r0, [r6, #3]
10009b86:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009b88:	78b2      	ldrb	r2, [r6, #2]
10009b8a:	1b1c      	subs	r4, r3, r4
10009b8c:	00a4      	lsls	r4, r4, #2
10009b8e:	190c      	adds	r4, r1, r4
10009b90:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009b92:	e014      	b.n	10009bbe <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009b94:	78b5      	ldrb	r5, [r6, #2]
10009b96:	2d00      	cmp	r5, #0
10009b98:	d0e5      	beq.n	10009b66 <ble_encryption_status_change_handler+0x4a>
10009b9a:	e7d2      	b.n	10009b42 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009b9c:	4e0a      	ldr	r6, [pc, #40]	; (10009bc8 <ble_encryption_status_change_handler+0xac>)
10009b9e:	0030      	movs	r0, r6
10009ba0:	4d0a      	ldr	r5, [pc, #40]	; (10009bcc <ble_encryption_status_change_handler+0xb0>)
10009ba2:	47a8      	blx	r5
10009ba4:	480c      	ldr	r0, [pc, #48]	; (10009bd8 <ble_encryption_status_change_handler+0xbc>)
10009ba6:	4c0b      	ldr	r4, [pc, #44]	; (10009bd4 <ble_encryption_status_change_handler+0xb8>)
10009ba8:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009baa:	0030      	movs	r0, r6
10009bac:	47a8      	blx	r5
10009bae:	480b      	ldr	r0, [pc, #44]	; (10009bdc <ble_encryption_status_change_handler+0xc0>)
10009bb0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009bb2:	25e2      	movs	r5, #226	; 0xe2
10009bb4:	e003      	b.n	10009bbe <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009bb6:	78b5      	ldrb	r5, [r6, #2]
10009bb8:	2d00      	cmp	r5, #0
10009bba:	d1c2      	bne.n	10009b42 <ble_encryption_status_change_handler+0x26>
10009bbc:	e7ee      	b.n	10009b9c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009bbe:	0028      	movs	r0, r5
10009bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	10016ecc 	.word	0x10016ecc
10009bc8:	10014674 	.word	0x10014674
10009bcc:	10013251 	.word	0x10013251
10009bd0:	100149a8 	.word	0x100149a8
10009bd4:	10013131 	.word	0x10013131
10009bd8:	100149bc 	.word	0x100149bc
10009bdc:	100149e0 	.word	0x100149e0

10009be0 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009be0:	b510      	push	{r4, lr}
10009be2:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009be4:	4b15      	ldr	r3, [pc, #84]	; (10009c3c <ble_scan_info_handler+0x5c>)
10009be6:	781b      	ldrb	r3, [r3, #0]
10009be8:	b2db      	uxtb	r3, r3
10009bea:	2b13      	cmp	r3, #19
10009bec:	d812      	bhi.n	10009c14 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009bee:	4c13      	ldr	r4, [pc, #76]	; (10009c3c <ble_scan_info_handler+0x5c>)
10009bf0:	7823      	ldrb	r3, [r4, #0]
10009bf2:	b2db      	uxtb	r3, r3
10009bf4:	0098      	lsls	r0, r3, #2
10009bf6:	18c0      	adds	r0, r0, r3
10009bf8:	00c0      	lsls	r0, r0, #3
10009bfa:	18c3      	adds	r3, r0, r3
10009bfc:	4810      	ldr	r0, [pc, #64]	; (10009c40 <ble_scan_info_handler+0x60>)
10009bfe:	1818      	adds	r0, r3, r0
10009c00:	2229      	movs	r2, #41	; 0x29
10009c02:	4b10      	ldr	r3, [pc, #64]	; (10009c44 <ble_scan_info_handler+0x64>)
10009c04:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009c06:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009c08:	7823      	ldrb	r3, [r4, #0]
10009c0a:	3301      	adds	r3, #1
10009c0c:	b2db      	uxtb	r3, r3
10009c0e:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009c10:	2300      	movs	r3, #0
10009c12:	e011      	b.n	10009c38 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009c14:	480c      	ldr	r0, [pc, #48]	; (10009c48 <ble_scan_info_handler+0x68>)
10009c16:	4b0d      	ldr	r3, [pc, #52]	; (10009c4c <ble_scan_info_handler+0x6c>)
10009c18:	4798      	blx	r3
10009c1a:	480d      	ldr	r0, [pc, #52]	; (10009c50 <ble_scan_info_handler+0x70>)
10009c1c:	4b0d      	ldr	r3, [pc, #52]	; (10009c54 <ble_scan_info_handler+0x74>)
10009c1e:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009c20:	4b0d      	ldr	r3, [pc, #52]	; (10009c58 <ble_scan_info_handler+0x78>)
10009c22:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009c24:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009c26:	2800      	cmp	r0, #0
10009c28:	d006      	beq.n	10009c38 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009c2a:	4807      	ldr	r0, [pc, #28]	; (10009c48 <ble_scan_info_handler+0x68>)
10009c2c:	4b07      	ldr	r3, [pc, #28]	; (10009c4c <ble_scan_info_handler+0x6c>)
10009c2e:	4798      	blx	r3
10009c30:	480a      	ldr	r0, [pc, #40]	; (10009c5c <ble_scan_info_handler+0x7c>)
10009c32:	4b08      	ldr	r3, [pc, #32]	; (10009c54 <ble_scan_info_handler+0x74>)
10009c34:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009c36:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009c38:	0018      	movs	r0, r3
10009c3a:	bd10      	pop	{r4, pc}
10009c3c:	10015c7c 	.word	0x10015c7c
10009c40:	100171b0 	.word	0x100171b0
10009c44:	1001310d 	.word	0x1001310d
10009c48:	10014674 	.word	0x10014674
10009c4c:	10013251 	.word	0x10013251
10009c50:	10014a08 	.word	0x10014a08
10009c54:	10013131 	.word	0x10013131
10009c58:	1000cc99 	.word	0x1000cc99
10009c5c:	10014a40 	.word	0x10014a40

10009c60 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c62:	464f      	mov	r7, r9
10009c64:	4646      	mov	r6, r8
10009c66:	b4c0      	push	{r6, r7}
10009c68:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c6a:	8841      	ldrh	r1, [r0, #2]
10009c6c:	4b3a      	ldr	r3, [pc, #232]	; (10009d58 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c6e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c70:	891a      	ldrh	r2, [r3, #8]
10009c72:	428a      	cmp	r2, r1
10009c74:	d104      	bne.n	10009c80 <ble_pair_done_handler+0x20>
10009c76:	001a      	movs	r2, r3
10009c78:	325e      	adds	r2, #94	; 0x5e
10009c7a:	7812      	ldrb	r2, [r2, #0]
10009c7c:	2a03      	cmp	r2, #3
10009c7e:	d062      	beq.n	10009d46 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c80:	3401      	adds	r4, #1
10009c82:	b2e4      	uxtb	r4, r4
10009c84:	337c      	adds	r3, #124	; 0x7c
10009c86:	2c05      	cmp	r4, #5
10009c88:	d1f2      	bne.n	10009c70 <ble_pair_done_handler+0x10>
10009c8a:	e02b      	b.n	10009ce4 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009c8c:	0163      	lsls	r3, r4, #5
10009c8e:	1b1c      	subs	r4, r3, r4
10009c90:	00a4      	lsls	r4, r4, #2
10009c92:	4b31      	ldr	r3, [pc, #196]	; (10009d58 <ble_pair_done_handler+0xf8>)
10009c94:	191c      	adds	r4, r3, r4
10009c96:	345e      	adds	r4, #94	; 0x5e
10009c98:	7823      	ldrb	r3, [r4, #0]
10009c9a:	2b01      	cmp	r3, #1
10009c9c:	d913      	bls.n	10009cc6 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009c9e:	482f      	ldr	r0, [pc, #188]	; (10009d5c <ble_pair_done_handler+0xfc>)
10009ca0:	4b2f      	ldr	r3, [pc, #188]	; (10009d60 <ble_pair_done_handler+0x100>)
10009ca2:	4798      	blx	r3
10009ca4:	482f      	ldr	r0, [pc, #188]	; (10009d64 <ble_pair_done_handler+0x104>)
10009ca6:	4b30      	ldr	r3, [pc, #192]	; (10009d68 <ble_pair_done_handler+0x108>)
10009ca8:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009caa:	8868      	ldrh	r0, [r5, #2]
10009cac:	2113      	movs	r1, #19
10009cae:	4b2f      	ldr	r3, [pc, #188]	; (10009d6c <ble_pair_done_handler+0x10c>)
10009cb0:	4798      	blx	r3
10009cb2:	1e06      	subs	r6, r0, #0
10009cb4:	d04b      	beq.n	10009d4e <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009cb6:	4829      	ldr	r0, [pc, #164]	; (10009d5c <ble_pair_done_handler+0xfc>)
10009cb8:	4b29      	ldr	r3, [pc, #164]	; (10009d60 <ble_pair_done_handler+0x100>)
10009cba:	4798      	blx	r3
10009cbc:	482c      	ldr	r0, [pc, #176]	; (10009d70 <ble_pair_done_handler+0x110>)
10009cbe:	4b2a      	ldr	r3, [pc, #168]	; (10009d68 <ble_pair_done_handler+0x108>)
10009cc0:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009cc2:	26e2      	movs	r6, #226	; 0xe2
10009cc4:	e043      	b.n	10009d4e <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009cc6:	2600      	movs	r6, #0
10009cc8:	e041      	b.n	10009d4e <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cca:	4e24      	ldr	r6, [pc, #144]	; (10009d5c <ble_pair_done_handler+0xfc>)
10009ccc:	0030      	movs	r0, r6
10009cce:	4d24      	ldr	r5, [pc, #144]	; (10009d60 <ble_pair_done_handler+0x100>)
10009cd0:	47a8      	blx	r5
10009cd2:	4828      	ldr	r0, [pc, #160]	; (10009d74 <ble_pair_done_handler+0x114>)
10009cd4:	4c24      	ldr	r4, [pc, #144]	; (10009d68 <ble_pair_done_handler+0x108>)
10009cd6:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009cd8:	0030      	movs	r0, r6
10009cda:	47a8      	blx	r5
10009cdc:	4826      	ldr	r0, [pc, #152]	; (10009d78 <ble_pair_done_handler+0x118>)
10009cde:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009ce0:	26e2      	movs	r6, #226	; 0xe2
10009ce2:	e034      	b.n	10009d4e <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009ce4:	792b      	ldrb	r3, [r5, #4]
10009ce6:	2b00      	cmp	r3, #0
10009ce8:	d1d0      	bne.n	10009c8c <ble_pair_done_handler+0x2c>
10009cea:	e7ee      	b.n	10009cca <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cec:	481b      	ldr	r0, [pc, #108]	; (10009d5c <ble_pair_done_handler+0xfc>)
10009cee:	4b1c      	ldr	r3, [pc, #112]	; (10009d60 <ble_pair_done_handler+0x100>)
10009cf0:	4798      	blx	r3
10009cf2:	4820      	ldr	r0, [pc, #128]	; (10009d74 <ble_pair_done_handler+0x114>)
10009cf4:	4b1c      	ldr	r3, [pc, #112]	; (10009d68 <ble_pair_done_handler+0x108>)
10009cf6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009cf8:	782a      	ldrb	r2, [r5, #0]
10009cfa:	4b17      	ldr	r3, [pc, #92]	; (10009d58 <ble_pair_done_handler+0xf8>)
10009cfc:	4699      	mov	r9, r3
10009cfe:	0167      	lsls	r7, r4, #5
10009d00:	1b3b      	subs	r3, r7, r4
10009d02:	009b      	lsls	r3, r3, #2
10009d04:	444b      	add	r3, r9
10009d06:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009d08:	792a      	ldrb	r2, [r5, #4]
10009d0a:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009d0c:	335e      	adds	r3, #94	; 0x5e
10009d0e:	2205      	movs	r2, #5
10009d10:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009d12:	1b38      	subs	r0, r7, r4
10009d14:	0080      	lsls	r0, r0, #2
10009d16:	4448      	add	r0, r9
10009d18:	3036      	adds	r0, #54	; 0x36
10009d1a:	0029      	movs	r1, r5
10009d1c:	3122      	adds	r1, #34	; 0x22
10009d1e:	320b      	adds	r2, #11
10009d20:	4b16      	ldr	r3, [pc, #88]	; (10009d7c <ble_pair_done_handler+0x11c>)
10009d22:	4698      	mov	r8, r3
10009d24:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009d26:	1b38      	subs	r0, r7, r4
10009d28:	0080      	lsls	r0, r0, #2
10009d2a:	4448      	add	r0, r9
10009d2c:	3046      	adds	r0, #70	; 0x46
10009d2e:	0029      	movs	r1, r5
10009d30:	3132      	adds	r1, #50	; 0x32
10009d32:	2217      	movs	r2, #23
10009d34:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009d36:	1b38      	subs	r0, r7, r4
10009d38:	0080      	lsls	r0, r0, #2
10009d3a:	4448      	add	r0, r9
10009d3c:	301a      	adds	r0, #26
10009d3e:	1da9      	adds	r1, r5, #6
10009d40:	221c      	movs	r2, #28
10009d42:	47c0      	blx	r8
10009d44:	e003      	b.n	10009d4e <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009d46:	792e      	ldrb	r6, [r5, #4]
10009d48:	2e00      	cmp	r6, #0
10009d4a:	d0cf      	beq.n	10009cec <ble_pair_done_handler+0x8c>
10009d4c:	e79e      	b.n	10009c8c <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009d4e:	0030      	movs	r0, r6
10009d50:	bc0c      	pop	{r2, r3}
10009d52:	4690      	mov	r8, r2
10009d54:	4699      	mov	r9, r3
10009d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d58:	10016ecc 	.word	0x10016ecc
10009d5c:	10014674 	.word	0x10014674
10009d60:	10013251 	.word	0x10013251
10009d64:	10014a58 	.word	0x10014a58
10009d68:	10013131 	.word	0x10013131
10009d6c:	1000ccb9 	.word	0x1000ccb9
10009d70:	10014a78 	.word	0x10014a78
10009d74:	10014a94 	.word	0x10014a94
10009d78:	10014ac0 	.word	0x10014ac0
10009d7c:	1001310d 	.word	0x1001310d

10009d80 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009d80:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009d82:	8800      	ldrh	r0, [r0, #0]
10009d84:	2378      	movs	r3, #120	; 0x78
10009d86:	2201      	movs	r2, #1
10009d88:	2101      	movs	r1, #1
10009d8a:	4c02      	ldr	r4, [pc, #8]	; (10009d94 <ble_conn_param_update_req+0x14>)
10009d8c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009d8e:	2000      	movs	r0, #0
10009d90:	bd10      	pop	{r4, pc}
10009d92:	46c0      	nop			; (mov r8, r8)
10009d94:	1000ccd9 	.word	0x1000ccd9

10009d98 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009d98:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d9a:	4657      	mov	r7, sl
10009d9c:	464e      	mov	r6, r9
10009d9e:	4645      	mov	r5, r8
10009da0:	b4e0      	push	{r5, r6, r7}
10009da2:	b084      	sub	sp, #16
10009da4:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009da6:	2209      	movs	r2, #9
10009da8:	2100      	movs	r1, #0
10009daa:	a801      	add	r0, sp, #4
10009dac:	4b6b      	ldr	r3, [pc, #428]	; (10009f5c <ble_slave_security_request_handler+0x1c4>)
10009dae:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009db0:	8825      	ldrh	r5, [r4, #0]
10009db2:	496b      	ldr	r1, [pc, #428]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009db4:	000a      	movs	r2, r1
10009db6:	2300      	movs	r3, #0
10009db8:	8910      	ldrh	r0, [r2, #8]
10009dba:	42a8      	cmp	r0, r5
10009dbc:	d116      	bne.n	10009dec <ble_slave_security_request_handler+0x54>
10009dbe:	0010      	movs	r0, r2
10009dc0:	305e      	adds	r0, #94	; 0x5e
10009dc2:	7800      	ldrb	r0, [r0, #0]
10009dc4:	2802      	cmp	r0, #2
10009dc6:	d111      	bne.n	10009dec <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009dc8:	4865      	ldr	r0, [pc, #404]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009dca:	015a      	lsls	r2, r3, #5
10009dcc:	1ad6      	subs	r6, r2, r3
10009dce:	00b6      	lsls	r6, r6, #2
10009dd0:	1986      	adds	r6, r0, r6
10009dd2:	365e      	adds	r6, #94	; 0x5e
10009dd4:	2206      	movs	r2, #6
10009dd6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009dd8:	32f9      	adds	r2, #249	; 0xf9
10009dda:	4013      	ands	r3, r2
10009ddc:	015a      	lsls	r2, r3, #5
10009dde:	1ad2      	subs	r2, r2, r3
10009de0:	0092      	lsls	r2, r2, #2
10009de2:	1882      	adds	r2, r0, r2
10009de4:	7d12      	ldrb	r2, [r2, #20]
10009de6:	07d0      	lsls	r0, r2, #31
10009de8:	d405      	bmi.n	10009df6 <ble_slave_security_request_handler+0x5e>
10009dea:	e01b      	b.n	10009e24 <ble_slave_security_request_handler+0x8c>
10009dec:	3301      	adds	r3, #1
10009dee:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009df0:	2b05      	cmp	r3, #5
10009df2:	d1e1      	bne.n	10009db8 <ble_slave_security_request_handler+0x20>
10009df4:	e01e      	b.n	10009e34 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009df6:	78e0      	ldrb	r0, [r4, #3]
10009df8:	2800      	cmp	r0, #0
10009dfa:	d013      	beq.n	10009e24 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009dfc:	0159      	lsls	r1, r3, #5
10009dfe:	1ac9      	subs	r1, r1, r3
10009e00:	008b      	lsls	r3, r1, #2
10009e02:	4957      	ldr	r1, [pc, #348]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009e04:	18c9      	adds	r1, r1, r3
10009e06:	311a      	adds	r1, #26
10009e08:	8820      	ldrh	r0, [r4, #0]
10009e0a:	4b56      	ldr	r3, [pc, #344]	; (10009f64 <ble_slave_security_request_handler+0x1cc>)
10009e0c:	4798      	blx	r3
10009e0e:	2800      	cmp	r0, #0
10009e10:	d100      	bne.n	10009e14 <ble_slave_security_request_handler+0x7c>
10009e12:	e09d      	b.n	10009f50 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009e14:	4854      	ldr	r0, [pc, #336]	; (10009f68 <ble_slave_security_request_handler+0x1d0>)
10009e16:	4b55      	ldr	r3, [pc, #340]	; (10009f6c <ble_slave_security_request_handler+0x1d4>)
10009e18:	4798      	blx	r3
10009e1a:	4855      	ldr	r0, [pc, #340]	; (10009f70 <ble_slave_security_request_handler+0x1d8>)
10009e1c:	4b55      	ldr	r3, [pc, #340]	; (10009f74 <ble_slave_security_request_handler+0x1dc>)
10009e1e:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e20:	20e2      	movs	r0, #226	; 0xe2
10009e22:	e095      	b.n	10009f50 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009e24:	015a      	lsls	r2, r3, #5
10009e26:	1ad3      	subs	r3, r2, r3
10009e28:	009b      	lsls	r3, r3, #2
10009e2a:	4a4d      	ldr	r2, [pc, #308]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009e2c:	18d3      	adds	r3, r2, r3
10009e2e:	335e      	adds	r3, #94	; 0x5e
10009e30:	2202      	movs	r2, #2
10009e32:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e34:	8825      	ldrh	r5, [r4, #0]
10009e36:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e38:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e3a:	0016      	movs	r6, r2
10009e3c:	8908      	ldrh	r0, [r1, #8]
10009e3e:	42a8      	cmp	r0, r5
10009e40:	d10d      	bne.n	10009e5e <ble_slave_security_request_handler+0xc6>
10009e42:	0008      	movs	r0, r1
10009e44:	305e      	adds	r0, #94	; 0x5e
10009e46:	7800      	ldrb	r0, [r0, #0]
10009e48:	2802      	cmp	r0, #2
10009e4a:	d108      	bne.n	10009e5e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009e4c:	0152      	lsls	r2, r2, #5
10009e4e:	1b92      	subs	r2, r2, r6
10009e50:	0096      	lsls	r6, r2, #2
10009e52:	4a43      	ldr	r2, [pc, #268]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009e54:	1992      	adds	r2, r2, r6
10009e56:	325e      	adds	r2, #94	; 0x5e
10009e58:	2103      	movs	r1, #3
10009e5a:	7011      	strb	r1, [r2, #0]
			break;
10009e5c:	e005      	b.n	10009e6a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e5e:	3301      	adds	r3, #1
10009e60:	b2db      	uxtb	r3, r3
10009e62:	3201      	adds	r2, #1
10009e64:	317c      	adds	r1, #124	; 0x7c
10009e66:	2b05      	cmp	r3, #5
10009e68:	d1e7      	bne.n	10009e3a <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009e6a:	aa01      	add	r2, sp, #4
10009e6c:	2102      	movs	r1, #2
10009e6e:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009e70:	78e1      	ldrb	r1, [r4, #3]
10009e72:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009e74:	2101      	movs	r1, #1
10009e76:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009e78:	3103      	adds	r1, #3
10009e7a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009e7c:	001f      	movs	r7, r3
10009e7e:	015a      	lsls	r2, r3, #5
10009e80:	1ad2      	subs	r2, r2, r3
10009e82:	0092      	lsls	r2, r2, #2
10009e84:	4936      	ldr	r1, [pc, #216]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009e86:	5c52      	ldrb	r2, [r2, r1]
10009e88:	2a02      	cmp	r2, #2
10009e8a:	d104      	bne.n	10009e96 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009e8c:	aa01      	add	r2, sp, #4
10009e8e:	2103      	movs	r1, #3
10009e90:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009e92:	71d1      	strb	r1, [r2, #7]
10009e94:	e003      	b.n	10009e9e <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009e96:	aa01      	add	r2, sp, #4
10009e98:	2101      	movs	r1, #1
10009e9a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009e9c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009e9e:	aa01      	add	r2, sp, #4
10009ea0:	2110      	movs	r1, #16
10009ea2:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009ea4:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009ea6:	017a      	lsls	r2, r7, #5
10009ea8:	1bd2      	subs	r2, r2, r7
10009eaa:	0092      	lsls	r2, r2, #2
10009eac:	492c      	ldr	r1, [pc, #176]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009eae:	188a      	adds	r2, r1, r2
10009eb0:	7e12      	ldrb	r2, [r2, #24]
10009eb2:	2a40      	cmp	r2, #64	; 0x40
10009eb4:	d134      	bne.n	10009f20 <ble_slave_security_request_handler+0x188>
10009eb6:	015a      	lsls	r2, r3, #5
10009eb8:	1ad3      	subs	r3, r2, r3
10009eba:	009b      	lsls	r3, r3, #2
10009ebc:	469a      	mov	sl, r3
10009ebe:	001e      	movs	r6, r3
10009ec0:	3660      	adds	r6, #96	; 0x60
10009ec2:	1876      	adds	r6, r6, r1
10009ec4:	4655      	mov	r5, sl
10009ec6:	3568      	adds	r5, #104	; 0x68
10009ec8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009eca:	4b2b      	ldr	r3, [pc, #172]	; (10009f78 <ble_slave_security_request_handler+0x1e0>)
10009ecc:	4699      	mov	r9, r3
10009ece:	230f      	movs	r3, #15
10009ed0:	4698      	mov	r8, r3
10009ed2:	47c8      	blx	r9
10009ed4:	4643      	mov	r3, r8
10009ed6:	4018      	ands	r0, r3
10009ed8:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009eda:	47c8      	blx	r9
10009edc:	4643      	mov	r3, r8
10009ede:	4018      	ands	r0, r3
10009ee0:	74b0      	strb	r0, [r6, #18]
10009ee2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009ee4:	42ae      	cmp	r6, r5
10009ee6:	d1f4      	bne.n	10009ed2 <ble_slave_security_request_handler+0x13a>
10009ee8:	4656      	mov	r6, sl
10009eea:	3670      	adds	r6, #112	; 0x70
10009eec:	4a1c      	ldr	r2, [pc, #112]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009eee:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009ef0:	4b21      	ldr	r3, [pc, #132]	; (10009f78 <ble_slave_security_request_handler+0x1e0>)
10009ef2:	4699      	mov	r9, r3
10009ef4:	230f      	movs	r3, #15
10009ef6:	4698      	mov	r8, r3
10009ef8:	47c8      	blx	r9
10009efa:	4643      	mov	r3, r8
10009efc:	4018      	ands	r0, r3
10009efe:	7028      	strb	r0, [r5, #0]
10009f00:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009f02:	42b5      	cmp	r5, r6
10009f04:	d1f8      	bne.n	10009ef8 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009f06:	4b1c      	ldr	r3, [pc, #112]	; (10009f78 <ble_slave_security_request_handler+0x1e0>)
10009f08:	4798      	blx	r3
10009f0a:	017b      	lsls	r3, r7, #5
10009f0c:	1bdb      	subs	r3, r3, r7
10009f0e:	009b      	lsls	r3, r3, #2
10009f10:	4a13      	ldr	r2, [pc, #76]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009f12:	18d3      	adds	r3, r2, r3
10009f14:	001a      	movs	r2, r3
10009f16:	3270      	adds	r2, #112	; 0x70
10009f18:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009f1a:	337a      	adds	r3, #122	; 0x7a
10009f1c:	2210      	movs	r2, #16
10009f1e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009f20:	017a      	lsls	r2, r7, #5
10009f22:	1bd7      	subs	r7, r2, r7
10009f24:	00bf      	lsls	r7, r7, #2
10009f26:	3760      	adds	r7, #96	; 0x60
10009f28:	4a0d      	ldr	r2, [pc, #52]	; (10009f60 <ble_slave_security_request_handler+0x1c8>)
10009f2a:	18ba      	adds	r2, r7, r2
10009f2c:	8820      	ldrh	r0, [r4, #0]
10009f2e:	2300      	movs	r3, #0
10009f30:	a901      	add	r1, sp, #4
10009f32:	4c12      	ldr	r4, [pc, #72]	; (10009f7c <ble_slave_security_request_handler+0x1e4>)
10009f34:	47a0      	blx	r4
10009f36:	2800      	cmp	r0, #0
10009f38:	d00a      	beq.n	10009f50 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
10009f3a:	ab01      	add	r3, sp, #4
10009f3c:	2200      	movs	r2, #0
10009f3e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009f40:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009f42:	4809      	ldr	r0, [pc, #36]	; (10009f68 <ble_slave_security_request_handler+0x1d0>)
10009f44:	4b09      	ldr	r3, [pc, #36]	; (10009f6c <ble_slave_security_request_handler+0x1d4>)
10009f46:	4798      	blx	r3
10009f48:	480d      	ldr	r0, [pc, #52]	; (10009f80 <ble_slave_security_request_handler+0x1e8>)
10009f4a:	4b0a      	ldr	r3, [pc, #40]	; (10009f74 <ble_slave_security_request_handler+0x1dc>)
10009f4c:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f4e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009f50:	b004      	add	sp, #16
10009f52:	bc1c      	pop	{r2, r3, r4}
10009f54:	4690      	mov	r8, r2
10009f56:	4699      	mov	r9, r3
10009f58:	46a2      	mov	sl, r4
10009f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f5c:	1001311f 	.word	0x1001311f
10009f60:	10016ecc 	.word	0x10016ecc
10009f64:	1000d991 	.word	0x1000d991
10009f68:	10014674 	.word	0x10014674
10009f6c:	10013251 	.word	0x10013251
10009f70:	10014af0 	.word	0x10014af0
10009f74:	10013131 	.word	0x10013131
10009f78:	10013265 	.word	0x10013265
10009f7c:	1000d7a5 	.word	0x1000d7a5
10009f80:	10014b08 	.word	0x10014b08

10009f84 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009f84:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f86:	465f      	mov	r7, fp
10009f88:	4656      	mov	r6, sl
10009f8a:	464d      	mov	r5, r9
10009f8c:	4644      	mov	r4, r8
10009f8e:	b4f0      	push	{r4, r5, r6, r7}
10009f90:	b085      	sub	sp, #20
10009f92:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f94:	8804      	ldrh	r4, [r0, #0]
10009f96:	4a49      	ldr	r2, [pc, #292]	; (1000a0bc <ble_pair_request_handler+0x138>)
10009f98:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f9a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f9c:	8910      	ldrh	r0, [r2, #8]
10009f9e:	42a0      	cmp	r0, r4
10009fa0:	d10d      	bne.n	10009fbe <ble_pair_request_handler+0x3a>
10009fa2:	0010      	movs	r0, r2
10009fa4:	305e      	adds	r0, #94	; 0x5e
10009fa6:	7800      	ldrb	r0, [r0, #0]
10009fa8:	2802      	cmp	r0, #2
10009faa:	d108      	bne.n	10009fbe <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009fac:	014a      	lsls	r2, r1, #5
10009fae:	1a52      	subs	r2, r2, r1
10009fb0:	0095      	lsls	r5, r2, #2
10009fb2:	4a42      	ldr	r2, [pc, #264]	; (1000a0bc <ble_pair_request_handler+0x138>)
10009fb4:	1952      	adds	r2, r2, r5
10009fb6:	325e      	adds	r2, #94	; 0x5e
10009fb8:	2103      	movs	r1, #3
10009fba:	7011      	strb	r1, [r2, #0]
			break;
10009fbc:	e005      	b.n	10009fca <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fbe:	3301      	adds	r3, #1
10009fc0:	b2db      	uxtb	r3, r3
10009fc2:	3101      	adds	r1, #1
10009fc4:	327c      	adds	r2, #124	; 0x7c
10009fc6:	2b05      	cmp	r3, #5
10009fc8:	d1e8      	bne.n	10009f9c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009fca:	aa01      	add	r2, sp, #4
10009fcc:	2102      	movs	r1, #2
10009fce:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009fd0:	3901      	subs	r1, #1
10009fd2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009fd4:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009fd6:	2100      	movs	r1, #0
10009fd8:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009fda:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009fdc:	001f      	movs	r7, r3
10009fde:	015a      	lsls	r2, r3, #5
10009fe0:	1ad2      	subs	r2, r2, r3
10009fe2:	0092      	lsls	r2, r2, #2
10009fe4:	4935      	ldr	r1, [pc, #212]	; (1000a0bc <ble_pair_request_handler+0x138>)
10009fe6:	5c52      	ldrb	r2, [r2, r1]
10009fe8:	2a02      	cmp	r2, #2
10009fea:	d104      	bne.n	10009ff6 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009fec:	aa01      	add	r2, sp, #4
10009fee:	2103      	movs	r1, #3
10009ff0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009ff2:	71d1      	strb	r1, [r2, #7]
10009ff4:	e003      	b.n	10009ffe <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009ff6:	aa01      	add	r2, sp, #4
10009ff8:	2101      	movs	r1, #1
10009ffa:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009ffc:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
10009ffe:	aa01      	add	r2, sp, #4
1000a000:	2110      	movs	r1, #16
1000a002:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a004:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a006:	017a      	lsls	r2, r7, #5
1000a008:	1bd2      	subs	r2, r2, r7
1000a00a:	0092      	lsls	r2, r2, #2
1000a00c:	492b      	ldr	r1, [pc, #172]	; (1000a0bc <ble_pair_request_handler+0x138>)
1000a00e:	188a      	adds	r2, r1, r2
1000a010:	7e12      	ldrb	r2, [r2, #24]
1000a012:	2a40      	cmp	r2, #64	; 0x40
1000a014:	d131      	bne.n	1000a07a <ble_pair_request_handler+0xf6>
1000a016:	015a      	lsls	r2, r3, #5
1000a018:	1ad3      	subs	r3, r2, r3
1000a01a:	009b      	lsls	r3, r3, #2
1000a01c:	469a      	mov	sl, r3
1000a01e:	001d      	movs	r5, r3
1000a020:	3560      	adds	r5, #96	; 0x60
1000a022:	186d      	adds	r5, r5, r1
1000a024:	4654      	mov	r4, sl
1000a026:	3468      	adds	r4, #104	; 0x68
1000a028:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a02a:	4b25      	ldr	r3, [pc, #148]	; (1000a0c0 <ble_pair_request_handler+0x13c>)
1000a02c:	4699      	mov	r9, r3
1000a02e:	260f      	movs	r6, #15
1000a030:	47c8      	blx	r9
1000a032:	4030      	ands	r0, r6
1000a034:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a036:	47c8      	blx	r9
1000a038:	4030      	ands	r0, r6
1000a03a:	74a8      	strb	r0, [r5, #18]
1000a03c:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a03e:	42a5      	cmp	r5, r4
1000a040:	d1f6      	bne.n	1000a030 <ble_pair_request_handler+0xac>
1000a042:	4655      	mov	r5, sl
1000a044:	3570      	adds	r5, #112	; 0x70
1000a046:	4a1d      	ldr	r2, [pc, #116]	; (1000a0bc <ble_pair_request_handler+0x138>)
1000a048:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a04a:	4b1d      	ldr	r3, [pc, #116]	; (1000a0c0 <ble_pair_request_handler+0x13c>)
1000a04c:	4699      	mov	r9, r3
1000a04e:	230f      	movs	r3, #15
1000a050:	4698      	mov	r8, r3
1000a052:	47c8      	blx	r9
1000a054:	4643      	mov	r3, r8
1000a056:	4018      	ands	r0, r3
1000a058:	7020      	strb	r0, [r4, #0]
1000a05a:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a05c:	42ac      	cmp	r4, r5
1000a05e:	d1f8      	bne.n	1000a052 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a060:	4b17      	ldr	r3, [pc, #92]	; (1000a0c0 <ble_pair_request_handler+0x13c>)
1000a062:	4798      	blx	r3
1000a064:	017b      	lsls	r3, r7, #5
1000a066:	1bdb      	subs	r3, r3, r7
1000a068:	009b      	lsls	r3, r3, #2
1000a06a:	4a14      	ldr	r2, [pc, #80]	; (1000a0bc <ble_pair_request_handler+0x138>)
1000a06c:	18d3      	adds	r3, r2, r3
1000a06e:	001a      	movs	r2, r3
1000a070:	3270      	adds	r2, #112	; 0x70
1000a072:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a074:	337a      	adds	r3, #122	; 0x7a
1000a076:	2210      	movs	r2, #16
1000a078:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a07a:	017a      	lsls	r2, r7, #5
1000a07c:	1bd7      	subs	r7, r2, r7
1000a07e:	00bf      	lsls	r7, r7, #2
1000a080:	3760      	adds	r7, #96	; 0x60
1000a082:	4a0e      	ldr	r2, [pc, #56]	; (1000a0bc <ble_pair_request_handler+0x138>)
1000a084:	18ba      	adds	r2, r7, r2
1000a086:	465b      	mov	r3, fp
1000a088:	8818      	ldrh	r0, [r3, #0]
1000a08a:	2300      	movs	r3, #0
1000a08c:	a901      	add	r1, sp, #4
1000a08e:	4c0d      	ldr	r4, [pc, #52]	; (1000a0c4 <ble_pair_request_handler+0x140>)
1000a090:	47a0      	blx	r4
1000a092:	2800      	cmp	r0, #0
1000a094:	d00a      	beq.n	1000a0ac <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a096:	ab01      	add	r3, sp, #4
1000a098:	2200      	movs	r2, #0
1000a09a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a09c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a09e:	480a      	ldr	r0, [pc, #40]	; (1000a0c8 <ble_pair_request_handler+0x144>)
1000a0a0:	4b0a      	ldr	r3, [pc, #40]	; (1000a0cc <ble_pair_request_handler+0x148>)
1000a0a2:	4798      	blx	r3
1000a0a4:	480a      	ldr	r0, [pc, #40]	; (1000a0d0 <ble_pair_request_handler+0x14c>)
1000a0a6:	4b0b      	ldr	r3, [pc, #44]	; (1000a0d4 <ble_pair_request_handler+0x150>)
1000a0a8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0aa:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a0ac:	b005      	add	sp, #20
1000a0ae:	bc3c      	pop	{r2, r3, r4, r5}
1000a0b0:	4690      	mov	r8, r2
1000a0b2:	4699      	mov	r9, r3
1000a0b4:	46a2      	mov	sl, r4
1000a0b6:	46ab      	mov	fp, r5
1000a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a0ba:	46c0      	nop			; (mov r8, r8)
1000a0bc:	10016ecc 	.word	0x10016ecc
1000a0c0:	10013265 	.word	0x10013265
1000a0c4:	1000d7a5 	.word	0x1000d7a5
1000a0c8:	10014674 	.word	0x10014674
1000a0cc:	10013251 	.word	0x10013251
1000a0d0:	10014b34 	.word	0x10014b34
1000a0d4:	10013131 	.word	0x10013131

1000a0d8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0da:	b085      	sub	sp, #20
1000a0dc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a0de:	2206      	movs	r2, #6
1000a0e0:	493d      	ldr	r1, [pc, #244]	; (1000a1d8 <ble_pair_key_request_handler+0x100>)
1000a0e2:	a802      	add	r0, sp, #8
1000a0e4:	4e3d      	ldr	r6, [pc, #244]	; (1000a1dc <ble_pair_key_request_handler+0x104>)
1000a0e6:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a0e8:	ac01      	add	r4, sp, #4
1000a0ea:	2204      	movs	r2, #4
1000a0ec:	0029      	movs	r1, r5
1000a0ee:	0020      	movs	r0, r4
1000a0f0:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a0f2:	78e3      	ldrb	r3, [r4, #3]
1000a0f4:	2b00      	cmp	r3, #0
1000a0f6:	d162      	bne.n	1000a1be <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a0f8:	4839      	ldr	r0, [pc, #228]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a0fa:	4b3a      	ldr	r3, [pc, #232]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a0fc:	4798      	blx	r3
1000a0fe:	483a      	ldr	r0, [pc, #232]	; (1000a1e8 <ble_pair_key_request_handler+0x110>)
1000a100:	4b3a      	ldr	r3, [pc, #232]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a102:	4798      	blx	r3
1000a104:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a106:	4c3a      	ldr	r4, [pc, #232]	; (1000a1f0 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a108:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a10a:	201e      	movs	r0, #30
1000a10c:	47a0      	blx	r4
1000a10e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a110:	2b00      	cmp	r3, #0
1000a112:	d11a      	bne.n	1000a14a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a114:	4f32      	ldr	r7, [pc, #200]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a116:	0038      	movs	r0, r7
1000a118:	4e32      	ldr	r6, [pc, #200]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a11a:	47b0      	blx	r6
1000a11c:	4835      	ldr	r0, [pc, #212]	; (1000a1f4 <ble_pair_key_request_handler+0x11c>)
1000a11e:	4c33      	ldr	r4, [pc, #204]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a120:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a122:	0038      	movs	r0, r7
1000a124:	47b0      	blx	r6
1000a126:	4834      	ldr	r0, [pc, #208]	; (1000a1f8 <ble_pair_key_request_handler+0x120>)
1000a128:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a12a:	8828      	ldrh	r0, [r5, #0]
1000a12c:	2113      	movs	r1, #19
1000a12e:	4b33      	ldr	r3, [pc, #204]	; (1000a1fc <ble_pair_key_request_handler+0x124>)
1000a130:	4798      	blx	r3
1000a132:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a134:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a136:	2b00      	cmp	r3, #0
1000a138:	d04c      	beq.n	1000a1d4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a13a:	4829      	ldr	r0, [pc, #164]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a13c:	4b29      	ldr	r3, [pc, #164]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a13e:	4798      	blx	r3
1000a140:	482f      	ldr	r0, [pc, #188]	; (1000a200 <ble_pair_key_request_handler+0x128>)
1000a142:	4b2a      	ldr	r3, [pc, #168]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a144:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a146:	20e2      	movs	r0, #226	; 0xe2
1000a148:	e044      	b.n	1000a1d4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a14a:	001a      	movs	r2, r3
1000a14c:	3a30      	subs	r2, #48	; 0x30
1000a14e:	2a09      	cmp	r2, #9
1000a150:	d8db      	bhi.n	1000a10a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a152:	aa02      	add	r2, sp, #8
1000a154:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a156:	4038      	ands	r0, r7
1000a158:	4b2a      	ldr	r3, [pc, #168]	; (1000a204 <ble_pair_key_request_handler+0x12c>)
1000a15a:	4798      	blx	r3
1000a15c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a15e:	2e06      	cmp	r6, #6
1000a160:	d026      	beq.n	1000a1b0 <ble_pair_key_request_handler+0xd8>
1000a162:	e7d2      	b.n	1000a10a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a164:	481e      	ldr	r0, [pc, #120]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a166:	4b1f      	ldr	r3, [pc, #124]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a168:	4798      	blx	r3
1000a16a:	4827      	ldr	r0, [pc, #156]	; (1000a208 <ble_pair_key_request_handler+0x130>)
1000a16c:	4b1f      	ldr	r3, [pc, #124]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a16e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a170:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a172:	4e24      	ldr	r6, [pc, #144]	; (1000a204 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a174:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a176:	5ce0      	ldrb	r0, [r4, r3]
1000a178:	47b0      	blx	r6
1000a17a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a17c:	2c06      	cmp	r4, #6
1000a17e:	d1f9      	bne.n	1000a174 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a180:	ab01      	add	r3, sp, #4
1000a182:	7899      	ldrb	r1, [r3, #2]
1000a184:	8828      	ldrh	r0, [r5, #0]
1000a186:	aa02      	add	r2, sp, #8
1000a188:	4b20      	ldr	r3, [pc, #128]	; (1000a20c <ble_pair_key_request_handler+0x134>)
1000a18a:	4798      	blx	r3
1000a18c:	2800      	cmp	r0, #0
1000a18e:	d021      	beq.n	1000a1d4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a190:	4813      	ldr	r0, [pc, #76]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a192:	4b14      	ldr	r3, [pc, #80]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a194:	4798      	blx	r3
1000a196:	481e      	ldr	r0, [pc, #120]	; (1000a210 <ble_pair_key_request_handler+0x138>)
1000a198:	4b14      	ldr	r3, [pc, #80]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a19a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a19c:	2000      	movs	r0, #0
1000a19e:	e019      	b.n	1000a1d4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a1a0:	480f      	ldr	r0, [pc, #60]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a1a2:	4b10      	ldr	r3, [pc, #64]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a1a4:	4798      	blx	r3
1000a1a6:	481b      	ldr	r0, [pc, #108]	; (1000a214 <ble_pair_key_request_handler+0x13c>)
1000a1a8:	4b10      	ldr	r3, [pc, #64]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a1aa:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a1ac:	2000      	movs	r0, #0
1000a1ae:	e011      	b.n	1000a1d4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a1b0:	480b      	ldr	r0, [pc, #44]	; (1000a1e0 <ble_pair_key_request_handler+0x108>)
1000a1b2:	4b0c      	ldr	r3, [pc, #48]	; (1000a1e4 <ble_pair_key_request_handler+0x10c>)
1000a1b4:	4798      	blx	r3
1000a1b6:	4818      	ldr	r0, [pc, #96]	; (1000a218 <ble_pair_key_request_handler+0x140>)
1000a1b8:	4b0c      	ldr	r3, [pc, #48]	; (1000a1ec <ble_pair_key_request_handler+0x114>)
1000a1ba:	4798      	blx	r3
1000a1bc:	e7d8      	b.n	1000a170 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a1be:	ab01      	add	r3, sp, #4
1000a1c0:	885a      	ldrh	r2, [r3, #2]
1000a1c2:	2380      	movs	r3, #128	; 0x80
1000a1c4:	005b      	lsls	r3, r3, #1
1000a1c6:	429a      	cmp	r2, r3
1000a1c8:	d0cc      	beq.n	1000a164 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a1ca:	ab01      	add	r3, sp, #4
1000a1cc:	789b      	ldrb	r3, [r3, #2]
1000a1ce:	2b01      	cmp	r3, #1
1000a1d0:	d0e6      	beq.n	1000a1a0 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a1d2:	2000      	movs	r0, #0
}
1000a1d4:	b005      	add	sp, #20
1000a1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1d8:	100148d4 	.word	0x100148d4
1000a1dc:	1001310d 	.word	0x1001310d
1000a1e0:	10014674 	.word	0x10014674
1000a1e4:	10013251 	.word	0x10013251
1000a1e8:	10014b5c 	.word	0x10014b5c
1000a1ec:	10013131 	.word	0x10013131
1000a1f0:	1000aeb9 	.word	0x1000aeb9
1000a1f4:	10014b84 	.word	0x10014b84
1000a1f8:	10014b90 	.word	0x10014b90
1000a1fc:	1000ccb9 	.word	0x1000ccb9
1000a200:	10014a78 	.word	0x10014a78
1000a204:	10013165 	.word	0x10013165
1000a208:	10014ba4 	.word	0x10014ba4
1000a20c:	1000d8d5 	.word	0x1000d8d5
1000a210:	10014bdc 	.word	0x10014bdc
1000a214:	10014bf4 	.word	0x10014bf4
1000a218:	10014c10 	.word	0x10014c10

1000a21c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a21e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a220:	8805      	ldrh	r5, [r0, #0]
1000a222:	4b2f      	ldr	r3, [pc, #188]	; (1000a2e0 <ble_encryption_request_handler+0xc4>)
1000a224:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a226:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a228:	0010      	movs	r0, r2
1000a22a:	8919      	ldrh	r1, [r3, #8]
1000a22c:	42a9      	cmp	r1, r5
1000a22e:	d116      	bne.n	1000a25e <ble_encryption_request_handler+0x42>
1000a230:	0019      	movs	r1, r3
1000a232:	315e      	adds	r1, #94	; 0x5e
1000a234:	7809      	ldrb	r1, [r1, #0]
1000a236:	2901      	cmp	r1, #1
1000a238:	d911      	bls.n	1000a25e <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a23a:	4929      	ldr	r1, [pc, #164]	; (1000a2e0 <ble_encryption_request_handler+0xc4>)
1000a23c:	0152      	lsls	r2, r2, #5
1000a23e:	1a10      	subs	r0, r2, r0
1000a240:	0080      	lsls	r0, r0, #2
1000a242:	1808      	adds	r0, r1, r0
1000a244:	305e      	adds	r0, #94	; 0x5e
1000a246:	2306      	movs	r3, #6
1000a248:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a24a:	0162      	lsls	r2, r4, #5
1000a24c:	1b13      	subs	r3, r2, r4
1000a24e:	009b      	lsls	r3, r3, #2
1000a250:	18cb      	adds	r3, r1, r3
1000a252:	3370      	adds	r3, #112	; 0x70
1000a254:	881a      	ldrh	r2, [r3, #0]
1000a256:	8873      	ldrh	r3, [r6, #2]
1000a258:	429a      	cmp	r2, r3
1000a25a:	d113      	bne.n	1000a284 <ble_encryption_request_handler+0x68>
1000a25c:	e006      	b.n	1000a26c <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a25e:	3401      	adds	r4, #1
1000a260:	b2e4      	uxtb	r4, r4
1000a262:	3201      	adds	r2, #1
1000a264:	337c      	adds	r3, #124	; 0x7c
1000a266:	2c05      	cmp	r4, #5
1000a268:	d1de      	bne.n	1000a228 <ble_encryption_request_handler+0xc>
1000a26a:	e00b      	b.n	1000a284 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a26c:	0161      	lsls	r1, r4, #5
1000a26e:	1b09      	subs	r1, r1, r4
1000a270:	0089      	lsls	r1, r1, #2
1000a272:	4b1b      	ldr	r3, [pc, #108]	; (1000a2e0 <ble_encryption_request_handler+0xc4>)
1000a274:	1859      	adds	r1, r3, r1
1000a276:	3172      	adds	r1, #114	; 0x72
1000a278:	1d30      	adds	r0, r6, #4
1000a27a:	2208      	movs	r2, #8
1000a27c:	4b19      	ldr	r3, [pc, #100]	; (1000a2e4 <ble_encryption_request_handler+0xc8>)
1000a27e:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a280:	2800      	cmp	r0, #0
1000a282:	d015      	beq.n	1000a2b0 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a284:	4f18      	ldr	r7, [pc, #96]	; (1000a2e8 <ble_encryption_request_handler+0xcc>)
1000a286:	0038      	movs	r0, r7
1000a288:	4e18      	ldr	r6, [pc, #96]	; (1000a2ec <ble_encryption_request_handler+0xd0>)
1000a28a:	47b0      	blx	r6
1000a28c:	4818      	ldr	r0, [pc, #96]	; (1000a2f0 <ble_encryption_request_handler+0xd4>)
1000a28e:	4d19      	ldr	r5, [pc, #100]	; (1000a2f4 <ble_encryption_request_handler+0xd8>)
1000a290:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a292:	0038      	movs	r0, r7
1000a294:	47b0      	blx	r6
1000a296:	4818      	ldr	r0, [pc, #96]	; (1000a2f8 <ble_encryption_request_handler+0xdc>)
1000a298:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a29a:	0163      	lsls	r3, r4, #5
1000a29c:	1b1c      	subs	r4, r3, r4
1000a29e:	00a4      	lsls	r4, r4, #2
1000a2a0:	4b0f      	ldr	r3, [pc, #60]	; (1000a2e0 <ble_encryption_request_handler+0xc4>)
1000a2a2:	191c      	adds	r4, r3, r4
1000a2a4:	8920      	ldrh	r0, [r4, #8]
1000a2a6:	2105      	movs	r1, #5
1000a2a8:	4b14      	ldr	r3, [pc, #80]	; (1000a2fc <ble_encryption_request_handler+0xe0>)
1000a2aa:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a2ac:	20e2      	movs	r0, #226	; 0xe2
1000a2ae:	e016      	b.n	1000a2de <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a2b0:	0162      	lsls	r2, r4, #5
1000a2b2:	1b13      	subs	r3, r2, r4
1000a2b4:	009b      	lsls	r3, r3, #2
1000a2b6:	3360      	adds	r3, #96	; 0x60
1000a2b8:	4909      	ldr	r1, [pc, #36]	; (1000a2e0 <ble_encryption_request_handler+0xc4>)
1000a2ba:	185b      	adds	r3, r3, r1
1000a2bc:	1b14      	subs	r4, r2, r4
1000a2be:	00a4      	lsls	r4, r4, #2
1000a2c0:	190c      	adds	r4, r1, r4
1000a2c2:	7d21      	ldrb	r1, [r4, #20]
1000a2c4:	8830      	ldrh	r0, [r6, #0]
1000a2c6:	2201      	movs	r2, #1
1000a2c8:	4c0d      	ldr	r4, [pc, #52]	; (1000a300 <ble_encryption_request_handler+0xe4>)
1000a2ca:	47a0      	blx	r4
1000a2cc:	2800      	cmp	r0, #0
1000a2ce:	d006      	beq.n	1000a2de <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a2d0:	4805      	ldr	r0, [pc, #20]	; (1000a2e8 <ble_encryption_request_handler+0xcc>)
1000a2d2:	4b06      	ldr	r3, [pc, #24]	; (1000a2ec <ble_encryption_request_handler+0xd0>)
1000a2d4:	4798      	blx	r3
1000a2d6:	480b      	ldr	r0, [pc, #44]	; (1000a304 <ble_encryption_request_handler+0xe8>)
1000a2d8:	4b06      	ldr	r3, [pc, #24]	; (1000a2f4 <ble_encryption_request_handler+0xd8>)
1000a2da:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a2dc:	2000      	movs	r0, #0
}
1000a2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a2e0:	10016ecc 	.word	0x10016ecc
1000a2e4:	100130ef 	.word	0x100130ef
1000a2e8:	10014674 	.word	0x10014674
1000a2ec:	10013251 	.word	0x10013251
1000a2f0:	10014c24 	.word	0x10014c24
1000a2f4:	10013131 	.word	0x10013131
1000a2f8:	10014c5c 	.word	0x10014c5c
1000a2fc:	1000ccb9 	.word	0x1000ccb9
1000a300:	1000da09 	.word	0x1000da09
1000a304:	10014cb4 	.word	0x10014cb4

1000a308 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a308:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a30a:	2a00      	cmp	r2, #0
1000a30c:	d047      	beq.n	1000a39e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a30e:	2906      	cmp	r1, #6
1000a310:	d847      	bhi.n	1000a3a2 <ble_mgr_events_callback_handler+0x9a>
1000a312:	0089      	lsls	r1, r1, #2
1000a314:	4b28      	ldr	r3, [pc, #160]	; (1000a3b8 <ble_mgr_events_callback_handler+0xb0>)
1000a316:	585b      	ldr	r3, [r3, r1]
1000a318:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a31a:	4b28      	ldr	r3, [pc, #160]	; (1000a3bc <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a31c:	2405      	movs	r4, #5
1000a31e:	e00a      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a320:	4b27      	ldr	r3, [pc, #156]	; (1000a3c0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a322:	2401      	movs	r4, #1
			}
			break;
1000a324:	e007      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a326:	4b27      	ldr	r3, [pc, #156]	; (1000a3c4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a328:	2405      	movs	r4, #5
			}
			break;
1000a32a:	e004      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a32c:	4b26      	ldr	r3, [pc, #152]	; (1000a3c8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a32e:	2401      	movs	r4, #1
			}
			break;
1000a330:	e001      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a332:	4b26      	ldr	r3, [pc, #152]	; (1000a3cc <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a334:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a336:	2800      	cmp	r0, #0
1000a338:	d116      	bne.n	1000a368 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a33a:	6819      	ldr	r1, [r3, #0]
1000a33c:	2900      	cmp	r1, #0
1000a33e:	d10b      	bne.n	1000a358 <ble_mgr_events_callback_handler+0x50>
1000a340:	e006      	b.n	1000a350 <ble_mgr_events_callback_handler+0x48>
1000a342:	001d      	movs	r5, r3
1000a344:	3304      	adds	r3, #4
1000a346:	1f18      	subs	r0, r3, #4
1000a348:	6800      	ldr	r0, [r0, #0]
1000a34a:	2800      	cmp	r0, #0
1000a34c:	d106      	bne.n	1000a35c <ble_mgr_events_callback_handler+0x54>
1000a34e:	e000      	b.n	1000a352 <ble_mgr_events_callback_handler+0x4a>
1000a350:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a352:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a354:	2101      	movs	r1, #1
						break;
1000a356:	e02c      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
1000a358:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a35a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a35c:	3101      	adds	r1, #1
1000a35e:	b2c9      	uxtb	r1, r1
1000a360:	42a1      	cmp	r1, r4
1000a362:	d3ee      	bcc.n	1000a342 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a364:	2100      	movs	r1, #0
1000a366:	e024      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
1000a368:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a36a:	2801      	cmp	r0, #1
1000a36c:	d121      	bne.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a36e:	6819      	ldr	r1, [r3, #0]
1000a370:	428a      	cmp	r2, r1
1000a372:	d10c      	bne.n	1000a38e <ble_mgr_events_callback_handler+0x86>
1000a374:	e006      	b.n	1000a384 <ble_mgr_events_callback_handler+0x7c>
1000a376:	001d      	movs	r5, r3
1000a378:	3304      	adds	r3, #4
1000a37a:	1f18      	subs	r0, r3, #4
1000a37c:	6800      	ldr	r0, [r0, #0]
1000a37e:	4282      	cmp	r2, r0
1000a380:	d107      	bne.n	1000a392 <ble_mgr_events_callback_handler+0x8a>
1000a382:	e000      	b.n	1000a386 <ble_mgr_events_callback_handler+0x7e>
1000a384:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a386:	2300      	movs	r3, #0
1000a388:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a38a:	2101      	movs	r1, #1
						break;
1000a38c:	e011      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
1000a38e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a390:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a392:	3101      	adds	r1, #1
1000a394:	b2c9      	uxtb	r1, r1
1000a396:	42a1      	cmp	r1, r4
1000a398:	d3ed      	bcc.n	1000a376 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a39a:	2100      	movs	r1, #0
1000a39c:	e009      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a39e:	2100      	movs	r1, #0
1000a3a0:	e007      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a3a2:	2100      	movs	r1, #0
1000a3a4:	e005      	b.n	1000a3b2 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a3a6:	4b0a      	ldr	r3, [pc, #40]	; (1000a3d0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a3a8:	2405      	movs	r4, #5
1000a3aa:	e7c4      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a3ac:	4b09      	ldr	r3, [pc, #36]	; (1000a3d4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a3ae:	2401      	movs	r4, #1
1000a3b0:	e7c1      	b.n	1000a336 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a3b2:	0008      	movs	r0, r1
1000a3b4:	bd30      	pop	{r4, r5, pc}
1000a3b6:	46c0      	nop			; (mov r8, r8)
1000a3b8:	100147c8 	.word	0x100147c8
1000a3bc:	10016eb8 	.word	0x10016eb8
1000a3c0:	10016eb4 	.word	0x10016eb4
1000a3c4:	1001713c 	.word	0x1001713c
1000a3c8:	100176f0 	.word	0x100176f0
1000a3cc:	10017150 	.word	0x10017150
1000a3d0:	10017164 	.word	0x10017164
1000a3d4:	100171ac 	.word	0x100171ac

1000a3d8 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3da:	465f      	mov	r7, fp
1000a3dc:	4656      	mov	r6, sl
1000a3de:	464d      	mov	r5, r9
1000a3e0:	4644      	mov	r4, r8
1000a3e2:	b4f0      	push	{r4, r5, r6, r7}
1000a3e4:	b091      	sub	sp, #68	; 0x44
1000a3e6:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a3e8:	2400      	movs	r4, #0
1000a3ea:	4b7e      	ldr	r3, [pc, #504]	; (1000a5e4 <ble_device_init+0x20c>)
1000a3ec:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a3ee:	2207      	movs	r2, #7
1000a3f0:	2100      	movs	r1, #0
1000a3f2:	487d      	ldr	r0, [pc, #500]	; (1000a5e8 <ble_device_init+0x210>)
1000a3f4:	4e7d      	ldr	r6, [pc, #500]	; (1000a5ec <ble_device_init+0x214>)
1000a3f6:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a3f8:	2212      	movs	r2, #18
1000a3fa:	2100      	movs	r1, #0
1000a3fc:	487c      	ldr	r0, [pc, #496]	; (1000a5f0 <ble_device_init+0x218>)
1000a3fe:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a400:	4a7c      	ldr	r2, [pc, #496]	; (1000a5f4 <ble_device_init+0x21c>)
1000a402:	2100      	movs	r1, #0
1000a404:	487c      	ldr	r0, [pc, #496]	; (1000a5f8 <ble_device_init+0x220>)
1000a406:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a408:	4b7c      	ldr	r3, [pc, #496]	; (1000a5fc <ble_device_init+0x224>)
1000a40a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a40c:	22cd      	movs	r2, #205	; 0xcd
1000a40e:	0092      	lsls	r2, r2, #2
1000a410:	2100      	movs	r1, #0
1000a412:	487b      	ldr	r0, [pc, #492]	; (1000a600 <ble_device_init+0x228>)
1000a414:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a416:	4b7b      	ldr	r3, [pc, #492]	; (1000a604 <ble_device_init+0x22c>)
1000a418:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a41a:	2283      	movs	r2, #131	; 0x83
1000a41c:	0092      	lsls	r2, r2, #2
1000a41e:	2100      	movs	r1, #0
1000a420:	4879      	ldr	r0, [pc, #484]	; (1000a608 <ble_device_init+0x230>)
1000a422:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a424:	4b79      	ldr	r3, [pc, #484]	; (1000a60c <ble_device_init+0x234>)
1000a426:	469b      	mov	fp, r3
1000a428:	2380      	movs	r3, #128	; 0x80
1000a42a:	00db      	lsls	r3, r3, #3
1000a42c:	469a      	mov	sl, r3
1000a42e:	001a      	movs	r2, r3
1000a430:	2100      	movs	r1, #0
1000a432:	4658      	mov	r0, fp
1000a434:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a436:	4b76      	ldr	r3, [pc, #472]	; (1000a610 <ble_device_init+0x238>)
1000a438:	4699      	mov	r9, r3
1000a43a:	2380      	movs	r3, #128	; 0x80
1000a43c:	015b      	lsls	r3, r3, #5
1000a43e:	4698      	mov	r8, r3
1000a440:	001a      	movs	r2, r3
1000a442:	2100      	movs	r1, #0
1000a444:	4648      	mov	r0, r9
1000a446:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a448:	4f72      	ldr	r7, [pc, #456]	; (1000a614 <ble_device_init+0x23c>)
1000a44a:	221c      	movs	r2, #28
1000a44c:	2100      	movs	r1, #0
1000a44e:	0038      	movs	r0, r7
1000a450:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a452:	465b      	mov	r3, fp
1000a454:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a456:	4653      	mov	r3, sl
1000a458:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a45a:	464b      	mov	r3, r9
1000a45c:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a45e:	4643      	mov	r3, r8
1000a460:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a462:	4b6d      	ldr	r3, [pc, #436]	; (1000a618 <ble_device_init+0x240>)
1000a464:	601c      	str	r4, [r3, #0]
1000a466:	605c      	str	r4, [r3, #4]
1000a468:	609c      	str	r4, [r3, #8]
1000a46a:	60dc      	str	r4, [r3, #12]
1000a46c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a46e:	4b6b      	ldr	r3, [pc, #428]	; (1000a61c <ble_device_init+0x244>)
1000a470:	601c      	str	r4, [r3, #0]
1000a472:	605c      	str	r4, [r3, #4]
1000a474:	609c      	str	r4, [r3, #8]
1000a476:	60dc      	str	r4, [r3, #12]
1000a478:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a47a:	4b69      	ldr	r3, [pc, #420]	; (1000a620 <ble_device_init+0x248>)
1000a47c:	601c      	str	r4, [r3, #0]
1000a47e:	605c      	str	r4, [r3, #4]
1000a480:	609c      	str	r4, [r3, #8]
1000a482:	60dc      	str	r4, [r3, #12]
1000a484:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a486:	4b67      	ldr	r3, [pc, #412]	; (1000a624 <ble_device_init+0x24c>)
1000a488:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a48a:	4b67      	ldr	r3, [pc, #412]	; (1000a628 <ble_device_init+0x250>)
1000a48c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a48e:	4b67      	ldr	r3, [pc, #412]	; (1000a62c <ble_device_init+0x254>)
1000a490:	601c      	str	r4, [r3, #0]
1000a492:	605c      	str	r4, [r3, #4]
1000a494:	609c      	str	r4, [r3, #8]
1000a496:	60dc      	str	r4, [r3, #12]
1000a498:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a49a:	4b65      	ldr	r3, [pc, #404]	; (1000a630 <ble_device_init+0x258>)
1000a49c:	601c      	str	r4, [r3, #0]
1000a49e:	4c65      	ldr	r4, [pc, #404]	; (1000a634 <ble_device_init+0x25c>)
1000a4a0:	239b      	movs	r3, #155	; 0x9b
1000a4a2:	009b      	lsls	r3, r3, #2
1000a4a4:	4698      	mov	r8, r3
1000a4a6:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a4a8:	4f50      	ldr	r7, [pc, #320]	; (1000a5ec <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a4aa:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a4ac:	227c      	movs	r2, #124	; 0x7c
1000a4ae:	2100      	movs	r1, #0
1000a4b0:	0020      	movs	r0, r4
1000a4b2:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a4b4:	0023      	movs	r3, r4
1000a4b6:	335e      	adds	r3, #94	; 0x5e
1000a4b8:	2200      	movs	r2, #0
1000a4ba:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a4bc:	7626      	strb	r6, [r4, #24]
1000a4be:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a4c0:	45a0      	cmp	r8, r4
1000a4c2:	d1f3      	bne.n	1000a4ac <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a4c4:	4b5c      	ldr	r3, [pc, #368]	; (1000a638 <ble_device_init+0x260>)
1000a4c6:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a4c8:	4c52      	ldr	r4, [pc, #328]	; (1000a614 <ble_device_init+0x23c>)
1000a4ca:	4b4a      	ldr	r3, [pc, #296]	; (1000a5f4 <ble_device_init+0x21c>)
1000a4cc:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a4ce:	4b4a      	ldr	r3, [pc, #296]	; (1000a5f8 <ble_device_init+0x220>)
1000a4d0:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a4d2:	485a      	ldr	r0, [pc, #360]	; (1000a63c <ble_device_init+0x264>)
1000a4d4:	4b5a      	ldr	r3, [pc, #360]	; (1000a640 <ble_device_init+0x268>)
1000a4d6:	4798      	blx	r3
1000a4d8:	485a      	ldr	r0, [pc, #360]	; (1000a644 <ble_device_init+0x26c>)
1000a4da:	4b5b      	ldr	r3, [pc, #364]	; (1000a648 <ble_device_init+0x270>)
1000a4dc:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a4de:	0020      	movs	r0, r4
1000a4e0:	4b5a      	ldr	r3, [pc, #360]	; (1000a64c <ble_device_init+0x274>)
1000a4e2:	4798      	blx	r3
1000a4e4:	2800      	cmp	r0, #0
1000a4e6:	d00b      	beq.n	1000a500 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a4e8:	4e54      	ldr	r6, [pc, #336]	; (1000a63c <ble_device_init+0x264>)
1000a4ea:	0030      	movs	r0, r6
1000a4ec:	4d54      	ldr	r5, [pc, #336]	; (1000a640 <ble_device_init+0x268>)
1000a4ee:	47a8      	blx	r5
1000a4f0:	4857      	ldr	r0, [pc, #348]	; (1000a650 <ble_device_init+0x278>)
1000a4f2:	4c55      	ldr	r4, [pc, #340]	; (1000a648 <ble_device_init+0x270>)
1000a4f4:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a4f6:	0030      	movs	r0, r6
1000a4f8:	47a8      	blx	r5
1000a4fa:	4856      	ldr	r0, [pc, #344]	; (1000a654 <ble_device_init+0x27c>)
1000a4fc:	47a0      	blx	r4
1000a4fe:	e7fe      	b.n	1000a4fe <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a500:	4a55      	ldr	r2, [pc, #340]	; (1000a658 <ble_device_init+0x280>)
1000a502:	2100      	movs	r1, #0
1000a504:	2000      	movs	r0, #0
1000a506:	4c55      	ldr	r4, [pc, #340]	; (1000a65c <ble_device_init+0x284>)
1000a508:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a50a:	4a55      	ldr	r2, [pc, #340]	; (1000a660 <ble_device_init+0x288>)
1000a50c:	2102      	movs	r1, #2
1000a50e:	2000      	movs	r0, #0
1000a510:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a512:	2106      	movs	r1, #6
1000a514:	4853      	ldr	r0, [pc, #332]	; (1000a664 <ble_device_init+0x28c>)
1000a516:	4b54      	ldr	r3, [pc, #336]	; (1000a668 <ble_device_init+0x290>)
1000a518:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a51a:	2800      	cmp	r0, #0
1000a51c:	d005      	beq.n	1000a52a <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a51e:	4847      	ldr	r0, [pc, #284]	; (1000a63c <ble_device_init+0x264>)
1000a520:	4b47      	ldr	r3, [pc, #284]	; (1000a640 <ble_device_init+0x268>)
1000a522:	4798      	blx	r3
1000a524:	4851      	ldr	r0, [pc, #324]	; (1000a66c <ble_device_init+0x294>)
1000a526:	4b48      	ldr	r3, [pc, #288]	; (1000a648 <ble_device_init+0x270>)
1000a528:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a52a:	2207      	movs	r2, #7
1000a52c:	4950      	ldr	r1, [pc, #320]	; (1000a670 <ble_device_init+0x298>)
1000a52e:	3108      	adds	r1, #8
1000a530:	a804      	add	r0, sp, #16
1000a532:	4b50      	ldr	r3, [pc, #320]	; (1000a674 <ble_device_init+0x29c>)
1000a534:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a536:	2226      	movs	r2, #38	; 0x26
1000a538:	2100      	movs	r1, #0
1000a53a:	a806      	add	r0, sp, #24
1000a53c:	4b2b      	ldr	r3, [pc, #172]	; (1000a5ec <ble_device_init+0x214>)
1000a53e:	4798      	blx	r3
	
	if (addr == NULL)
1000a540:	2d00      	cmp	r5, #0
1000a542:	d10c      	bne.n	1000a55e <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a544:	a804      	add	r0, sp, #16
1000a546:	4b4c      	ldr	r3, [pc, #304]	; (1000a678 <ble_device_init+0x2a0>)
1000a548:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a54a:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a54c:	2800      	cmp	r0, #0
1000a54e:	d006      	beq.n	1000a55e <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a550:	483a      	ldr	r0, [pc, #232]	; (1000a63c <ble_device_init+0x264>)
1000a552:	4b3b      	ldr	r3, [pc, #236]	; (1000a640 <ble_device_init+0x268>)
1000a554:	4798      	blx	r3
1000a556:	4849      	ldr	r0, [pc, #292]	; (1000a67c <ble_device_init+0x2a4>)
1000a558:	4b3b      	ldr	r3, [pc, #236]	; (1000a648 <ble_device_init+0x270>)
1000a55a:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a55c:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a55e:	4837      	ldr	r0, [pc, #220]	; (1000a63c <ble_device_init+0x264>)
1000a560:	4b37      	ldr	r3, [pc, #220]	; (1000a640 <ble_device_init+0x268>)
1000a562:	4798      	blx	r3
1000a564:	792b      	ldrb	r3, [r5, #4]
1000a566:	796a      	ldrb	r2, [r5, #5]
1000a568:	79a9      	ldrb	r1, [r5, #6]
1000a56a:	7828      	ldrb	r0, [r5, #0]
1000a56c:	9003      	str	r0, [sp, #12]
1000a56e:	7868      	ldrb	r0, [r5, #1]
1000a570:	9002      	str	r0, [sp, #8]
1000a572:	78a8      	ldrb	r0, [r5, #2]
1000a574:	9001      	str	r0, [sp, #4]
1000a576:	78e8      	ldrb	r0, [r5, #3]
1000a578:	9000      	str	r0, [sp, #0]
1000a57a:	4841      	ldr	r0, [pc, #260]	; (1000a680 <ble_device_init+0x2a8>)
1000a57c:	4c32      	ldr	r4, [pc, #200]	; (1000a648 <ble_device_init+0x270>)
1000a57e:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a580:	ac06      	add	r4, sp, #24
1000a582:	230a      	movs	r3, #10
1000a584:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a586:	4b3f      	ldr	r3, [pc, #252]	; (1000a684 <ble_device_init+0x2ac>)
1000a588:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a58a:	2207      	movs	r2, #7
1000a58c:	0029      	movs	r1, r5
1000a58e:	a807      	add	r0, sp, #28
1000a590:	4b38      	ldr	r3, [pc, #224]	; (1000a674 <ble_device_init+0x29c>)
1000a592:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a594:	2300      	movs	r3, #0
1000a596:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a598:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a59a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a59c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a59e:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a5a0:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a5a2:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a5a4:	2380      	movs	r3, #128	; 0x80
1000a5a6:	009b      	lsls	r3, r3, #2
1000a5a8:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a5aa:	0020      	movs	r0, r4
1000a5ac:	4b36      	ldr	r3, [pc, #216]	; (1000a688 <ble_device_init+0x2b0>)
1000a5ae:	4798      	blx	r3
1000a5b0:	2800      	cmp	r0, #0
1000a5b2:	d005      	beq.n	1000a5c0 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a5b4:	4821      	ldr	r0, [pc, #132]	; (1000a63c <ble_device_init+0x264>)
1000a5b6:	4b22      	ldr	r3, [pc, #136]	; (1000a640 <ble_device_init+0x268>)
1000a5b8:	4798      	blx	r3
1000a5ba:	4834      	ldr	r0, [pc, #208]	; (1000a68c <ble_device_init+0x2b4>)
1000a5bc:	4b22      	ldr	r3, [pc, #136]	; (1000a648 <ble_device_init+0x270>)
1000a5be:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a5c0:	0028      	movs	r0, r5
1000a5c2:	4b33      	ldr	r3, [pc, #204]	; (1000a690 <ble_device_init+0x2b8>)
1000a5c4:	4798      	blx	r3
1000a5c6:	2800      	cmp	r0, #0
1000a5c8:	d005      	beq.n	1000a5d6 <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a5ca:	481c      	ldr	r0, [pc, #112]	; (1000a63c <ble_device_init+0x264>)
1000a5cc:	4b1c      	ldr	r3, [pc, #112]	; (1000a640 <ble_device_init+0x268>)
1000a5ce:	4798      	blx	r3
1000a5d0:	4830      	ldr	r0, [pc, #192]	; (1000a694 <ble_device_init+0x2bc>)
1000a5d2:	4b1d      	ldr	r3, [pc, #116]	; (1000a648 <ble_device_init+0x270>)
1000a5d4:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a5d6:	b011      	add	sp, #68	; 0x44
1000a5d8:	bc3c      	pop	{r2, r3, r4, r5}
1000a5da:	4690      	mov	r8, r2
1000a5dc:	4699      	mov	r9, r3
1000a5de:	46a2      	mov	sl, r4
1000a5e0:	46ab      	mov	fp, r5
1000a5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5e4:	10015c78 	.word	0x10015c78
1000a5e8:	10015c80 	.word	0x10015c80
1000a5ec:	1001311f 	.word	0x1001311f
1000a5f0:	10017178 	.word	0x10017178
1000a5f4:	000004e2 	.word	0x000004e2
1000a5f8:	10015798 	.word	0x10015798
1000a5fc:	10015c7c 	.word	0x10015c7c
1000a600:	100171b0 	.word	0x100171b0
1000a604:	100171a8 	.word	0x100171a8
1000a608:	100174e4 	.word	0x100174e4
1000a60c:	10015398 	.word	0x10015398
1000a610:	10015c88 	.word	0x10015c88
1000a614:	1001718c 	.word	0x1001718c
1000a618:	10017150 	.word	0x10017150
1000a61c:	10017164 	.word	0x10017164
1000a620:	10016eb8 	.word	0x10016eb8
1000a624:	100171ac 	.word	0x100171ac
1000a628:	10016eb4 	.word	0x10016eb4
1000a62c:	1001713c 	.word	0x1001713c
1000a630:	100176f0 	.word	0x100176f0
1000a634:	10016ecc 	.word	0x10016ecc
1000a638:	10017138 	.word	0x10017138
1000a63c:	10014674 	.word	0x10014674
1000a640:	10013251 	.word	0x10013251
1000a644:	10014cd4 	.word	0x10014cd4
1000a648:	10013131 	.word	0x10013131
1000a64c:	1000c8d1 	.word	0x1000c8d1
1000a650:	10014ce8 	.word	0x10014ce8
1000a654:	10014d08 	.word	0x10014d08
1000a658:	10014f3c 	.word	0x10014f3c
1000a65c:	1000a309 	.word	0x1000a309
1000a660:	10014904 	.word	0x10014904
1000a664:	10014d44 	.word	0x10014d44
1000a668:	1000c7e9 	.word	0x1000c7e9
1000a66c:	10014d4c 	.word	0x10014d4c
1000a670:	100148d4 	.word	0x100148d4
1000a674:	1001310d 	.word	0x1001310d
1000a678:	1000c81d 	.word	0x1000c81d
1000a67c:	10014d64 	.word	0x10014d64
1000a680:	10014d7c 	.word	0x10014d7c
1000a684:	00003a98 	.word	0x00003a98
1000a688:	1000c841 	.word	0x1000c841
1000a68c:	10014db4 	.word	0x10014db4
1000a690:	1000ca85 	.word	0x1000ca85
1000a694:	10014dd8 	.word	0x10014dd8

1000a698 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a698:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a69a:	2201      	movs	r2, #1
1000a69c:	2101      	movs	r1, #1
1000a69e:	4b06      	ldr	r3, [pc, #24]	; (1000a6b8 <ble_send_slave_sec_request+0x20>)
1000a6a0:	4798      	blx	r3
1000a6a2:	2800      	cmp	r0, #0
1000a6a4:	d006      	beq.n	1000a6b4 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a6a6:	4805      	ldr	r0, [pc, #20]	; (1000a6bc <ble_send_slave_sec_request+0x24>)
1000a6a8:	4b05      	ldr	r3, [pc, #20]	; (1000a6c0 <ble_send_slave_sec_request+0x28>)
1000a6aa:	4798      	blx	r3
1000a6ac:	4805      	ldr	r0, [pc, #20]	; (1000a6c4 <ble_send_slave_sec_request+0x2c>)
1000a6ae:	4b06      	ldr	r3, [pc, #24]	; (1000a6c8 <ble_send_slave_sec_request+0x30>)
1000a6b0:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a6b2:	20e2      	movs	r0, #226	; 0xe2
}
1000a6b4:	bd10      	pop	{r4, pc}
1000a6b6:	46c0      	nop			; (mov r8, r8)
1000a6b8:	1000d951 	.word	0x1000d951
1000a6bc:	10014674 	.word	0x10014674
1000a6c0:	10013251 	.word	0x10013251
1000a6c4:	10014e14 	.word	0x10014e14
1000a6c8:	10013131 	.word	0x10013131

1000a6cc <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6ce:	465f      	mov	r7, fp
1000a6d0:	464e      	mov	r6, r9
1000a6d2:	4645      	mov	r5, r8
1000a6d4:	b4e0      	push	{r5, r6, r7}
1000a6d6:	b09a      	sub	sp, #104	; 0x68
1000a6d8:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a6da:	7a86      	ldrb	r6, [r0, #10]
1000a6dc:	2e00      	cmp	r6, #0
1000a6de:	d000      	beq.n	1000a6e2 <ble_connected_state_handler+0x16>
1000a6e0:	e0c6      	b.n	1000a870 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a6e2:	4875      	ldr	r0, [pc, #468]	; (1000a8b8 <ble_connected_state_handler+0x1ec>)
1000a6e4:	4f75      	ldr	r7, [pc, #468]	; (1000a8bc <ble_connected_state_handler+0x1f0>)
1000a6e6:	47b8      	blx	r7
1000a6e8:	792b      	ldrb	r3, [r5, #4]
1000a6ea:	796a      	ldrb	r2, [r5, #5]
1000a6ec:	79a9      	ldrb	r1, [r5, #6]
1000a6ee:	7868      	ldrb	r0, [r5, #1]
1000a6f0:	9002      	str	r0, [sp, #8]
1000a6f2:	78a8      	ldrb	r0, [r5, #2]
1000a6f4:	9001      	str	r0, [sp, #4]
1000a6f6:	78e8      	ldrb	r0, [r5, #3]
1000a6f8:	9000      	str	r0, [sp, #0]
1000a6fa:	4871      	ldr	r0, [pc, #452]	; (1000a8c0 <ble_connected_state_handler+0x1f4>)
1000a6fc:	4c71      	ldr	r4, [pc, #452]	; (1000a8c4 <ble_connected_state_handler+0x1f8>)
1000a6fe:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a700:	486d      	ldr	r0, [pc, #436]	; (1000a8b8 <ble_connected_state_handler+0x1ec>)
1000a702:	47b8      	blx	r7
1000a704:	8929      	ldrh	r1, [r5, #8]
1000a706:	4870      	ldr	r0, [pc, #448]	; (1000a8c8 <ble_connected_state_handler+0x1fc>)
1000a708:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a70a:	2212      	movs	r2, #18
1000a70c:	0029      	movs	r1, r5
1000a70e:	486f      	ldr	r0, [pc, #444]	; (1000a8cc <ble_connected_state_handler+0x200>)
1000a710:	4b6f      	ldr	r3, [pc, #444]	; (1000a8d0 <ble_connected_state_handler+0x204>)
1000a712:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a714:	9504      	str	r5, [sp, #16]
1000a716:	2207      	movs	r2, #7
1000a718:	0029      	movs	r1, r5
1000a71a:	486e      	ldr	r0, [pc, #440]	; (1000a8d4 <ble_connected_state_handler+0x208>)
1000a71c:	4b6e      	ldr	r3, [pc, #440]	; (1000a8d8 <ble_connected_state_handler+0x20c>)
1000a71e:	4798      	blx	r3
1000a720:	2800      	cmp	r0, #0
1000a722:	d100      	bne.n	1000a726 <ble_connected_state_handler+0x5a>
1000a724:	e0ad      	b.n	1000a882 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a726:	782b      	ldrb	r3, [r5, #0]
1000a728:	2b02      	cmp	r3, #2
1000a72a:	d000      	beq.n	1000a72e <ble_connected_state_handler+0x62>
1000a72c:	e0a9      	b.n	1000a882 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a72e:	2250      	movs	r2, #80	; 0x50
1000a730:	2100      	movs	r1, #0
1000a732:	a806      	add	r0, sp, #24
1000a734:	4b69      	ldr	r3, [pc, #420]	; (1000a8dc <ble_connected_state_handler+0x210>)
1000a736:	4798      	blx	r3
1000a738:	4f69      	ldr	r7, [pc, #420]	; (1000a8e0 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a73a:	2300      	movs	r3, #0
1000a73c:	e00b      	b.n	1000a756 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a73e:	1c59      	adds	r1, r3, #1
1000a740:	7814      	ldrb	r4, [r2, #0]
1000a742:	a806      	add	r0, sp, #24
1000a744:	54c4      	strb	r4, [r0, r3]
1000a746:	3201      	adds	r2, #1
1000a748:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a74a:	42b3      	cmp	r3, r6
1000a74c:	d1f7      	bne.n	1000a73e <ble_connected_state_handler+0x72>
1000a74e:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a750:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a752:	2b50      	cmp	r3, #80	; 0x50
1000a754:	d004      	beq.n	1000a760 <ble_connected_state_handler+0x94>
1000a756:	001e      	movs	r6, r3
1000a758:	3610      	adds	r6, #16
1000a75a:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a75c:	003a      	movs	r2, r7
1000a75e:	e7ee      	b.n	1000a73e <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a760:	aa06      	add	r2, sp, #24
1000a762:	0029      	movs	r1, r5
1000a764:	2005      	movs	r0, #5
1000a766:	4b5f      	ldr	r3, [pc, #380]	; (1000a8e4 <ble_connected_state_handler+0x218>)
1000a768:	4798      	blx	r3
1000a76a:	1e06      	subs	r6, r0, #0
1000a76c:	d100      	bne.n	1000a770 <ble_connected_state_handler+0xa4>
1000a76e:	e09c      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a770:	4851      	ldr	r0, [pc, #324]	; (1000a8b8 <ble_connected_state_handler+0x1ec>)
1000a772:	4b52      	ldr	r3, [pc, #328]	; (1000a8bc <ble_connected_state_handler+0x1f0>)
1000a774:	4798      	blx	r3
1000a776:	485c      	ldr	r0, [pc, #368]	; (1000a8e8 <ble_connected_state_handler+0x21c>)
1000a778:	4b52      	ldr	r3, [pc, #328]	; (1000a8c4 <ble_connected_state_handler+0x1f8>)
1000a77a:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a77c:	26e2      	movs	r6, #226	; 0xe2
1000a77e:	e094      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
1000a780:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a782:	9405      	str	r4, [sp, #20]
1000a784:	2207      	movs	r2, #7
1000a786:	9904      	ldr	r1, [sp, #16]
1000a788:	4648      	mov	r0, r9
1000a78a:	47d8      	blx	fp
1000a78c:	2800      	cmp	r0, #0
1000a78e:	d109      	bne.n	1000a7a4 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a790:	9a05      	ldr	r2, [sp, #20]
1000a792:	0153      	lsls	r3, r2, #5
1000a794:	1a9b      	subs	r3, r3, r2
1000a796:	009a      	lsls	r2, r3, #2
1000a798:	4b54      	ldr	r3, [pc, #336]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a79a:	189b      	adds	r3, r3, r2
1000a79c:	335e      	adds	r3, #94	; 0x5e
1000a79e:	2202      	movs	r2, #2
1000a7a0:	701a      	strb	r2, [r3, #0]
1000a7a2:	e02b      	b.n	1000a7fc <ble_connected_state_handler+0x130>
1000a7a4:	3401      	adds	r4, #1
1000a7a6:	237c      	movs	r3, #124	; 0x7c
1000a7a8:	469c      	mov	ip, r3
1000a7aa:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a7ac:	2c05      	cmp	r4, #5
1000a7ae:	d1e7      	bne.n	1000a780 <ble_connected_state_handler+0xb4>
1000a7b0:	e072      	b.n	1000a898 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a7b2:	001c      	movs	r4, r3
1000a7b4:	7811      	ldrb	r1, [r2, #0]
1000a7b6:	2900      	cmp	r1, #0
1000a7b8:	d11a      	bne.n	1000a7f0 <ble_connected_state_handler+0x124>
1000a7ba:	e001      	b.n	1000a7c0 <ble_connected_state_handler+0xf4>
1000a7bc:	2400      	movs	r4, #0
1000a7be:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a7c0:	0163      	lsls	r3, r4, #5
1000a7c2:	4699      	mov	r9, r3
1000a7c4:	1b18      	subs	r0, r3, r4
1000a7c6:	0080      	lsls	r0, r0, #2
1000a7c8:	4b48      	ldr	r3, [pc, #288]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a7ca:	4698      	mov	r8, r3
1000a7cc:	4440      	add	r0, r8
1000a7ce:	2212      	movs	r2, #18
1000a7d0:	0029      	movs	r1, r5
1000a7d2:	4b3f      	ldr	r3, [pc, #252]	; (1000a8d0 <ble_connected_state_handler+0x204>)
1000a7d4:	4798      	blx	r3
						ble_device_count++;
1000a7d6:	4a46      	ldr	r2, [pc, #280]	; (1000a8f0 <ble_connected_state_handler+0x224>)
1000a7d8:	7813      	ldrb	r3, [r2, #0]
1000a7da:	3301      	adds	r3, #1
1000a7dc:	b2db      	uxtb	r3, r3
1000a7de:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a7e0:	464b      	mov	r3, r9
1000a7e2:	1b1b      	subs	r3, r3, r4
1000a7e4:	009b      	lsls	r3, r3, #2
1000a7e6:	4443      	add	r3, r8
1000a7e8:	335e      	adds	r3, #94	; 0x5e
1000a7ea:	2202      	movs	r2, #2
1000a7ec:	701a      	strb	r2, [r3, #0]
						break;
1000a7ee:	e005      	b.n	1000a7fc <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a7f0:	1c79      	adds	r1, r7, #1
1000a7f2:	b2cf      	uxtb	r7, r1
1000a7f4:	3301      	adds	r3, #1
1000a7f6:	327c      	adds	r2, #124	; 0x7c
1000a7f8:	2f05      	cmp	r7, #5
1000a7fa:	d1da      	bne.n	1000a7b2 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a7fc:	2207      	movs	r2, #7
1000a7fe:	0029      	movs	r1, r5
1000a800:	4834      	ldr	r0, [pc, #208]	; (1000a8d4 <ble_connected_state_handler+0x208>)
1000a802:	4b35      	ldr	r3, [pc, #212]	; (1000a8d8 <ble_connected_state_handler+0x20c>)
1000a804:	4798      	blx	r3
1000a806:	2800      	cmp	r0, #0
1000a808:	d10c      	bne.n	1000a824 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a80a:	017b      	lsls	r3, r7, #5
1000a80c:	1bdb      	subs	r3, r3, r7
1000a80e:	009b      	lsls	r3, r3, #2
1000a810:	4a36      	ldr	r2, [pc, #216]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a812:	18d3      	adds	r3, r2, r3
1000a814:	2205      	movs	r2, #5
1000a816:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a818:	3202      	adds	r2, #2
1000a81a:	2100      	movs	r1, #0
1000a81c:	482d      	ldr	r0, [pc, #180]	; (1000a8d4 <ble_connected_state_handler+0x208>)
1000a81e:	4b2f      	ldr	r3, [pc, #188]	; (1000a8dc <ble_connected_state_handler+0x210>)
1000a820:	4798      	blx	r3
1000a822:	e042      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a824:	4b31      	ldr	r3, [pc, #196]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a826:	4698      	mov	r8, r3
1000a828:	017c      	lsls	r4, r7, #5
1000a82a:	1be3      	subs	r3, r4, r7
1000a82c:	009b      	lsls	r3, r3, #2
1000a82e:	4443      	add	r3, r8
1000a830:	220a      	movs	r2, #10
1000a832:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a834:	3a03      	subs	r2, #3
1000a836:	2100      	movs	r1, #0
1000a838:	4826      	ldr	r0, [pc, #152]	; (1000a8d4 <ble_connected_state_handler+0x208>)
1000a83a:	4b28      	ldr	r3, [pc, #160]	; (1000a8dc <ble_connected_state_handler+0x210>)
1000a83c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a83e:	1be4      	subs	r4, r4, r7
1000a840:	00a4      	lsls	r4, r4, #2
1000a842:	4444      	add	r4, r8
1000a844:	7ca3      	ldrb	r3, [r4, #18]
1000a846:	2b0a      	cmp	r3, #10
1000a848:	d12f      	bne.n	1000a8aa <ble_connected_state_handler+0x1de>
1000a84a:	e00d      	b.n	1000a868 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a84c:	481a      	ldr	r0, [pc, #104]	; (1000a8b8 <ble_connected_state_handler+0x1ec>)
1000a84e:	4b1b      	ldr	r3, [pc, #108]	; (1000a8bc <ble_connected_state_handler+0x1f0>)
1000a850:	4798      	blx	r3
1000a852:	4b27      	ldr	r3, [pc, #156]	; (1000a8f0 <ble_connected_state_handler+0x224>)
1000a854:	7819      	ldrb	r1, [r3, #0]
1000a856:	b2c9      	uxtb	r1, r1
1000a858:	4826      	ldr	r0, [pc, #152]	; (1000a8f4 <ble_connected_state_handler+0x228>)
1000a85a:	4b1a      	ldr	r3, [pc, #104]	; (1000a8c4 <ble_connected_state_handler+0x1f8>)
1000a85c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a85e:	8928      	ldrh	r0, [r5, #8]
1000a860:	2113      	movs	r1, #19
1000a862:	4b25      	ldr	r3, [pc, #148]	; (1000a8f8 <ble_connected_state_handler+0x22c>)
1000a864:	4798      	blx	r3
1000a866:	e020      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a868:	8928      	ldrh	r0, [r5, #8]
1000a86a:	4b24      	ldr	r3, [pc, #144]	; (1000a8fc <ble_connected_state_handler+0x230>)
1000a86c:	4798      	blx	r3
1000a86e:	e01c      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a870:	4811      	ldr	r0, [pc, #68]	; (1000a8b8 <ble_connected_state_handler+0x1ec>)
1000a872:	4b12      	ldr	r3, [pc, #72]	; (1000a8bc <ble_connected_state_handler+0x1f0>)
1000a874:	4798      	blx	r3
1000a876:	7aa9      	ldrb	r1, [r5, #10]
1000a878:	4821      	ldr	r0, [pc, #132]	; (1000a900 <ble_connected_state_handler+0x234>)
1000a87a:	4b12      	ldr	r3, [pc, #72]	; (1000a8c4 <ble_connected_state_handler+0x1f8>)
1000a87c:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a87e:	2600      	movs	r6, #0
1000a880:	e013      	b.n	1000a8aa <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a882:	4b1b      	ldr	r3, [pc, #108]	; (1000a8f0 <ble_connected_state_handler+0x224>)
1000a884:	781b      	ldrb	r3, [r3, #0]
1000a886:	b2db      	uxtb	r3, r3
1000a888:	2b04      	cmp	r3, #4
1000a88a:	d8df      	bhi.n	1000a84c <ble_connected_state_handler+0x180>
1000a88c:	4b17      	ldr	r3, [pc, #92]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a88e:	4699      	mov	r9, r3
1000a890:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a892:	4b11      	ldr	r3, [pc, #68]	; (1000a8d8 <ble_connected_state_handler+0x20c>)
1000a894:	469b      	mov	fp, r3
1000a896:	e773      	b.n	1000a780 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a898:	235e      	movs	r3, #94	; 0x5e
1000a89a:	4a14      	ldr	r2, [pc, #80]	; (1000a8ec <ble_connected_state_handler+0x220>)
1000a89c:	5cd3      	ldrb	r3, [r2, r3]
1000a89e:	2b00      	cmp	r3, #0
1000a8a0:	d08c      	beq.n	1000a7bc <ble_connected_state_handler+0xf0>
1000a8a2:	4a18      	ldr	r2, [pc, #96]	; (1000a904 <ble_connected_state_handler+0x238>)
1000a8a4:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8a6:	2701      	movs	r7, #1
1000a8a8:	e783      	b.n	1000a7b2 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a8aa:	0030      	movs	r0, r6
1000a8ac:	b01a      	add	sp, #104	; 0x68
1000a8ae:	bc1c      	pop	{r2, r3, r4}
1000a8b0:	4690      	mov	r8, r2
1000a8b2:	4699      	mov	r9, r3
1000a8b4:	46a3      	mov	fp, r4
1000a8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8b8:	10014674 	.word	0x10014674
1000a8bc:	10013251 	.word	0x10013251
1000a8c0:	10014e34 	.word	0x10014e34
1000a8c4:	10013131 	.word	0x10013131
1000a8c8:	10014e78 	.word	0x10014e78
1000a8cc:	10017178 	.word	0x10017178
1000a8d0:	1001310d 	.word	0x1001310d
1000a8d4:	10015c80 	.word	0x10015c80
1000a8d8:	100130ef 	.word	0x100130ef
1000a8dc:	1001311f 	.word	0x1001311f
1000a8e0:	10016f12 	.word	0x10016f12
1000a8e4:	1000cce5 	.word	0x1000cce5
1000a8e8:	10014e90 	.word	0x10014e90
1000a8ec:	10016ecc 	.word	0x10016ecc
1000a8f0:	10017138 	.word	0x10017138
1000a8f4:	10014eb4 	.word	0x10014eb4
1000a8f8:	1000ccb9 	.word	0x1000ccb9
1000a8fc:	1000a699 	.word	0x1000a699
1000a900:	10014ef0 	.word	0x10014ef0
1000a904:	10016fa6 	.word	0x10016fa6

1000a908 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a90a:	4647      	mov	r7, r8
1000a90c:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a90e:	7803      	ldrb	r3, [r0, #0]
1000a910:	2b00      	cmp	r3, #0
1000a912:	d141      	bne.n	1000a998 <ble_resolv_rand_addr_handler+0x90>
1000a914:	4d2f      	ldr	r5, [pc, #188]	; (1000a9d4 <ble_resolv_rand_addr_handler+0xcc>)
1000a916:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a918:	1c46      	adds	r6, r0, #1
1000a91a:	4f2f      	ldr	r7, [pc, #188]	; (1000a9d8 <ble_resolv_rand_addr_handler+0xd0>)
1000a91c:	2210      	movs	r2, #16
1000a91e:	0029      	movs	r1, r5
1000a920:	0030      	movs	r0, r6
1000a922:	47b8      	blx	r7
1000a924:	2800      	cmp	r0, #0
1000a926:	d03f      	beq.n	1000a9a8 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a928:	3401      	adds	r4, #1
1000a92a:	b2e4      	uxtb	r4, r4
1000a92c:	357c      	adds	r5, #124	; 0x7c
1000a92e:	2c05      	cmp	r4, #5
1000a930:	d1f4      	bne.n	1000a91c <ble_resolv_rand_addr_handler+0x14>
1000a932:	e031      	b.n	1000a998 <ble_resolv_rand_addr_handler+0x90>
1000a934:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a936:	001c      	movs	r4, r3
1000a938:	7811      	ldrb	r1, [r2, #0]
1000a93a:	2900      	cmp	r1, #0
1000a93c:	d122      	bne.n	1000a984 <ble_resolv_rand_addr_handler+0x7c>
1000a93e:	e001      	b.n	1000a944 <ble_resolv_rand_addr_handler+0x3c>
1000a940:	2400      	movs	r4, #0
1000a942:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a944:	4b25      	ldr	r3, [pc, #148]	; (1000a9dc <ble_resolv_rand_addr_handler+0xd4>)
1000a946:	4698      	mov	r8, r3
1000a948:	0166      	lsls	r6, r4, #5
1000a94a:	1b37      	subs	r7, r6, r4
1000a94c:	00bf      	lsls	r7, r7, #2
1000a94e:	4447      	add	r7, r8
1000a950:	2212      	movs	r2, #18
1000a952:	4923      	ldr	r1, [pc, #140]	; (1000a9e0 <ble_resolv_rand_addr_handler+0xd8>)
1000a954:	0038      	movs	r0, r7
1000a956:	4b23      	ldr	r3, [pc, #140]	; (1000a9e4 <ble_resolv_rand_addr_handler+0xdc>)
1000a958:	4798      	blx	r3
				ble_device_count++;
1000a95a:	4a23      	ldr	r2, [pc, #140]	; (1000a9e8 <ble_resolv_rand_addr_handler+0xe0>)
1000a95c:	7813      	ldrb	r3, [r2, #0]
1000a95e:	3301      	adds	r3, #1
1000a960:	b2db      	uxtb	r3, r3
1000a962:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a964:	375e      	adds	r7, #94	; 0x5e
1000a966:	2302      	movs	r3, #2
1000a968:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a96a:	1b34      	subs	r4, r6, r4
1000a96c:	00a4      	lsls	r4, r4, #2
1000a96e:	4444      	add	r4, r8
1000a970:	3308      	adds	r3, #8
1000a972:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a974:	016b      	lsls	r3, r5, #5
1000a976:	1b5d      	subs	r5, r3, r5
1000a978:	00ad      	lsls	r5, r5, #2
1000a97a:	4445      	add	r5, r8
1000a97c:	7cab      	ldrb	r3, [r5, #18]
1000a97e:	2b0a      	cmp	r3, #10
1000a980:	d123      	bne.n	1000a9ca <ble_resolv_rand_addr_handler+0xc2>
1000a982:	e004      	b.n	1000a98e <ble_resolv_rand_addr_handler+0x86>
1000a984:	3301      	adds	r3, #1
1000a986:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a988:	2b05      	cmp	r3, #5
1000a98a:	d1d3      	bne.n	1000a934 <ble_resolv_rand_addr_handler+0x2c>
1000a98c:	e01d      	b.n	1000a9ca <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a98e:	4b14      	ldr	r3, [pc, #80]	; (1000a9e0 <ble_resolv_rand_addr_handler+0xd8>)
1000a990:	8918      	ldrh	r0, [r3, #8]
1000a992:	4b16      	ldr	r3, [pc, #88]	; (1000a9ec <ble_resolv_rand_addr_handler+0xe4>)
1000a994:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a996:	e018      	b.n	1000a9ca <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a998:	235e      	movs	r3, #94	; 0x5e
1000a99a:	4a10      	ldr	r2, [pc, #64]	; (1000a9dc <ble_resolv_rand_addr_handler+0xd4>)
1000a99c:	5cd3      	ldrb	r3, [r2, r3]
1000a99e:	2b00      	cmp	r3, #0
1000a9a0:	d0ce      	beq.n	1000a940 <ble_resolv_rand_addr_handler+0x38>
1000a9a2:	4a13      	ldr	r2, [pc, #76]	; (1000a9f0 <ble_resolv_rand_addr_handler+0xe8>)
1000a9a4:	2301      	movs	r3, #1
1000a9a6:	e7c5      	b.n	1000a934 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a9a8:	480c      	ldr	r0, [pc, #48]	; (1000a9dc <ble_resolv_rand_addr_handler+0xd4>)
1000a9aa:	0163      	lsls	r3, r4, #5
1000a9ac:	1b1a      	subs	r2, r3, r4
1000a9ae:	0092      	lsls	r2, r2, #2
1000a9b0:	1882      	adds	r2, r0, r2
1000a9b2:	0011      	movs	r1, r2
1000a9b4:	315e      	adds	r1, #94	; 0x5e
1000a9b6:	2502      	movs	r5, #2
1000a9b8:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a9ba:	210a      	movs	r1, #10
1000a9bc:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a9be:	0010      	movs	r0, r2
1000a9c0:	2212      	movs	r2, #18
1000a9c2:	4907      	ldr	r1, [pc, #28]	; (1000a9e0 <ble_resolv_rand_addr_handler+0xd8>)
1000a9c4:	4b07      	ldr	r3, [pc, #28]	; (1000a9e4 <ble_resolv_rand_addr_handler+0xdc>)
1000a9c6:	4798      	blx	r3
1000a9c8:	e7e1      	b.n	1000a98e <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a9ca:	2000      	movs	r0, #0
1000a9cc:	bc04      	pop	{r2}
1000a9ce:	4690      	mov	r8, r2
1000a9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a9d2:	46c0      	nop			; (mov r8, r8)
1000a9d4:	10016f12 	.word	0x10016f12
1000a9d8:	100130ef 	.word	0x100130ef
1000a9dc:	10016ecc 	.word	0x10016ecc
1000a9e0:	10017178 	.word	0x10017178
1000a9e4:	1001310d 	.word	0x1001310d
1000a9e8:	10017138 	.word	0x10017138
1000a9ec:	1000a699 	.word	0x1000a699
1000a9f0:	10016fa6 	.word	0x10016fa6

1000a9f4 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a9f6:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a9f8:	283b      	cmp	r0, #59	; 0x3b
1000a9fa:	d872      	bhi.n	1000aae2 <ble_event_manager+0xee>
1000a9fc:	0083      	lsls	r3, r0, #2
1000a9fe:	4a3c      	ldr	r2, [pc, #240]	; (1000aaf0 <ble_event_manager+0xfc>)
1000aa00:	58d3      	ldr	r3, [r2, r3]
1000aa02:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa04:	0084      	lsls	r4, r0, #2
1000aa06:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000aa08:	4f3a      	ldr	r7, [pc, #232]	; (1000aaf4 <ble_event_manager+0x100>)
1000aa0a:	59bb      	ldr	r3, [r7, r6]
1000aa0c:	2b00      	cmp	r3, #0
1000aa0e:	d004      	beq.n	1000aa1a <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa10:	591b      	ldr	r3, [r3, r4]
1000aa12:	2b00      	cmp	r3, #0
1000aa14:	d001      	beq.n	1000aa1a <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000aa16:	0028      	movs	r0, r5
1000aa18:	4798      	blx	r3
1000aa1a:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000aa1c:	2e14      	cmp	r6, #20
1000aa1e:	d1f4      	bne.n	1000aa0a <ble_event_manager+0x16>
1000aa20:	e065      	b.n	1000aaee <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa22:	3813      	subs	r0, #19
1000aa24:	b2c4      	uxtb	r4, r0
1000aa26:	00a4      	lsls	r4, r4, #2
1000aa28:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000aa2a:	4f33      	ldr	r7, [pc, #204]	; (1000aaf8 <ble_event_manager+0x104>)
1000aa2c:	59bb      	ldr	r3, [r7, r6]
1000aa2e:	2b00      	cmp	r3, #0
1000aa30:	d004      	beq.n	1000aa3c <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa32:	591b      	ldr	r3, [r3, r4]
1000aa34:	2b00      	cmp	r3, #0
1000aa36:	d001      	beq.n	1000aa3c <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000aa38:	0028      	movs	r0, r5
1000aa3a:	4798      	blx	r3
1000aa3c:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000aa3e:	2e14      	cmp	r6, #20
1000aa40:	d1f4      	bne.n	1000aa2c <ble_event_manager+0x38>
1000aa42:	e054      	b.n	1000aaee <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa44:	381d      	subs	r0, #29
1000aa46:	b2c4      	uxtb	r4, r0
1000aa48:	00a4      	lsls	r4, r4, #2
1000aa4a:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000aa4c:	4f2b      	ldr	r7, [pc, #172]	; (1000aafc <ble_event_manager+0x108>)
1000aa4e:	59bb      	ldr	r3, [r7, r6]
1000aa50:	2b00      	cmp	r3, #0
1000aa52:	d004      	beq.n	1000aa5e <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa54:	591b      	ldr	r3, [r3, r4]
1000aa56:	2b00      	cmp	r3, #0
1000aa58:	d001      	beq.n	1000aa5e <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000aa5a:	0028      	movs	r0, r5
1000aa5c:	4798      	blx	r3
1000aa5e:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000aa60:	2e14      	cmp	r6, #20
1000aa62:	d1f4      	bne.n	1000aa4e <ble_event_manager+0x5a>
1000aa64:	e043      	b.n	1000aaee <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000aa66:	3827      	subs	r0, #39	; 0x27
1000aa68:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000aa6a:	4b25      	ldr	r3, [pc, #148]	; (1000ab00 <ble_event_manager+0x10c>)
1000aa6c:	681b      	ldr	r3, [r3, #0]
1000aa6e:	2b00      	cmp	r3, #0
1000aa70:	d03d      	beq.n	1000aaee <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa72:	0080      	lsls	r0, r0, #2
1000aa74:	58c3      	ldr	r3, [r0, r3]
1000aa76:	2b00      	cmp	r3, #0
1000aa78:	d039      	beq.n	1000aaee <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aa7a:	0008      	movs	r0, r1
1000aa7c:	4798      	blx	r3
1000aa7e:	e036      	b.n	1000aaee <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000aa80:	382d      	subs	r0, #45	; 0x2d
1000aa82:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000aa84:	4b1f      	ldr	r3, [pc, #124]	; (1000ab04 <ble_event_manager+0x110>)
1000aa86:	681b      	ldr	r3, [r3, #0]
1000aa88:	2b00      	cmp	r3, #0
1000aa8a:	d030      	beq.n	1000aaee <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa8c:	0080      	lsls	r0, r0, #2
1000aa8e:	58c3      	ldr	r3, [r0, r3]
1000aa90:	2b00      	cmp	r3, #0
1000aa92:	d02c      	beq.n	1000aaee <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aa94:	0008      	movs	r0, r1
1000aa96:	4798      	blx	r3
1000aa98:	e029      	b.n	1000aaee <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa9a:	3836      	subs	r0, #54	; 0x36
1000aa9c:	b2c4      	uxtb	r4, r0
1000aa9e:	00a4      	lsls	r4, r4, #2
1000aaa0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000aaa2:	4f19      	ldr	r7, [pc, #100]	; (1000ab08 <ble_event_manager+0x114>)
1000aaa4:	59bb      	ldr	r3, [r7, r6]
1000aaa6:	2b00      	cmp	r3, #0
1000aaa8:	d004      	beq.n	1000aab4 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aaaa:	591b      	ldr	r3, [r3, r4]
1000aaac:	2b00      	cmp	r3, #0
1000aaae:	d001      	beq.n	1000aab4 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000aab0:	0028      	movs	r0, r5
1000aab2:	4798      	blx	r3
1000aab4:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000aab6:	2e14      	cmp	r6, #20
1000aab8:	d1f4      	bne.n	1000aaa4 <ble_event_manager+0xb0>
1000aaba:	e018      	b.n	1000aaee <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000aabc:	3838      	subs	r0, #56	; 0x38
1000aabe:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000aac0:	4b12      	ldr	r3, [pc, #72]	; (1000ab0c <ble_event_manager+0x118>)
1000aac2:	681b      	ldr	r3, [r3, #0]
1000aac4:	2b00      	cmp	r3, #0
1000aac6:	d012      	beq.n	1000aaee <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aac8:	0080      	lsls	r0, r0, #2
1000aaca:	58c3      	ldr	r3, [r0, r3]
1000aacc:	2b00      	cmp	r3, #0
1000aace:	d00e      	beq.n	1000aaee <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aad0:	0008      	movs	r0, r1
1000aad2:	4798      	blx	r3
1000aad4:	e00b      	b.n	1000aaee <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000aad6:	4b0e      	ldr	r3, [pc, #56]	; (1000ab10 <ble_event_manager+0x11c>)
1000aad8:	681b      	ldr	r3, [r3, #0]
1000aada:	2b00      	cmp	r3, #0
1000aadc:	d007      	beq.n	1000aaee <ble_event_manager+0xfa>
			ble_user_event_cb();
1000aade:	4798      	blx	r3
1000aae0:	e005      	b.n	1000aaee <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000aae2:	4d0c      	ldr	r5, [pc, #48]	; (1000ab14 <ble_event_manager+0x120>)
1000aae4:	0028      	movs	r0, r5
1000aae6:	4c0c      	ldr	r4, [pc, #48]	; (1000ab18 <ble_event_manager+0x124>)
1000aae8:	47a0      	blx	r4
1000aaea:	0028      	movs	r0, r5
1000aaec:	47a0      	blx	r4
	}
	break;		
	}
}
1000aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aaf0:	100147e4 	.word	0x100147e4
1000aaf4:	10017150 	.word	0x10017150
1000aaf8:	10017164 	.word	0x10017164
1000aafc:	10016eb8 	.word	0x10016eb8
1000ab00:	100171ac 	.word	0x100171ac
1000ab04:	10016eb4 	.word	0x10016eb4
1000ab08:	1001713c 	.word	0x1001713c
1000ab0c:	100176f0 	.word	0x100176f0
1000ab10:	10015c78 	.word	0x10015c78
1000ab14:	10014674 	.word	0x10014674
1000ab18:	10013251 	.word	0x10013251

1000ab1c <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ab1c:	b510      	push	{r4, lr}
1000ab1e:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000ab20:	4906      	ldr	r1, [pc, #24]	; (1000ab3c <ble_event_task+0x20>)
1000ab22:	4807      	ldr	r0, [pc, #28]	; (1000ab40 <ble_event_task+0x24>)
1000ab24:	4b07      	ldr	r3, [pc, #28]	; (1000ab44 <ble_event_task+0x28>)
1000ab26:	4798      	blx	r3
1000ab28:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000ab2a:	d104      	bne.n	1000ab36 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000ab2c:	4b04      	ldr	r3, [pc, #16]	; (1000ab40 <ble_event_task+0x24>)
1000ab2e:	7818      	ldrb	r0, [r3, #0]
1000ab30:	4902      	ldr	r1, [pc, #8]	; (1000ab3c <ble_event_task+0x20>)
1000ab32:	4b05      	ldr	r3, [pc, #20]	; (1000ab48 <ble_event_task+0x2c>)
1000ab34:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000ab36:	0020      	movs	r0, r4
1000ab38:	bd10      	pop	{r4, pc}
1000ab3a:	46c0      	nop			; (mov r8, r8)
1000ab3c:	100174e4 	.word	0x100174e4
1000ab40:	100171a8 	.word	0x100171a8
1000ab44:	1000c079 	.word	0x1000c079
1000ab48:	1000a9f5 	.word	0x1000a9f5

1000ab4c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab4e:	464f      	mov	r7, r9
1000ab50:	b480      	push	{r7}
1000ab52:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_128BIT_SERV_UUIDS;
1000ab54:	ad08      	add	r5, sp, #32
1000ab56:	2607      	movs	r6, #7
1000ab58:	706e      	strb	r6, [r5, #1]
		MREPEAT(SERVICE_UUID128_MAX_NUM, _CONF_SERVICE_128BIT_UUID, &adv_data_element)
1000ab5a:	4c1c      	ldr	r4, [pc, #112]	; (1000abcc <ble_advertisement_data_set+0x80>)
1000ab5c:	2210      	movs	r2, #16
1000ab5e:	491c      	ldr	r1, [pc, #112]	; (1000abd0 <ble_advertisement_data_set+0x84>)
1000ab60:	2022      	movs	r0, #34	; 0x22
1000ab62:	4468      	add	r0, sp
1000ab64:	4b1b      	ldr	r3, [pc, #108]	; (1000abd4 <ble_advertisement_data_set+0x88>)
1000ab66:	4699      	mov	r9, r3
1000ab68:	4798      	blx	r3
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len)
		{
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ab6a:	2711      	movs	r7, #17
1000ab6c:	702f      	strb	r7, [r5, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ab6e:	74ae      	strb	r6, [r5, #18]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ab70:	3602      	adds	r6, #2
1000ab72:	74ee      	strb	r6, [r5, #19]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ab74:	4b18      	ldr	r3, [pc, #96]	; (1000abd8 <ble_advertisement_data_set+0x8c>)
1000ab76:	681a      	ldr	r2, [r3, #0]
1000ab78:	920d      	str	r2, [sp, #52]	; 0x34
1000ab7a:	889a      	ldrh	r2, [r3, #4]
1000ab7c:	ab0d      	add	r3, sp, #52	; 0x34
1000ab7e:	809a      	strh	r2, [r3, #4]
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ab80:	2315      	movs	r3, #21
1000ab82:	466a      	mov	r2, sp
1000ab84:	7053      	strb	r3, [r2, #1]
		MREPEAT(SERVICE_UUID128_MAX_NUM, _CONF_SERVICE_SOLTN_128BIT_UUID_SCAN_RSP, &scan_resp_data_element)
1000ab86:	2210      	movs	r2, #16
1000ab88:	4911      	ldr	r1, [pc, #68]	; (1000abd0 <ble_advertisement_data_set+0x84>)
1000ab8a:	466b      	mov	r3, sp
1000ab8c:	1c98      	adds	r0, r3, #2
1000ab8e:	47c8      	blx	r9
		scan_resp_element_len = scan_resp_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(scan_resp_element_len)
		{
			scn_resp[length_field_ind] = scan_resp_element_len + ADV_TYPE_SIZE;
1000ab90:	466b      	mov	r3, sp
1000ab92:	701f      	strb	r7, [r3, #0]
	#else
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ab94:	749e      	strb	r6, [r3, #18]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ab96:	23ff      	movs	r3, #255	; 0xff
1000ab98:	466a      	mov	r2, sp
1000ab9a:	74d3      	strb	r3, [r2, #19]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ab9c:	aa05      	add	r2, sp, #20
1000ab9e:	0023      	movs	r3, r4
1000aba0:	3324      	adds	r3, #36	; 0x24
1000aba2:	cb03      	ldmia	r3!, {r0, r1}
1000aba4:	c203      	stmia	r2!, {r0, r1}
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000aba6:	231c      	movs	r3, #28
1000aba8:	466a      	mov	r2, sp
1000abaa:	211a      	movs	r1, #26
1000abac:	0028      	movs	r0, r5
1000abae:	4c0b      	ldr	r4, [pc, #44]	; (1000abdc <ble_advertisement_data_set+0x90>)
1000abb0:	47a0      	blx	r4
1000abb2:	2800      	cmp	r0, #0
1000abb4:	d005      	beq.n	1000abc2 <ble_advertisement_data_set+0x76>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000abb6:	480a      	ldr	r0, [pc, #40]	; (1000abe0 <ble_advertisement_data_set+0x94>)
1000abb8:	4b0a      	ldr	r3, [pc, #40]	; (1000abe4 <ble_advertisement_data_set+0x98>)
1000abba:	4798      	blx	r3
1000abbc:	480a      	ldr	r0, [pc, #40]	; (1000abe8 <ble_advertisement_data_set+0x9c>)
1000abbe:	4b0b      	ldr	r3, [pc, #44]	; (1000abec <ble_advertisement_data_set+0xa0>)
1000abc0:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000abc2:	2000      	movs	r0, #0
1000abc4:	b010      	add	sp, #64	; 0x40
1000abc6:	bc04      	pop	{r2}
1000abc8:	4691      	mov	r9, r2
1000abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abcc:	100148d4 	.word	0x100148d4
1000abd0:	100148e4 	.word	0x100148e4
1000abd4:	1001310d 	.word	0x1001310d
1000abd8:	10014d44 	.word	0x10014d44
1000abdc:	1000cad9 	.word	0x1000cad9
1000abe0:	10014674 	.word	0x10014674
1000abe4:	10013251 	.word	0x10013251
1000abe8:	10014f18 	.word	0x10014f18
1000abec:	10013131 	.word	0x10013131

1000abf0 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000abf0:	4b01      	ldr	r3, [pc, #4]	; (1000abf8 <register_ble_user_event_cb+0x8>)
1000abf2:	6018      	str	r0, [r3, #0]
}
1000abf4:	4770      	bx	lr
1000abf6:	46c0      	nop			; (mov r8, r8)
1000abf8:	10015c78 	.word	0x10015c78

1000abfc <csc_serv_init>:

/**
* \CSC service Configuration function
*/
at_ble_status_t csc_serv_init(uint8_t *buf, uint16_t len)
{
1000abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abfe:	464f      	mov	r7, r9
1000ac00:	4646      	mov	r6, r8
1000ac02:	b4c0      	push	{r6, r7}
1000ac04:	b083      	sub	sp, #12
1000ac06:	4681      	mov	r9, r0
1000ac08:	000e      	movs	r6, r1
	/* Configure SPOG Service UUID info*/
	csc_inst.serv_uuid.type =	 AT_BLE_UUID_128;
1000ac0a:	4c17      	ldr	r4, [pc, #92]	; (1000ac68 <csc_serv_init+0x6c>)
1000ac0c:	2302      	movs	r3, #2
1000ac0e:	4698      	mov	r8, r3
1000ac10:	7023      	strb	r3, [r4, #0]
	memcpy(&csc_inst.serv_uuid.uuid[0], CSC_SERVICE_UUID, CSC_UUID_128_LEN);
1000ac12:	1c60      	adds	r0, r4, #1
1000ac14:	4d15      	ldr	r5, [pc, #84]	; (1000ac6c <csc_serv_init+0x70>)
1000ac16:	2210      	movs	r2, #16
1000ac18:	0029      	movs	r1, r5
1000ac1a:	4f15      	ldr	r7, [pc, #84]	; (1000ac70 <csc_serv_init+0x74>)
1000ac1c:	47b8      	blx	r7
	
	/* Configure SPOG Service Handle*/
	csc_inst.serv_handle = 0;
1000ac1e:	2300      	movs	r3, #0
1000ac20:	8263      	strh	r3, [r4, #18]
	
	/*Configure SPOG Endpoint Characteristic*/
	csc_inst.endpoint_chars.uuid.type = AT_BLE_UUID_128;
1000ac22:	4643      	mov	r3, r8
1000ac24:	75a3      	strb	r3, [r4, #22]
	memcpy(&csc_inst.endpoint_chars.uuid.uuid[0], CSC_ENDPOINT_CHAR_UUID, CSC_UUID_128_LEN);
1000ac26:	0020      	movs	r0, r4
1000ac28:	3017      	adds	r0, #23
1000ac2a:	0029      	movs	r1, r5
1000ac2c:	3114      	adds	r1, #20
1000ac2e:	2210      	movs	r2, #16
1000ac30:	47b8      	blx	r7
	csc_inst.endpoint_chars.properties = AT_BLE_CHAR_NOTIFY;	
1000ac32:	2310      	movs	r3, #16
1000ac34:	8523      	strh	r3, [r4, #40]	; 0x28
	csc_inst.endpoint_chars.init_value = buf;
1000ac36:	464b      	mov	r3, r9
1000ac38:	62e3      	str	r3, [r4, #44]	; 0x2c
	csc_inst.endpoint_chars.value_init_len = len;
1000ac3a:	8626      	strh	r6, [r4, #48]	; 0x30
	csc_inst.endpoint_chars.value_max_len = len;
1000ac3c:	8666      	strh	r6, [r4, #50]	; 0x32
	/* Configure the CSC characteristic permission */
	if(BLE_PAIR_ENABLE){
		csc_inst.endpoint_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);
1000ac3e:	2222      	movs	r2, #34	; 0x22
1000ac40:	2334      	movs	r3, #52	; 0x34
1000ac42:	54e2      	strb	r2, [r4, r3]
		}else{
		csc_inst.endpoint_chars.value_permissions = AT_BLE_ATTR_NO_PERMISSIONS;
	}
	return(at_ble_primary_service_define(&csc_inst.serv_uuid, &csc_inst.serv_handle, NULL, 0, &csc_inst.endpoint_chars, 1));
1000ac44:	0021      	movs	r1, r4
1000ac46:	3112      	adds	r1, #18
1000ac48:	3b33      	subs	r3, #51	; 0x33
1000ac4a:	9301      	str	r3, [sp, #4]
1000ac4c:	0023      	movs	r3, r4
1000ac4e:	3314      	adds	r3, #20
1000ac50:	9300      	str	r3, [sp, #0]
1000ac52:	2300      	movs	r3, #0
1000ac54:	2200      	movs	r2, #0
1000ac56:	0020      	movs	r0, r4
1000ac58:	4c06      	ldr	r4, [pc, #24]	; (1000ac74 <csc_serv_init+0x78>)
1000ac5a:	47a0      	blx	r4
}
1000ac5c:	b003      	add	sp, #12
1000ac5e:	bc0c      	pop	{r2, r3}
1000ac60:	4690      	mov	r8, r2
1000ac62:	4699      	mov	r9, r3
1000ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac66:	46c0      	nop			; (mov r8, r8)
1000ac68:	100176f4 	.word	0x100176f4
1000ac6c:	10014f88 	.word	0x10014f88
1000ac70:	1001310d 	.word	0x1001310d
1000ac74:	1000d509 	.word	0x1000d509

1000ac78 <csc_serv_send_data>:

/**
* \CSC service send data function
*/
at_ble_status_t csc_serv_send_data(uint16_t connhandle, uint8_t *databuf, uint16_t datalen)
{
1000ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac7a:	b083      	sub	sp, #12
1000ac7c:	0007      	movs	r7, r0
1000ac7e:	000d      	movs	r5, r1
1000ac80:	0016      	movs	r6, r2
	at_ble_status_t status;
	uint16_t value = 0;
1000ac82:	466b      	mov	r3, sp
1000ac84:	1d99      	adds	r1, r3, #6
1000ac86:	2300      	movs	r3, #0
1000ac88:	800b      	strh	r3, [r1, #0]
	uint16_t length;
	length = sizeof(uint16_t);
1000ac8a:	aa01      	add	r2, sp, #4
1000ac8c:	3302      	adds	r3, #2
1000ac8e:	8013      	strh	r3, [r2, #0]
	status = at_ble_characteristic_value_get(csc_inst.endpoint_chars.client_config_handle, (uint8_t *)&value, &length);
1000ac90:	3348      	adds	r3, #72	; 0x48
1000ac92:	481a      	ldr	r0, [pc, #104]	; (1000acfc <csc_serv_send_data+0x84>)
1000ac94:	5ac0      	ldrh	r0, [r0, r3]
1000ac96:	4b1a      	ldr	r3, [pc, #104]	; (1000ad00 <csc_serv_send_data+0x88>)
1000ac98:	4798      	blx	r3
1000ac9a:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS){
1000ac9c:	d007      	beq.n	1000acae <csc_serv_send_data+0x36>
		DBG_LOG("at_ble_characteristic_value_get value get failed");
1000ac9e:	4819      	ldr	r0, [pc, #100]	; (1000ad04 <csc_serv_send_data+0x8c>)
1000aca0:	4b19      	ldr	r3, [pc, #100]	; (1000ad08 <csc_serv_send_data+0x90>)
1000aca2:	4798      	blx	r3
1000aca4:	4819      	ldr	r0, [pc, #100]	; (1000ad0c <csc_serv_send_data+0x94>)
1000aca6:	4b1a      	ldr	r3, [pc, #104]	; (1000ad10 <csc_serv_send_data+0x98>)
1000aca8:	4798      	blx	r3
		return status;
1000acaa:	0020      	movs	r0, r4
1000acac:	e023      	b.n	1000acf6 <csc_serv_send_data+0x7e>
	}
	if(value == 1){
1000acae:	466b      	mov	r3, sp
1000acb0:	3306      	adds	r3, #6
1000acb2:	881b      	ldrh	r3, [r3, #0]
{
	at_ble_status_t status;
	uint16_t value = 0;
	uint16_t length;
	length = sizeof(uint16_t);
	status = at_ble_characteristic_value_get(csc_inst.endpoint_chars.client_config_handle, (uint8_t *)&value, &length);
1000acb4:	2000      	movs	r0, #0
	if (status != AT_BLE_SUCCESS){
		DBG_LOG("at_ble_characteristic_value_get value get failed");
		return status;
	}
	if(value == 1){
1000acb6:	2b01      	cmp	r3, #1
1000acb8:	d11d      	bne.n	1000acf6 <csc_serv_send_data+0x7e>
		status = at_ble_characteristic_value_set(csc_inst.endpoint_chars.char_val_handle, databuf, datalen);
1000acba:	4b10      	ldr	r3, [pc, #64]	; (1000acfc <csc_serv_send_data+0x84>)
1000acbc:	8a98      	ldrh	r0, [r3, #20]
1000acbe:	0032      	movs	r2, r6
1000acc0:	0029      	movs	r1, r5
1000acc2:	4b14      	ldr	r3, [pc, #80]	; (1000ad14 <csc_serv_send_data+0x9c>)
1000acc4:	4798      	blx	r3
1000acc6:	1e04      	subs	r4, r0, #0
		if (status != AT_BLE_SUCCESS){
1000acc8:	d007      	beq.n	1000acda <csc_serv_send_data+0x62>
			DBG_LOG("at_ble_characteristic_value_set value set failed");
1000acca:	480e      	ldr	r0, [pc, #56]	; (1000ad04 <csc_serv_send_data+0x8c>)
1000accc:	4b0e      	ldr	r3, [pc, #56]	; (1000ad08 <csc_serv_send_data+0x90>)
1000acce:	4798      	blx	r3
1000acd0:	4811      	ldr	r0, [pc, #68]	; (1000ad18 <csc_serv_send_data+0xa0>)
1000acd2:	4b0f      	ldr	r3, [pc, #60]	; (1000ad10 <csc_serv_send_data+0x98>)
1000acd4:	4798      	blx	r3
			return status;
1000acd6:	0020      	movs	r0, r4
1000acd8:	e00d      	b.n	1000acf6 <csc_serv_send_data+0x7e>
		}
		status = at_ble_notification_send(connhandle, csc_inst.endpoint_chars.char_val_handle);
1000acda:	4b08      	ldr	r3, [pc, #32]	; (1000acfc <csc_serv_send_data+0x84>)
1000acdc:	8a99      	ldrh	r1, [r3, #20]
1000acde:	0038      	movs	r0, r7
1000ace0:	4b0e      	ldr	r3, [pc, #56]	; (1000ad1c <csc_serv_send_data+0xa4>)
1000ace2:	4798      	blx	r3
1000ace4:	1e04      	subs	r4, r0, #0
		if (status != AT_BLE_SUCCESS){
1000ace6:	d006      	beq.n	1000acf6 <csc_serv_send_data+0x7e>
			DBG_LOG("at_ble_notification_send  failed");
1000ace8:	4806      	ldr	r0, [pc, #24]	; (1000ad04 <csc_serv_send_data+0x8c>)
1000acea:	4b07      	ldr	r3, [pc, #28]	; (1000ad08 <csc_serv_send_data+0x90>)
1000acec:	4798      	blx	r3
1000acee:	480c      	ldr	r0, [pc, #48]	; (1000ad20 <csc_serv_send_data+0xa8>)
1000acf0:	4b07      	ldr	r3, [pc, #28]	; (1000ad10 <csc_serv_send_data+0x98>)
1000acf2:	4798      	blx	r3
			return status;
1000acf4:	0020      	movs	r0, r4
		}
	}
	return status;
}
1000acf6:	b003      	add	sp, #12
1000acf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000acfa:	46c0      	nop			; (mov r8, r8)
1000acfc:	100176f4 	.word	0x100176f4
1000ad00:	1000d565 	.word	0x1000d565
1000ad04:	10014674 	.word	0x10014674
1000ad08:	10013251 	.word	0x10013251
1000ad0c:	10014fb0 	.word	0x10014fb0
1000ad10:	10013131 	.word	0x10013131
1000ad14:	1000d529 	.word	0x1000d529
1000ad18:	10014fe4 	.word	0x10014fe4
1000ad1c:	1000d6c9 	.word	0x1000d6c9
1000ad20:	10015018 	.word	0x10015018

1000ad24 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ad24:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ad26:	4b0e      	ldr	r3, [pc, #56]	; (1000ad60 <uart_read_complete_callback+0x3c>)
1000ad28:	781b      	ldrb	r3, [r3, #0]
1000ad2a:	2b01      	cmp	r3, #1
1000ad2c:	d10b      	bne.n	1000ad46 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ad2e:	2202      	movs	r2, #2
1000ad30:	4b0b      	ldr	r3, [pc, #44]	; (1000ad60 <uart_read_complete_callback+0x3c>)
1000ad32:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ad34:	4b0b      	ldr	r3, [pc, #44]	; (1000ad64 <uart_read_complete_callback+0x40>)
1000ad36:	681b      	ldr	r3, [r3, #0]
1000ad38:	2b00      	cmp	r3, #0
1000ad3a:	d110      	bne.n	1000ad5e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ad3c:	2102      	movs	r1, #2
1000ad3e:	480a      	ldr	r0, [pc, #40]	; (1000ad68 <uart_read_complete_callback+0x44>)
1000ad40:	4b0a      	ldr	r3, [pc, #40]	; (1000ad6c <uart_read_complete_callback+0x48>)
1000ad42:	4798      	blx	r3
1000ad44:	e00b      	b.n	1000ad5e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ad46:	4b07      	ldr	r3, [pc, #28]	; (1000ad64 <uart_read_complete_callback+0x40>)
1000ad48:	681b      	ldr	r3, [r3, #0]
1000ad4a:	2b00      	cmp	r3, #0
1000ad4c:	d007      	beq.n	1000ad5e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ad4e:	4c08      	ldr	r4, [pc, #32]	; (1000ad70 <uart_read_complete_callback+0x4c>)
1000ad50:	7820      	ldrb	r0, [r4, #0]
1000ad52:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ad54:	2201      	movs	r2, #1
1000ad56:	0021      	movs	r1, r4
1000ad58:	4803      	ldr	r0, [pc, #12]	; (1000ad68 <uart_read_complete_callback+0x44>)
1000ad5a:	4b06      	ldr	r3, [pc, #24]	; (1000ad74 <uart_read_complete_callback+0x50>)
1000ad5c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ad5e:	bd10      	pop	{r4, pc}
1000ad60:	10016c8c 	.word	0x10016c8c
1000ad64:	10016c94 	.word	0x10016c94
1000ad68:	10017744 	.word	0x10017744
1000ad6c:	1000959d 	.word	0x1000959d
1000ad70:	10016c90 	.word	0x10016c90
1000ad74:	10009541 	.word	0x10009541

1000ad78 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ad78:	b570      	push	{r4, r5, r6, lr}
1000ad7a:	0006      	movs	r6, r0
1000ad7c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ad7e:	4c03      	ldr	r4, [pc, #12]	; (1000ad8c <usart_serial_getchar+0x14>)
1000ad80:	0029      	movs	r1, r5
1000ad82:	0030      	movs	r0, r6
1000ad84:	47a0      	blx	r4
1000ad86:	2800      	cmp	r0, #0
1000ad88:	d1fa      	bne.n	1000ad80 <usart_serial_getchar+0x8>
}
1000ad8a:	bd70      	pop	{r4, r5, r6, pc}
1000ad8c:	1000952d 	.word	0x1000952d

1000ad90 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ad90:	b570      	push	{r4, r5, r6, lr}
1000ad92:	0006      	movs	r6, r0
1000ad94:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ad96:	4c03      	ldr	r4, [pc, #12]	; (1000ada4 <usart_serial_putchar+0x14>)
1000ad98:	0029      	movs	r1, r5
1000ad9a:	0030      	movs	r0, r6
1000ad9c:	47a0      	blx	r4
1000ad9e:	2800      	cmp	r0, #0
1000ada0:	d1fa      	bne.n	1000ad98 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ada2:	bd70      	pop	{r4, r5, r6, pc}
1000ada4:	1000951d 	.word	0x1000951d

1000ada8 <serial_console_init>:

void serial_console_init(void)
{
1000ada8:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000adaa:	2100      	movs	r1, #0
1000adac:	2000      	movs	r0, #0
1000adae:	4b19      	ldr	r3, [pc, #100]	; (1000ae14 <serial_console_init+0x6c>)
1000adb0:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000adb2:	4c19      	ldr	r4, [pc, #100]	; (1000ae18 <serial_console_init+0x70>)
1000adb4:	0020      	movs	r0, r4
1000adb6:	4b19      	ldr	r3, [pc, #100]	; (1000ae1c <serial_console_init+0x74>)
1000adb8:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000adba:	23e1      	movs	r3, #225	; 0xe1
1000adbc:	025b      	lsls	r3, r3, #9
1000adbe:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000adc0:	2302      	movs	r3, #2
1000adc2:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000adc4:	2203      	movs	r2, #3
1000adc6:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000adc8:	3201      	adds	r2, #1
1000adca:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000adcc:	3201      	adds	r2, #1
1000adce:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000add0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000add2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000add4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000add6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000add8:	4d11      	ldr	r5, [pc, #68]	; (1000ae20 <serial_console_init+0x78>)
1000adda:	4b12      	ldr	r3, [pc, #72]	; (1000ae24 <serial_console_init+0x7c>)
1000addc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000adde:	4a12      	ldr	r2, [pc, #72]	; (1000ae28 <serial_console_init+0x80>)
1000ade0:	4b12      	ldr	r3, [pc, #72]	; (1000ae2c <serial_console_init+0x84>)
1000ade2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ade4:	4a12      	ldr	r2, [pc, #72]	; (1000ae30 <serial_console_init+0x88>)
1000ade6:	4b13      	ldr	r3, [pc, #76]	; (1000ae34 <serial_console_init+0x8c>)
1000ade8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000adea:	0022      	movs	r2, r4
1000adec:	4912      	ldr	r1, [pc, #72]	; (1000ae38 <serial_console_init+0x90>)
1000adee:	0028      	movs	r0, r5
1000adf0:	4b12      	ldr	r3, [pc, #72]	; (1000ae3c <serial_console_init+0x94>)
1000adf2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000adf4:	4e12      	ldr	r6, [pc, #72]	; (1000ae40 <serial_console_init+0x98>)
1000adf6:	6833      	ldr	r3, [r6, #0]
1000adf8:	6898      	ldr	r0, [r3, #8]
1000adfa:	2100      	movs	r1, #0
1000adfc:	4c11      	ldr	r4, [pc, #68]	; (1000ae44 <serial_console_init+0x9c>)
1000adfe:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ae00:	6833      	ldr	r3, [r6, #0]
1000ae02:	6858      	ldr	r0, [r3, #4]
1000ae04:	2100      	movs	r1, #0
1000ae06:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ae08:	2202      	movs	r2, #2
1000ae0a:	490f      	ldr	r1, [pc, #60]	; (1000ae48 <serial_console_init+0xa0>)
1000ae0c:	0028      	movs	r0, r5
1000ae0e:	4b0f      	ldr	r3, [pc, #60]	; (1000ae4c <serial_console_init+0xa4>)
1000ae10:	4798      	blx	r3
}
1000ae12:	bd70      	pop	{r4, r5, r6, pc}
1000ae14:	100088a9 	.word	0x100088a9
1000ae18:	10017768 	.word	0x10017768
1000ae1c:	10009335 	.word	0x10009335
1000ae20:	10017744 	.word	0x10017744
1000ae24:	10016e4c 	.word	0x10016e4c
1000ae28:	1000ad91 	.word	0x1000ad91
1000ae2c:	10016e48 	.word	0x10016e48
1000ae30:	1000ad79 	.word	0x1000ad79
1000ae34:	10016e44 	.word	0x10016e44
1000ae38:	40004000 	.word	0x40004000
1000ae3c:	10009361 	.word	0x10009361
1000ae40:	10015360 	.word	0x10015360
1000ae44:	100132dd 	.word	0x100132dd
1000ae48:	1000ad25 	.word	0x1000ad25
1000ae4c:	10009569 	.word	0x10009569

1000ae50 <_time_start>:

void _time_start(unsigned int sec)
{
1000ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae52:	b083      	sub	sp, #12
1000ae54:	0005      	movs	r5, r0
	system_clock_get_value();
1000ae56:	4c0d      	ldr	r4, [pc, #52]	; (1000ae8c <_time_start+0x3c>)
1000ae58:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ae5a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ae5c:	4f0c      	ldr	r7, [pc, #48]	; (1000ae90 <_time_start+0x40>)
1000ae5e:	47b8      	blx	r7
1000ae60:	4e0c      	ldr	r6, [pc, #48]	; (1000ae94 <_time_start+0x44>)
1000ae62:	4a0d      	ldr	r2, [pc, #52]	; (1000ae98 <_time_start+0x48>)
1000ae64:	4b0d      	ldr	r3, [pc, #52]	; (1000ae9c <_time_start+0x4c>)
1000ae66:	47b0      	blx	r6
1000ae68:	9000      	str	r0, [sp, #0]
1000ae6a:	9101      	str	r1, [sp, #4]
1000ae6c:	20fa      	movs	r0, #250	; 0xfa
1000ae6e:	0080      	lsls	r0, r0, #2
1000ae70:	4368      	muls	r0, r5
1000ae72:	47b8      	blx	r7
1000ae74:	0002      	movs	r2, r0
1000ae76:	000b      	movs	r3, r1
1000ae78:	9800      	ldr	r0, [sp, #0]
1000ae7a:	9901      	ldr	r1, [sp, #4]
1000ae7c:	47b0      	blx	r6
1000ae7e:	4b08      	ldr	r3, [pc, #32]	; (1000aea0 <_time_start+0x50>)
1000ae80:	4798      	blx	r3
1000ae82:	4b08      	ldr	r3, [pc, #32]	; (1000aea4 <_time_start+0x54>)
1000ae84:	6018      	str	r0, [r3, #0]
}
1000ae86:	b003      	add	sp, #12
1000ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae8a:	46c0      	nop			; (mov r8, r8)
1000ae8c:	1000892d 	.word	0x1000892d
1000ae90:	10012e9d 	.word	0x10012e9d
1000ae94:	100121d1 	.word	0x100121d1
1000ae98:	19feaec7 	.word	0x19feaec7
1000ae9c:	3f09d8ef 	.word	0x3f09d8ef
1000aea0:	10010b8d 	.word	0x10010b8d
1000aea4:	10016c88 	.word	0x10016c88

1000aea8 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000aea8:	4b02      	ldr	r3, [pc, #8]	; (1000aeb4 <_time_done+0xc>)
1000aeaa:	681a      	ldr	r2, [r3, #0]
1000aeac:	1e50      	subs	r0, r2, #1
1000aeae:	6018      	str	r0, [r3, #0]
}
1000aeb0:	4770      	bx	lr
1000aeb2:	46c0      	nop			; (mov r8, r8)
1000aeb4:	10016c88 	.word	0x10016c88

1000aeb8 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000aeb8:	b570      	push	{r4, r5, r6, lr}
1000aeba:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000aebc:	2201      	movs	r2, #1
1000aebe:	4b11      	ldr	r3, [pc, #68]	; (1000af04 <getchar_b11_timeout+0x4c>)
1000aec0:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000aec2:	4b11      	ldr	r3, [pc, #68]	; (1000af08 <getchar_b11_timeout+0x50>)
1000aec4:	681b      	ldr	r3, [r3, #0]
1000aec6:	2b00      	cmp	r3, #0
1000aec8:	d103      	bne.n	1000aed2 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000aeca:	2102      	movs	r1, #2
1000aecc:	480f      	ldr	r0, [pc, #60]	; (1000af0c <getchar_b11_timeout+0x54>)
1000aece:	4b10      	ldr	r3, [pc, #64]	; (1000af10 <getchar_b11_timeout+0x58>)
1000aed0:	4798      	blx	r3

	_time_start(sec);
1000aed2:	0020      	movs	r0, r4
1000aed4:	4b0f      	ldr	r3, [pc, #60]	; (1000af14 <getchar_b11_timeout+0x5c>)
1000aed6:	4798      	blx	r3
	
	string_input[0] = 0;
1000aed8:	490f      	ldr	r1, [pc, #60]	; (1000af18 <getchar_b11_timeout+0x60>)
1000aeda:	2300      	movs	r3, #0
1000aedc:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aede:	2201      	movs	r2, #1
1000aee0:	480a      	ldr	r0, [pc, #40]	; (1000af0c <getchar_b11_timeout+0x54>)
1000aee2:	4b0e      	ldr	r3, [pc, #56]	; (1000af1c <getchar_b11_timeout+0x64>)
1000aee4:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000aee6:	4c07      	ldr	r4, [pc, #28]	; (1000af04 <getchar_b11_timeout+0x4c>)
1000aee8:	4d0d      	ldr	r5, [pc, #52]	; (1000af20 <getchar_b11_timeout+0x68>)
1000aeea:	7823      	ldrb	r3, [r4, #0]
1000aeec:	2b02      	cmp	r3, #2
1000aeee:	d002      	beq.n	1000aef6 <getchar_b11_timeout+0x3e>
1000aef0:	47a8      	blx	r5
1000aef2:	2800      	cmp	r0, #0
1000aef4:	d1f9      	bne.n	1000aeea <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000aef6:	2200      	movs	r2, #0
1000aef8:	4b02      	ldr	r3, [pc, #8]	; (1000af04 <getchar_b11_timeout+0x4c>)
1000aefa:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000aefc:	4b06      	ldr	r3, [pc, #24]	; (1000af18 <getchar_b11_timeout+0x60>)
1000aefe:	7818      	ldrb	r0, [r3, #0]
}
1000af00:	bd70      	pop	{r4, r5, r6, pc}
1000af02:	46c0      	nop			; (mov r8, r8)
1000af04:	10016c8c 	.word	0x10016c8c
1000af08:	10016c94 	.word	0x10016c94
1000af0c:	10017744 	.word	0x10017744
1000af10:	1000957d 	.word	0x1000957d
1000af14:	1000ae51 	.word	0x1000ae51
1000af18:	10016c90 	.word	0x10016c90
1000af1c:	10009541 	.word	0x10009541
1000af20:	1000aea9 	.word	0x1000aea9

1000af24 <register_uart_callback>:
	read_status = UART_READ_NONE;
	return string_input[0];
}

void register_uart_callback(uart_rx_callback_t callback_func)
{
1000af24:	b510      	push	{r4, lr}
	user_callback_func = callback_func;
1000af26:	4b06      	ldr	r3, [pc, #24]	; (1000af40 <register_uart_callback+0x1c>)
1000af28:	6018      	str	r0, [r3, #0]
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000af2a:	4c06      	ldr	r4, [pc, #24]	; (1000af44 <register_uart_callback+0x20>)
1000af2c:	2102      	movs	r1, #2
1000af2e:	0020      	movs	r0, r4
1000af30:	4b05      	ldr	r3, [pc, #20]	; (1000af48 <register_uart_callback+0x24>)
1000af32:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000af34:	2201      	movs	r2, #1
1000af36:	4905      	ldr	r1, [pc, #20]	; (1000af4c <register_uart_callback+0x28>)
1000af38:	0020      	movs	r0, r4
1000af3a:	4b05      	ldr	r3, [pc, #20]	; (1000af50 <register_uart_callback+0x2c>)
1000af3c:	4798      	blx	r3
1000af3e:	bd10      	pop	{r4, pc}
1000af40:	10016c94 	.word	0x10016c94
1000af44:	10017744 	.word	0x10017744
1000af48:	1000957d 	.word	0x1000957d
1000af4c:	10016c90 	.word	0x10016c90
1000af50:	10009541 	.word	0x10009541

1000af54 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000af54:	4b02      	ldr	r3, [pc, #8]	; (1000af60 <platform_event_free+0xc>)
1000af56:	681a      	ldr	r2, [r3, #0]
1000af58:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000af5a:	6018      	str	r0, [r3, #0]
}
1000af5c:	4770      	bx	lr
1000af5e:	46c0      	nop			; (mov r8, r8)
1000af60:	10016c9c 	.word	0x10016c9c

1000af64 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000af64:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000af66:	4b0b      	ldr	r3, [pc, #44]	; (1000af94 <platform_event_post+0x30>)
1000af68:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000af6a:	2c00      	cmp	r4, #0
1000af6c:	d011      	beq.n	1000af92 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000af6e:	6825      	ldr	r5, [r4, #0]
1000af70:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000af72:	2300      	movs	r3, #0
1000af74:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000af76:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000af78:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000af7a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000af7c:	4b06      	ldr	r3, [pc, #24]	; (1000af98 <platform_event_post+0x34>)
1000af7e:	681a      	ldr	r2, [r3, #0]
1000af80:	2a00      	cmp	r2, #0
1000af82:	d102      	bne.n	1000af8a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000af84:	601c      	str	r4, [r3, #0]
1000af86:	e004      	b.n	1000af92 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000af88:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000af8a:	6813      	ldr	r3, [r2, #0]
1000af8c:	2b00      	cmp	r3, #0
1000af8e:	d1fb      	bne.n	1000af88 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000af90:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000af92:	bd30      	pop	{r4, r5, pc}
1000af94:	10016c9c 	.word	0x10016c9c
1000af98:	10016c98 	.word	0x10016c98

1000af9c <platform_event_get>:

plf_drv_status platform_event_get(uint16_t* event_type, uint8_t* data, uint16_t *data_len)
{
1000af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af9e:	4657      	mov	r7, sl
1000afa0:	b480      	push	{r7}
1000afa2:	b082      	sub	sp, #8
1000afa4:	4682      	mov	sl, r0
1000afa6:	9101      	str	r1, [sp, #4]
1000afa8:	0016      	movs	r6, r2
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000afaa:	4b15      	ldr	r3, [pc, #84]	; (1000b000 <platform_event_get+0x64>)
1000afac:	681c      	ldr	r4, [r3, #0]
1000afae:	2c00      	cmp	r4, #0
1000afb0:	d108      	bne.n	1000afc4 <platform_event_get+0x28>
	{	
		status = platform_event_wait(0);
1000afb2:	4d14      	ldr	r5, [pc, #80]	; (1000b004 <platform_event_get+0x68>)
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000afb4:	001f      	movs	r7, r3
	{	
		status = platform_event_wait(0);
1000afb6:	2000      	movs	r0, #0
1000afb8:	47a8      	blx	r5
1000afba:	9000      	str	r0, [sp, #0]
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000afbc:	683c      	ldr	r4, [r7, #0]
1000afbe:	2c00      	cmp	r4, #0
1000afc0:	d0f9      	beq.n	1000afb6 <platform_event_get+0x1a>
1000afc2:	e001      	b.n	1000afc8 <platform_event_get+0x2c>
}

plf_drv_status platform_event_get(uint16_t* event_type, uint8_t* data, uint16_t *data_len)
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;
1000afc4:	2300      	movs	r3, #0
1000afc6:	9300      	str	r3, [sp, #0]
	{	
		status = platform_event_wait(0);
	}
	
	event = platform_event_pending_list;
	platform_event_pending_list = platform_event_pending_list->next;
1000afc8:	4b0d      	ldr	r3, [pc, #52]	; (1000b000 <platform_event_get+0x64>)
1000afca:	6822      	ldr	r2, [r4, #0]
1000afcc:	601a      	str	r2, [r3, #0]
	*event_type = event->event_type;
1000afce:	88a3      	ldrh	r3, [r4, #4]
1000afd0:	4652      	mov	r2, sl
1000afd2:	8013      	strh	r3, [r2, #0]
	*data_len = ((event->data_len<=*data_len)?event->data_len:*data_len);
1000afd4:	8832      	ldrh	r2, [r6, #0]
1000afd6:	88e3      	ldrh	r3, [r4, #6]
1000afd8:	1c19      	adds	r1, r3, #0
1000afda:	b29b      	uxth	r3, r3
1000afdc:	4293      	cmp	r3, r2
1000afde:	d900      	bls.n	1000afe2 <platform_event_get+0x46>
1000afe0:	1c11      	adds	r1, r2, #0
1000afe2:	b28a      	uxth	r2, r1
1000afe4:	8031      	strh	r1, [r6, #0]
	//*data = event->data;
	memcpy(data,event->data,*data_len);
1000afe6:	68a1      	ldr	r1, [r4, #8]
1000afe8:	9801      	ldr	r0, [sp, #4]
1000afea:	4b07      	ldr	r3, [pc, #28]	; (1000b008 <platform_event_get+0x6c>)
1000afec:	4798      	blx	r3

	platform_event_free(event);
1000afee:	0020      	movs	r0, r4
1000aff0:	4b06      	ldr	r3, [pc, #24]	; (1000b00c <platform_event_get+0x70>)
1000aff2:	4798      	blx	r3

	return status;
	
}
1000aff4:	9800      	ldr	r0, [sp, #0]
1000aff6:	b002      	add	sp, #8
1000aff8:	bc04      	pop	{r2}
1000affa:	4692      	mov	sl, r2
1000affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000affe:	46c0      	nop			; (mov r8, r8)
1000b000:	10016c98 	.word	0x10016c98
1000b004:	1000b449 	.word	0x1000b449
1000b008:	1001310d 	.word	0x1001310d
1000b00c:	1000af55 	.word	0x1000af55

1000b010 <platform_event_init>:

void platform_event_init()
{
1000b010:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b012:	2300      	movs	r3, #0
1000b014:	4a06      	ldr	r2, [pc, #24]	; (1000b030 <platform_event_init+0x20>)
1000b016:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b018:	4a06      	ldr	r2, [pc, #24]	; (1000b034 <platform_event_init+0x24>)
1000b01a:	6013      	str	r3, [r2, #0]
1000b01c:	4c06      	ldr	r4, [pc, #24]	; (1000b038 <platform_event_init+0x28>)
1000b01e:	0026      	movs	r6, r4
1000b020:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b022:	4d06      	ldr	r5, [pc, #24]	; (1000b03c <platform_event_init+0x2c>)
1000b024:	0020      	movs	r0, r4
1000b026:	47a8      	blx	r5
1000b028:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b02a:	42b4      	cmp	r4, r6
1000b02c:	d1fa      	bne.n	1000b024 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b02e:	bd70      	pop	{r4, r5, r6, pc}
1000b030:	10016c9c 	.word	0x10016c9c
1000b034:	10016c98 	.word	0x10016c98
1000b038:	10016ca0 	.word	0x10016ca0
1000b03c:	1000af55 	.word	0x1000af55

1000b040 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b040:	b570      	push	{r4, r5, r6, lr}
1000b042:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b044:	4b13      	ldr	r3, [pc, #76]	; (1000b094 <at_ke_msg_send+0x54>)
1000b046:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b048:	4b13      	ldr	r3, [pc, #76]	; (1000b098 <at_ke_msg_send+0x58>)
1000b04a:	681b      	ldr	r3, [r3, #0]
1000b04c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b04e:	2c0c      	cmp	r4, #12
1000b050:	d01f      	beq.n	1000b092 <at_ke_msg_send+0x52>
1000b052:	3c0c      	subs	r4, #12
1000b054:	88e3      	ldrh	r3, [r4, #6]
1000b056:	2b05      	cmp	r3, #5
1000b058:	d01b      	beq.n	1000b092 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b05a:	07eb      	lsls	r3, r5, #31
1000b05c:	d414      	bmi.n	1000b088 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b05e:	4b0f      	ldr	r3, [pc, #60]	; (1000b09c <at_ke_msg_send+0x5c>)
1000b060:	681b      	ldr	r3, [r3, #0]
1000b062:	2002      	movs	r0, #2
1000b064:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b066:	4b0e      	ldr	r3, [pc, #56]	; (1000b0a0 <at_ke_msg_send+0x60>)
1000b068:	681b      	ldr	r3, [r3, #0]
1000b06a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b06c:	4c0d      	ldr	r4, [pc, #52]	; (1000b0a4 <at_ke_msg_send+0x64>)
1000b06e:	2003      	movs	r0, #3
1000b070:	6823      	ldr	r3, [r4, #0]
1000b072:	4798      	blx	r3
1000b074:	2800      	cmp	r0, #0
1000b076:	d1fa      	bne.n	1000b06e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b078:	4b0b      	ldr	r3, [pc, #44]	; (1000b0a8 <at_ke_msg_send+0x68>)
1000b07a:	681b      	ldr	r3, [r3, #0]
1000b07c:	3002      	adds	r0, #2
1000b07e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b080:	2201      	movs	r2, #1
1000b082:	4b0a      	ldr	r3, [pc, #40]	; (1000b0ac <at_ke_msg_send+0x6c>)
1000b084:	601a      	str	r2, [r3, #0]
1000b086:	e004      	b.n	1000b092 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b088:	4b09      	ldr	r3, [pc, #36]	; (1000b0b0 <at_ke_msg_send+0x70>)
1000b08a:	6818      	ldr	r0, [r3, #0]
1000b08c:	4b09      	ldr	r3, [pc, #36]	; (1000b0b4 <at_ke_msg_send+0x74>)
1000b08e:	681b      	ldr	r3, [r3, #0]
1000b090:	4798      	blx	r3
		}
	}
}
1000b092:	bd70      	pop	{r4, r5, r6, pc}
1000b094:	4000b1ec 	.word	0x4000b1ec
1000b098:	10016d48 	.word	0x10016d48
1000b09c:	10016d40 	.word	0x10016d40
1000b0a0:	10016d54 	.word	0x10016d54
1000b0a4:	10016d2c 	.word	0x10016d2c
1000b0a8:	10016d34 	.word	0x10016d34
1000b0ac:	4000b020 	.word	0x4000b020
1000b0b0:	10016d38 	.word	0x10016d38
1000b0b4:	10016d28 	.word	0x10016d28

1000b0b8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b0b8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b0ba:	4b06      	ldr	r3, [pc, #24]	; (1000b0d4 <samb11_plf_resume_callback+0x1c>)
1000b0bc:	4a06      	ldr	r2, [pc, #24]	; (1000b0d8 <samb11_plf_resume_callback+0x20>)
1000b0be:	6819      	ldr	r1, [r3, #0]
1000b0c0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b0c2:	685a      	ldr	r2, [r3, #4]
1000b0c4:	4b05      	ldr	r3, [pc, #20]	; (1000b0dc <samb11_plf_resume_callback+0x24>)
1000b0c6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b0c8:	4b05      	ldr	r3, [pc, #20]	; (1000b0e0 <samb11_plf_resume_callback+0x28>)
1000b0ca:	681b      	ldr	r3, [r3, #0]
1000b0cc:	2b00      	cmp	r3, #0
1000b0ce:	d000      	beq.n	1000b0d2 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b0d0:	4798      	blx	r3
	}
}
1000b0d2:	bd10      	pop	{r4, pc}
1000b0d4:	10017790 	.word	0x10017790
1000b0d8:	4000b00c 	.word	0x4000b00c
1000b0dc:	4000b010 	.word	0x4000b010
1000b0e0:	10017a6c 	.word	0x10017a6c

1000b0e4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b0e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b0e6:	2232      	movs	r2, #50	; 0x32
1000b0e8:	2100      	movs	r1, #0
1000b0ea:	480d      	ldr	r0, [pc, #52]	; (1000b120 <init_port_list+0x3c>)
1000b0ec:	4b0d      	ldr	r3, [pc, #52]	; (1000b124 <init_port_list+0x40>)
1000b0ee:	4798      	blx	r3
1000b0f0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b0f2:	480b      	ldr	r0, [pc, #44]	; (1000b120 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b0f4:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b0f6:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b0f8:	004a      	lsls	r2, r1, #1
1000b0fa:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b0fc:	1882      	adds	r2, r0, r2
1000b0fe:	7853      	ldrb	r3, [r2, #1]
1000b100:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b102:	b2db      	uxtb	r3, r3
1000b104:	43a3      	bics	r3, r4
1000b106:	7053      	strb	r3, [r2, #1]
1000b108:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b10a:	2919      	cmp	r1, #25
1000b10c:	d1f4      	bne.n	1000b0f8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b10e:	4b04      	ldr	r3, [pc, #16]	; (1000b120 <init_port_list+0x3c>)
1000b110:	785a      	ldrb	r2, [r3, #1]
1000b112:	3918      	subs	r1, #24
1000b114:	438a      	bics	r2, r1
1000b116:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b118:	78da      	ldrb	r2, [r3, #3]
1000b11a:	438a      	bics	r2, r1
1000b11c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b11e:	bd70      	pop	{r4, r5, r6, pc}
1000b120:	100177ac 	.word	0x100177ac
1000b124:	1001311f 	.word	0x1001311f

1000b128 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b128:	4a06      	ldr	r2, [pc, #24]	; (1000b144 <init_clock+0x1c>)
1000b12a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b12c:	4b06      	ldr	r3, [pc, #24]	; (1000b148 <init_clock+0x20>)
1000b12e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b130:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b132:	4a06      	ldr	r2, [pc, #24]	; (1000b14c <init_clock+0x24>)
1000b134:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b136:	4906      	ldr	r1, [pc, #24]	; (1000b150 <init_clock+0x28>)
1000b138:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b13a:	4b06      	ldr	r3, [pc, #24]	; (1000b154 <init_clock+0x2c>)
1000b13c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b13e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b140:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b142:	4770      	bx	lr
1000b144:	4000b00c 	.word	0x4000b00c
1000b148:	fffe0fd3 	.word	0xfffe0fd3
1000b14c:	10017790 	.word	0x10017790
1000b150:	4000b010 	.word	0x4000b010
1000b154:	ffffe7c0 	.word	0xffffe7c0

1000b158 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b158:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b15a:	4657      	mov	r7, sl
1000b15c:	464e      	mov	r6, r9
1000b15e:	4645      	mov	r5, r8
1000b160:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b162:	4b4f      	ldr	r3, [pc, #316]	; (1000b2a0 <platform_driver_init+0x148>)
1000b164:	781b      	ldrb	r3, [r3, #0]
1000b166:	2b00      	cmp	r3, #0
1000b168:	d004      	beq.n	1000b174 <platform_driver_init+0x1c>
1000b16a:	4b4d      	ldr	r3, [pc, #308]	; (1000b2a0 <platform_driver_init+0x148>)
1000b16c:	781b      	ldrb	r3, [r3, #0]
1000b16e:	2b01      	cmp	r3, #1
1000b170:	d100      	bne.n	1000b174 <platform_driver_init+0x1c>
1000b172:	e08c      	b.n	1000b28e <platform_driver_init+0x136>
		init_port_list();
1000b174:	4b4b      	ldr	r3, [pc, #300]	; (1000b2a4 <platform_driver_init+0x14c>)
1000b176:	4798      	blx	r3
		init_clock();
1000b178:	4b4b      	ldr	r3, [pc, #300]	; (1000b2a8 <platform_driver_init+0x150>)
1000b17a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b17c:	2300      	movs	r3, #0
1000b17e:	4698      	mov	r8, r3
1000b180:	4b4a      	ldr	r3, [pc, #296]	; (1000b2ac <platform_driver_init+0x154>)
1000b182:	4642      	mov	r2, r8
1000b184:	601a      	str	r2, [r3, #0]
1000b186:	4c4a      	ldr	r4, [pc, #296]	; (1000b2b0 <platform_driver_init+0x158>)
1000b188:	2380      	movs	r3, #128	; 0x80
1000b18a:	2280      	movs	r2, #128	; 0x80
1000b18c:	0412      	lsls	r2, r2, #16
1000b18e:	4692      	mov	sl, r2
1000b190:	50e2      	str	r2, [r4, r3]
1000b192:	2280      	movs	r2, #128	; 0x80
1000b194:	0452      	lsls	r2, r2, #17
1000b196:	4691      	mov	r9, r2
1000b198:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b19a:	4d46      	ldr	r5, [pc, #280]	; (1000b2b4 <platform_driver_init+0x15c>)
1000b19c:	4b46      	ldr	r3, [pc, #280]	; (1000b2b8 <platform_driver_init+0x160>)
1000b19e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b1a0:	4b46      	ldr	r3, [pc, #280]	; (1000b2bc <platform_driver_init+0x164>)
1000b1a2:	4a47      	ldr	r2, [pc, #284]	; (1000b2c0 <platform_driver_init+0x168>)
1000b1a4:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b1a6:	4947      	ldr	r1, [pc, #284]	; (1000b2c4 <platform_driver_init+0x16c>)
1000b1a8:	4a47      	ldr	r2, [pc, #284]	; (1000b2c8 <platform_driver_init+0x170>)
1000b1aa:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b1ac:	4a47      	ldr	r2, [pc, #284]	; (1000b2cc <platform_driver_init+0x174>)
1000b1ae:	6811      	ldr	r1, [r2, #0]
1000b1b0:	4a47      	ldr	r2, [pc, #284]	; (1000b2d0 <platform_driver_init+0x178>)
1000b1b2:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b1b4:	4a47      	ldr	r2, [pc, #284]	; (1000b2d4 <platform_driver_init+0x17c>)
1000b1b6:	6811      	ldr	r1, [r2, #0]
1000b1b8:	4a47      	ldr	r2, [pc, #284]	; (1000b2d8 <platform_driver_init+0x180>)
1000b1ba:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b1bc:	4947      	ldr	r1, [pc, #284]	; (1000b2dc <platform_driver_init+0x184>)
1000b1be:	4a48      	ldr	r2, [pc, #288]	; (1000b2e0 <platform_driver_init+0x188>)
1000b1c0:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b1c2:	4948      	ldr	r1, [pc, #288]	; (1000b2e4 <platform_driver_init+0x18c>)
1000b1c4:	4a48      	ldr	r2, [pc, #288]	; (1000b2e8 <platform_driver_init+0x190>)
1000b1c6:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b1c8:	4f48      	ldr	r7, [pc, #288]	; (1000b2ec <platform_driver_init+0x194>)
1000b1ca:	4a49      	ldr	r2, [pc, #292]	; (1000b2f0 <platform_driver_init+0x198>)
1000b1cc:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b1ce:	4949      	ldr	r1, [pc, #292]	; (1000b2f4 <platform_driver_init+0x19c>)
1000b1d0:	4a49      	ldr	r2, [pc, #292]	; (1000b2f8 <platform_driver_init+0x1a0>)
1000b1d2:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b1d4:	4949      	ldr	r1, [pc, #292]	; (1000b2fc <platform_driver_init+0x1a4>)
1000b1d6:	4a4a      	ldr	r2, [pc, #296]	; (1000b300 <platform_driver_init+0x1a8>)
1000b1d8:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b1da:	4e4a      	ldr	r6, [pc, #296]	; (1000b304 <platform_driver_init+0x1ac>)
1000b1dc:	4a4a      	ldr	r2, [pc, #296]	; (1000b308 <platform_driver_init+0x1b0>)
1000b1de:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b1e0:	494a      	ldr	r1, [pc, #296]	; (1000b30c <platform_driver_init+0x1b4>)
1000b1e2:	4a4b      	ldr	r2, [pc, #300]	; (1000b310 <platform_driver_init+0x1b8>)
1000b1e4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b1e6:	494b      	ldr	r1, [pc, #300]	; (1000b314 <platform_driver_init+0x1bc>)
1000b1e8:	4a4b      	ldr	r2, [pc, #300]	; (1000b318 <platform_driver_init+0x1c0>)
1000b1ea:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b1ec:	494b      	ldr	r1, [pc, #300]	; (1000b31c <platform_driver_init+0x1c4>)
1000b1ee:	4a4c      	ldr	r2, [pc, #304]	; (1000b320 <platform_driver_init+0x1c8>)
1000b1f0:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b1f2:	494c      	ldr	r1, [pc, #304]	; (1000b324 <platform_driver_init+0x1cc>)
1000b1f4:	4a4c      	ldr	r2, [pc, #304]	; (1000b328 <platform_driver_init+0x1d0>)
1000b1f6:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b1f8:	494c      	ldr	r1, [pc, #304]	; (1000b32c <platform_driver_init+0x1d4>)
1000b1fa:	4a4d      	ldr	r2, [pc, #308]	; (1000b330 <platform_driver_init+0x1d8>)
1000b1fc:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b1fe:	2028      	movs	r0, #40	; 0x28
1000b200:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b202:	494c      	ldr	r1, [pc, #304]	; (1000b334 <platform_driver_init+0x1dc>)
1000b204:	2028      	movs	r0, #40	; 0x28
1000b206:	682b      	ldr	r3, [r5, #0]
1000b208:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b20a:	682b      	ldr	r3, [r5, #0]
1000b20c:	494a      	ldr	r1, [pc, #296]	; (1000b338 <platform_driver_init+0x1e0>)
1000b20e:	2027      	movs	r0, #39	; 0x27
1000b210:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b212:	4b4a      	ldr	r3, [pc, #296]	; (1000b33c <platform_driver_init+0x1e4>)
1000b214:	681a      	ldr	r2, [r3, #0]
1000b216:	4b4a      	ldr	r3, [pc, #296]	; (1000b340 <platform_driver_init+0x1e8>)
1000b218:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b21a:	4a4a      	ldr	r2, [pc, #296]	; (1000b344 <platform_driver_init+0x1ec>)
1000b21c:	4b4a      	ldr	r3, [pc, #296]	; (1000b348 <platform_driver_init+0x1f0>)
1000b21e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b220:	4a4a      	ldr	r2, [pc, #296]	; (1000b34c <platform_driver_init+0x1f4>)
1000b222:	4b4b      	ldr	r3, [pc, #300]	; (1000b350 <platform_driver_init+0x1f8>)
1000b224:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b226:	4a4b      	ldr	r2, [pc, #300]	; (1000b354 <platform_driver_init+0x1fc>)
1000b228:	4b4b      	ldr	r3, [pc, #300]	; (1000b358 <platform_driver_init+0x200>)
1000b22a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b22c:	4a4b      	ldr	r2, [pc, #300]	; (1000b35c <platform_driver_init+0x204>)
1000b22e:	4b4c      	ldr	r3, [pc, #304]	; (1000b360 <platform_driver_init+0x208>)
1000b230:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b232:	4a4c      	ldr	r2, [pc, #304]	; (1000b364 <platform_driver_init+0x20c>)
1000b234:	4b4c      	ldr	r3, [pc, #304]	; (1000b368 <platform_driver_init+0x210>)
1000b236:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b238:	4a4c      	ldr	r2, [pc, #304]	; (1000b36c <platform_driver_init+0x214>)
1000b23a:	4b4d      	ldr	r3, [pc, #308]	; (1000b370 <platform_driver_init+0x218>)
1000b23c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b23e:	4a4d      	ldr	r2, [pc, #308]	; (1000b374 <platform_driver_init+0x21c>)
1000b240:	4b4d      	ldr	r3, [pc, #308]	; (1000b378 <platform_driver_init+0x220>)
1000b242:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b244:	22a0      	movs	r2, #160	; 0xa0
1000b246:	0092      	lsls	r2, r2, #2
1000b248:	2100      	movs	r1, #0
1000b24a:	484c      	ldr	r0, [pc, #304]	; (1000b37c <platform_driver_init+0x224>)
1000b24c:	4b4c      	ldr	r3, [pc, #304]	; (1000b380 <platform_driver_init+0x228>)
1000b24e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b250:	2280      	movs	r2, #128	; 0x80
1000b252:	0092      	lsls	r2, r2, #2
1000b254:	4b4b      	ldr	r3, [pc, #300]	; (1000b384 <platform_driver_init+0x22c>)
1000b256:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b258:	4b4b      	ldr	r3, [pc, #300]	; (1000b388 <platform_driver_init+0x230>)
1000b25a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b25c:	4653      	mov	r3, sl
1000b25e:	6023      	str	r3, [r4, #0]
1000b260:	464b      	mov	r3, r9
1000b262:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b264:	4b49      	ldr	r3, [pc, #292]	; (1000b38c <platform_driver_init+0x234>)
1000b266:	4642      	mov	r2, r8
1000b268:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b26a:	683b      	ldr	r3, [r7, #0]
1000b26c:	4a48      	ldr	r2, [pc, #288]	; (1000b390 <platform_driver_init+0x238>)
1000b26e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b270:	6833      	ldr	r3, [r6, #0]
1000b272:	4a48      	ldr	r2, [pc, #288]	; (1000b394 <platform_driver_init+0x23c>)
1000b274:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b276:	2000      	movs	r0, #0
1000b278:	4c47      	ldr	r4, [pc, #284]	; (1000b398 <platform_driver_init+0x240>)
1000b27a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b27c:	2001      	movs	r0, #1
1000b27e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b280:	2002      	movs	r0, #2
1000b282:	47a0      	blx	r4
		platform_initialized = 1;
1000b284:	2201      	movs	r2, #1
1000b286:	4b06      	ldr	r3, [pc, #24]	; (1000b2a0 <platform_driver_init+0x148>)
1000b288:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b28a:	2000      	movs	r0, #0
1000b28c:	e003      	b.n	1000b296 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b28e:	2201      	movs	r2, #1
1000b290:	4b03      	ldr	r3, [pc, #12]	; (1000b2a0 <platform_driver_init+0x148>)
1000b292:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b294:	2001      	movs	r0, #1
	}
	return status;
}
1000b296:	bc1c      	pop	{r2, r3, r4}
1000b298:	4690      	mov	r8, r2
1000b29a:	4699      	mov	r9, r3
1000b29c:	46a2      	mov	sl, r4
1000b29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b2a0:	10016d30 	.word	0x10016d30
1000b2a4:	1000b0e5 	.word	0x1000b0e5
1000b2a8:	1000b129 	.word	0x1000b129
1000b2ac:	10016d50 	.word	0x10016d50
1000b2b0:	e000e100 	.word	0xe000e100
1000b2b4:	10017a60 	.word	0x10017a60
1000b2b8:	000007d7 	.word	0x000007d7
1000b2bc:	000007bd 	.word	0x000007bd
1000b2c0:	1001779c 	.word	0x1001779c
1000b2c4:	0001bc51 	.word	0x0001bc51
1000b2c8:	10017a64 	.word	0x10017a64
1000b2cc:	100400bc 	.word	0x100400bc
1000b2d0:	10016d20 	.word	0x10016d20
1000b2d4:	100400b8 	.word	0x100400b8
1000b2d8:	10016d1c 	.word	0x10016d1c
1000b2dc:	0001b99f 	.word	0x0001b99f
1000b2e0:	10017798 	.word	0x10017798
1000b2e4:	0001b9db 	.word	0x0001b9db
1000b2e8:	100177a4 	.word	0x100177a4
1000b2ec:	10017a74 	.word	0x10017a74
1000b2f0:	1004003c 	.word	0x1004003c
1000b2f4:	10041fc0 	.word	0x10041fc0
1000b2f8:	100177a8 	.word	0x100177a8
1000b2fc:	10041fc4 	.word	0x10041fc4
1000b300:	10017a70 	.word	0x10017a70
1000b304:	10017a68 	.word	0x10017a68
1000b308:	10041fd4 	.word	0x10041fd4
1000b30c:	10041fd8 	.word	0x10041fd8
1000b310:	100177a0 	.word	0x100177a0
1000b314:	0001cbe9 	.word	0x0001cbe9
1000b318:	10016d40 	.word	0x10016d40
1000b31c:	0001cd8f 	.word	0x0001cd8f
1000b320:	10016d34 	.word	0x10016d34
1000b324:	0001cea3 	.word	0x0001cea3
1000b328:	10016d54 	.word	0x10016d54
1000b32c:	0001cbcf 	.word	0x0001cbcf
1000b330:	10016d2c 	.word	0x10016d2c
1000b334:	1000b7b1 	.word	0x1000b7b1
1000b338:	1000b745 	.word	0x1000b745
1000b33c:	100400e4 	.word	0x100400e4
1000b340:	10016d48 	.word	0x10016d48
1000b344:	00019fe9 	.word	0x00019fe9
1000b348:	10016d58 	.word	0x10016d58
1000b34c:	0001dbdd 	.word	0x0001dbdd
1000b350:	10016d28 	.word	0x10016d28
1000b354:	0001dc5b 	.word	0x0001dc5b
1000b358:	10016d3c 	.word	0x10016d3c
1000b35c:	100405ec 	.word	0x100405ec
1000b360:	10016d38 	.word	0x10016d38
1000b364:	0001d5e3 	.word	0x0001d5e3
1000b368:	10016d44 	.word	0x10016d44
1000b36c:	10040c20 	.word	0x10040c20
1000b370:	10016d5c 	.word	0x10016d5c
1000b374:	00019f09 	.word	0x00019f09
1000b378:	10016d18 	.word	0x10016d18
1000b37c:	100177e0 	.word	0x100177e0
1000b380:	1001311f 	.word	0x1001311f
1000b384:	10017a78 	.word	0x10017a78
1000b388:	1000b011 	.word	0x1000b011
1000b38c:	10017a6c 	.word	0x10017a6c
1000b390:	1000b0b9 	.word	0x1000b0b9
1000b394:	1000b80d 	.word	0x1000b80d
1000b398:	1000b7f5 	.word	0x1000b7f5

1000b39c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b39c:	4b04      	ldr	r3, [pc, #16]	; (1000b3b0 <platform_register_ble_msg_handler+0x14>)
1000b39e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b3a0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b3a2:	2a01      	cmp	r2, #1
1000b3a4:	d102      	bne.n	1000b3ac <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b3a6:	4b03      	ldr	r3, [pc, #12]	; (1000b3b4 <platform_register_ble_msg_handler+0x18>)
1000b3a8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b3aa:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b3ac:	0018      	movs	r0, r3
1000b3ae:	4770      	bx	lr
1000b3b0:	10016d30 	.word	0x10016d30
1000b3b4:	10016d50 	.word	0x10016d50

1000b3b8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b3b8:	b570      	push	{r4, r5, r6, lr}
1000b3ba:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b3bc:	4b0e      	ldr	r3, [pc, #56]	; (1000b3f8 <platform_interface_send+0x40>)
1000b3be:	681b      	ldr	r3, [r3, #0]
1000b3c0:	2b00      	cmp	r3, #0
1000b3c2:	d002      	beq.n	1000b3ca <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b3c4:	8840      	ldrh	r0, [r0, #2]
1000b3c6:	4798      	blx	r3
1000b3c8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b3ca:	88e3      	ldrh	r3, [r4, #6]
1000b3cc:	88a2      	ldrh	r2, [r4, #4]
1000b3ce:	8861      	ldrh	r1, [r4, #2]
1000b3d0:	8820      	ldrh	r0, [r4, #0]
1000b3d2:	4d0a      	ldr	r5, [pc, #40]	; (1000b3fc <platform_interface_send+0x44>)
1000b3d4:	682d      	ldr	r5, [r5, #0]
1000b3d6:	47a8      	blx	r5
1000b3d8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b3da:	88e2      	ldrh	r2, [r4, #6]
1000b3dc:	2a00      	cmp	r2, #0
1000b3de:	d102      	bne.n	1000b3e6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b3e0:	4b07      	ldr	r3, [pc, #28]	; (1000b400 <platform_interface_send+0x48>)
1000b3e2:	4798      	blx	r3
1000b3e4:	e006      	b.n	1000b3f4 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b3e6:	0021      	movs	r1, r4
1000b3e8:	3108      	adds	r1, #8
1000b3ea:	4b06      	ldr	r3, [pc, #24]	; (1000b404 <platform_interface_send+0x4c>)
1000b3ec:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b3ee:	0028      	movs	r0, r5
1000b3f0:	4b03      	ldr	r3, [pc, #12]	; (1000b400 <platform_interface_send+0x48>)
1000b3f2:	4798      	blx	r3
	}
}
1000b3f4:	bd70      	pop	{r4, r5, r6, pc}
1000b3f6:	46c0      	nop			; (mov r8, r8)
1000b3f8:	10016d20 	.word	0x10016d20
1000b3fc:	10016d58 	.word	0x10016d58
1000b400:	1000b041 	.word	0x1000b041
1000b404:	1001310d 	.word	0x1001310d

1000b408 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b408:	b570      	push	{r4, r5, r6, lr}
1000b40a:	0015      	movs	r5, r2
1000b40c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b40e:	020a      	lsls	r2, r1, #8
1000b410:	4302      	orrs	r2, r0
1000b412:	4b0a      	ldr	r3, [pc, #40]	; (1000b43c <send_plf_int_msg_ind+0x34>)
1000b414:	681e      	ldr	r6, [r3, #0]
1000b416:	0023      	movs	r3, r4
1000b418:	2105      	movs	r1, #5
1000b41a:	20a0      	movs	r0, #160	; 0xa0
1000b41c:	00c0      	lsls	r0, r0, #3
1000b41e:	47b0      	blx	r6
1000b420:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000b422:	d00a      	beq.n	1000b43a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b424:	2c00      	cmp	r4, #0
1000b426:	d005      	beq.n	1000b434 <send_plf_int_msg_ind+0x2c>
1000b428:	2d00      	cmp	r5, #0
1000b42a:	d003      	beq.n	1000b434 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b42c:	0022      	movs	r2, r4
1000b42e:	0029      	movs	r1, r5
1000b430:	4b03      	ldr	r3, [pc, #12]	; (1000b440 <send_plf_int_msg_ind+0x38>)
1000b432:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b434:	0030      	movs	r0, r6
1000b436:	4b03      	ldr	r3, [pc, #12]	; (1000b444 <send_plf_int_msg_ind+0x3c>)
1000b438:	4798      	blx	r3
	}
}
1000b43a:	bd70      	pop	{r4, r5, r6, pc}
1000b43c:	10016d58 	.word	0x10016d58
1000b440:	1001310d 	.word	0x1001310d
1000b444:	1000b041 	.word	0x1000b041

1000b448 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b448:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b44a:	465f      	mov	r7, fp
1000b44c:	4656      	mov	r6, sl
1000b44e:	464d      	mov	r5, r9
1000b450:	4644      	mov	r4, r8
1000b452:	b4f0      	push	{r4, r5, r6, r7}
1000b454:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b456:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b458:	2300      	movs	r3, #0
1000b45a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b45c:	1ce3      	adds	r3, r4, #3
1000b45e:	d81c      	bhi.n	1000b49a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b460:	220d      	movs	r2, #13
1000b462:	2100      	movs	r1, #0
1000b464:	a802      	add	r0, sp, #8
1000b466:	4b82      	ldr	r3, [pc, #520]	; (1000b670 <platform_event_wait+0x228>)
1000b468:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b46a:	2333      	movs	r3, #51	; 0x33
1000b46c:	aa02      	add	r2, sp, #8
1000b46e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b470:	3b30      	subs	r3, #48	; 0x30
1000b472:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b474:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b476:	3302      	adds	r3, #2
1000b478:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b47a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b47c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b47e:	0a23      	lsrs	r3, r4, #8
1000b480:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b482:	0c23      	lsrs	r3, r4, #16
1000b484:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b486:	0e24      	lsrs	r4, r4, #24
1000b488:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b48a:	2301      	movs	r3, #1
1000b48c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b48e:	210d      	movs	r1, #13
1000b490:	0010      	movs	r0, r2
1000b492:	4b78      	ldr	r3, [pc, #480]	; (1000b674 <platform_event_wait+0x22c>)
1000b494:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b496:	2301      	movs	r3, #1
1000b498:	4699      	mov	r9, r3
1000b49a:	2400      	movs	r4, #0
1000b49c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b49e:	4f76      	ldr	r7, [pc, #472]	; (1000b678 <platform_event_wait+0x230>)
1000b4a0:	4e76      	ldr	r6, [pc, #472]	; (1000b67c <platform_event_wait+0x234>)
1000b4a2:	4977      	ldr	r1, [pc, #476]	; (1000b680 <platform_event_wait+0x238>)
1000b4a4:	6838      	ldr	r0, [r7, #0]
1000b4a6:	6833      	ldr	r3, [r6, #0]
1000b4a8:	4798      	blx	r3
1000b4aa:	2800      	cmp	r0, #0
1000b4ac:	d000      	beq.n	1000b4b0 <platform_event_wait+0x68>
1000b4ae:	e088      	b.n	1000b5c2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b4b0:	4b73      	ldr	r3, [pc, #460]	; (1000b680 <platform_event_wait+0x238>)
1000b4b2:	681c      	ldr	r4, [r3, #0]
1000b4b4:	88a3      	ldrh	r3, [r4, #4]
1000b4b6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b4b8:	23cd      	movs	r3, #205	; 0xcd
1000b4ba:	009b      	lsls	r3, r3, #2
1000b4bc:	459a      	cmp	sl, r3
1000b4be:	d100      	bne.n	1000b4c2 <platform_event_wait+0x7a>
1000b4c0:	e0c7      	b.n	1000b652 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b4c2:	8923      	ldrh	r3, [r4, #8]
1000b4c4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b4c6:	8963      	ldrh	r3, [r4, #10]
1000b4c8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b4ca:	464b      	mov	r3, r9
1000b4cc:	2b00      	cmp	r3, #0
1000b4ce:	d011      	beq.n	1000b4f4 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b4d0:	220d      	movs	r2, #13
1000b4d2:	2100      	movs	r1, #0
1000b4d4:	a802      	add	r0, sp, #8
1000b4d6:	4b66      	ldr	r3, [pc, #408]	; (1000b670 <platform_event_wait+0x228>)
1000b4d8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b4da:	2333      	movs	r3, #51	; 0x33
1000b4dc:	aa02      	add	r2, sp, #8
1000b4de:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b4e0:	3b30      	subs	r3, #48	; 0x30
1000b4e2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b4e4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b4e6:	3302      	adds	r3, #2
1000b4e8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b4ea:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b4ec:	210d      	movs	r1, #13
1000b4ee:	0010      	movs	r0, r2
1000b4f0:	4b60      	ldr	r3, [pc, #384]	; (1000b674 <platform_event_wait+0x22c>)
1000b4f2:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b4f4:	23a0      	movs	r3, #160	; 0xa0
1000b4f6:	00db      	lsls	r3, r3, #3
1000b4f8:	459a      	cmp	sl, r3
1000b4fa:	d121      	bne.n	1000b540 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b4fc:	4b61      	ldr	r3, [pc, #388]	; (1000b684 <platform_event_wait+0x23c>)
1000b4fe:	881b      	ldrh	r3, [r3, #0]
1000b500:	4443      	add	r3, r8
1000b502:	22a0      	movs	r2, #160	; 0xa0
1000b504:	0092      	lsls	r2, r2, #2
1000b506:	4293      	cmp	r3, r2
1000b508:	dd02      	ble.n	1000b510 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b50a:	3a80      	subs	r2, #128	; 0x80
1000b50c:	4b5d      	ldr	r3, [pc, #372]	; (1000b684 <platform_event_wait+0x23c>)
1000b50e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b510:	4b5c      	ldr	r3, [pc, #368]	; (1000b684 <platform_event_wait+0x23c>)
1000b512:	469a      	mov	sl, r3
1000b514:	881d      	ldrh	r5, [r3, #0]
1000b516:	4b5c      	ldr	r3, [pc, #368]	; (1000b688 <platform_event_wait+0x240>)
1000b518:	18ed      	adds	r5, r5, r3
1000b51a:	0021      	movs	r1, r4
1000b51c:	310c      	adds	r1, #12
1000b51e:	4642      	mov	r2, r8
1000b520:	0028      	movs	r0, r5
1000b522:	4b5a      	ldr	r3, [pc, #360]	; (1000b68c <platform_event_wait+0x244>)
1000b524:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b526:	4642      	mov	r2, r8
1000b528:	0029      	movs	r1, r5
1000b52a:	4658      	mov	r0, fp
1000b52c:	4b58      	ldr	r3, [pc, #352]	; (1000b690 <platform_event_wait+0x248>)
1000b52e:	4798      	blx	r3
				plf_event_buff_index += len;
1000b530:	4653      	mov	r3, sl
1000b532:	881b      	ldrh	r3, [r3, #0]
1000b534:	4443      	add	r3, r8
1000b536:	4652      	mov	r2, sl
1000b538:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b53a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b53c:	2502      	movs	r5, #2
1000b53e:	e03a      	b.n	1000b5b6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b540:	4b54      	ldr	r3, [pc, #336]	; (1000b694 <platform_event_wait+0x24c>)
1000b542:	681b      	ldr	r3, [r3, #0]
1000b544:	2b00      	cmp	r3, #0
1000b546:	d032      	beq.n	1000b5ae <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b548:	4b4d      	ldr	r3, [pc, #308]	; (1000b680 <platform_event_wait+0x238>)
1000b54a:	681a      	ldr	r2, [r3, #0]
1000b54c:	8893      	ldrh	r3, [r2, #4]
1000b54e:	21cd      	movs	r1, #205	; 0xcd
1000b550:	0089      	lsls	r1, r1, #2
1000b552:	428b      	cmp	r3, r1
1000b554:	d104      	bne.n	1000b560 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b556:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b558:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b55a:	2b00      	cmp	r3, #0
1000b55c:	d02b      	beq.n	1000b5b6 <platform_event_wait+0x16e>
1000b55e:	e028      	b.n	1000b5b2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b560:	4c4d      	ldr	r4, [pc, #308]	; (1000b698 <platform_event_wait+0x250>)
1000b562:	4d49      	ldr	r5, [pc, #292]	; (1000b688 <platform_event_wait+0x240>)
1000b564:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b566:	702b      	strb	r3, [r5, #0]
1000b568:	0a1b      	lsrs	r3, r3, #8
1000b56a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b56c:	8910      	ldrh	r0, [r2, #8]
1000b56e:	4b4b      	ldr	r3, [pc, #300]	; (1000b69c <platform_event_wait+0x254>)
1000b570:	681b      	ldr	r3, [r3, #0]
1000b572:	4798      	blx	r3
1000b574:	7128      	strb	r0, [r5, #4]
1000b576:	0a00      	lsrs	r0, r0, #8
1000b578:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b57a:	6820      	ldr	r0, [r4, #0]
1000b57c:	4b40      	ldr	r3, [pc, #256]	; (1000b680 <platform_event_wait+0x238>)
1000b57e:	681a      	ldr	r2, [r3, #0]
1000b580:	88d2      	ldrh	r2, [r2, #6]
1000b582:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b584:	681d      	ldr	r5, [r3, #0]
1000b586:	896b      	ldrh	r3, [r5, #10]
1000b588:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b58a:	3008      	adds	r0, #8
1000b58c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b58e:	896a      	ldrh	r2, [r5, #10]
1000b590:	2a00      	cmp	r2, #0
1000b592:	d003      	beq.n	1000b59c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b594:	0029      	movs	r1, r5
1000b596:	310c      	adds	r1, #12
1000b598:	4b3c      	ldr	r3, [pc, #240]	; (1000b68c <platform_event_wait+0x244>)
1000b59a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b59c:	8969      	ldrh	r1, [r5, #10]
1000b59e:	3108      	adds	r1, #8
1000b5a0:	4b3c      	ldr	r3, [pc, #240]	; (1000b694 <platform_event_wait+0x24c>)
1000b5a2:	681b      	ldr	r3, [r3, #0]
1000b5a4:	4838      	ldr	r0, [pc, #224]	; (1000b688 <platform_event_wait+0x240>)
1000b5a6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5a8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b5aa:	2503      	movs	r5, #3
1000b5ac:	e003      	b.n	1000b5b6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5ae:	2400      	movs	r4, #0
1000b5b0:	e001      	b.n	1000b5b6 <platform_event_wait+0x16e>
1000b5b2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b5b4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b5b6:	4b32      	ldr	r3, [pc, #200]	; (1000b680 <platform_event_wait+0x238>)
1000b5b8:	6818      	ldr	r0, [r3, #0]
1000b5ba:	4b39      	ldr	r3, [pc, #228]	; (1000b6a0 <platform_event_wait+0x258>)
1000b5bc:	681b      	ldr	r3, [r3, #0]
1000b5be:	4798      	blx	r3
1000b5c0:	e000      	b.n	1000b5c4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b5c2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b5c4:	2c00      	cmp	r4, #0
1000b5c6:	d000      	beq.n	1000b5ca <platform_event_wait+0x182>
1000b5c8:	e76b      	b.n	1000b4a2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b5ca:	464b      	mov	r3, r9
1000b5cc:	2b00      	cmp	r3, #0
1000b5ce:	d046      	beq.n	1000b65e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b5d0:	4b29      	ldr	r3, [pc, #164]	; (1000b678 <platform_event_wait+0x230>)
1000b5d2:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b5d4:	2e00      	cmp	r6, #0
1000b5d6:	d104      	bne.n	1000b5e2 <platform_event_wait+0x19a>
1000b5d8:	2300      	movs	r3, #0
1000b5da:	6a1c      	ldr	r4, [r3, #32]
1000b5dc:	2c00      	cmp	r4, #0
1000b5de:	d131      	bne.n	1000b644 <platform_event_wait+0x1fc>
1000b5e0:	e03d      	b.n	1000b65e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b5e2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b5e4:	2314      	movs	r3, #20
1000b5e6:	469c      	mov	ip, r3
1000b5e8:	44b4      	add	ip, r6
1000b5ea:	4663      	mov	r3, ip
1000b5ec:	4660      	mov	r0, ip
1000b5ee:	9300      	str	r3, [sp, #0]
1000b5f0:	4b2c      	ldr	r3, [pc, #176]	; (1000b6a4 <platform_event_wait+0x25c>)
1000b5f2:	681b      	ldr	r3, [r3, #0]
1000b5f4:	4798      	blx	r3
	while(NULL != current)
1000b5f6:	2c00      	cmp	r4, #0
1000b5f8:	d01f      	beq.n	1000b63a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b5fa:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b5fc:	23cd      	movs	r3, #205	; 0xcd
1000b5fe:	009b      	lsls	r3, r3, #2
1000b600:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b602:	4b27      	ldr	r3, [pc, #156]	; (1000b6a0 <platform_event_wait+0x258>)
1000b604:	469a      	mov	sl, r3
1000b606:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b608:	6803      	ldr	r3, [r0, #0]
1000b60a:	889b      	ldrh	r3, [r3, #4]
1000b60c:	4543      	cmp	r3, r8
1000b60e:	d110      	bne.n	1000b632 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b610:	2f00      	cmp	r7, #0
1000b612:	d006      	beq.n	1000b622 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b614:	6883      	ldr	r3, [r0, #8]
1000b616:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b618:	4653      	mov	r3, sl
1000b61a:	681b      	ldr	r3, [r3, #0]
1000b61c:	4798      	blx	r3
				current = prev->pstrNext;
1000b61e:	68b8      	ldr	r0, [r7, #8]
1000b620:	e009      	b.n	1000b636 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b622:	6883      	ldr	r3, [r0, #8]
1000b624:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b626:	4b1e      	ldr	r3, [pc, #120]	; (1000b6a0 <platform_event_wait+0x258>)
1000b628:	681b      	ldr	r3, [r3, #0]
1000b62a:	9301      	str	r3, [sp, #4]
1000b62c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b62e:	6a30      	ldr	r0, [r6, #32]
1000b630:	e001      	b.n	1000b636 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b632:	0007      	movs	r7, r0
1000b634:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b636:	2800      	cmp	r0, #0
1000b638:	d1e6      	bne.n	1000b608 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b63a:	4b1b      	ldr	r3, [pc, #108]	; (1000b6a8 <platform_event_wait+0x260>)
1000b63c:	681b      	ldr	r3, [r3, #0]
1000b63e:	9800      	ldr	r0, [sp, #0]
1000b640:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b642:	e00c      	b.n	1000b65e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b644:	2314      	movs	r3, #20
1000b646:	9300      	str	r3, [sp, #0]
1000b648:	4b16      	ldr	r3, [pc, #88]	; (1000b6a4 <platform_event_wait+0x25c>)
1000b64a:	681b      	ldr	r3, [r3, #0]
1000b64c:	2014      	movs	r0, #20
1000b64e:	4798      	blx	r3
1000b650:	e7d3      	b.n	1000b5fa <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b652:	4b10      	ldr	r3, [pc, #64]	; (1000b694 <platform_event_wait+0x24c>)
1000b654:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b656:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b658:	2b00      	cmp	r3, #0
1000b65a:	d0ac      	beq.n	1000b5b6 <platform_event_wait+0x16e>
1000b65c:	e77b      	b.n	1000b556 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b65e:	0028      	movs	r0, r5
1000b660:	b007      	add	sp, #28
1000b662:	bc3c      	pop	{r2, r3, r4, r5}
1000b664:	4690      	mov	r8, r2
1000b666:	4699      	mov	r9, r3
1000b668:	46a2      	mov	sl, r4
1000b66a:	46ab      	mov	fp, r5
1000b66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b66e:	46c0      	nop			; (mov r8, r8)
1000b670:	1001311f 	.word	0x1001311f
1000b674:	1000b3b9 	.word	0x1000b3b9
1000b678:	10016d5c 	.word	0x10016d5c
1000b67c:	10016d44 	.word	0x10016d44
1000b680:	10016d24 	.word	0x10016d24
1000b684:	10017a78 	.word	0x10017a78
1000b688:	100177e0 	.word	0x100177e0
1000b68c:	1001310d 	.word	0x1001310d
1000b690:	1000af65 	.word	0x1000af65
1000b694:	10016d50 	.word	0x10016d50
1000b698:	10016d4c 	.word	0x10016d4c
1000b69c:	10016d1c 	.word	0x10016d1c
1000b6a0:	10016d18 	.word	0x10016d18
1000b6a4:	10016d3c 	.word	0x10016d3c
1000b6a8:	10016d28 	.word	0x10016d28

1000b6ac <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b6ac:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b6ae:	4b03      	ldr	r3, [pc, #12]	; (1000b6bc <acquire_sleep_lock+0x10>)
1000b6b0:	681b      	ldr	r3, [r3, #0]
1000b6b2:	2080      	movs	r0, #128	; 0x80
1000b6b4:	0200      	lsls	r0, r0, #8
1000b6b6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b6b8:	2008      	movs	r0, #8
1000b6ba:	bd10      	pop	{r4, pc}
1000b6bc:	10017798 	.word	0x10017798

1000b6c0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b6c0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b6c2:	4b03      	ldr	r3, [pc, #12]	; (1000b6d0 <release_message_lock+0x10>)
1000b6c4:	681b      	ldr	r3, [r3, #0]
1000b6c6:	2080      	movs	r0, #128	; 0x80
1000b6c8:	01c0      	lsls	r0, r0, #7
1000b6ca:	4798      	blx	r3
	return status;
}
1000b6cc:	2000      	movs	r0, #0
1000b6ce:	bd10      	pop	{r4, pc}
1000b6d0:	100177a4 	.word	0x100177a4

1000b6d4 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b6d4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b6d6:	4a18      	ldr	r2, [pc, #96]	; (1000b738 <gpio1_combined_isr_handler+0x64>)
1000b6d8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b6da:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b6dc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b6de:	2180      	movs	r1, #128	; 0x80
1000b6e0:	0209      	lsls	r1, r1, #8
1000b6e2:	4301      	orrs	r1, r0
1000b6e4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b6e6:	0010      	movs	r0, r2
1000b6e8:	4d14      	ldr	r5, [pc, #80]	; (1000b73c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b6ea:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b6ec:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b6ee:	05db      	lsls	r3, r3, #23
1000b6f0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b6f2:	d011      	beq.n	1000b718 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b6f4:	b2db      	uxtb	r3, r3
1000b6f6:	4259      	negs	r1, r3
1000b6f8:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b6fa:	2b01      	cmp	r3, #1
1000b6fc:	d006      	beq.n	1000b70c <gpio1_combined_isr_handler+0x38>
1000b6fe:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b700:	085b      	lsrs	r3, r3, #1
				index++;
1000b702:	3101      	adds	r1, #1
1000b704:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b706:	2b01      	cmp	r3, #1
1000b708:	d1fa      	bne.n	1000b700 <gpio1_combined_isr_handler+0x2c>
1000b70a:	e000      	b.n	1000b70e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b70c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b70e:	0023      	movs	r3, r4
1000b710:	408b      	lsls	r3, r1
1000b712:	b29b      	uxth	r3, r3
1000b714:	8703      	strh	r3, [r0, #56]	; 0x38
1000b716:	e003      	b.n	1000b720 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b718:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b71a:	432b      	orrs	r3, r5
1000b71c:	b29b      	uxth	r3, r3
1000b71e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b720:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b722:	05db      	lsls	r3, r3, #23
1000b724:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b726:	d1e2      	bne.n	1000b6ee <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b728:	2180      	movs	r1, #128	; 0x80
1000b72a:	0049      	lsls	r1, r1, #1
1000b72c:	3381      	adds	r3, #129	; 0x81
1000b72e:	33ff      	adds	r3, #255	; 0xff
1000b730:	4a03      	ldr	r2, [pc, #12]	; (1000b740 <gpio1_combined_isr_handler+0x6c>)
1000b732:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b734:	bd30      	pop	{r4, r5, pc}
1000b736:	46c0      	nop			; (mov r8, r8)
1000b738:	40011000 	.word	0x40011000
1000b73c:	ffff8000 	.word	0xffff8000
1000b740:	e000e100 	.word	0xe000e100

1000b744 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b744:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b746:	4a17      	ldr	r2, [pc, #92]	; (1000b7a4 <gpio0_combined_isr_handler+0x60>)
1000b748:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b74a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b74c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b74e:	2180      	movs	r1, #128	; 0x80
1000b750:	0209      	lsls	r1, r1, #8
1000b752:	4301      	orrs	r1, r0
1000b754:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b756:	0010      	movs	r0, r2
1000b758:	4d13      	ldr	r5, [pc, #76]	; (1000b7a8 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b75a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b75c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b75e:	05db      	lsls	r3, r3, #23
1000b760:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b762:	d011      	beq.n	1000b788 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b764:	b2db      	uxtb	r3, r3
1000b766:	4259      	negs	r1, r3
1000b768:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b76a:	2b01      	cmp	r3, #1
1000b76c:	d006      	beq.n	1000b77c <gpio0_combined_isr_handler+0x38>
1000b76e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b770:	085b      	lsrs	r3, r3, #1
				index++;
1000b772:	3101      	adds	r1, #1
1000b774:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b776:	2b01      	cmp	r3, #1
1000b778:	d1fa      	bne.n	1000b770 <gpio0_combined_isr_handler+0x2c>
1000b77a:	e000      	b.n	1000b77e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b77c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b77e:	0023      	movs	r3, r4
1000b780:	408b      	lsls	r3, r1
1000b782:	b29b      	uxth	r3, r3
1000b784:	8703      	strh	r3, [r0, #56]	; 0x38
1000b786:	e003      	b.n	1000b790 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b788:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b78a:	432b      	orrs	r3, r5
1000b78c:	b29b      	uxth	r3, r3
1000b78e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b790:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b792:	05db      	lsls	r3, r3, #23
1000b794:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b796:	d1e2      	bne.n	1000b75e <gpio0_combined_isr_handler+0x1a>
1000b798:	2180      	movs	r1, #128	; 0x80
1000b79a:	3381      	adds	r3, #129	; 0x81
1000b79c:	33ff      	adds	r3, #255	; 0xff
1000b79e:	4a03      	ldr	r2, [pc, #12]	; (1000b7ac <gpio0_combined_isr_handler+0x68>)
1000b7a0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b7a2:	bd30      	pop	{r4, r5, pc}
1000b7a4:	40010000 	.word	0x40010000
1000b7a8:	ffff8000 	.word	0xffff8000
1000b7ac:	e000e100 	.word	0xe000e100

1000b7b0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b7b0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b7b2:	4b0c      	ldr	r3, [pc, #48]	; (1000b7e4 <PORT1_COMB_Handler+0x34>)
1000b7b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b7b6:	0b5b      	lsrs	r3, r3, #13
1000b7b8:	d010      	beq.n	1000b7dc <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b7ba:	4b0b      	ldr	r3, [pc, #44]	; (1000b7e8 <PORT1_COMB_Handler+0x38>)
1000b7bc:	681b      	ldr	r3, [r3, #0]
1000b7be:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b7c0:	4a08      	ldr	r2, [pc, #32]	; (1000b7e4 <PORT1_COMB_Handler+0x34>)
1000b7c2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b7c4:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b7c6:	0b5b      	lsrs	r3, r3, #13
1000b7c8:	035b      	lsls	r3, r3, #13
1000b7ca:	430b      	orrs	r3, r1
1000b7cc:	8713      	strh	r3, [r2, #56]	; 0x38
1000b7ce:	2180      	movs	r1, #128	; 0x80
1000b7d0:	0049      	lsls	r1, r1, #1
1000b7d2:	23c0      	movs	r3, #192	; 0xc0
1000b7d4:	005b      	lsls	r3, r3, #1
1000b7d6:	4a05      	ldr	r2, [pc, #20]	; (1000b7ec <PORT1_COMB_Handler+0x3c>)
1000b7d8:	50d1      	str	r1, [r2, r3]
1000b7da:	e001      	b.n	1000b7e0 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b7dc:	4b04      	ldr	r3, [pc, #16]	; (1000b7f0 <PORT1_COMB_Handler+0x40>)
1000b7de:	4798      	blx	r3
	}
}
1000b7e0:	bd10      	pop	{r4, pc}
1000b7e2:	46c0      	nop			; (mov r8, r8)
1000b7e4:	40011000 	.word	0x40011000
1000b7e8:	10017a64 	.word	0x10017a64
1000b7ec:	e000e100 	.word	0xe000e100
1000b7f0:	1000b6d5 	.word	0x1000b6d5

1000b7f4 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b7f4:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b7f6:	2802      	cmp	r0, #2
1000b7f8:	d804      	bhi.n	1000b804 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b7fa:	0080      	lsls	r0, r0, #2
1000b7fc:	2200      	movs	r2, #0
1000b7fe:	4b02      	ldr	r3, [pc, #8]	; (1000b808 <wakeup_int_unregister_callback+0x14>)
1000b800:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b802:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b804:	0018      	movs	r0, r3
1000b806:	4770      	bx	lr
1000b808:	10017a7c 	.word	0x10017a7c

1000b80c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b80c:	b510      	push	{r4, lr}
1000b80e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b810:	7803      	ldrb	r3, [r0, #0]
1000b812:	2b01      	cmp	r3, #1
1000b814:	d108      	bne.n	1000b828 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b816:	4b11      	ldr	r3, [pc, #68]	; (1000b85c <wakeup_active_event_callback+0x50>)
1000b818:	681b      	ldr	r3, [r3, #0]
1000b81a:	2b00      	cmp	r3, #0
1000b81c:	d000      	beq.n	1000b820 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b81e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b820:	23ff      	movs	r3, #255	; 0xff
1000b822:	6822      	ldr	r2, [r4, #0]
1000b824:	439a      	bics	r2, r3
1000b826:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b828:	7863      	ldrb	r3, [r4, #1]
1000b82a:	2b01      	cmp	r3, #1
1000b82c:	d108      	bne.n	1000b840 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b82e:	4b0b      	ldr	r3, [pc, #44]	; (1000b85c <wakeup_active_event_callback+0x50>)
1000b830:	685b      	ldr	r3, [r3, #4]
1000b832:	2b00      	cmp	r3, #0
1000b834:	d000      	beq.n	1000b838 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b836:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b838:	4b09      	ldr	r3, [pc, #36]	; (1000b860 <wakeup_active_event_callback+0x54>)
1000b83a:	6822      	ldr	r2, [r4, #0]
1000b83c:	4013      	ands	r3, r2
1000b83e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b840:	78a3      	ldrb	r3, [r4, #2]
1000b842:	2b01      	cmp	r3, #1
1000b844:	d108      	bne.n	1000b858 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b846:	4b05      	ldr	r3, [pc, #20]	; (1000b85c <wakeup_active_event_callback+0x50>)
1000b848:	689b      	ldr	r3, [r3, #8]
1000b84a:	2b00      	cmp	r3, #0
1000b84c:	d000      	beq.n	1000b850 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b84e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b850:	4b04      	ldr	r3, [pc, #16]	; (1000b864 <wakeup_active_event_callback+0x58>)
1000b852:	6822      	ldr	r2, [r4, #0]
1000b854:	4013      	ands	r3, r2
1000b856:	6023      	str	r3, [r4, #0]
	}
}
1000b858:	bd10      	pop	{r4, pc}
1000b85a:	46c0      	nop			; (mov r8, r8)
1000b85c:	10017a7c 	.word	0x10017a7c
1000b860:	ffff00ff 	.word	0xffff00ff
1000b864:	ff00ffff 	.word	0xff00ffff

1000b868 <app_connected_event_handler>:
* @param[in] at_ble_connected_t
*/
static at_ble_status_t app_connected_event_handler(void *params)
{
	return AT_BLE_SUCCESS;
}
1000b868:	2000      	movs	r0, #0
1000b86a:	4770      	bx	lr

1000b86c <transfer_done_tx>:
//! [transfer_descriptor]

//! [setup]
//! [transfer_done_tx]
static void transfer_done_tx(struct dma_resource* const resource )
{
1000b86c:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_rx);
1000b86e:	4802      	ldr	r0, [pc, #8]	; (1000b878 <transfer_done_tx+0xc>)
1000b870:	4b02      	ldr	r3, [pc, #8]	; (1000b87c <transfer_done_tx+0x10>)
1000b872:	4798      	blx	r3
}
1000b874:	bd10      	pop	{r4, pc}
1000b876:	46c0      	nop			; (mov r8, r8)
1000b878:	10017b68 	.word	0x10017b68
1000b87c:	100082d1 	.word	0x100082d1

1000b880 <app_disconnected_event_handler>:
/**
 * @brief app_connected_state ble manager notifies the application about state
 * @param[in] connected
 */
static at_ble_status_t app_disconnected_event_handler(void *params)
{
1000b880:	b510      	push	{r4, lr}
		/* Started advertisement */
		notify_recv_ntf_handler(csc_prf_report_ntf_cb);
1000b882:	4803      	ldr	r0, [pc, #12]	; (1000b890 <app_disconnected_event_handler+0x10>)
1000b884:	4b03      	ldr	r3, [pc, #12]	; (1000b894 <app_disconnected_event_handler+0x14>)
1000b886:	4798      	blx	r3
		csc_prf_dev_adv();		
1000b888:	4b03      	ldr	r3, [pc, #12]	; (1000b898 <app_disconnected_event_handler+0x18>)
1000b88a:	4798      	blx	r3

		return AT_BLE_SUCCESS;
}
1000b88c:	2000      	movs	r0, #0
1000b88e:	bd10      	pop	{r4, pc}
1000b890:	1000b985 	.word	0x1000b985
1000b894:	10009a19 	.word	0x10009a19
1000b898:	100099bd 	.word	0x100099bd

1000b89c <uart_rx_callback>:
	NULL,
	NULL
};

static void uart_rx_callback(uint8_t input)
{
1000b89c:	b570      	push	{r4, r5, r6, lr}
	if(input == '\r') {
1000b89e:	280d      	cmp	r0, #13
1000b8a0:	d118      	bne.n	1000b8d4 <uart_rx_callback+0x38>
		if(send_length) {
1000b8a2:	4b19      	ldr	r3, [pc, #100]	; (1000b908 <uart_rx_callback+0x6c>)
1000b8a4:	881b      	ldrh	r3, [r3, #0]
1000b8a6:	2b00      	cmp	r3, #0
1000b8a8:	d02d      	beq.n	1000b906 <uart_rx_callback+0x6a>
			send_plf_int_msg_ind(UART_RX_COMPLETE, UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK, send_data, send_length);
1000b8aa:	4c18      	ldr	r4, [pc, #96]	; (1000b90c <uart_rx_callback+0x70>)
1000b8ac:	0022      	movs	r2, r4
1000b8ae:	2101      	movs	r1, #1
1000b8b0:	380b      	subs	r0, #11
1000b8b2:	4d17      	ldr	r5, [pc, #92]	; (1000b910 <uart_rx_callback+0x74>)
1000b8b4:	47a8      	blx	r5
			memset(send_data, 0, APP_TX_BUF_SIZE);
1000b8b6:	2296      	movs	r2, #150	; 0x96
1000b8b8:	2100      	movs	r1, #0
1000b8ba:	0020      	movs	r0, r4
1000b8bc:	4b15      	ldr	r3, [pc, #84]	; (1000b914 <uart_rx_callback+0x78>)
1000b8be:	4798      	blx	r3
			send_length = 0;
1000b8c0:	2200      	movs	r2, #0
1000b8c2:	4b11      	ldr	r3, [pc, #68]	; (1000b908 <uart_rx_callback+0x6c>)
1000b8c4:	801a      	strh	r2, [r3, #0]
			DBG_LOG(" ");
1000b8c6:	4814      	ldr	r0, [pc, #80]	; (1000b918 <uart_rx_callback+0x7c>)
1000b8c8:	4b14      	ldr	r3, [pc, #80]	; (1000b91c <uart_rx_callback+0x80>)
1000b8ca:	4798      	blx	r3
1000b8cc:	2020      	movs	r0, #32
1000b8ce:	4b14      	ldr	r3, [pc, #80]	; (1000b920 <uart_rx_callback+0x84>)
1000b8d0:	4798      	blx	r3
1000b8d2:	e018      	b.n	1000b906 <uart_rx_callback+0x6a>
		}
	}
	else {
		send_data[send_length++] = input;
1000b8d4:	4c0c      	ldr	r4, [pc, #48]	; (1000b908 <uart_rx_callback+0x6c>)
1000b8d6:	8823      	ldrh	r3, [r4, #0]
1000b8d8:	1c5a      	adds	r2, r3, #1
1000b8da:	8022      	strh	r2, [r4, #0]
1000b8dc:	4a0b      	ldr	r2, [pc, #44]	; (1000b90c <uart_rx_callback+0x70>)
1000b8de:	54d0      	strb	r0, [r2, r3]
		DBG_LOG_CONT("%c", input);
1000b8e0:	4b0f      	ldr	r3, [pc, #60]	; (1000b920 <uart_rx_callback+0x84>)
1000b8e2:	4798      	blx	r3
		
		if(send_length >= APP_TX_BUF_SIZE) {
1000b8e4:	8823      	ldrh	r3, [r4, #0]
1000b8e6:	2b95      	cmp	r3, #149	; 0x95
1000b8e8:	d90d      	bls.n	1000b906 <uart_rx_callback+0x6a>
			send_plf_int_msg_ind(UART_RX_COMPLETE, UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK, send_data, send_length);
1000b8ea:	4c08      	ldr	r4, [pc, #32]	; (1000b90c <uart_rx_callback+0x70>)
1000b8ec:	0022      	movs	r2, r4
1000b8ee:	2101      	movs	r1, #1
1000b8f0:	2002      	movs	r0, #2
1000b8f2:	4d07      	ldr	r5, [pc, #28]	; (1000b910 <uart_rx_callback+0x74>)
1000b8f4:	47a8      	blx	r5
			memset(send_data, 0, APP_TX_BUF_SIZE);
1000b8f6:	2296      	movs	r2, #150	; 0x96
1000b8f8:	2100      	movs	r1, #0
1000b8fa:	0020      	movs	r0, r4
1000b8fc:	4b05      	ldr	r3, [pc, #20]	; (1000b914 <uart_rx_callback+0x78>)
1000b8fe:	4798      	blx	r3
			send_length = 0;
1000b900:	2200      	movs	r2, #0
1000b902:	4b01      	ldr	r3, [pc, #4]	; (1000b908 <uart_rx_callback+0x6c>)
1000b904:	801a      	strh	r2, [r3, #0]
		}
	}
}
1000b906:	bd70      	pop	{r4, r5, r6, pc}
1000b908:	100152f2 	.word	0x100152f2
1000b90c:	10017ad0 	.word	0x10017ad0
1000b910:	1000b409 	.word	0x1000b409
1000b914:	1001311f 	.word	0x1001311f
1000b918:	10014674 	.word	0x10014674
1000b91c:	10013251 	.word	0x10013251
1000b920:	10013165 	.word	0x10013165

1000b924 <csc_app_send_buf>:
	report_info->recv_buff_len = 0;
}

/* Function used for send data */
static void csc_app_send_buf(void)
{
1000b924:	b510      	push	{r4, lr}
1000b926:	b0a8      	sub	sp, #160	; 0xa0
	uint16_t plf_event_type;
	uint16_t plf_event_data_len;
	uint8_t plf_event_data[APP_TX_BUF_SIZE] = {0, };
1000b928:	2296      	movs	r2, #150	; 0x96
1000b92a:	2100      	movs	r1, #0
1000b92c:	a801      	add	r0, sp, #4
1000b92e:	4b0a      	ldr	r3, [pc, #40]	; (1000b958 <csc_app_send_buf+0x34>)
1000b930:	4798      	blx	r3

	platform_event_get(&plf_event_type, plf_event_data, &plf_event_data_len);
1000b932:	249e      	movs	r4, #158	; 0x9e
1000b934:	446c      	add	r4, sp
1000b936:	aa27      	add	r2, sp, #156	; 0x9c
1000b938:	a901      	add	r1, sp, #4
1000b93a:	0020      	movs	r0, r4
1000b93c:	4b07      	ldr	r3, [pc, #28]	; (1000b95c <csc_app_send_buf+0x38>)
1000b93e:	4798      	blx	r3
	
	if(plf_event_type == ((UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK << 8) | UART_RX_COMPLETE)) {
1000b940:	8822      	ldrh	r2, [r4, #0]
1000b942:	2381      	movs	r3, #129	; 0x81
1000b944:	005b      	lsls	r3, r3, #1
1000b946:	429a      	cmp	r2, r3
1000b948:	d104      	bne.n	1000b954 <csc_app_send_buf+0x30>
		csc_prf_send_data(plf_event_data, plf_event_data_len);
1000b94a:	ab27      	add	r3, sp, #156	; 0x9c
1000b94c:	8819      	ldrh	r1, [r3, #0]
1000b94e:	a801      	add	r0, sp, #4
1000b950:	4b03      	ldr	r3, [pc, #12]	; (1000b960 <csc_app_send_buf+0x3c>)
1000b952:	4798      	blx	r3
	}

}
1000b954:	b028      	add	sp, #160	; 0xa0
1000b956:	bd10      	pop	{r4, pc}
1000b958:	1001311f 	.word	0x1001311f
1000b95c:	1000af9d 	.word	0x1000af9d
1000b960:	1000998d 	.word	0x1000998d

1000b964 <LED0_ON>:
//! [transfer_done_tx]

//! [transfer_done_rx]
float TempRecvFrmGecko = 0;
void LED0_ON()
{
1000b964:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
1000b966:	2100      	movs	r1, #0
1000b968:	2016      	movs	r0, #22
1000b96a:	4b01      	ldr	r3, [pc, #4]	; (1000b970 <LED0_ON+0xc>)
1000b96c:	4798      	blx	r3
}
1000b96e:	bd10      	pop	{r4, pc}
1000b970:	100086d1 	.word	0x100086d1

1000b974 <LED0_OFF>:

void LED0_OFF()
{
1000b974:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
1000b976:	2101      	movs	r1, #1
1000b978:	2016      	movs	r0, #22
1000b97a:	4b01      	ldr	r3, [pc, #4]	; (1000b980 <LED0_OFF+0xc>)
1000b97c:	4798      	blx	r3
}
1000b97e:	bd10      	pop	{r4, pc}
1000b980:	100086d1 	.word	0x100086d1

1000b984 <csc_prf_report_ntf_cb>:
	}
}

/* Callback called for new data from remote device */
static void csc_prf_report_ntf_cb(csc_report_ntf_t *report_info)
{
1000b984:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b986:	465f      	mov	r7, fp
1000b988:	4646      	mov	r6, r8
1000b98a:	b4c0      	push	{r6, r7}
1000b98c:	b083      	sub	sp, #12
1000b98e:	0007      	movs	r7, r0
	DBG_LOG("\r\n");
1000b990:	4d24      	ldr	r5, [pc, #144]	; (1000ba24 <csc_prf_report_ntf_cb+0xa0>)
1000b992:	0028      	movs	r0, r5
1000b994:	4c24      	ldr	r4, [pc, #144]	; (1000ba28 <csc_prf_report_ntf_cb+0xa4>)
1000b996:	47a0      	blx	r4
1000b998:	0028      	movs	r0, r5
1000b99a:	47a0      	blx	r4
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
1000b99c:	793d      	ldrb	r5, [r7, #4]

/* Function used for receive data */
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
1000b99e:	2d00      	cmp	r5, #0
1000b9a0:	d037      	beq.n	1000ba12 <csc_prf_report_ntf_cb+0x8e>
		for (ind = 0; ind < recv_len; ind++){
1000b9a2:	b2ab      	uxth	r3, r5
1000b9a4:	4698      	mov	r8, r3
1000b9a6:	2b00      	cmp	r3, #0
1000b9a8:	d02d      	beq.n	1000ba06 <csc_prf_report_ntf_cb+0x82>

/* Callback called for new data from remote device */
static void csc_prf_report_ntf_cb(csc_report_ntf_t *report_info)
{
	DBG_LOG("\r\n");
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
1000b9aa:	683b      	ldr	r3, [r7, #0]
1000b9ac:	9301      	str	r3, [sp, #4]
1000b9ae:	2400      	movs	r4, #0
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
		for (ind = 0; ind < recv_len; ind++){
			if (strncmp(recv_data,"hi",recv_len) == 0 || strncmp(recv_data,"Hi",recv_len) == 0 )
1000b9b0:	4e1e      	ldr	r6, [pc, #120]	; (1000ba2c <csc_prf_report_ntf_cb+0xa8>)
			{
				LED0_OFF();
1000b9b2:	4b1f      	ldr	r3, [pc, #124]	; (1000ba30 <csc_prf_report_ntf_cb+0xac>)
1000b9b4:	469b      	mov	fp, r3
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
		for (ind = 0; ind < recv_len; ind++){
			if (strncmp(recv_data,"hi",recv_len) == 0 || strncmp(recv_data,"Hi",recv_len) == 0 )
1000b9b6:	002a      	movs	r2, r5
1000b9b8:	491e      	ldr	r1, [pc, #120]	; (1000ba34 <csc_prf_report_ntf_cb+0xb0>)
1000b9ba:	9801      	ldr	r0, [sp, #4]
1000b9bc:	47b0      	blx	r6
1000b9be:	2800      	cmp	r0, #0
1000b9c0:	d006      	beq.n	1000b9d0 <csc_prf_report_ntf_cb+0x4c>
1000b9c2:	002a      	movs	r2, r5
1000b9c4:	491c      	ldr	r1, [pc, #112]	; (1000ba38 <csc_prf_report_ntf_cb+0xb4>)
1000b9c6:	9801      	ldr	r0, [sp, #4]
1000b9c8:	4b18      	ldr	r3, [pc, #96]	; (1000ba2c <csc_prf_report_ntf_cb+0xa8>)
1000b9ca:	4798      	blx	r3
1000b9cc:	2800      	cmp	r0, #0
1000b9ce:	d101      	bne.n	1000b9d4 <csc_prf_report_ntf_cb+0x50>
			{
				LED0_OFF();
1000b9d0:	47d8      	blx	fp
1000b9d2:	e014      	b.n	1000b9fe <csc_prf_report_ntf_cb+0x7a>
			}
			
			else if (strncmp(recv_data,"stop",recv_len) == 0 || strncmp(recv_data,"Stop",recv_len) == 0)
1000b9d4:	002a      	movs	r2, r5
1000b9d6:	4919      	ldr	r1, [pc, #100]	; (1000ba3c <csc_prf_report_ntf_cb+0xb8>)
1000b9d8:	9801      	ldr	r0, [sp, #4]
1000b9da:	4b14      	ldr	r3, [pc, #80]	; (1000ba2c <csc_prf_report_ntf_cb+0xa8>)
1000b9dc:	4798      	blx	r3
1000b9de:	2800      	cmp	r0, #0
1000b9e0:	d006      	beq.n	1000b9f0 <csc_prf_report_ntf_cb+0x6c>
1000b9e2:	002a      	movs	r2, r5
1000b9e4:	4916      	ldr	r1, [pc, #88]	; (1000ba40 <csc_prf_report_ntf_cb+0xbc>)
1000b9e6:	9801      	ldr	r0, [sp, #4]
1000b9e8:	4b10      	ldr	r3, [pc, #64]	; (1000ba2c <csc_prf_report_ntf_cb+0xa8>)
1000b9ea:	4798      	blx	r3
1000b9ec:	2800      	cmp	r0, #0
1000b9ee:	d106      	bne.n	1000b9fe <csc_prf_report_ntf_cb+0x7a>
			{
				at_ble_disconnect(ble_dev_info[0].conn_info.handle, AT_BLE_TERMINATED_BY_USER);
1000b9f0:	4b14      	ldr	r3, [pc, #80]	; (1000ba44 <csc_prf_report_ntf_cb+0xc0>)
1000b9f2:	8918      	ldrh	r0, [r3, #8]
1000b9f4:	2113      	movs	r1, #19
1000b9f6:	4b14      	ldr	r3, [pc, #80]	; (1000ba48 <csc_prf_report_ntf_cb+0xc4>)
1000b9f8:	4798      	blx	r3
				recv_data = '\0';
1000b9fa:	2300      	movs	r3, #0
1000b9fc:	9301      	str	r3, [sp, #4]
/* Function used for receive data */
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
		for (ind = 0; ind < recv_len; ind++){
1000b9fe:	3401      	adds	r4, #1
1000ba00:	b2a4      	uxth	r4, r4
1000ba02:	4544      	cmp	r4, r8
1000ba04:	d3d7      	bcc.n	1000b9b6 <csc_prf_report_ntf_cb+0x32>
				at_ble_disconnect(ble_dev_info[0].conn_info.handle, AT_BLE_TERMINATED_BY_USER);
				recv_data = '\0';
			}
			//DBG_LOG_CONT("%c", recv_data[ind]);
		}
		DBG_LOG("\r\n");
1000ba06:	4d07      	ldr	r5, [pc, #28]	; (1000ba24 <csc_prf_report_ntf_cb+0xa0>)
1000ba08:	0028      	movs	r0, r5
1000ba0a:	4c07      	ldr	r4, [pc, #28]	; (1000ba28 <csc_prf_report_ntf_cb+0xa4>)
1000ba0c:	47a0      	blx	r4
1000ba0e:	0028      	movs	r0, r5
1000ba10:	47a0      	blx	r4
/* Callback called for new data from remote device */
static void csc_prf_report_ntf_cb(csc_report_ntf_t *report_info)
{
	DBG_LOG("\r\n");
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
	report_info->recv_buff = '\0';
1000ba12:	2300      	movs	r3, #0
1000ba14:	603b      	str	r3, [r7, #0]
	report_info->recv_buff_len = 0;
1000ba16:	713b      	strb	r3, [r7, #4]
}
1000ba18:	b003      	add	sp, #12
1000ba1a:	bc0c      	pop	{r2, r3}
1000ba1c:	4690      	mov	r8, r2
1000ba1e:	469b      	mov	fp, r3
1000ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba22:	46c0      	nop			; (mov r8, r8)
1000ba24:	10014674 	.word	0x10014674
1000ba28:	10013251 	.word	0x10013251
1000ba2c:	10013487 	.word	0x10013487
1000ba30:	1000b975 	.word	0x1000b975
1000ba34:	1001503c 	.word	0x1001503c
1000ba38:	10015040 	.word	0x10015040
1000ba3c:	10015044 	.word	0x10015044
1000ba40:	1001504c 	.word	0x1001504c
1000ba44:	10016ecc 	.word	0x10016ecc
1000ba48:	1000ccb9 	.word	0x1000ccb9

1000ba4c <floatToStr>:
	gpio_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
}

#define precision 1
void floatToStr(float f, char str[30])
{
1000ba4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba4e:	465f      	mov	r7, fp
1000ba50:	4656      	mov	r6, sl
1000ba52:	464d      	mov	r5, r9
1000ba54:	4644      	mov	r4, r8
1000ba56:	b4f0      	push	{r4, r5, r6, r7}
1000ba58:	b083      	sub	sp, #12
1000ba5a:	1c04      	adds	r4, r0, #0
1000ba5c:	468b      	mov	fp, r1
	
	int a,b,c,k,l=0,m,i=0,j;
	
	// check for negetive float
	if(f<0.0)
1000ba5e:	2100      	movs	r1, #0
1000ba60:	4b30      	ldr	r3, [pc, #192]	; (1000bb24 <floatToStr+0xd8>)
1000ba62:	4798      	blx	r3
1000ba64:	2800      	cmp	r0, #0
1000ba66:	d009      	beq.n	1000ba7c <floatToStr+0x30>
	{
		
		str[i++]='-';
1000ba68:	232d      	movs	r3, #45	; 0x2d
1000ba6a:	465a      	mov	r2, fp
1000ba6c:	7013      	strb	r3, [r2, #0]
		f*=-1;
1000ba6e:	2380      	movs	r3, #128	; 0x80
1000ba70:	061b      	lsls	r3, r3, #24
1000ba72:	469c      	mov	ip, r3
1000ba74:	4464      	add	r4, ip
	
	// check for negetive float
	if(f<0.0)
	{
		
		str[i++]='-';
1000ba76:	2301      	movs	r3, #1
1000ba78:	469a      	mov	sl, r3
1000ba7a:	e001      	b.n	1000ba80 <floatToStr+0x34>

#define precision 1
void floatToStr(float f, char str[30])
{
	
	int a,b,c,k,l=0,m,i=0,j;
1000ba7c:	2300      	movs	r3, #0
1000ba7e:	469a      	mov	sl, r3
		
		str[i++]='-';
		f*=-1;
	}
	
	a=f;	// extracting whole number
1000ba80:	1c20      	adds	r0, r4, #0
1000ba82:	4b29      	ldr	r3, [pc, #164]	; (1000bb28 <floatToStr+0xdc>)
1000ba84:	4798      	blx	r3
1000ba86:	0005      	movs	r5, r0
	f-=a;	// extracting decimal part
1000ba88:	4b28      	ldr	r3, [pc, #160]	; (1000bb2c <floatToStr+0xe0>)
1000ba8a:	4798      	blx	r3
1000ba8c:	1c01      	adds	r1, r0, #0
1000ba8e:	1c20      	adds	r0, r4, #0
1000ba90:	4b27      	ldr	r3, [pc, #156]	; (1000bb30 <floatToStr+0xe4>)
1000ba92:	4798      	blx	r3
1000ba94:	9001      	str	r0, [sp, #4]
	// number of digits in whole number
	while(k>-1)
	{
		l = pow(10,k);
		m = a/l;
		if(m>0)
1000ba96:	2d09      	cmp	r5, #9
1000ba98:	dc30      	bgt.n	1000bafc <floatToStr+0xb0>
1000ba9a:	2d00      	cmp	r5, #0
1000ba9c:	dd1d      	ble.n	1000bada <floatToStr+0x8e>
1000ba9e:	e030      	b.n	1000bb02 <floatToStr+0xb6>
	obtained as quotient by dividing number by 10^k where k = (number of digit -1)
	*/
	
	for(l=k+1;l>0;l--)
	{
		b = pow(10,l-1);
1000baa0:	3c01      	subs	r4, #1
1000baa2:	0020      	movs	r0, r4
1000baa4:	47c8      	blx	r9
1000baa6:	0002      	movs	r2, r0
1000baa8:	000b      	movs	r3, r1
1000baaa:	2000      	movs	r0, #0
1000baac:	4921      	ldr	r1, [pc, #132]	; (1000bb34 <floatToStr+0xe8>)
1000baae:	47b8      	blx	r7
1000bab0:	4b21      	ldr	r3, [pc, #132]	; (1000bb38 <floatToStr+0xec>)
1000bab2:	4798      	blx	r3
		c = a/b;
		str[i++]=c+48;
1000bab4:	9000      	str	r0, [sp, #0]
1000bab6:	0001      	movs	r1, r0
1000bab8:	0028      	movs	r0, r5
1000baba:	4b20      	ldr	r3, [pc, #128]	; (1000bb3c <floatToStr+0xf0>)
1000babc:	4798      	blx	r3
1000babe:	3030      	adds	r0, #48	; 0x30
1000bac0:	7030      	strb	r0, [r6, #0]
		a%=b;
1000bac2:	9900      	ldr	r1, [sp, #0]
1000bac4:	0028      	movs	r0, r5
1000bac6:	4b1e      	ldr	r3, [pc, #120]	; (1000bb40 <floatToStr+0xf4>)
1000bac8:	4798      	blx	r3
1000baca:	000d      	movs	r5, r1
1000bacc:	3601      	adds	r6, #1
	/*
	extracting most significant digit i.e. right most digit , and concatenating to string
	obtained as quotient by dividing number by 10^k where k = (number of digit -1)
	*/
	
	for(l=k+1;l>0;l--)
1000bace:	2c00      	cmp	r4, #0
1000bad0:	d1e6      	bne.n	1000baa0 <floatToStr+0x54>
1000bad2:	4653      	mov	r3, sl
1000bad4:	3301      	adds	r3, #1
1000bad6:	4443      	add	r3, r8
1000bad8:	469a      	mov	sl, r3
		b = pow(10,l-1);
		c = a/b;
		str[i++]=c+48;
		a%=b;
	}
	str[i++] = '.';
1000bada:	232e      	movs	r3, #46	; 0x2e
1000badc:	465a      	mov	r2, fp
1000bade:	4651      	mov	r1, sl
1000bae0:	5453      	strb	r3, [r2, r1]

	for(l=0;l<precision;l++)
	{
		f*=10.0;
		b = f;
		str[i++]=b+48;
1000bae2:	465c      	mov	r4, fp
1000bae4:	4454      	add	r4, sl
1000bae6:	4917      	ldr	r1, [pc, #92]	; (1000bb44 <floatToStr+0xf8>)
1000bae8:	9801      	ldr	r0, [sp, #4]
1000baea:	4b17      	ldr	r3, [pc, #92]	; (1000bb48 <floatToStr+0xfc>)
1000baec:	4798      	blx	r3
1000baee:	4b0e      	ldr	r3, [pc, #56]	; (1000bb28 <floatToStr+0xdc>)
1000baf0:	4798      	blx	r3
1000baf2:	3030      	adds	r0, #48	; 0x30
1000baf4:	7060      	strb	r0, [r4, #1]
		f-=b;
	}

	str[i]='\0';
1000baf6:	2300      	movs	r3, #0
1000baf8:	70a3      	strb	r3, [r4, #2]
}
1000bafa:	e00c      	b.n	1000bb16 <floatToStr+0xca>
		f*=-1;
	}
	
	a=f;	// extracting whole number
	f-=a;	// extracting decimal part
	k = precision;
1000bafc:	2301      	movs	r3, #1
1000bafe:	4698      	mov	r8, r3
1000bb00:	e001      	b.n	1000bb06 <floatToStr+0xba>
		m = a/l;
		if(m>0)
		{
			break;
		}
	k--;
1000bb02:	2300      	movs	r3, #0
1000bb04:	4698      	mov	r8, r3
	/*
	extracting most significant digit i.e. right most digit , and concatenating to string
	obtained as quotient by dividing number by 10^k where k = (number of digit -1)
	*/
	
	for(l=k+1;l>0;l--)
1000bb06:	4643      	mov	r3, r8
1000bb08:	1c5c      	adds	r4, r3, #1
1000bb0a:	465e      	mov	r6, fp
1000bb0c:	4456      	add	r6, sl
	{
		b = pow(10,l-1);
1000bb0e:	4b0f      	ldr	r3, [pc, #60]	; (1000bb4c <floatToStr+0x100>)
1000bb10:	4699      	mov	r9, r3
1000bb12:	4f0f      	ldr	r7, [pc, #60]	; (1000bb50 <floatToStr+0x104>)
1000bb14:	e7c4      	b.n	1000baa0 <floatToStr+0x54>
		str[i++]=b+48;
		f-=b;
	}

	str[i]='\0';
}
1000bb16:	b003      	add	sp, #12
1000bb18:	bc3c      	pop	{r2, r3, r4, r5}
1000bb1a:	4690      	mov	r8, r2
1000bb1c:	4699      	mov	r9, r3
1000bb1e:	46a2      	mov	sl, r4
1000bb20:	46ab      	mov	fp, r5
1000bb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb24:	10010b3d 	.word	0x10010b3d
1000bb28:	1001125d 	.word	0x1001125d
1000bb2c:	100112a1 	.word	0x100112a1
1000bb30:	10010f51 	.word	0x10010f51
1000bb34:	40240000 	.word	0x40240000
1000bb38:	10012dad 	.word	0x10012dad
1000bb3c:	100108c5 	.word	0x100108c5
1000bb40:	10010a91 	.word	0x10010a91
1000bb44:	41200000 	.word	0x41200000
1000bb48:	10010d29 	.word	0x10010d29
1000bb4c:	10012e19 	.word	0x10012e19
1000bb50:	1000f569 	.word	0x1000f569

1000bb54 <transfer_done_rx>:

static void transfer_done_rx(struct dma_resource* const resource )
{
1000bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb56:	464f      	mov	r7, r9
1000bb58:	4646      	mov	r6, r8
1000bb5a:	b4c0      	push	{r6, r7}
1000bb5c:	b0ed      	sub	sp, #436	; 0x1b4
	dma_start_transfer_job(&uart_dma_resource_rx);
1000bb5e:	4850      	ldr	r0, [pc, #320]	; (1000bca0 <transfer_done_rx+0x14c>)
1000bb60:	4b50      	ldr	r3, [pc, #320]	; (1000bca4 <transfer_done_rx+0x150>)
1000bb62:	4798      	blx	r3
	if (string [LED_STATUS_BIT]  == 0x00)
1000bb64:	4b50      	ldr	r3, [pc, #320]	; (1000bca8 <transfer_done_rx+0x154>)
1000bb66:	781b      	ldrb	r3, [r3, #0]
1000bb68:	b25b      	sxtb	r3, r3
1000bb6a:	2b00      	cmp	r3, #0
1000bb6c:	d102      	bne.n	1000bb74 <transfer_done_rx+0x20>
	{
		LED0_OFF();
1000bb6e:	4b4f      	ldr	r3, [pc, #316]	; (1000bcac <transfer_done_rx+0x158>)
1000bb70:	4798      	blx	r3
1000bb72:	e001      	b.n	1000bb78 <transfer_done_rx+0x24>
	}
	
	else
	{
		LED0_ON();
1000bb74:	4b4e      	ldr	r3, [pc, #312]	; (1000bcb0 <transfer_done_rx+0x15c>)
1000bb76:	4798      	blx	r3
	}
	
	
	if (string[INT_BIT] > 0)
1000bb78:	4b4b      	ldr	r3, [pc, #300]	; (1000bca8 <transfer_done_rx+0x154>)
1000bb7a:	2401      	movs	r4, #1
1000bb7c:	571c      	ldrsb	r4, [r3, r4]
1000bb7e:	2c00      	cmp	r4, #0
1000bb80:	dd16      	ble.n	1000bbb0 <transfer_done_rx+0x5c>
	TempRecvFrmGecko = string[INT_BIT] + string[FLOAT_BIT] / 10.0;
1000bb82:	2002      	movs	r0, #2
1000bb84:	5618      	ldrsb	r0, [r3, r0]
1000bb86:	4d4b      	ldr	r5, [pc, #300]	; (1000bcb4 <transfer_done_rx+0x160>)
1000bb88:	47a8      	blx	r5
1000bb8a:	2200      	movs	r2, #0
1000bb8c:	4b4a      	ldr	r3, [pc, #296]	; (1000bcb8 <transfer_done_rx+0x164>)
1000bb8e:	4e4b      	ldr	r6, [pc, #300]	; (1000bcbc <transfer_done_rx+0x168>)
1000bb90:	47b0      	blx	r6
1000bb92:	0006      	movs	r6, r0
1000bb94:	000f      	movs	r7, r1
1000bb96:	0020      	movs	r0, r4
1000bb98:	47a8      	blx	r5
1000bb9a:	0002      	movs	r2, r0
1000bb9c:	000b      	movs	r3, r1
1000bb9e:	0030      	movs	r0, r6
1000bba0:	0039      	movs	r1, r7
1000bba2:	4c47      	ldr	r4, [pc, #284]	; (1000bcc0 <transfer_done_rx+0x16c>)
1000bba4:	47a0      	blx	r4
1000bba6:	4b47      	ldr	r3, [pc, #284]	; (1000bcc4 <transfer_done_rx+0x170>)
1000bba8:	4798      	blx	r3
1000bbaa:	4b47      	ldr	r3, [pc, #284]	; (1000bcc8 <transfer_done_rx+0x174>)
1000bbac:	6018      	str	r0, [r3, #0]
1000bbae:	e016      	b.n	1000bbde <transfer_done_rx+0x8a>
	else
	TempRecvFrmGecko = string[INT_BIT] - string[FLOAT_BIT] / 10.0;
1000bbb0:	4d40      	ldr	r5, [pc, #256]	; (1000bcb4 <transfer_done_rx+0x160>)
1000bbb2:	0020      	movs	r0, r4
1000bbb4:	47a8      	blx	r5
1000bbb6:	0006      	movs	r6, r0
1000bbb8:	000f      	movs	r7, r1
1000bbba:	4b3b      	ldr	r3, [pc, #236]	; (1000bca8 <transfer_done_rx+0x154>)
1000bbbc:	2002      	movs	r0, #2
1000bbbe:	5618      	ldrsb	r0, [r3, r0]
1000bbc0:	47a8      	blx	r5
1000bbc2:	2200      	movs	r2, #0
1000bbc4:	4b3c      	ldr	r3, [pc, #240]	; (1000bcb8 <transfer_done_rx+0x164>)
1000bbc6:	4c3d      	ldr	r4, [pc, #244]	; (1000bcbc <transfer_done_rx+0x168>)
1000bbc8:	47a0      	blx	r4
1000bbca:	0002      	movs	r2, r0
1000bbcc:	000b      	movs	r3, r1
1000bbce:	0030      	movs	r0, r6
1000bbd0:	0039      	movs	r1, r7
1000bbd2:	4c3e      	ldr	r4, [pc, #248]	; (1000bccc <transfer_done_rx+0x178>)
1000bbd4:	47a0      	blx	r4
1000bbd6:	4b3b      	ldr	r3, [pc, #236]	; (1000bcc4 <transfer_done_rx+0x170>)
1000bbd8:	4798      	blx	r3
1000bbda:	4b3b      	ldr	r3, [pc, #236]	; (1000bcc8 <transfer_done_rx+0x174>)
1000bbdc:	6018      	str	r0, [r3, #0]
	
	char strToSend[200];
	char levelSensorStr[100];
	char MoisSensorStr[100];
	//sprintf(strToSend,"%d",TempRecvFrmGecko);
	strncat(strToSend,"Level Sensor: ",strlen("Level Sensor: "));
1000bbde:	a83a      	add	r0, sp, #232	; 0xe8
1000bbe0:	4d3b      	ldr	r5, [pc, #236]	; (1000bcd0 <transfer_done_rx+0x17c>)
1000bbe2:	47a8      	blx	r5
1000bbe4:	ab3a      	add	r3, sp, #232	; 0xe8
1000bbe6:	469c      	mov	ip, r3
1000bbe8:	4460      	add	r0, ip
1000bbea:	220f      	movs	r2, #15
1000bbec:	4939      	ldr	r1, [pc, #228]	; (1000bcd4 <transfer_done_rx+0x180>)
1000bbee:	4f3a      	ldr	r7, [pc, #232]	; (1000bcd8 <transfer_done_rx+0x184>)
1000bbf0:	47b8      	blx	r7
	//conver
	itoa(string[0],levelSensorStr, 10);
1000bbf2:	4b2d      	ldr	r3, [pc, #180]	; (1000bca8 <transfer_done_rx+0x154>)
1000bbf4:	4699      	mov	r9, r3
1000bbf6:	2000      	movs	r0, #0
1000bbf8:	5618      	ldrsb	r0, [r3, r0]
1000bbfa:	220a      	movs	r2, #10
1000bbfc:	a921      	add	r1, sp, #132	; 0x84
1000bbfe:	4b37      	ldr	r3, [pc, #220]	; (1000bcdc <transfer_done_rx+0x188>)
1000bc00:	4698      	mov	r8, r3
1000bc02:	4798      	blx	r3
	
	strncat(strToSend,levelSensorStr,strlen(levelSensorStr));
1000bc04:	a821      	add	r0, sp, #132	; 0x84
1000bc06:	47a8      	blx	r5
1000bc08:	0002      	movs	r2, r0
1000bc0a:	a921      	add	r1, sp, #132	; 0x84
1000bc0c:	a83a      	add	r0, sp, #232	; 0xe8
1000bc0e:	4c34      	ldr	r4, [pc, #208]	; (1000bce0 <transfer_done_rx+0x18c>)
1000bc10:	47a0      	blx	r4
	strncat(strToSend,"\n","\n");
1000bc12:	4e34      	ldr	r6, [pc, #208]	; (1000bce4 <transfer_done_rx+0x190>)
1000bc14:	0032      	movs	r2, r6
1000bc16:	0031      	movs	r1, r6
1000bc18:	a83a      	add	r0, sp, #232	; 0xe8
1000bc1a:	47a0      	blx	r4
	strncat(strToSend,"Temperature: ",strlen("Temperature: "));
1000bc1c:	a83a      	add	r0, sp, #232	; 0xe8
1000bc1e:	47a8      	blx	r5
1000bc20:	ab3a      	add	r3, sp, #232	; 0xe8
1000bc22:	469c      	mov	ip, r3
1000bc24:	4460      	add	r0, ip
1000bc26:	220e      	movs	r2, #14
1000bc28:	492f      	ldr	r1, [pc, #188]	; (1000bce8 <transfer_done_rx+0x194>)
1000bc2a:	47b8      	blx	r7
	
	char str[30];
	floatToStr(TempRecvFrmGecko,str);
1000bc2c:	4b26      	ldr	r3, [pc, #152]	; (1000bcc8 <transfer_done_rx+0x174>)
1000bc2e:	6818      	ldr	r0, [r3, #0]
1000bc30:	4669      	mov	r1, sp
1000bc32:	4b2e      	ldr	r3, [pc, #184]	; (1000bcec <transfer_done_rx+0x198>)
1000bc34:	4798      	blx	r3
	strncat(strToSend,str,4);
1000bc36:	2204      	movs	r2, #4
1000bc38:	4669      	mov	r1, sp
1000bc3a:	a83a      	add	r0, sp, #232	; 0xe8
1000bc3c:	47a0      	blx	r4
	strncat(strToSend,"\n","\n");
1000bc3e:	0032      	movs	r2, r6
1000bc40:	0031      	movs	r1, r6
1000bc42:	a83a      	add	r0, sp, #232	; 0xe8
1000bc44:	47a0      	blx	r4
	strncat(strToSend,"Moisture: ",strlen("Moisture: "));
1000bc46:	a83a      	add	r0, sp, #232	; 0xe8
1000bc48:	47a8      	blx	r5
1000bc4a:	ab3a      	add	r3, sp, #232	; 0xe8
1000bc4c:	469c      	mov	ip, r3
1000bc4e:	4460      	add	r0, ip
1000bc50:	220b      	movs	r2, #11
1000bc52:	4927      	ldr	r1, [pc, #156]	; (1000bcf0 <transfer_done_rx+0x19c>)
1000bc54:	47b8      	blx	r7
	itoa(string[3],MoisSensorStr, 10);
1000bc56:	464b      	mov	r3, r9
1000bc58:	2003      	movs	r0, #3
1000bc5a:	5618      	ldrsb	r0, [r3, r0]
1000bc5c:	220a      	movs	r2, #10
1000bc5e:	a908      	add	r1, sp, #32
1000bc60:	47c0      	blx	r8
	strncat(strToSend,MoisSensorStr,strlen(MoisSensorStr));
1000bc62:	a808      	add	r0, sp, #32
1000bc64:	47a8      	blx	r5
1000bc66:	0002      	movs	r2, r0
1000bc68:	a908      	add	r1, sp, #32
1000bc6a:	a83a      	add	r0, sp, #232	; 0xe8
1000bc6c:	47a0      	blx	r4
	//strncat(strToSend,"\n","\n");
	
	int i =0;
	for(i=0;i<strlen(strToSend);i++)
1000bc6e:	2400      	movs	r4, #0
1000bc70:	ad3a      	add	r5, sp, #232	; 0xe8
1000bc72:	4e17      	ldr	r6, [pc, #92]	; (1000bcd0 <transfer_done_rx+0x17c>)
	{
		uart_rx_callback(strToSend[i]);	
1000bc74:	4f1f      	ldr	r7, [pc, #124]	; (1000bcf4 <transfer_done_rx+0x1a0>)
	itoa(string[3],MoisSensorStr, 10);
	strncat(strToSend,MoisSensorStr,strlen(MoisSensorStr));
	//strncat(strToSend,"\n","\n");
	
	int i =0;
	for(i=0;i<strlen(strToSend);i++)
1000bc76:	e002      	b.n	1000bc7e <transfer_done_rx+0x12a>
	{
		uart_rx_callback(strToSend[i]);	
1000bc78:	5d28      	ldrb	r0, [r5, r4]
1000bc7a:	47b8      	blx	r7
	itoa(string[3],MoisSensorStr, 10);
	strncat(strToSend,MoisSensorStr,strlen(MoisSensorStr));
	//strncat(strToSend,"\n","\n");
	
	int i =0;
	for(i=0;i<strlen(strToSend);i++)
1000bc7c:	3401      	adds	r4, #1
1000bc7e:	0028      	movs	r0, r5
1000bc80:	47b0      	blx	r6
1000bc82:	42a0      	cmp	r0, r4
1000bc84:	d8f8      	bhi.n	1000bc78 <transfer_done_rx+0x124>
	{
		uart_rx_callback(strToSend[i]);	
	}

 	uart_rx_callback('\r');
1000bc86:	200d      	movs	r0, #13
1000bc88:	4b1a      	ldr	r3, [pc, #104]	; (1000bcf4 <transfer_done_rx+0x1a0>)
1000bc8a:	4798      	blx	r3
	bzero(strToSend,sizeof(strToSend));
1000bc8c:	22c8      	movs	r2, #200	; 0xc8
1000bc8e:	2100      	movs	r1, #0
1000bc90:	a83a      	add	r0, sp, #232	; 0xe8
1000bc92:	4b19      	ldr	r3, [pc, #100]	; (1000bcf8 <transfer_done_rx+0x1a4>)
1000bc94:	4798      	blx	r3
	//uart_rx_callback(TempRecvFrmGecko);
	
}
1000bc96:	b06d      	add	sp, #436	; 0x1b4
1000bc98:	bc0c      	pop	{r2, r3}
1000bc9a:	4690      	mov	r8, r2
1000bc9c:	4699      	mov	r9, r3
1000bc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bca0:	10017b68 	.word	0x10017b68
1000bca4:	100082d1 	.word	0x100082d1
1000bca8:	10016d60 	.word	0x10016d60
1000bcac:	1000b975 	.word	0x1000b975
1000bcb0:	1000b965 	.word	0x1000b965
1000bcb4:	10012e19 	.word	0x10012e19
1000bcb8:	40240000 	.word	0x40240000
1000bcbc:	10011989 	.word	0x10011989
1000bcc0:	10011331 	.word	0x10011331
1000bcc4:	10012f0d 	.word	0x10012f0d
1000bcc8:	10016d64 	.word	0x10016d64
1000bccc:	100126c5 	.word	0x100126c5
1000bcd0:	10013451 	.word	0x10013451
1000bcd4:	10015054 	.word	0x10015054
1000bcd8:	1001310d 	.word	0x1001310d
1000bcdc:	100130e7 	.word	0x100130e7
1000bce0:	1001345f 	.word	0x1001345f
1000bce4:	10015064 	.word	0x10015064
1000bce8:	10015068 	.word	0x10015068
1000bcec:	1000ba4d 	.word	0x1000ba4d
1000bcf0:	10015078 	.word	0x10015078
1000bcf4:	1000b89d 	.word	0x1000b89d
1000bcf8:	1001311f 	.word	0x1001311f

1000bcfc <main>:
}


bool app_exec = true;
int main(void )
{
1000bcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bcfe:	465f      	mov	r7, fp
1000bd00:	4656      	mov	r6, sl
1000bd02:	464d      	mov	r5, r9
1000bd04:	4644      	mov	r4, r8
1000bd06:	b4f0      	push	{r4, r5, r6, r7}
1000bd08:	b08b      	sub	sp, #44	; 0x2c
	platform_driver_init();
1000bd0a:	4b68      	ldr	r3, [pc, #416]	; (1000beac <main+0x1b0>)
1000bd0c:	4798      	blx	r3
	acquire_sleep_lock();
1000bd0e:	4b68      	ldr	r3, [pc, #416]	; (1000beb0 <main+0x1b4>)
1000bd10:	4798      	blx	r3

	/* Initialize serial console  */
	serial_console_init();
1000bd12:	4b68      	ldr	r3, [pc, #416]	; (1000beb4 <main+0x1b8>)
1000bd14:	4798      	blx	r3
	
	
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
1000bd16:	4a68      	ldr	r2, [pc, #416]	; (1000beb8 <main+0x1bc>)
1000bd18:	6813      	ldr	r3, [r2, #0]
1000bd1a:	2101      	movs	r1, #1
1000bd1c:	438b      	bics	r3, r1
1000bd1e:	6013      	str	r3, [r2, #0]

		//! [setup_init]
		//! [init_system]
		system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000bd20:	2100      	movs	r1, #0
1000bd22:	2000      	movs	r0, #0
1000bd24:	4b65      	ldr	r3, [pc, #404]	; (1000bebc <main+0x1c0>)
1000bd26:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart);
1000bd28:	4668      	mov	r0, sp
1000bd2a:	4b65      	ldr	r3, [pc, #404]	; (1000bec0 <main+0x1c4>)
1000bd2c:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	//config_uart.baud_rate = 115200;
	config_uart.baud_rate = 9600;
1000bd2e:	2396      	movs	r3, #150	; 0x96
1000bd30:	019b      	lsls	r3, r3, #6
1000bd32:	9300      	str	r3, [sp, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000bd34:	2302      	movs	r3, #2
1000bd36:	9302      	str	r3, [sp, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000bd38:	2203      	movs	r2, #3
1000bd3a:	9203      	str	r2, [sp, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000bd3c:	3201      	adds	r2, #1
1000bd3e:	9204      	str	r2, [sp, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000bd40:	3201      	adds	r2, #1
1000bd42:	9205      	str	r2, [sp, #20]
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000bd44:	9306      	str	r3, [sp, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000bd46:	9307      	str	r3, [sp, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000bd48:	9308      	str	r3, [sp, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000bd4a:	9309      	str	r3, [sp, #36]	; 0x24
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance,
1000bd4c:	4d5d      	ldr	r5, [pc, #372]	; (1000bec4 <main+0x1c8>)
1000bd4e:	4c5e      	ldr	r4, [pc, #376]	; (1000bec8 <main+0x1cc>)
1000bd50:	466a      	mov	r2, sp
1000bd52:	495e      	ldr	r1, [pc, #376]	; (1000becc <main+0x1d0>)
1000bd54:	0028      	movs	r0, r5
1000bd56:	47a0      	blx	r4
1000bd58:	2800      	cmp	r0, #0
1000bd5a:	d1f9      	bne.n	1000bd50 <main+0x54>
	EDBG_CDC_MODULE, &config_uart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance);
1000bd5c:	4c59      	ldr	r4, [pc, #356]	; (1000bec4 <main+0x1c8>)
1000bd5e:	0020      	movs	r0, r4
1000bd60:	4b5b      	ldr	r3, [pc, #364]	; (1000bed0 <main+0x1d4>)
1000bd62:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance);
1000bd64:	0020      	movs	r0, r4
1000bd66:	4b5b      	ldr	r3, [pc, #364]	; (1000bed4 <main+0x1d8>)
1000bd68:	4798      	blx	r3
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000bd6a:	4668      	mov	r0, sp
1000bd6c:	4e5a      	ldr	r6, [pc, #360]	; (1000bed8 <main+0x1dc>)
1000bd6e:	47b0      	blx	r6
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART0TX_DMA_PERIPHERAL;
1000bd70:	2302      	movs	r3, #2
1000bd72:	4698      	mov	r8, r3
1000bd74:	469a      	mov	sl, r3
1000bd76:	466b      	mov	r3, sp
1000bd78:	4642      	mov	r2, r8
1000bd7a:	731a      	strb	r2, [r3, #12]
	config.des.enable_inc_addr = false;
1000bd7c:	2500      	movs	r5, #0
1000bd7e:	72dd      	strb	r5, [r3, #11]
	config.src.periph = UART0TX_DMA_PERIPHERAL;
1000bd80:	70da      	strb	r2, [r3, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000bd82:	4f56      	ldr	r7, [pc, #344]	; (1000bedc <main+0x1e0>)
1000bd84:	4669      	mov	r1, sp
1000bd86:	0038      	movs	r0, r7
1000bd88:	4b55      	ldr	r3, [pc, #340]	; (1000bee0 <main+0x1e4>)
1000bd8a:	469b      	mov	fp, r3
1000bd8c:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000bd8e:	4668      	mov	r0, sp
1000bd90:	47b0      	blx	r6
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART0RX_DMA_PERIPHERAL;
1000bd92:	2301      	movs	r3, #1
1000bd94:	4699      	mov	r9, r3
1000bd96:	2601      	movs	r6, #1
1000bd98:	466b      	mov	r3, sp
1000bd9a:	464a      	mov	r2, r9
1000bd9c:	70da      	strb	r2, [r3, #3]
	config.src.enable_inc_addr = false;
1000bd9e:	709d      	strb	r5, [r3, #2]
	config.src.periph_delay = 1;
1000bda0:	711a      	strb	r2, [r3, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000bda2:	4d50      	ldr	r5, [pc, #320]	; (1000bee4 <main+0x1e8>)
1000bda4:	4669      	mov	r1, sp
1000bda6:	0028      	movs	r0, r5
1000bda8:	47d8      	blx	fp
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bdaa:	494f      	ldr	r1, [pc, #316]	; (1000bee8 <main+0x1ec>)
1000bdac:	7b0b      	ldrb	r3, [r1, #12]
1000bdae:	4333      	orrs	r3, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bdb0:	4652      	mov	r2, sl
1000bdb2:	4313      	orrs	r3, r2
1000bdb4:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bdb6:	2303      	movs	r3, #3
1000bdb8:	469c      	mov	ip, r3
1000bdba:	68cb      	ldr	r3, [r1, #12]
1000bdbc:	4662      	mov	r2, ip
1000bdbe:	4013      	ands	r3, r2
1000bdc0:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bdc2:	2304      	movs	r3, #4
1000bdc4:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string;
1000bdc6:	4b49      	ldr	r3, [pc, #292]	; (1000beec <main+0x1f0>)
1000bdc8:	600b      	str	r3, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance.hw->TRANSMIT_DATA.reg);
1000bdca:	6823      	ldr	r3, [r4, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
1000bdcc:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bdce:	4c48      	ldr	r4, [pc, #288]	; (1000bef0 <main+0x1f4>)
1000bdd0:	7b22      	ldrb	r2, [r4, #12]
1000bdd2:	4332      	orrs	r2, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bdd4:	4650      	mov	r0, sl
1000bdd6:	4302      	orrs	r2, r0
1000bdd8:	7322      	strb	r2, [r4, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bdda:	4662      	mov	r2, ip
1000bddc:	68e0      	ldr	r0, [r4, #12]
1000bdde:	4002      	ands	r2, r0
1000bde0:	60e2      	str	r2, [r4, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bde2:	2204      	movs	r2, #4
1000bde4:	60a2      	str	r2, [r4, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
1000bde6:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000bde8:	6023      	str	r3, [r4, #0]
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
1000bdea:	4b40      	ldr	r3, [pc, #256]	; (1000beec <main+0x1f0>)
1000bdec:	6063      	str	r3, [r4, #4]
		setup_transfer_descriptor_tx(&example_descriptor_tx);
		setup_transfer_descriptor_rx(&example_descriptor_rx);
		//! [setup_transfer_descriptor]

		//! [add_descriptor_to_resource]
		dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000bdee:	0038      	movs	r0, r7
1000bdf0:	4b40      	ldr	r3, [pc, #256]	; (1000bef4 <main+0x1f8>)
1000bdf2:	469a      	mov	sl, r3
1000bdf4:	4798      	blx	r3
		dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000bdf6:	0021      	movs	r1, r4
1000bdf8:	0028      	movs	r0, r5
1000bdfa:	47d0      	blx	sl
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000bdfc:	4b3e      	ldr	r3, [pc, #248]	; (1000bef8 <main+0x1fc>)
1000bdfe:	607b      	str	r3, [r7, #4]
1000be00:	4b3e      	ldr	r3, [pc, #248]	; (1000befc <main+0x200>)
1000be02:	606b      	str	r3, [r5, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000be04:	2324      	movs	r3, #36	; 0x24
1000be06:	5cfa      	ldrb	r2, [r7, r3]
1000be08:	4332      	orrs	r2, r6
1000be0a:	54fa      	strb	r2, [r7, r3]
1000be0c:	5cea      	ldrb	r2, [r5, r3]
1000be0e:	4316      	orrs	r6, r2
1000be10:	54ee      	strb	r6, [r5, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000be12:	2280      	movs	r2, #128	; 0x80
1000be14:	0212      	lsls	r2, r2, #8
1000be16:	4b3a      	ldr	r3, [pc, #232]	; (1000bf00 <main+0x204>)
1000be18:	601a      	str	r2, [r3, #0]
		//! [configure_callback]
		//! [setup_init]

		//! [main]
		//! [main_1]
		dma_start_transfer_job(&uart_dma_resource_rx);
1000be1a:	0028      	movs	r0, r5
1000be1c:	4b39      	ldr	r3, [pc, #228]	; (1000bf04 <main+0x208>)
1000be1e:	4798      	blx	r3
//! [setup]

static void configure_gpio()
{
	struct gpio_config configure_gpio_for_UART;
	gpio_get_config_defaults(&configure_gpio_for_UART);
1000be20:	4668      	mov	r0, sp
1000be22:	4b39      	ldr	r3, [pc, #228]	; (1000bf08 <main+0x20c>)
1000be24:	4798      	blx	r3
	
	//configure_gpio_for_UART.powersave = true;  // maybe this will be of use
	configure_gpio_for_UART.direction = GPIO_PIN_DIR_OUTPUT;
1000be26:	466b      	mov	r3, sp
1000be28:	464a      	mov	r2, r9
1000be2a:	701a      	strb	r2, [r3, #0]
	configure_gpio_for_UART.input_pull = GPIO_PIN_PULL_DOWN;
1000be2c:	4642      	mov	r2, r8
1000be2e:	705a      	strb	r2, [r3, #1]
	
	gpio_pin_set_config(LED0_PIN, &configure_gpio_for_UART);
1000be30:	4669      	mov	r1, sp
1000be32:	2016      	movs	r0, #22
1000be34:	4b35      	ldr	r3, [pc, #212]	; (1000bf0c <main+0x210>)
1000be36:	4798      	blx	r3
	gpio_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
1000be38:	2101      	movs	r1, #1
1000be3a:	2016      	movs	r0, #22
1000be3c:	4b34      	ldr	r3, [pc, #208]	; (1000bf10 <main+0x214>)
1000be3e:	4798      	blx	r3
		//! [main_1]
		dma_start_transfer_job(&uart_dma_resource_rx);
		//! [main_1]
		configure_gpio();
	
	DBG_LOG("Initializing Custom Serial Chat Application");
1000be40:	4834      	ldr	r0, [pc, #208]	; (1000bf14 <main+0x218>)
1000be42:	4b35      	ldr	r3, [pc, #212]	; (1000bf18 <main+0x21c>)
1000be44:	4798      	blx	r3
1000be46:	4835      	ldr	r0, [pc, #212]	; (1000bf1c <main+0x220>)
1000be48:	4b35      	ldr	r3, [pc, #212]	; (1000bf20 <main+0x224>)
1000be4a:	4798      	blx	r3
	
	/* Initialize the buffer address and buffer length based on user input */
	csc_prf_buf_init(&send_data[0], APP_TX_BUF_SIZE);
1000be4c:	2196      	movs	r1, #150	; 0x96
1000be4e:	4835      	ldr	r0, [pc, #212]	; (1000bf24 <main+0x228>)
1000be50:	4b35      	ldr	r3, [pc, #212]	; (1000bf28 <main+0x22c>)
1000be52:	4798      	blx	r3
	
	/* initialize the ble chip  and Set the device mac address */
	ble_device_init(NULL);
1000be54:	2000      	movs	r0, #0
1000be56:	4b35      	ldr	r3, [pc, #212]	; (1000bf2c <main+0x230>)
1000be58:	4798      	blx	r3
	
	/* Initializing the profile */
	csc_prf_init(NULL);
1000be5a:	2000      	movs	r0, #0
1000be5c:	4b34      	ldr	r3, [pc, #208]	; (1000bf30 <main+0x234>)
1000be5e:	4798      	blx	r3
	
	/* Started advertisement */
	csc_prf_dev_adv();
1000be60:	4b34      	ldr	r3, [pc, #208]	; (1000bf34 <main+0x238>)
1000be62:	4798      	blx	r3
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000be64:	4a34      	ldr	r2, [pc, #208]	; (1000bf38 <main+0x23c>)
1000be66:	2100      	movs	r1, #0
1000be68:	2000      	movs	r0, #0
1000be6a:	4b34      	ldr	r3, [pc, #208]	; (1000bf3c <main+0x240>)
1000be6c:	4798      	blx	r3
	BLE_GAP_EVENT_TYPE,
	app_gap_handle);
	
	/* Register the notification handler */
	notify_recv_ntf_handler(csc_prf_report_ntf_cb);
1000be6e:	4834      	ldr	r0, [pc, #208]	; (1000bf40 <main+0x244>)
1000be70:	4b34      	ldr	r3, [pc, #208]	; (1000bf44 <main+0x248>)
1000be72:	4798      	blx	r3
	
	/* Register the user event handler */
	register_ble_user_event_cb(csc_app_send_buf);
1000be74:	4834      	ldr	r0, [pc, #208]	; (1000bf48 <main+0x24c>)
1000be76:	4b35      	ldr	r3, [pc, #212]	; (1000bf4c <main+0x250>)
1000be78:	4798      	blx	r3
	
	register_uart_callback(uart_rx_callback);
1000be7a:	4835      	ldr	r0, [pc, #212]	; (1000bf50 <main+0x254>)
1000be7c:	4b35      	ldr	r3, [pc, #212]	; (1000bf54 <main+0x258>)
1000be7e:	4798      	blx	r3
	
	/* Capturing the events  */
	while(app_exec){
1000be80:	4b35      	ldr	r3, [pc, #212]	; (1000bf58 <main+0x25c>)
1000be82:	781b      	ldrb	r3, [r3, #0]
1000be84:	2b00      	cmp	r3, #0
1000be86:	d008      	beq.n	1000be9a <main+0x19e>
		ble_event_task(BLE_EVENT_TIMEOUT);
1000be88:	2601      	movs	r6, #1
1000be8a:	4276      	negs	r6, r6
1000be8c:	4d33      	ldr	r5, [pc, #204]	; (1000bf5c <main+0x260>)
	register_ble_user_event_cb(csc_app_send_buf);
	
	register_uart_callback(uart_rx_callback);
	
	/* Capturing the events  */
	while(app_exec){
1000be8e:	4c32      	ldr	r4, [pc, #200]	; (1000bf58 <main+0x25c>)
		ble_event_task(BLE_EVENT_TIMEOUT);
1000be90:	0030      	movs	r0, r6
1000be92:	47a8      	blx	r5
	register_ble_user_event_cb(csc_app_send_buf);
	
	register_uart_callback(uart_rx_callback);
	
	/* Capturing the events  */
	while(app_exec){
1000be94:	7823      	ldrb	r3, [r4, #0]
1000be96:	2b00      	cmp	r3, #0
1000be98:	d1fa      	bne.n	1000be90 <main+0x194>
		ble_event_task(BLE_EVENT_TIMEOUT);
	}
	return 0;
}
1000be9a:	2000      	movs	r0, #0
1000be9c:	b00b      	add	sp, #44	; 0x2c
1000be9e:	bc3c      	pop	{r2, r3, r4, r5}
1000bea0:	4690      	mov	r8, r2
1000bea2:	4699      	mov	r9, r3
1000bea4:	46a2      	mov	sl, r4
1000bea6:	46ab      	mov	fp, r5
1000bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000beaa:	46c0      	nop			; (mov r8, r8)
1000beac:	1000b159 	.word	0x1000b159
1000beb0:	1000b6ad 	.word	0x1000b6ad
1000beb4:	1000ada9 	.word	0x1000ada9
1000beb8:	e000e010 	.word	0xe000e010
1000bebc:	100088a9 	.word	0x100088a9
1000bec0:	10009335 	.word	0x10009335
1000bec4:	10017744 	.word	0x10017744
1000bec8:	10009361 	.word	0x10009361
1000becc:	40004000 	.word	0x40004000
1000bed0:	100095bd 	.word	0x100095bd
1000bed4:	100095f5 	.word	0x100095f5
1000bed8:	100081f9 	.word	0x100081f9
1000bedc:	10017a98 	.word	0x10017a98
1000bee0:	10008349 	.word	0x10008349
1000bee4:	10017b68 	.word	0x10017b68
1000bee8:	10017f98 	.word	0x10017f98
1000beec:	10016d60 	.word	0x10016d60
1000bef0:	10017a88 	.word	0x10017a88
1000bef4:	10008229 	.word	0x10008229
1000bef8:	1000b86d 	.word	0x1000b86d
1000befc:	1000bb55 	.word	0x1000bb55
1000bf00:	e000e100 	.word	0xe000e100
1000bf04:	100082d1 	.word	0x100082d1
1000bf08:	10008509 	.word	0x10008509
1000bf0c:	10008519 	.word	0x10008519
1000bf10:	100086d1 	.word	0x100086d1
1000bf14:	10014674 	.word	0x10014674
1000bf18:	10013251 	.word	0x10013251
1000bf1c:	10015084 	.word	0x10015084
1000bf20:	10013131 	.word	0x10013131
1000bf24:	10017ad0 	.word	0x10017ad0
1000bf28:	10009915 	.word	0x10009915
1000bf2c:	1000a3d9 	.word	0x1000a3d9
1000bf30:	10009921 	.word	0x10009921
1000bf34:	100099bd 	.word	0x100099bd
1000bf38:	100150b0 	.word	0x100150b0
1000bf3c:	1000a309 	.word	0x1000a309
1000bf40:	1000b985 	.word	0x1000b985
1000bf44:	10009a19 	.word	0x10009a19
1000bf48:	1000b925 	.word	0x1000b925
1000bf4c:	1000abf1 	.word	0x1000abf1
1000bf50:	1000b89d 	.word	0x1000b89d
1000bf54:	1000af25 	.word	0x1000af25
1000bf58:	100152f0 	.word	0x100152f0
1000bf5c:	1000ab1d 	.word	0x1000ab1d

1000bf60 <internal_event_post>:
1000bf60:	b570      	push	{r4, r5, r6, lr}
1000bf62:	4d12      	ldr	r5, [pc, #72]	; (1000bfac <internal_event_post+0x4c>)
1000bf64:	682c      	ldr	r4, [r5, #0]
1000bf66:	2c00      	cmp	r4, #0
1000bf68:	d014      	beq.n	1000bf94 <internal_event_post+0x34>
1000bf6a:	6826      	ldr	r6, [r4, #0]
1000bf6c:	60e2      	str	r2, [r4, #12]
1000bf6e:	602e      	str	r6, [r5, #0]
1000bf70:	2500      	movs	r5, #0
1000bf72:	4a0f      	ldr	r2, [pc, #60]	; (1000bfb0 <internal_event_post+0x50>)
1000bf74:	8123      	strh	r3, [r4, #8]
1000bf76:	6813      	ldr	r3, [r2, #0]
1000bf78:	6025      	str	r5, [r4, #0]
1000bf7a:	80a0      	strh	r0, [r4, #4]
1000bf7c:	80e1      	strh	r1, [r4, #6]
1000bf7e:	42ab      	cmp	r3, r5
1000bf80:	d101      	bne.n	1000bf86 <internal_event_post+0x26>
1000bf82:	6014      	str	r4, [r2, #0]
1000bf84:	e011      	b.n	1000bfaa <internal_event_post+0x4a>
1000bf86:	681a      	ldr	r2, [r3, #0]
1000bf88:	2a00      	cmp	r2, #0
1000bf8a:	d001      	beq.n	1000bf90 <internal_event_post+0x30>
1000bf8c:	1c13      	adds	r3, r2, #0
1000bf8e:	e7fa      	b.n	1000bf86 <internal_event_post+0x26>
1000bf90:	601c      	str	r4, [r3, #0]
1000bf92:	e00a      	b.n	1000bfaa <internal_event_post+0x4a>
1000bf94:	b2c4      	uxtb	r4, r0
1000bf96:	2c00      	cmp	r4, #0
1000bf98:	d107      	bne.n	1000bfaa <internal_event_post+0x4a>
1000bf9a:	4c06      	ldr	r4, [pc, #24]	; (1000bfb4 <internal_event_post+0x54>)
1000bf9c:	60e2      	str	r2, [r4, #12]
1000bf9e:	2201      	movs	r2, #1
1000bfa0:	8123      	strh	r3, [r4, #8]
1000bfa2:	4b05      	ldr	r3, [pc, #20]	; (1000bfb8 <internal_event_post+0x58>)
1000bfa4:	80a0      	strh	r0, [r4, #4]
1000bfa6:	80e1      	strh	r1, [r4, #6]
1000bfa8:	701a      	strb	r2, [r3, #0]
1000bfaa:	bd70      	pop	{r4, r5, r6, pc}
1000bfac:	10016d80 	.word	0x10016d80
1000bfb0:	10016d7c 	.word	0x10016d7c
1000bfb4:	10016d68 	.word	0x10016d68
1000bfb8:	10016d78 	.word	0x10016d78

1000bfbc <internal_event_init>:
1000bfbc:	b510      	push	{r4, lr}
1000bfbe:	4b08      	ldr	r3, [pc, #32]	; (1000bfe0 <internal_event_init+0x24>)
1000bfc0:	0900      	lsrs	r0, r0, #4
1000bfc2:	0100      	lsls	r0, r0, #4
1000bfc4:	681a      	ldr	r2, [r3, #0]
1000bfc6:	1808      	adds	r0, r1, r0
1000bfc8:	4281      	cmp	r1, r0
1000bfca:	d003      	beq.n	1000bfd4 <internal_event_init+0x18>
1000bfcc:	600a      	str	r2, [r1, #0]
1000bfce:	1c0a      	adds	r2, r1, #0
1000bfd0:	3110      	adds	r1, #16
1000bfd2:	e7f9      	b.n	1000bfc8 <internal_event_init+0xc>
1000bfd4:	601a      	str	r2, [r3, #0]
1000bfd6:	2200      	movs	r2, #0
1000bfd8:	4b02      	ldr	r3, [pc, #8]	; (1000bfe4 <internal_event_init+0x28>)
1000bfda:	601a      	str	r2, [r3, #0]
1000bfdc:	bd10      	pop	{r4, pc}
1000bfde:	46c0      	nop			; (mov r8, r8)
1000bfe0:	10016d80 	.word	0x10016d80
1000bfe4:	10016d7c 	.word	0x10016d7c

1000bfe8 <special_events_handler>:
1000bfe8:	b538      	push	{r3, r4, r5, lr}
1000bfea:	4c1b      	ldr	r4, [pc, #108]	; (1000c058 <special_events_handler+0x70>)
1000bfec:	1c03      	adds	r3, r0, #0
1000bfee:	8825      	ldrh	r5, [r4, #0]
1000bff0:	1c08      	adds	r0, r1, #0
1000bff2:	1c21      	adds	r1, r4, #0
1000bff4:	429d      	cmp	r5, r3
1000bff6:	d107      	bne.n	1000c008 <special_events_handler+0x20>
1000bff8:	88a5      	ldrh	r5, [r4, #4]
1000bffa:	4285      	cmp	r5, r0
1000bffc:	d104      	bne.n	1000c008 <special_events_handler+0x20>
1000bffe:	2301      	movs	r3, #1
1000c000:	425b      	negs	r3, r3
1000c002:	8023      	strh	r3, [r4, #0]
1000c004:	60a2      	str	r2, [r4, #8]
1000c006:	e009      	b.n	1000c01c <special_events_handler+0x34>
1000c008:	884c      	ldrh	r4, [r1, #2]
1000c00a:	429c      	cmp	r4, r3
1000c00c:	d10a      	bne.n	1000c024 <special_events_handler+0x3c>
1000c00e:	888c      	ldrh	r4, [r1, #4]
1000c010:	4284      	cmp	r4, r0
1000c012:	d107      	bne.n	1000c024 <special_events_handler+0x3c>
1000c014:	2301      	movs	r3, #1
1000c016:	425b      	negs	r3, r3
1000c018:	804b      	strh	r3, [r1, #2]
1000c01a:	608a      	str	r2, [r1, #8]
1000c01c:	4b0f      	ldr	r3, [pc, #60]	; (1000c05c <special_events_handler+0x74>)
1000c01e:	4798      	blx	r3
1000c020:	2001      	movs	r0, #1
1000c022:	e017      	b.n	1000c054 <special_events_handler+0x6c>
1000c024:	490e      	ldr	r1, [pc, #56]	; (1000c060 <special_events_handler+0x78>)
1000c026:	428b      	cmp	r3, r1
1000c028:	d00e      	beq.n	1000c048 <special_events_handler+0x60>
1000c02a:	490e      	ldr	r1, [pc, #56]	; (1000c064 <special_events_handler+0x7c>)
1000c02c:	428b      	cmp	r3, r1
1000c02e:	d007      	beq.n	1000c040 <special_events_handler+0x58>
1000c030:	490d      	ldr	r1, [pc, #52]	; (1000c068 <special_events_handler+0x80>)
1000c032:	2000      	movs	r0, #0
1000c034:	428b      	cmp	r3, r1
1000c036:	d10d      	bne.n	1000c054 <special_events_handler+0x6c>
1000c038:	1c10      	adds	r0, r2, #0
1000c03a:	4b0c      	ldr	r3, [pc, #48]	; (1000c06c <special_events_handler+0x84>)
1000c03c:	4798      	blx	r3
1000c03e:	e7ef      	b.n	1000c020 <special_events_handler+0x38>
1000c040:	1c11      	adds	r1, r2, #0
1000c042:	4b0b      	ldr	r3, [pc, #44]	; (1000c070 <special_events_handler+0x88>)
1000c044:	2200      	movs	r2, #0
1000c046:	e002      	b.n	1000c04e <special_events_handler+0x66>
1000c048:	1c11      	adds	r1, r2, #0
1000c04a:	2200      	movs	r2, #0
1000c04c:	4b09      	ldr	r3, [pc, #36]	; (1000c074 <special_events_handler+0x8c>)
1000c04e:	4798      	blx	r3
1000c050:	4243      	negs	r3, r0
1000c052:	4158      	adcs	r0, r3
1000c054:	bd38      	pop	{r3, r4, r5, pc}
1000c056:	46c0      	nop			; (mov r8, r8)
1000c058:	10017fa8 	.word	0x10017fa8
1000c05c:	1000db2d 	.word	0x1000db2d
1000c060:	00000e13 	.word	0x00000e13
1000c064:	00000e15 	.word	0x00000e15
1000c068:	00000e01 	.word	0x00000e01
1000c06c:	1000de9d 	.word	0x1000de9d
1000c070:	1000e05d 	.word	0x1000e05d
1000c074:	1000e135 	.word	0x1000e135

1000c078 <at_ble_event_get>:
1000c078:	2300      	movs	r3, #0
1000c07a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c07c:	b087      	sub	sp, #28
1000c07e:	9204      	str	r2, [sp, #16]
1000c080:	7003      	strb	r3, [r0, #0]
1000c082:	9b04      	ldr	r3, [sp, #16]
1000c084:	9003      	str	r0, [sp, #12]
1000c086:	3b01      	subs	r3, #1
1000c088:	1c0d      	adds	r5, r1, #0
1000c08a:	9305      	str	r3, [sp, #20]
1000c08c:	3303      	adds	r3, #3
1000c08e:	d802      	bhi.n	1000c096 <at_ble_event_get+0x1e>
1000c090:	9804      	ldr	r0, [sp, #16]
1000c092:	4bae      	ldr	r3, [pc, #696]	; (1000c34c <at_ble_event_get+0x2d4>)
1000c094:	4798      	blx	r3
1000c096:	9b05      	ldr	r3, [sp, #20]
1000c098:	4cad      	ldr	r4, [pc, #692]	; (1000c350 <at_ble_event_get+0x2d8>)
1000c09a:	3303      	adds	r3, #3
1000c09c:	d902      	bls.n	1000c0a4 <at_ble_event_get+0x2c>
1000c09e:	2300      	movs	r3, #0
1000c0a0:	9302      	str	r3, [sp, #8]
1000c0a2:	e015      	b.n	1000c0d0 <at_ble_event_get+0x58>
1000c0a4:	2300      	movs	r3, #0
1000c0a6:	9302      	str	r3, [sp, #8]
1000c0a8:	6823      	ldr	r3, [r4, #0]
1000c0aa:	2b00      	cmp	r3, #0
1000c0ac:	d113      	bne.n	1000c0d6 <at_ble_event_get+0x5e>
1000c0ae:	9b02      	ldr	r3, [sp, #8]
1000c0b0:	2bd0      	cmp	r3, #208	; 0xd0
1000c0b2:	d100      	bne.n	1000c0b6 <at_ble_event_get+0x3e>
1000c0b4:	e2da      	b.n	1000c66c <at_ble_event_get+0x5f4>
1000c0b6:	9804      	ldr	r0, [sp, #16]
1000c0b8:	4ba6      	ldr	r3, [pc, #664]	; (1000c354 <at_ble_event_get+0x2dc>)
1000c0ba:	4798      	blx	r3
1000c0bc:	9002      	str	r0, [sp, #8]
1000c0be:	2802      	cmp	r0, #2
1000c0c0:	d1f2      	bne.n	1000c0a8 <at_ble_event_get+0x30>
1000c0c2:	e03f      	b.n	1000c144 <at_ble_event_get+0xcc>
1000c0c4:	9804      	ldr	r0, [sp, #16]
1000c0c6:	4ba3      	ldr	r3, [pc, #652]	; (1000c354 <at_ble_event_get+0x2dc>)
1000c0c8:	4798      	blx	r3
1000c0ca:	9002      	str	r0, [sp, #8]
1000c0cc:	2802      	cmp	r0, #2
1000c0ce:	d039      	beq.n	1000c144 <at_ble_event_get+0xcc>
1000c0d0:	6823      	ldr	r3, [r4, #0]
1000c0d2:	2b00      	cmp	r3, #0
1000c0d4:	d0f6      	beq.n	1000c0c4 <at_ble_event_get+0x4c>
1000c0d6:	9b02      	ldr	r3, [sp, #8]
1000c0d8:	2bd0      	cmp	r3, #208	; 0xd0
1000c0da:	d100      	bne.n	1000c0de <at_ble_event_get+0x66>
1000c0dc:	e2c6      	b.n	1000c66c <at_ble_event_get+0x5f4>
1000c0de:	9b02      	ldr	r3, [sp, #8]
1000c0e0:	3b03      	subs	r3, #3
1000c0e2:	1e5a      	subs	r2, r3, #1
1000c0e4:	4193      	sbcs	r3, r2
1000c0e6:	9a02      	ldr	r2, [sp, #8]
1000c0e8:	425b      	negs	r3, r3
1000c0ea:	401a      	ands	r2, r3
1000c0ec:	6823      	ldr	r3, [r4, #0]
1000c0ee:	9202      	str	r2, [sp, #8]
1000c0f0:	2b00      	cmp	r3, #0
1000c0f2:	d100      	bne.n	1000c0f6 <at_ble_event_get+0x7e>
1000c0f4:	e2c2      	b.n	1000c67c <at_ble_event_get+0x604>
1000c0f6:	681a      	ldr	r2, [r3, #0]
1000c0f8:	68de      	ldr	r6, [r3, #12]
1000c0fa:	6022      	str	r2, [r4, #0]
1000c0fc:	88da      	ldrh	r2, [r3, #6]
1000c0fe:	9201      	str	r2, [sp, #4]
1000c100:	4a95      	ldr	r2, [pc, #596]	; (1000c358 <at_ble_event_get+0x2e0>)
1000c102:	889c      	ldrh	r4, [r3, #4]
1000c104:	6811      	ldr	r1, [r2, #0]
1000c106:	6013      	str	r3, [r2, #0]
1000c108:	6019      	str	r1, [r3, #0]
1000c10a:	4b94      	ldr	r3, [pc, #592]	; (1000c35c <at_ble_event_get+0x2e4>)
1000c10c:	781b      	ldrb	r3, [r3, #0]
1000c10e:	2b01      	cmp	r3, #1
1000c110:	d10f      	bne.n	1000c132 <at_ble_event_get+0xba>
1000c112:	4b93      	ldr	r3, [pc, #588]	; (1000c360 <at_ble_event_get+0x2e8>)
1000c114:	4a92      	ldr	r2, [pc, #584]	; (1000c360 <at_ble_event_get+0x2e8>)
1000c116:	8898      	ldrh	r0, [r3, #4]
1000c118:	88d9      	ldrh	r1, [r3, #6]
1000c11a:	68d2      	ldr	r2, [r2, #12]
1000c11c:	891b      	ldrh	r3, [r3, #8]
1000c11e:	4f91      	ldr	r7, [pc, #580]	; (1000c364 <at_ble_event_get+0x2ec>)
1000c120:	47b8      	blx	r7
1000c122:	2210      	movs	r2, #16
1000c124:	4b90      	ldr	r3, [pc, #576]	; (1000c368 <at_ble_event_get+0x2f0>)
1000c126:	488e      	ldr	r0, [pc, #568]	; (1000c360 <at_ble_event_get+0x2e8>)
1000c128:	2100      	movs	r1, #0
1000c12a:	4798      	blx	r3
1000c12c:	2300      	movs	r3, #0
1000c12e:	4a8b      	ldr	r2, [pc, #556]	; (1000c35c <at_ble_event_get+0x2e4>)
1000c130:	7013      	strb	r3, [r2, #0]
1000c132:	9b02      	ldr	r3, [sp, #8]
1000c134:	2b00      	cmp	r3, #0
1000c136:	d114      	bne.n	1000c162 <at_ble_event_get+0xea>
1000c138:	4b8c      	ldr	r3, [pc, #560]	; (1000c36c <at_ble_event_get+0x2f4>)
1000c13a:	429c      	cmp	r4, r3
1000c13c:	d009      	beq.n	1000c152 <at_ble_event_get+0xda>
1000c13e:	4b8c      	ldr	r3, [pc, #560]	; (1000c370 <at_ble_event_get+0x2f8>)
1000c140:	429c      	cmp	r4, r3
1000c142:	d127      	bne.n	1000c194 <at_ble_event_get+0x11c>
1000c144:	233a      	movs	r3, #58	; 0x3a
1000c146:	9a03      	ldr	r2, [sp, #12]
1000c148:	7013      	strb	r3, [r2, #0]
1000c14a:	2300      	movs	r3, #0
1000c14c:	9302      	str	r3, [sp, #8]
1000c14e:	1c1d      	adds	r5, r3, #0
1000c150:	e007      	b.n	1000c162 <at_ble_event_get+0xea>
1000c152:	9b01      	ldr	r3, [sp, #4]
1000c154:	42a3      	cmp	r3, r4
1000c156:	d000      	beq.n	1000c15a <at_ble_event_get+0xe2>
1000c158:	e28a      	b.n	1000c670 <at_ble_event_get+0x5f8>
1000c15a:	2338      	movs	r3, #56	; 0x38
1000c15c:	9a03      	ldr	r2, [sp, #12]
1000c15e:	7013      	strb	r3, [r2, #0]
1000c160:	602e      	str	r6, [r5, #0]
1000c162:	9b03      	ldr	r3, [sp, #12]
1000c164:	781b      	ldrb	r3, [r3, #0]
1000c166:	2b3b      	cmp	r3, #59	; 0x3b
1000c168:	d101      	bne.n	1000c16e <at_ble_event_get+0xf6>
1000c16a:	4b82      	ldr	r3, [pc, #520]	; (1000c374 <at_ble_event_get+0x2fc>)
1000c16c:	4798      	blx	r3
1000c16e:	9b03      	ldr	r3, [sp, #12]
1000c170:	781b      	ldrb	r3, [r3, #0]
1000c172:	2b3b      	cmp	r3, #59	; 0x3b
1000c174:	d003      	beq.n	1000c17e <at_ble_event_get+0x106>
1000c176:	9b05      	ldr	r3, [sp, #20]
1000c178:	3303      	adds	r3, #3
1000c17a:	d904      	bls.n	1000c186 <at_ble_event_get+0x10e>
1000c17c:	e283      	b.n	1000c686 <at_ble_event_get+0x60e>
1000c17e:	9b02      	ldr	r3, [sp, #8]
1000c180:	2b00      	cmp	r3, #0
1000c182:	d088      	beq.n	1000c096 <at_ble_event_get+0x1e>
1000c184:	e7f7      	b.n	1000c176 <at_ble_event_get+0xfe>
1000c186:	9b02      	ldr	r3, [sp, #8]
1000c188:	2bd0      	cmp	r3, #208	; 0xd0
1000c18a:	d100      	bne.n	1000c18e <at_ble_event_get+0x116>
1000c18c:	e27b      	b.n	1000c686 <at_ble_event_get+0x60e>
1000c18e:	4b7a      	ldr	r3, [pc, #488]	; (1000c378 <at_ble_event_get+0x300>)
1000c190:	4798      	blx	r3
1000c192:	e278      	b.n	1000c686 <at_ble_event_get+0x60e>
1000c194:	9b01      	ldr	r3, [sp, #4]
1000c196:	2bbb      	cmp	r3, #187	; 0xbb
1000c198:	d125      	bne.n	1000c1e6 <at_ble_event_get+0x16e>
1000c19a:	2cbb      	cmp	r4, #187	; 0xbb
1000c19c:	d123      	bne.n	1000c1e6 <at_ble_event_get+0x16e>
1000c19e:	466b      	mov	r3, sp
1000c1a0:	891b      	ldrh	r3, [r3, #8]
1000c1a2:	80ab      	strh	r3, [r5, #4]
1000c1a4:	78b3      	ldrb	r3, [r6, #2]
1000c1a6:	7872      	ldrb	r2, [r6, #1]
1000c1a8:	78f0      	ldrb	r0, [r6, #3]
1000c1aa:	021b      	lsls	r3, r3, #8
1000c1ac:	4313      	orrs	r3, r2
1000c1ae:	7971      	ldrb	r1, [r6, #5]
1000c1b0:	7932      	ldrb	r2, [r6, #4]
1000c1b2:	70a8      	strb	r0, [r5, #2]
1000c1b4:	4871      	ldr	r0, [pc, #452]	; (1000c37c <at_ble_event_get+0x304>)
1000c1b6:	802b      	strh	r3, [r5, #0]
1000c1b8:	4283      	cmp	r3, r0
1000c1ba:	d806      	bhi.n	1000c1ca <at_ble_event_get+0x152>
1000c1bc:	4a70      	ldr	r2, [pc, #448]	; (1000c380 <at_ble_event_get+0x308>)
1000c1be:	4293      	cmp	r3, r2
1000c1c0:	d20b      	bcs.n	1000c1da <at_ble_event_get+0x162>
1000c1c2:	4a70      	ldr	r2, [pc, #448]	; (1000c384 <at_ble_event_get+0x30c>)
1000c1c4:	4293      	cmp	r3, r2
1000c1c6:	d008      	beq.n	1000c1da <at_ble_event_get+0x162>
1000c1c8:	e009      	b.n	1000c1de <at_ble_event_get+0x166>
1000c1ca:	486f      	ldr	r0, [pc, #444]	; (1000c388 <at_ble_event_get+0x310>)
1000c1cc:	4283      	cmp	r3, r0
1000c1ce:	d106      	bne.n	1000c1de <at_ble_event_get+0x166>
1000c1d0:	020b      	lsls	r3, r1, #8
1000c1d2:	4313      	orrs	r3, r2
1000c1d4:	80ab      	strh	r3, [r5, #4]
1000c1d6:	2337      	movs	r3, #55	; 0x37
1000c1d8:	e002      	b.n	1000c1e0 <at_ble_event_get+0x168>
1000c1da:	2336      	movs	r3, #54	; 0x36
1000c1dc:	e000      	b.n	1000c1e0 <at_ble_event_get+0x168>
1000c1de:	2300      	movs	r3, #0
1000c1e0:	9a03      	ldr	r2, [sp, #12]
1000c1e2:	7013      	strb	r3, [r2, #0]
1000c1e4:	e7bd      	b.n	1000c162 <at_ble_event_get+0xea>
1000c1e6:	4b69      	ldr	r3, [pc, #420]	; (1000c38c <at_ble_event_get+0x314>)
1000c1e8:	429c      	cmp	r4, r3
1000c1ea:	d100      	bne.n	1000c1ee <at_ble_event_get+0x176>
1000c1ec:	e144      	b.n	1000c478 <at_ble_event_get+0x400>
1000c1ee:	d865      	bhi.n	1000c2bc <at_ble_event_get+0x244>
1000c1f0:	4b67      	ldr	r3, [pc, #412]	; (1000c390 <at_ble_event_get+0x318>)
1000c1f2:	429c      	cmp	r4, r3
1000c1f4:	d100      	bne.n	1000c1f8 <at_ble_event_get+0x180>
1000c1f6:	e1d5      	b.n	1000c5a4 <at_ble_event_get+0x52c>
1000c1f8:	d82f      	bhi.n	1000c25a <at_ble_event_get+0x1e2>
1000c1fa:	4b66      	ldr	r3, [pc, #408]	; (1000c394 <at_ble_event_get+0x31c>)
1000c1fc:	429c      	cmp	r4, r3
1000c1fe:	d100      	bne.n	1000c202 <at_ble_event_get+0x18a>
1000c200:	e1e0      	b.n	1000c5c4 <at_ble_event_get+0x54c>
1000c202:	d813      	bhi.n	1000c22c <at_ble_event_get+0x1b4>
1000c204:	4b64      	ldr	r3, [pc, #400]	; (1000c398 <at_ble_event_get+0x320>)
1000c206:	429c      	cmp	r4, r3
1000c208:	d100      	bne.n	1000c20c <at_ble_event_get+0x194>
1000c20a:	e1a3      	b.n	1000c554 <at_ble_event_get+0x4dc>
1000c20c:	d804      	bhi.n	1000c218 <at_ble_event_get+0x1a0>
1000c20e:	2638      	movs	r6, #56	; 0x38
1000c210:	42b4      	cmp	r4, r6
1000c212:	d100      	bne.n	1000c216 <at_ble_event_get+0x19e>
1000c214:	e225      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c216:	e117      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c218:	4b60      	ldr	r3, [pc, #384]	; (1000c39c <at_ble_event_get+0x324>)
1000c21a:	429c      	cmp	r4, r3
1000c21c:	d100      	bne.n	1000c220 <at_ble_event_get+0x1a8>
1000c21e:	e19f      	b.n	1000c560 <at_ble_event_get+0x4e8>
1000c220:	33fe      	adds	r3, #254	; 0xfe
1000c222:	33ff      	adds	r3, #255	; 0xff
1000c224:	429c      	cmp	r4, r3
1000c226:	d100      	bne.n	1000c22a <at_ble_event_get+0x1b2>
1000c228:	e1d3      	b.n	1000c5d2 <at_ble_event_get+0x55a>
1000c22a:	e10d      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c22c:	4b5c      	ldr	r3, [pc, #368]	; (1000c3a0 <at_ble_event_get+0x328>)
1000c22e:	429c      	cmp	r4, r3
1000c230:	d100      	bne.n	1000c234 <at_ble_event_get+0x1bc>
1000c232:	e1a9      	b.n	1000c588 <at_ble_event_get+0x510>
1000c234:	d808      	bhi.n	1000c248 <at_ble_event_get+0x1d0>
1000c236:	4b5b      	ldr	r3, [pc, #364]	; (1000c3a4 <at_ble_event_get+0x32c>)
1000c238:	429c      	cmp	r4, r3
1000c23a:	d100      	bne.n	1000c23e <at_ble_event_get+0x1c6>
1000c23c:	e196      	b.n	1000c56c <at_ble_event_get+0x4f4>
1000c23e:	4b5a      	ldr	r3, [pc, #360]	; (1000c3a8 <at_ble_event_get+0x330>)
1000c240:	429c      	cmp	r4, r3
1000c242:	d100      	bne.n	1000c246 <at_ble_event_get+0x1ce>
1000c244:	e199      	b.n	1000c57a <at_ble_event_get+0x502>
1000c246:	e0ff      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c248:	4b58      	ldr	r3, [pc, #352]	; (1000c3ac <at_ble_event_get+0x334>)
1000c24a:	429c      	cmp	r4, r3
1000c24c:	d100      	bne.n	1000c250 <at_ble_event_get+0x1d8>
1000c24e:	e1a2      	b.n	1000c596 <at_ble_event_get+0x51e>
1000c250:	4b57      	ldr	r3, [pc, #348]	; (1000c3b0 <at_ble_event_get+0x338>)
1000c252:	429c      	cmp	r4, r3
1000c254:	d100      	bne.n	1000c258 <at_ble_event_get+0x1e0>
1000c256:	e1d4      	b.n	1000c602 <at_ble_event_get+0x58a>
1000c258:	e0f6      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c25a:	4b56      	ldr	r3, [pc, #344]	; (1000c3b4 <at_ble_event_get+0x33c>)
1000c25c:	429c      	cmp	r4, r3
1000c25e:	d100      	bne.n	1000c262 <at_ble_event_get+0x1ea>
1000c260:	e1c8      	b.n	1000c5f4 <at_ble_event_get+0x57c>
1000c262:	d812      	bhi.n	1000c28a <at_ble_event_get+0x212>
1000c264:	4b54      	ldr	r3, [pc, #336]	; (1000c3b8 <at_ble_event_get+0x340>)
1000c266:	429c      	cmp	r4, r3
1000c268:	d100      	bne.n	1000c26c <at_ble_event_get+0x1f4>
1000c26a:	e1d1      	b.n	1000c610 <at_ble_event_get+0x598>
1000c26c:	d804      	bhi.n	1000c278 <at_ble_event_get+0x200>
1000c26e:	4b53      	ldr	r3, [pc, #332]	; (1000c3bc <at_ble_event_get+0x344>)
1000c270:	429c      	cmp	r4, r3
1000c272:	d100      	bne.n	1000c276 <at_ble_event_get+0x1fe>
1000c274:	e19b      	b.n	1000c5ae <at_ble_event_get+0x536>
1000c276:	e0e7      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c278:	4b51      	ldr	r3, [pc, #324]	; (1000c3c0 <at_ble_event_get+0x348>)
1000c27a:	429c      	cmp	r4, r3
1000c27c:	d100      	bne.n	1000c280 <at_ble_event_get+0x208>
1000c27e:	e1ad      	b.n	1000c5dc <at_ble_event_get+0x564>
1000c280:	4b50      	ldr	r3, [pc, #320]	; (1000c3c4 <at_ble_event_get+0x34c>)
1000c282:	429c      	cmp	r4, r3
1000c284:	d100      	bne.n	1000c288 <at_ble_event_get+0x210>
1000c286:	e1b0      	b.n	1000c5ea <at_ble_event_get+0x572>
1000c288:	e0de      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c28a:	4b4f      	ldr	r3, [pc, #316]	; (1000c3c8 <at_ble_event_get+0x350>)
1000c28c:	429c      	cmp	r4, r3
1000c28e:	d100      	bne.n	1000c292 <at_ble_event_get+0x21a>
1000c290:	e0e0      	b.n	1000c454 <at_ble_event_get+0x3dc>
1000c292:	d809      	bhi.n	1000c2a8 <at_ble_event_get+0x230>
1000c294:	3b08      	subs	r3, #8
1000c296:	429c      	cmp	r4, r3
1000c298:	d100      	bne.n	1000c29c <at_ble_event_get+0x224>
1000c29a:	e0d7      	b.n	1000c44c <at_ble_event_get+0x3d4>
1000c29c:	4b4b      	ldr	r3, [pc, #300]	; (1000c3cc <at_ble_event_get+0x354>)
1000c29e:	2639      	movs	r6, #57	; 0x39
1000c2a0:	429c      	cmp	r4, r3
1000c2a2:	d100      	bne.n	1000c2a6 <at_ble_event_get+0x22e>
1000c2a4:	e1dd      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c2a6:	e0cf      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c2a8:	23d1      	movs	r3, #209	; 0xd1
1000c2aa:	011b      	lsls	r3, r3, #4
1000c2ac:	429c      	cmp	r4, r3
1000c2ae:	d100      	bne.n	1000c2b2 <at_ble_event_get+0x23a>
1000c2b0:	e0d6      	b.n	1000c460 <at_ble_event_get+0x3e8>
1000c2b2:	4b47      	ldr	r3, [pc, #284]	; (1000c3d0 <at_ble_event_get+0x358>)
1000c2b4:	429c      	cmp	r4, r3
1000c2b6:	d100      	bne.n	1000c2ba <at_ble_event_get+0x242>
1000c2b8:	e0d8      	b.n	1000c46c <at_ble_event_get+0x3f4>
1000c2ba:	e0c5      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c2bc:	4b45      	ldr	r3, [pc, #276]	; (1000c3d4 <at_ble_event_get+0x35c>)
1000c2be:	429c      	cmp	r4, r3
1000c2c0:	d100      	bne.n	1000c2c4 <at_ble_event_get+0x24c>
1000c2c2:	e117      	b.n	1000c4f4 <at_ble_event_get+0x47c>
1000c2c4:	d82e      	bhi.n	1000c324 <at_ble_event_get+0x2ac>
1000c2c6:	4b44      	ldr	r3, [pc, #272]	; (1000c3d8 <at_ble_event_get+0x360>)
1000c2c8:	429c      	cmp	r4, r3
1000c2ca:	d100      	bne.n	1000c2ce <at_ble_event_get+0x256>
1000c2cc:	e13d      	b.n	1000c54a <at_ble_event_get+0x4d2>
1000c2ce:	d812      	bhi.n	1000c2f6 <at_ble_event_get+0x27e>
1000c2d0:	4b42      	ldr	r3, [pc, #264]	; (1000c3dc <at_ble_event_get+0x364>)
1000c2d2:	429c      	cmp	r4, r3
1000c2d4:	d100      	bne.n	1000c2d8 <at_ble_event_get+0x260>
1000c2d6:	e0e8      	b.n	1000c4aa <at_ble_event_get+0x432>
1000c2d8:	d804      	bhi.n	1000c2e4 <at_ble_event_get+0x26c>
1000c2da:	3b03      	subs	r3, #3
1000c2dc:	429c      	cmp	r4, r3
1000c2de:	d100      	bne.n	1000c2e2 <at_ble_event_get+0x26a>
1000c2e0:	e0d0      	b.n	1000c484 <at_ble_event_get+0x40c>
1000c2e2:	e0b1      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c2e4:	4b3e      	ldr	r3, [pc, #248]	; (1000c3e0 <at_ble_event_get+0x368>)
1000c2e6:	429c      	cmp	r4, r3
1000c2e8:	d100      	bne.n	1000c2ec <at_ble_event_get+0x274>
1000c2ea:	e0d0      	b.n	1000c48e <at_ble_event_get+0x416>
1000c2ec:	4b3d      	ldr	r3, [pc, #244]	; (1000c3e4 <at_ble_event_get+0x36c>)
1000c2ee:	429c      	cmp	r4, r3
1000c2f0:	d100      	bne.n	1000c2f4 <at_ble_event_get+0x27c>
1000c2f2:	e0f9      	b.n	1000c4e8 <at_ble_event_get+0x470>
1000c2f4:	e0a8      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c2f6:	4b3c      	ldr	r3, [pc, #240]	; (1000c3e8 <at_ble_event_get+0x370>)
1000c2f8:	429c      	cmp	r4, r3
1000c2fa:	d100      	bne.n	1000c2fe <at_ble_event_get+0x286>
1000c2fc:	e0db      	b.n	1000c4b6 <at_ble_event_get+0x43e>
1000c2fe:	d808      	bhi.n	1000c312 <at_ble_event_get+0x29a>
1000c300:	4b3a      	ldr	r3, [pc, #232]	; (1000c3ec <at_ble_event_get+0x374>)
1000c302:	429c      	cmp	r4, r3
1000c304:	d100      	bne.n	1000c308 <at_ble_event_get+0x290>
1000c306:	e11b      	b.n	1000c540 <at_ble_event_get+0x4c8>
1000c308:	4b39      	ldr	r3, [pc, #228]	; (1000c3f0 <at_ble_event_get+0x378>)
1000c30a:	429c      	cmp	r4, r3
1000c30c:	d100      	bne.n	1000c310 <at_ble_event_get+0x298>
1000c30e:	e0d8      	b.n	1000c4c2 <at_ble_event_get+0x44a>
1000c310:	e09a      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c312:	4b38      	ldr	r3, [pc, #224]	; (1000c3f4 <at_ble_event_get+0x37c>)
1000c314:	429c      	cmp	r4, r3
1000c316:	d100      	bne.n	1000c31a <at_ble_event_get+0x2a2>
1000c318:	e0d8      	b.n	1000c4cc <at_ble_event_get+0x454>
1000c31a:	4b37      	ldr	r3, [pc, #220]	; (1000c3f8 <at_ble_event_get+0x380>)
1000c31c:	429c      	cmp	r4, r3
1000c31e:	d100      	bne.n	1000c322 <at_ble_event_get+0x2aa>
1000c320:	e0db      	b.n	1000c4da <at_ble_event_get+0x462>
1000c322:	e091      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c324:	4b35      	ldr	r3, [pc, #212]	; (1000c3fc <at_ble_event_get+0x384>)
1000c326:	429c      	cmp	r4, r3
1000c328:	d100      	bne.n	1000c32c <at_ble_event_get+0x2b4>
1000c32a:	e0f7      	b.n	1000c51c <at_ble_event_get+0x4a4>
1000c32c:	d876      	bhi.n	1000c41c <at_ble_event_get+0x3a4>
1000c32e:	4b34      	ldr	r3, [pc, #208]	; (1000c400 <at_ble_event_get+0x388>)
1000c330:	429c      	cmp	r4, r3
1000c332:	d100      	bne.n	1000c336 <at_ble_event_get+0x2be>
1000c334:	e0f8      	b.n	1000c528 <at_ble_event_get+0x4b0>
1000c336:	d869      	bhi.n	1000c40c <at_ble_event_get+0x394>
1000c338:	4b32      	ldr	r3, [pc, #200]	; (1000c404 <at_ble_event_get+0x38c>)
1000c33a:	429c      	cmp	r4, r3
1000c33c:	d100      	bne.n	1000c340 <at_ble_event_get+0x2c8>
1000c33e:	e0e0      	b.n	1000c502 <at_ble_event_get+0x48a>
1000c340:	4b31      	ldr	r3, [pc, #196]	; (1000c408 <at_ble_event_get+0x390>)
1000c342:	429c      	cmp	r4, r3
1000c344:	d100      	bne.n	1000c348 <at_ble_event_get+0x2d0>
1000c346:	e0a9      	b.n	1000c49c <at_ble_event_get+0x424>
1000c348:	e07e      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c34a:	46c0      	nop			; (mov r8, r8)
1000c34c:	1000db65 	.word	0x1000db65
1000c350:	10016d7c 	.word	0x10016d7c
1000c354:	1000b449 	.word	0x1000b449
1000c358:	10016d80 	.word	0x10016d80
1000c35c:	10016d78 	.word	0x10016d78
1000c360:	10016d68 	.word	0x10016d68
1000c364:	1000bf61 	.word	0x1000bf61
1000c368:	1001311f 	.word	0x1001311f
1000c36c:	0000ffff 	.word	0x0000ffff
1000c370:	0000fffe 	.word	0x0000fffe
1000c374:	1000b6c1 	.word	0x1000b6c1
1000c378:	1000db67 	.word	0x1000db67
1000c37c:	0000201e 	.word	0x0000201e
1000c380:	0000201d 	.word	0x0000201d
1000c384:	00000c03 	.word	0x00000c03
1000c388:	0000201f 	.word	0x0000201f
1000c38c:	00000d1c 	.word	0x00000d1c
1000c390:	00000c0c 	.word	0x00000c0c
1000c394:	00000c02 	.word	0x00000c02
1000c398:	00000a02 	.word	0x00000a02
1000c39c:	00000a03 	.word	0x00000a03
1000c3a0:	00000c06 	.word	0x00000c06
1000c3a4:	00000c04 	.word	0x00000c04
1000c3a8:	00000c05 	.word	0x00000c05
1000c3ac:	00000c07 	.word	0x00000c07
1000c3b0:	00000c09 	.word	0x00000c09
1000c3b4:	00000c17 	.word	0x00000c17
1000c3b8:	00000c12 	.word	0x00000c12
1000c3bc:	00000c0d 	.word	0x00000c0d
1000c3c0:	00000c13 	.word	0x00000c13
1000c3c4:	00000c15 	.word	0x00000c15
1000c3c8:	00000d08 	.word	0x00000d08
1000c3cc:	00000d01 	.word	0x00000d01
1000c3d0:	00000d15 	.word	0x00000d15
1000c3d4:	00000e1b 	.word	0x00000e1b
1000c3d8:	00000e0f 	.word	0x00000e0f
1000c3dc:	00000e03 	.word	0x00000e03
1000c3e0:	00000e06 	.word	0x00000e06
1000c3e4:	00000e0a 	.word	0x00000e0a
1000c3e8:	00000e15 	.word	0x00000e15
1000c3ec:	00000e11 	.word	0x00000e11
1000c3f0:	00000e13 	.word	0x00000e13
1000c3f4:	00000e17 	.word	0x00000e17
1000c3f8:	00000e19 	.word	0x00000e19
1000c3fc:	00000e27 	.word	0x00000e27
1000c400:	00000e21 	.word	0x00000e21
1000c404:	00000e1c 	.word	0x00000e1c
1000c408:	00000e1d 	.word	0x00000e1d
1000c40c:	4b9f      	ldr	r3, [pc, #636]	; (1000c68c <at_ble_event_get+0x614>)
1000c40e:	429c      	cmp	r4, r3
1000c410:	d07e      	beq.n	1000c510 <at_ble_event_get+0x498>
1000c412:	4b9f      	ldr	r3, [pc, #636]	; (1000c690 <at_ble_event_get+0x618>)
1000c414:	429c      	cmp	r4, r3
1000c416:	d100      	bne.n	1000c41a <at_ble_event_get+0x3a2>
1000c418:	e08c      	b.n	1000c534 <at_ble_event_get+0x4bc>
1000c41a:	e015      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c41c:	4b9d      	ldr	r3, [pc, #628]	; (1000c694 <at_ble_event_get+0x61c>)
1000c41e:	429c      	cmp	r4, r3
1000c420:	d100      	bne.n	1000c424 <at_ble_event_get+0x3ac>
1000c422:	e10a      	b.n	1000c63a <at_ble_event_get+0x5c2>
1000c424:	d808      	bhi.n	1000c438 <at_ble_event_get+0x3c0>
1000c426:	4b9c      	ldr	r3, [pc, #624]	; (1000c698 <at_ble_event_get+0x620>)
1000c428:	429c      	cmp	r4, r3
1000c42a:	d100      	bne.n	1000c42e <at_ble_event_get+0x3b6>
1000c42c:	e0f7      	b.n	1000c61e <at_ble_event_get+0x5a6>
1000c42e:	4b9b      	ldr	r3, [pc, #620]	; (1000c69c <at_ble_event_get+0x624>)
1000c430:	429c      	cmp	r4, r3
1000c432:	d100      	bne.n	1000c436 <at_ble_event_get+0x3be>
1000c434:	e0fa      	b.n	1000c62c <at_ble_event_get+0x5b4>
1000c436:	e007      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c438:	4b99      	ldr	r3, [pc, #612]	; (1000c6a0 <at_ble_event_get+0x628>)
1000c43a:	429c      	cmp	r4, r3
1000c43c:	d100      	bne.n	1000c440 <at_ble_event_get+0x3c8>
1000c43e:	e103      	b.n	1000c648 <at_ble_event_get+0x5d0>
1000c440:	4b98      	ldr	r3, [pc, #608]	; (1000c6a4 <at_ble_event_get+0x62c>)
1000c442:	429c      	cmp	r4, r3
1000c444:	d100      	bne.n	1000c448 <at_ble_event_get+0x3d0>
1000c446:	e106      	b.n	1000c656 <at_ble_event_get+0x5de>
1000c448:	2600      	movs	r6, #0
1000c44a:	e10a      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c44c:	1c30      	adds	r0, r6, #0
1000c44e:	1c29      	adds	r1, r5, #0
1000c450:	4b95      	ldr	r3, [pc, #596]	; (1000c6a8 <at_ble_event_get+0x630>)
1000c452:	e014      	b.n	1000c47e <at_ble_event_get+0x406>
1000c454:	1c30      	adds	r0, r6, #0
1000c456:	1c29      	adds	r1, r5, #0
1000c458:	4b94      	ldr	r3, [pc, #592]	; (1000c6ac <at_ble_event_get+0x634>)
1000c45a:	4798      	blx	r3
1000c45c:	2604      	movs	r6, #4
1000c45e:	e100      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c460:	1c30      	adds	r0, r6, #0
1000c462:	1c29      	adds	r1, r5, #0
1000c464:	4b92      	ldr	r3, [pc, #584]	; (1000c6b0 <at_ble_event_get+0x638>)
1000c466:	4798      	blx	r3
1000c468:	2601      	movs	r6, #1
1000c46a:	e0fa      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c46c:	1c30      	adds	r0, r6, #0
1000c46e:	1c29      	adds	r1, r5, #0
1000c470:	4b90      	ldr	r3, [pc, #576]	; (1000c6b4 <at_ble_event_get+0x63c>)
1000c472:	4798      	blx	r3
1000c474:	260f      	movs	r6, #15
1000c476:	e0f4      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c478:	1c30      	adds	r0, r6, #0
1000c47a:	1c29      	adds	r1, r5, #0
1000c47c:	4b8e      	ldr	r3, [pc, #568]	; (1000c6b8 <at_ble_event_get+0x640>)
1000c47e:	4798      	blx	r3
1000c480:	1c06      	adds	r6, r0, #0
1000c482:	e0ee      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c484:	9801      	ldr	r0, [sp, #4]
1000c486:	1c31      	adds	r1, r6, #0
1000c488:	1c2a      	adds	r2, r5, #0
1000c48a:	4b8c      	ldr	r3, [pc, #560]	; (1000c6bc <at_ble_event_get+0x644>)
1000c48c:	e017      	b.n	1000c4be <at_ble_event_get+0x446>
1000c48e:	1c31      	adds	r1, r6, #0
1000c490:	9801      	ldr	r0, [sp, #4]
1000c492:	1c2a      	adds	r2, r5, #0
1000c494:	4b8a      	ldr	r3, [pc, #552]	; (1000c6c0 <at_ble_event_get+0x648>)
1000c496:	4798      	blx	r3
1000c498:	2611      	movs	r6, #17
1000c49a:	e0e2      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c49c:	1c31      	adds	r1, r6, #0
1000c49e:	9801      	ldr	r0, [sp, #4]
1000c4a0:	1c2a      	adds	r2, r5, #0
1000c4a2:	4b88      	ldr	r3, [pc, #544]	; (1000c6c4 <at_ble_event_get+0x64c>)
1000c4a4:	4798      	blx	r3
1000c4a6:	2612      	movs	r6, #18
1000c4a8:	e0db      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c4aa:	1c30      	adds	r0, r6, #0
1000c4ac:	1c29      	adds	r1, r5, #0
1000c4ae:	4b86      	ldr	r3, [pc, #536]	; (1000c6c8 <at_ble_event_get+0x650>)
1000c4b0:	4798      	blx	r3
1000c4b2:	2606      	movs	r6, #6
1000c4b4:	e0d5      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c4b6:	1c31      	adds	r1, r6, #0
1000c4b8:	1c2a      	adds	r2, r5, #0
1000c4ba:	9801      	ldr	r0, [sp, #4]
1000c4bc:	4b83      	ldr	r3, [pc, #524]	; (1000c6cc <at_ble_event_get+0x654>)
1000c4be:	4798      	blx	r3
1000c4c0:	e7de      	b.n	1000c480 <at_ble_event_get+0x408>
1000c4c2:	9801      	ldr	r0, [sp, #4]
1000c4c4:	1c31      	adds	r1, r6, #0
1000c4c6:	1c2a      	adds	r2, r5, #0
1000c4c8:	4b81      	ldr	r3, [pc, #516]	; (1000c6d0 <at_ble_event_get+0x658>)
1000c4ca:	e7f8      	b.n	1000c4be <at_ble_event_get+0x446>
1000c4cc:	1c31      	adds	r1, r6, #0
1000c4ce:	9801      	ldr	r0, [sp, #4]
1000c4d0:	1c2a      	adds	r2, r5, #0
1000c4d2:	4b80      	ldr	r3, [pc, #512]	; (1000c6d4 <at_ble_event_get+0x65c>)
1000c4d4:	4798      	blx	r3
1000c4d6:	260d      	movs	r6, #13
1000c4d8:	e0c3      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c4da:	1c31      	adds	r1, r6, #0
1000c4dc:	9801      	ldr	r0, [sp, #4]
1000c4de:	1c2a      	adds	r2, r5, #0
1000c4e0:	4b7d      	ldr	r3, [pc, #500]	; (1000c6d8 <at_ble_event_get+0x660>)
1000c4e2:	4798      	blx	r3
1000c4e4:	260e      	movs	r6, #14
1000c4e6:	e0bc      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c4e8:	9801      	ldr	r0, [sp, #4]
1000c4ea:	1c31      	adds	r1, r6, #0
1000c4ec:	1c2a      	adds	r2, r5, #0
1000c4ee:	4b7b      	ldr	r3, [pc, #492]	; (1000c6dc <at_ble_event_get+0x664>)
1000c4f0:	4798      	blx	r3
1000c4f2:	e084      	b.n	1000c5fe <at_ble_event_get+0x586>
1000c4f4:	1c31      	adds	r1, r6, #0
1000c4f6:	9801      	ldr	r0, [sp, #4]
1000c4f8:	1c2a      	adds	r2, r5, #0
1000c4fa:	4b79      	ldr	r3, [pc, #484]	; (1000c6e0 <at_ble_event_get+0x668>)
1000c4fc:	4798      	blx	r3
1000c4fe:	260b      	movs	r6, #11
1000c500:	e0af      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c502:	1c31      	adds	r1, r6, #0
1000c504:	9801      	ldr	r0, [sp, #4]
1000c506:	1c2a      	adds	r2, r5, #0
1000c508:	4b76      	ldr	r3, [pc, #472]	; (1000c6e4 <at_ble_event_get+0x66c>)
1000c50a:	4798      	blx	r3
1000c50c:	2610      	movs	r6, #16
1000c50e:	e0a8      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c510:	1c30      	adds	r0, r6, #0
1000c512:	1c29      	adds	r1, r5, #0
1000c514:	4b74      	ldr	r3, [pc, #464]	; (1000c6e8 <at_ble_event_get+0x670>)
1000c516:	4798      	blx	r3
1000c518:	2628      	movs	r6, #40	; 0x28
1000c51a:	e0a2      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c51c:	1c30      	adds	r0, r6, #0
1000c51e:	1c29      	adds	r1, r5, #0
1000c520:	4b72      	ldr	r3, [pc, #456]	; (1000c6ec <at_ble_event_get+0x674>)
1000c522:	4798      	blx	r3
1000c524:	2629      	movs	r6, #41	; 0x29
1000c526:	e09c      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c528:	1c30      	adds	r0, r6, #0
1000c52a:	1c29      	adds	r1, r5, #0
1000c52c:	4b70      	ldr	r3, [pc, #448]	; (1000c6f0 <at_ble_event_get+0x678>)
1000c52e:	4798      	blx	r3
1000c530:	2627      	movs	r6, #39	; 0x27
1000c532:	e096      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c534:	1c30      	adds	r0, r6, #0
1000c536:	1c29      	adds	r1, r5, #0
1000c538:	4b6e      	ldr	r3, [pc, #440]	; (1000c6f4 <at_ble_event_get+0x67c>)
1000c53a:	4798      	blx	r3
1000c53c:	262a      	movs	r6, #42	; 0x2a
1000c53e:	e090      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c540:	9801      	ldr	r0, [sp, #4]
1000c542:	1c31      	adds	r1, r6, #0
1000c544:	1c2a      	adds	r2, r5, #0
1000c546:	4b6c      	ldr	r3, [pc, #432]	; (1000c6f8 <at_ble_event_get+0x680>)
1000c548:	e7b9      	b.n	1000c4be <at_ble_event_get+0x446>
1000c54a:	9801      	ldr	r0, [sp, #4]
1000c54c:	1c31      	adds	r1, r6, #0
1000c54e:	1c2a      	adds	r2, r5, #0
1000c550:	4b6a      	ldr	r3, [pc, #424]	; (1000c6fc <at_ble_event_get+0x684>)
1000c552:	e7b4      	b.n	1000c4be <at_ble_event_get+0x446>
1000c554:	1c30      	adds	r0, r6, #0
1000c556:	1c29      	adds	r1, r5, #0
1000c558:	4b69      	ldr	r3, [pc, #420]	; (1000c700 <at_ble_event_get+0x688>)
1000c55a:	4798      	blx	r3
1000c55c:	262b      	movs	r6, #43	; 0x2b
1000c55e:	e080      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c560:	1c30      	adds	r0, r6, #0
1000c562:	1c29      	adds	r1, r5, #0
1000c564:	4b67      	ldr	r3, [pc, #412]	; (1000c704 <at_ble_event_get+0x68c>)
1000c566:	4798      	blx	r3
1000c568:	262c      	movs	r6, #44	; 0x2c
1000c56a:	e07a      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c56c:	1c31      	adds	r1, r6, #0
1000c56e:	9801      	ldr	r0, [sp, #4]
1000c570:	1c2a      	adds	r2, r5, #0
1000c572:	4b65      	ldr	r3, [pc, #404]	; (1000c708 <at_ble_event_get+0x690>)
1000c574:	4798      	blx	r3
1000c576:	2613      	movs	r6, #19
1000c578:	e073      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c57a:	1c31      	adds	r1, r6, #0
1000c57c:	9801      	ldr	r0, [sp, #4]
1000c57e:	1c2a      	adds	r2, r5, #0
1000c580:	4b62      	ldr	r3, [pc, #392]	; (1000c70c <at_ble_event_get+0x694>)
1000c582:	4798      	blx	r3
1000c584:	2614      	movs	r6, #20
1000c586:	e06c      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c588:	1c31      	adds	r1, r6, #0
1000c58a:	9801      	ldr	r0, [sp, #4]
1000c58c:	1c2a      	adds	r2, r5, #0
1000c58e:	4b60      	ldr	r3, [pc, #384]	; (1000c710 <at_ble_event_get+0x698>)
1000c590:	4798      	blx	r3
1000c592:	2615      	movs	r6, #21
1000c594:	e065      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c596:	1c31      	adds	r1, r6, #0
1000c598:	9801      	ldr	r0, [sp, #4]
1000c59a:	1c2a      	adds	r2, r5, #0
1000c59c:	4b5d      	ldr	r3, [pc, #372]	; (1000c714 <at_ble_event_get+0x69c>)
1000c59e:	4798      	blx	r3
1000c5a0:	2616      	movs	r6, #22
1000c5a2:	e05e      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c5a4:	9801      	ldr	r0, [sp, #4]
1000c5a6:	1c31      	adds	r1, r6, #0
1000c5a8:	1c2a      	adds	r2, r5, #0
1000c5aa:	4b5b      	ldr	r3, [pc, #364]	; (1000c718 <at_ble_event_get+0x6a0>)
1000c5ac:	e787      	b.n	1000c4be <at_ble_event_get+0x446>
1000c5ae:	1c31      	adds	r1, r6, #0
1000c5b0:	9801      	ldr	r0, [sp, #4]
1000c5b2:	1c2a      	adds	r2, r5, #0
1000c5b4:	4b58      	ldr	r3, [pc, #352]	; (1000c718 <at_ble_event_get+0x6a0>)
1000c5b6:	4798      	blx	r3
1000c5b8:	88a9      	ldrh	r1, [r5, #4]
1000c5ba:	1c06      	adds	r6, r0, #0
1000c5bc:	4b57      	ldr	r3, [pc, #348]	; (1000c71c <at_ble_event_get+0x6a4>)
1000c5be:	8828      	ldrh	r0, [r5, #0]
1000c5c0:	4798      	blx	r3
1000c5c2:	e04e      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c5c4:	1c31      	adds	r1, r6, #0
1000c5c6:	9801      	ldr	r0, [sp, #4]
1000c5c8:	1c2a      	adds	r2, r5, #0
1000c5ca:	4b55      	ldr	r3, [pc, #340]	; (1000c720 <at_ble_event_get+0x6a8>)
1000c5cc:	4798      	blx	r3
1000c5ce:	2623      	movs	r6, #35	; 0x23
1000c5d0:	e047      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c5d2:	9801      	ldr	r0, [sp, #4]
1000c5d4:	1c31      	adds	r1, r6, #0
1000c5d6:	1c2a      	adds	r2, r5, #0
1000c5d8:	4b52      	ldr	r3, [pc, #328]	; (1000c724 <at_ble_event_get+0x6ac>)
1000c5da:	e770      	b.n	1000c4be <at_ble_event_get+0x446>
1000c5dc:	9b01      	ldr	r3, [sp, #4]
1000c5de:	1c30      	adds	r0, r6, #0
1000c5e0:	0a1f      	lsrs	r7, r3, #8
1000c5e2:	802f      	strh	r7, [r5, #0]
1000c5e4:	1c29      	adds	r1, r5, #0
1000c5e6:	4b50      	ldr	r3, [pc, #320]	; (1000c728 <at_ble_event_get+0x6b0>)
1000c5e8:	e749      	b.n	1000c47e <at_ble_event_get+0x406>
1000c5ea:	9801      	ldr	r0, [sp, #4]
1000c5ec:	1c31      	adds	r1, r6, #0
1000c5ee:	1c2a      	adds	r2, r5, #0
1000c5f0:	4b4e      	ldr	r3, [pc, #312]	; (1000c72c <at_ble_event_get+0x6b4>)
1000c5f2:	e764      	b.n	1000c4be <at_ble_event_get+0x446>
1000c5f4:	1c30      	adds	r0, r6, #0
1000c5f6:	1c29      	adds	r1, r5, #0
1000c5f8:	9a01      	ldr	r2, [sp, #4]
1000c5fa:	4b4d      	ldr	r3, [pc, #308]	; (1000c730 <at_ble_event_get+0x6b8>)
1000c5fc:	4798      	blx	r3
1000c5fe:	263b      	movs	r6, #59	; 0x3b
1000c600:	e02f      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c602:	1c31      	adds	r1, r6, #0
1000c604:	9801      	ldr	r0, [sp, #4]
1000c606:	1c2a      	adds	r2, r5, #0
1000c608:	4b4a      	ldr	r3, [pc, #296]	; (1000c734 <at_ble_event_get+0x6bc>)
1000c60a:	4798      	blx	r3
1000c60c:	2618      	movs	r6, #24
1000c60e:	e028      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c610:	1c31      	adds	r1, r6, #0
1000c612:	9801      	ldr	r0, [sp, #4]
1000c614:	1c2a      	adds	r2, r5, #0
1000c616:	4b48      	ldr	r3, [pc, #288]	; (1000c738 <at_ble_event_get+0x6c0>)
1000c618:	4798      	blx	r3
1000c61a:	2620      	movs	r6, #32
1000c61c:	e021      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c61e:	1c31      	adds	r1, r6, #0
1000c620:	9801      	ldr	r0, [sp, #4]
1000c622:	1c2a      	adds	r2, r5, #0
1000c624:	4b45      	ldr	r3, [pc, #276]	; (1000c73c <at_ble_event_get+0x6c4>)
1000c626:	4798      	blx	r3
1000c628:	2633      	movs	r6, #51	; 0x33
1000c62a:	e01a      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c62c:	1c31      	adds	r1, r6, #0
1000c62e:	9801      	ldr	r0, [sp, #4]
1000c630:	1c2a      	adds	r2, r5, #0
1000c632:	4b43      	ldr	r3, [pc, #268]	; (1000c740 <at_ble_event_get+0x6c8>)
1000c634:	4798      	blx	r3
1000c636:	2630      	movs	r6, #48	; 0x30
1000c638:	e013      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c63a:	1c31      	adds	r1, r6, #0
1000c63c:	9801      	ldr	r0, [sp, #4]
1000c63e:	1c2a      	adds	r2, r5, #0
1000c640:	4b40      	ldr	r3, [pc, #256]	; (1000c744 <at_ble_event_get+0x6cc>)
1000c642:	4798      	blx	r3
1000c644:	2634      	movs	r6, #52	; 0x34
1000c646:	e00c      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c648:	1c31      	adds	r1, r6, #0
1000c64a:	9801      	ldr	r0, [sp, #4]
1000c64c:	1c2a      	adds	r2, r5, #0
1000c64e:	4b3e      	ldr	r3, [pc, #248]	; (1000c748 <at_ble_event_get+0x6d0>)
1000c650:	4798      	blx	r3
1000c652:	2635      	movs	r6, #53	; 0x35
1000c654:	e005      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c656:	1c31      	adds	r1, r6, #0
1000c658:	9801      	ldr	r0, [sp, #4]
1000c65a:	1c2a      	adds	r2, r5, #0
1000c65c:	4b3b      	ldr	r3, [pc, #236]	; (1000c74c <at_ble_event_get+0x6d4>)
1000c65e:	4798      	blx	r3
1000c660:	2632      	movs	r6, #50	; 0x32
1000c662:	9b03      	ldr	r3, [sp, #12]
1000c664:	701e      	strb	r6, [r3, #0]
1000c666:	2300      	movs	r3, #0
1000c668:	9302      	str	r3, [sp, #8]
1000c66a:	e57a      	b.n	1000c162 <at_ble_event_get+0xea>
1000c66c:	23d0      	movs	r3, #208	; 0xd0
1000c66e:	e7fb      	b.n	1000c668 <at_ble_event_get+0x5f0>
1000c670:	9b01      	ldr	r3, [sp, #4]
1000c672:	9e02      	ldr	r6, [sp, #8]
1000c674:	2bbb      	cmp	r3, #187	; 0xbb
1000c676:	d000      	beq.n	1000c67a <at_ble_event_get+0x602>
1000c678:	e6e6      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c67a:	e7f2      	b.n	1000c662 <at_ble_event_get+0x5ea>
1000c67c:	9b02      	ldr	r3, [sp, #8]
1000c67e:	2b00      	cmp	r3, #0
1000c680:	d000      	beq.n	1000c684 <at_ble_event_get+0x60c>
1000c682:	e56e      	b.n	1000c162 <at_ble_event_get+0xea>
1000c684:	e6e0      	b.n	1000c448 <at_ble_event_get+0x3d0>
1000c686:	9802      	ldr	r0, [sp, #8]
1000c688:	b007      	add	sp, #28
1000c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c68c:	00000e22 	.word	0x00000e22
1000c690:	00000e25 	.word	0x00000e25
1000c694:	00001b05 	.word	0x00001b05
1000c698:	00001b01 	.word	0x00001b01
1000c69c:	00001b03 	.word	0x00001b03
1000c6a0:	00001b06 	.word	0x00001b06
1000c6a4:	00001b08 	.word	0x00001b08
1000c6a8:	1000e991 	.word	0x1000e991
1000c6ac:	1000e975 	.word	0x1000e975
1000c6b0:	1000ec11 	.word	0x1000ec11
1000c6b4:	1000ed01 	.word	0x1000ed01
1000c6b8:	1000ed25 	.word	0x1000ed25
1000c6bc:	1000dd09 	.word	0x1000dd09
1000c6c0:	1000e589 	.word	0x1000e589
1000c6c4:	1000e605 	.word	0x1000e605
1000c6c8:	1000dfc1 	.word	0x1000dfc1
1000c6cc:	1000e05d 	.word	0x1000e05d
1000c6d0:	1000e135 	.word	0x1000e135
1000c6d4:	1000e3bd 	.word	0x1000e3bd
1000c6d8:	1000e45d 	.word	0x1000e45d
1000c6dc:	1000e515 	.word	0x1000e515
1000c6e0:	1000e53d 	.word	0x1000e53d
1000c6e4:	1000e553 	.word	0x1000e553
1000c6e8:	1000e61d 	.word	0x1000e61d
1000c6ec:	1000e64b 	.word	0x1000e64b
1000c6f0:	1000e661 	.word	0x1000e661
1000c6f4:	1000e68b 	.word	0x1000e68b
1000c6f8:	1000e4b9 	.word	0x1000e4b9
1000c6fc:	1000e4e3 	.word	0x1000e4e3
1000c700:	1000d749 	.word	0x1000d749
1000c704:	1000d775 	.word	0x1000d775
1000c708:	1000f05d 	.word	0x1000f05d
1000c70c:	1000f099 	.word	0x1000f099
1000c710:	1000f0e1 	.word	0x1000f0e1
1000c714:	1000f125 	.word	0x1000f125
1000c718:	1000f159 	.word	0x1000f159
1000c71c:	1000f01d 	.word	0x1000f01d
1000c720:	1000f225 	.word	0x1000f225
1000c724:	1000f1ad 	.word	0x1000f1ad
1000c728:	1000d62d 	.word	0x1000d62d
1000c72c:	1000d699 	.word	0x1000d699
1000c730:	1000d65d 	.word	0x1000d65d
1000c734:	1000f235 	.word	0x1000f235
1000c738:	1000f275 	.word	0x1000f275
1000c73c:	1000f53d 	.word	0x1000f53d
1000c740:	1000f547 	.word	0x1000f547
1000c744:	1000f54d 	.word	0x1000f54d
1000c748:	1000f553 	.word	0x1000f553
1000c74c:	1000f55f 	.word	0x1000f55f

1000c750 <internal_event_flush>:
1000c750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c752:	490e      	ldr	r1, [pc, #56]	; (1000c78c <internal_event_flush+0x3c>)
1000c754:	2400      	movs	r4, #0
1000c756:	680b      	ldr	r3, [r1, #0]
1000c758:	1c0f      	adds	r7, r1, #0
1000c75a:	1c1e      	adds	r6, r3, #0
1000c75c:	4a0c      	ldr	r2, [pc, #48]	; (1000c790 <internal_event_flush+0x40>)
1000c75e:	6815      	ldr	r5, [r2, #0]
1000c760:	9201      	str	r2, [sp, #4]
1000c762:	2b00      	cmp	r3, #0
1000c764:	d00e      	beq.n	1000c784 <internal_event_flush+0x34>
1000c766:	889a      	ldrh	r2, [r3, #4]
1000c768:	6819      	ldr	r1, [r3, #0]
1000c76a:	4282      	cmp	r2, r0
1000c76c:	d107      	bne.n	1000c77e <internal_event_flush+0x2e>
1000c76e:	2c00      	cmp	r4, #0
1000c770:	d001      	beq.n	1000c776 <internal_event_flush+0x26>
1000c772:	6021      	str	r1, [r4, #0]
1000c774:	e000      	b.n	1000c778 <internal_event_flush+0x28>
1000c776:	1c0e      	adds	r6, r1, #0
1000c778:	601d      	str	r5, [r3, #0]
1000c77a:	1c1d      	adds	r5, r3, #0
1000c77c:	1c23      	adds	r3, r4, #0
1000c77e:	1c1c      	adds	r4, r3, #0
1000c780:	1c0b      	adds	r3, r1, #0
1000c782:	e7ee      	b.n	1000c762 <internal_event_flush+0x12>
1000c784:	9b01      	ldr	r3, [sp, #4]
1000c786:	603e      	str	r6, [r7, #0]
1000c788:	601d      	str	r5, [r3, #0]
1000c78a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c78c:	10016d7c 	.word	0x10016d7c
1000c790:	10016d80 	.word	0x10016d80

1000c794 <internal_conn_flush>:
1000c794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c796:	4a12      	ldr	r2, [pc, #72]	; (1000c7e0 <internal_conn_flush+0x4c>)
1000c798:	9000      	str	r0, [sp, #0]
1000c79a:	6813      	ldr	r3, [r2, #0]
1000c79c:	4811      	ldr	r0, [pc, #68]	; (1000c7e4 <internal_conn_flush+0x50>)
1000c79e:	1c1f      	adds	r7, r3, #0
1000c7a0:	2100      	movs	r1, #0
1000c7a2:	4684      	mov	ip, r0
1000c7a4:	6804      	ldr	r4, [r0, #0]
1000c7a6:	9201      	str	r2, [sp, #4]
1000c7a8:	2b00      	cmp	r3, #0
1000c7aa:	d014      	beq.n	1000c7d6 <internal_conn_flush+0x42>
1000c7ac:	88d8      	ldrh	r0, [r3, #6]
1000c7ae:	9a00      	ldr	r2, [sp, #0]
1000c7b0:	681d      	ldr	r5, [r3, #0]
1000c7b2:	0a06      	lsrs	r6, r0, #8
1000c7b4:	4296      	cmp	r6, r2
1000c7b6:	d10b      	bne.n	1000c7d0 <internal_conn_flush+0x3c>
1000c7b8:	26fd      	movs	r6, #253	; 0xfd
1000c7ba:	4006      	ands	r6, r0
1000c7bc:	2e0c      	cmp	r6, #12
1000c7be:	d107      	bne.n	1000c7d0 <internal_conn_flush+0x3c>
1000c7c0:	2900      	cmp	r1, #0
1000c7c2:	d001      	beq.n	1000c7c8 <internal_conn_flush+0x34>
1000c7c4:	600d      	str	r5, [r1, #0]
1000c7c6:	e000      	b.n	1000c7ca <internal_conn_flush+0x36>
1000c7c8:	1c2f      	adds	r7, r5, #0
1000c7ca:	601c      	str	r4, [r3, #0]
1000c7cc:	1c1c      	adds	r4, r3, #0
1000c7ce:	1c0b      	adds	r3, r1, #0
1000c7d0:	1c19      	adds	r1, r3, #0
1000c7d2:	1c2b      	adds	r3, r5, #0
1000c7d4:	e7e8      	b.n	1000c7a8 <internal_conn_flush+0x14>
1000c7d6:	9b01      	ldr	r3, [sp, #4]
1000c7d8:	601f      	str	r7, [r3, #0]
1000c7da:	4663      	mov	r3, ip
1000c7dc:	601c      	str	r4, [r3, #0]
1000c7de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c7e0:	10016d7c 	.word	0x10016d7c
1000c7e4:	10016d80 	.word	0x10016d80

1000c7e8 <at_ble_device_name_set>:
1000c7e8:	b530      	push	{r4, r5, lr}
1000c7ea:	23cf      	movs	r3, #207	; 0xcf
1000c7ec:	2800      	cmp	r0, #0
1000c7ee:	d010      	beq.n	1000c812 <at_ble_device_name_set+0x2a>
1000c7f0:	1e4a      	subs	r2, r1, #1
1000c7f2:	2a1f      	cmp	r2, #31
1000c7f4:	d80d      	bhi.n	1000c812 <at_ble_device_name_set+0x2a>
1000c7f6:	4a08      	ldr	r2, [pc, #32]	; (1000c818 <at_ble_device_name_set+0x30>)
1000c7f8:	1c13      	adds	r3, r2, #0
1000c7fa:	33aa      	adds	r3, #170	; 0xaa
1000c7fc:	8019      	strh	r1, [r3, #0]
1000c7fe:	2300      	movs	r3, #0
1000c800:	1c1c      	adds	r4, r3, #0
1000c802:	5cc5      	ldrb	r5, [r0, r3]
1000c804:	34ac      	adds	r4, #172	; 0xac
1000c806:	3301      	adds	r3, #1
1000c808:	5515      	strb	r5, [r2, r4]
1000c80a:	b2dc      	uxtb	r4, r3
1000c80c:	428c      	cmp	r4, r1
1000c80e:	d3f7      	bcc.n	1000c800 <at_ble_device_name_set+0x18>
1000c810:	2300      	movs	r3, #0
1000c812:	1c18      	adds	r0, r3, #0
1000c814:	bd30      	pop	{r4, r5, pc}
1000c816:	46c0      	nop			; (mov r8, r8)
1000c818:	10018046 	.word	0x10018046

1000c81c <at_ble_addr_get>:
1000c81c:	b510      	push	{r4, lr}
1000c81e:	1c04      	adds	r4, r0, #0
1000c820:	20cf      	movs	r0, #207	; 0xcf
1000c822:	2c00      	cmp	r4, #0
1000c824:	d006      	beq.n	1000c834 <at_ble_addr_get+0x18>
1000c826:	4b04      	ldr	r3, [pc, #16]	; (1000c838 <at_ble_addr_get+0x1c>)
1000c828:	38ce      	subs	r0, #206	; 0xce
1000c82a:	1c21      	adds	r1, r4, #0
1000c82c:	4798      	blx	r3
1000c82e:	4b03      	ldr	r3, [pc, #12]	; (1000c83c <at_ble_addr_get+0x20>)
1000c830:	791b      	ldrb	r3, [r3, #4]
1000c832:	7023      	strb	r3, [r4, #0]
1000c834:	bd10      	pop	{r4, pc}
1000c836:	46c0      	nop			; (mov r8, r8)
1000c838:	1000e825 	.word	0x1000e825
1000c83c:	10018046 	.word	0x10018046

1000c840 <at_ble_set_dev_config>:
1000c840:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c842:	7906      	ldrb	r6, [r0, #4]
1000c844:	b089      	sub	sp, #36	; 0x24
1000c846:	25cf      	movs	r5, #207	; 0xcf
1000c848:	2e03      	cmp	r6, #3
1000c84a:	d838      	bhi.n	1000c8be <at_ble_set_dev_config+0x7e>
1000c84c:	7803      	ldrb	r3, [r0, #0]
1000c84e:	3511      	adds	r5, #17
1000c850:	2b0f      	cmp	r3, #15
1000c852:	d834      	bhi.n	1000c8be <at_ble_set_dev_config+0x7e>
1000c854:	2380      	movs	r3, #128	; 0x80
1000c856:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c858:	3d11      	subs	r5, #17
1000c85a:	009b      	lsls	r3, r3, #2
1000c85c:	429f      	cmp	r7, r3
1000c85e:	d82e      	bhi.n	1000c8be <at_ble_set_dev_config+0x7e>
1000c860:	7fc5      	ldrb	r5, [r0, #31]
1000c862:	7f83      	ldrb	r3, [r0, #30]
1000c864:	01ad      	lsls	r5, r5, #6
1000c866:	015b      	lsls	r3, r3, #5
1000c868:	431d      	orrs	r5, r3
1000c86a:	7ec3      	ldrb	r3, [r0, #27]
1000c86c:	431d      	orrs	r5, r3
1000c86e:	7f43      	ldrb	r3, [r0, #29]
1000c870:	011b      	lsls	r3, r3, #4
1000c872:	431d      	orrs	r5, r3
1000c874:	7f03      	ldrb	r3, [r0, #28]
1000c876:	009b      	lsls	r3, r3, #2
1000c878:	431d      	orrs	r5, r3
1000c87a:	4b12      	ldr	r3, [pc, #72]	; (1000c8c4 <at_ble_set_dev_config+0x84>)
1000c87c:	b2ed      	uxtb	r5, r5
1000c87e:	711e      	strb	r6, [r3, #4]
1000c880:	7903      	ldrb	r3, [r0, #4]
1000c882:	3b02      	subs	r3, #2
1000c884:	2b01      	cmp	r3, #1
1000c886:	d801      	bhi.n	1000c88c <at_ble_set_dev_config+0x4c>
1000c888:	2302      	movs	r3, #2
1000c88a:	7103      	strb	r3, [r0, #4]
1000c88c:	1c04      	adds	r4, r0, #0
1000c88e:	1c23      	adds	r3, r4, #0
1000c890:	330b      	adds	r3, #11
1000c892:	8861      	ldrh	r1, [r4, #2]
1000c894:	9307      	str	r3, [sp, #28]
1000c896:	7923      	ldrb	r3, [r4, #4]
1000c898:	7800      	ldrb	r0, [r0, #0]
1000c89a:	9300      	str	r3, [sp, #0]
1000c89c:	9501      	str	r5, [sp, #4]
1000c89e:	8c25      	ldrh	r5, [r4, #32]
1000c8a0:	1d62      	adds	r2, r4, #5
1000c8a2:	9502      	str	r5, [sp, #8]
1000c8a4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c8a6:	9b07      	ldr	r3, [sp, #28]
1000c8a8:	9503      	str	r5, [sp, #12]
1000c8aa:	9704      	str	r7, [sp, #16]
1000c8ac:	4d06      	ldr	r5, [pc, #24]	; (1000c8c8 <at_ble_set_dev_config+0x88>)
1000c8ae:	47a8      	blx	r5
1000c8b0:	7126      	strb	r6, [r4, #4]
1000c8b2:	1c05      	adds	r5, r0, #0
1000c8b4:	1c21      	adds	r1, r4, #0
1000c8b6:	4803      	ldr	r0, [pc, #12]	; (1000c8c4 <at_ble_set_dev_config+0x84>)
1000c8b8:	2226      	movs	r2, #38	; 0x26
1000c8ba:	4b04      	ldr	r3, [pc, #16]	; (1000c8cc <at_ble_set_dev_config+0x8c>)
1000c8bc:	4798      	blx	r3
1000c8be:	1c28      	adds	r0, r5, #0
1000c8c0:	b009      	add	sp, #36	; 0x24
1000c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c8c4:	10018046 	.word	0x10018046
1000c8c8:	1000e71d 	.word	0x1000e71d
1000c8cc:	1001310d 	.word	0x1001310d

1000c8d0 <at_ble_init>:
1000c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8d2:	b087      	sub	sp, #28
1000c8d4:	af03      	add	r7, sp, #12
1000c8d6:	4954      	ldr	r1, [pc, #336]	; (1000ca28 <at_ble_init+0x158>)
1000c8d8:	220b      	movs	r2, #11
1000c8da:	4b54      	ldr	r3, [pc, #336]	; (1000ca2c <at_ble_init+0x15c>)
1000c8dc:	1c04      	adds	r4, r0, #0
1000c8de:	1c38      	adds	r0, r7, #0
1000c8e0:	4798      	blx	r3
1000c8e2:	2205      	movs	r2, #5
1000c8e4:	4b52      	ldr	r3, [pc, #328]	; (1000ca30 <at_ble_init+0x160>)
1000c8e6:	2640      	movs	r6, #64	; 0x40
1000c8e8:	801a      	strh	r2, [r3, #0]
1000c8ea:	2300      	movs	r3, #0
1000c8ec:	4a51      	ldr	r2, [pc, #324]	; (1000ca34 <at_ble_init+0x164>)
1000c8ee:	6013      	str	r3, [r2, #0]
1000c8f0:	4a51      	ldr	r2, [pc, #324]	; (1000ca38 <at_ble_init+0x168>)
1000c8f2:	7013      	strb	r3, [r2, #0]
1000c8f4:	4a51      	ldr	r2, [pc, #324]	; (1000ca3c <at_ble_init+0x16c>)
1000c8f6:	7013      	strb	r3, [r2, #0]
1000c8f8:	4b51      	ldr	r3, [pc, #324]	; (1000ca40 <at_ble_init+0x170>)
1000c8fa:	4798      	blx	r3
1000c8fc:	4b51      	ldr	r3, [pc, #324]	; (1000ca44 <at_ble_init+0x174>)
1000c8fe:	4798      	blx	r3
1000c900:	4b51      	ldr	r3, [pc, #324]	; (1000ca48 <at_ble_init+0x178>)
1000c902:	4798      	blx	r3
1000c904:	4b51      	ldr	r3, [pc, #324]	; (1000ca4c <at_ble_init+0x17c>)
1000c906:	4798      	blx	r3
1000c908:	2c00      	cmp	r4, #0
1000c90a:	d100      	bne.n	1000c90e <at_ble_init+0x3e>
1000c90c:	e089      	b.n	1000ca22 <at_ble_init+0x152>
1000c90e:	68a3      	ldr	r3, [r4, #8]
1000c910:	2b00      	cmp	r3, #0
1000c912:	d100      	bne.n	1000c916 <at_ble_init+0x46>
1000c914:	e085      	b.n	1000ca22 <at_ble_init+0x152>
1000c916:	6923      	ldr	r3, [r4, #16]
1000c918:	2b00      	cmp	r3, #0
1000c91a:	d100      	bne.n	1000c91e <at_ble_init+0x4e>
1000c91c:	e081      	b.n	1000ca22 <at_ble_init+0x152>
1000c91e:	6820      	ldr	r0, [r4, #0]
1000c920:	2800      	cmp	r0, #0
1000c922:	d102      	bne.n	1000c92a <at_ble_init+0x5a>
1000c924:	6863      	ldr	r3, [r4, #4]
1000c926:	2b00      	cmp	r3, #0
1000c928:	d17b      	bne.n	1000ca22 <at_ble_init+0x152>
1000c92a:	4b49      	ldr	r3, [pc, #292]	; (1000ca50 <at_ble_init+0x180>)
1000c92c:	6861      	ldr	r1, [r4, #4]
1000c92e:	4798      	blx	r3
1000c930:	4b48      	ldr	r3, [pc, #288]	; (1000ca54 <at_ble_init+0x184>)
1000c932:	4798      	blx	r3
1000c934:	2801      	cmp	r0, #1
1000c936:	d901      	bls.n	1000c93c <at_ble_init+0x6c>
1000c938:	26e2      	movs	r6, #226	; 0xe2
1000c93a:	e072      	b.n	1000ca22 <at_ble_init+0x152>
1000c93c:	4846      	ldr	r0, [pc, #280]	; (1000ca58 <at_ble_init+0x188>)
1000c93e:	4b47      	ldr	r3, [pc, #284]	; (1000ca5c <at_ble_init+0x18c>)
1000c940:	4798      	blx	r3
1000c942:	2800      	cmp	r0, #0
1000c944:	d1f8      	bne.n	1000c938 <at_ble_init+0x68>
1000c946:	1c20      	adds	r0, r4, #0
1000c948:	4b45      	ldr	r3, [pc, #276]	; (1000ca60 <at_ble_init+0x190>)
1000c94a:	4798      	blx	r3
1000c94c:	68e0      	ldr	r0, [r4, #12]
1000c94e:	68a1      	ldr	r1, [r4, #8]
1000c950:	4b44      	ldr	r3, [pc, #272]	; (1000ca64 <at_ble_init+0x194>)
1000c952:	4798      	blx	r3
1000c954:	466b      	mov	r3, sp
1000c956:	2201      	movs	r2, #1
1000c958:	1cdc      	adds	r4, r3, #3
1000c95a:	1c20      	adds	r0, r4, #0
1000c95c:	a901      	add	r1, sp, #4
1000c95e:	4252      	negs	r2, r2
1000c960:	4b41      	ldr	r3, [pc, #260]	; (1000ca68 <at_ble_init+0x198>)
1000c962:	4798      	blx	r3
1000c964:	2800      	cmp	r0, #0
1000c966:	d102      	bne.n	1000c96e <at_ble_init+0x9e>
1000c968:	7823      	ldrb	r3, [r4, #0]
1000c96a:	2b39      	cmp	r3, #57	; 0x39
1000c96c:	d1f2      	bne.n	1000c954 <at_ble_init+0x84>
1000c96e:	4b3f      	ldr	r3, [pc, #252]	; (1000ca6c <at_ble_init+0x19c>)
1000c970:	4798      	blx	r3
1000c972:	1e06      	subs	r6, r0, #0
1000c974:	d155      	bne.n	1000ca22 <at_ble_init+0x152>
1000c976:	1c03      	adds	r3, r0, #0
1000c978:	2101      	movs	r1, #1
1000c97a:	4a3d      	ldr	r2, [pc, #244]	; (1000ca70 <at_ble_init+0x1a0>)
1000c97c:	4249      	negs	r1, r1
1000c97e:	189a      	adds	r2, r3, r2
1000c980:	3312      	adds	r3, #18
1000c982:	8151      	strh	r1, [r2, #10]
1000c984:	2b90      	cmp	r3, #144	; 0x90
1000c986:	d1f7      	bne.n	1000c978 <at_ble_init+0xa8>
1000c988:	4c3a      	ldr	r4, [pc, #232]	; (1000ca74 <at_ble_init+0x1a4>)
1000c98a:	3b81      	subs	r3, #129	; 0x81
1000c98c:	7023      	strb	r3, [r4, #0]
1000c98e:	4b3a      	ldr	r3, [pc, #232]	; (1000ca78 <at_ble_init+0x1a8>)
1000c990:	4a3a      	ldr	r2, [pc, #232]	; (1000ca7c <at_ble_init+0x1ac>)
1000c992:	8063      	strh	r3, [r4, #2]
1000c994:	2300      	movs	r3, #0
1000c996:	7123      	strb	r3, [r4, #4]
1000c998:	3301      	adds	r3, #1
1000c99a:	1e58      	subs	r0, r3, #1
1000c99c:	0119      	lsls	r1, r3, #4
1000c99e:	4301      	orrs	r1, r0
1000c9a0:	3302      	adds	r3, #2
1000c9a2:	7011      	strb	r1, [r2, #0]
1000c9a4:	3201      	adds	r2, #1
1000c9a6:	2b21      	cmp	r3, #33	; 0x21
1000c9a8:	d1f7      	bne.n	1000c99a <at_ble_init+0xca>
1000c9aa:	33e0      	adds	r3, #224	; 0xe0
1000c9ac:	33ff      	adds	r3, #255	; 0xff
1000c9ae:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c9b0:	1c23      	adds	r3, r4, #0
1000c9b2:	2500      	movs	r5, #0
1000c9b4:	3373      	adds	r3, #115	; 0x73
1000c9b6:	701d      	strb	r5, [r3, #0]
1000c9b8:	1c23      	adds	r3, r4, #0
1000c9ba:	3372      	adds	r3, #114	; 0x72
1000c9bc:	701d      	strb	r5, [r3, #0]
1000c9be:	1c23      	adds	r3, r4, #0
1000c9c0:	3376      	adds	r3, #118	; 0x76
1000c9c2:	701d      	strb	r5, [r3, #0]
1000c9c4:	1c23      	adds	r3, r4, #0
1000c9c6:	33cc      	adds	r3, #204	; 0xcc
1000c9c8:	801d      	strh	r5, [r3, #0]
1000c9ca:	1c22      	adds	r2, r4, #0
1000c9cc:	23a0      	movs	r3, #160	; 0xa0
1000c9ce:	32d0      	adds	r2, #208	; 0xd0
1000c9d0:	005b      	lsls	r3, r3, #1
1000c9d2:	8013      	strh	r3, [r2, #0]
1000c9d4:	1c22      	adds	r2, r4, #0
1000c9d6:	32ce      	adds	r2, #206	; 0xce
1000c9d8:	8013      	strh	r3, [r2, #0]
1000c9da:	1c23      	adds	r3, r4, #0
1000c9dc:	33d2      	adds	r3, #210	; 0xd2
1000c9de:	801d      	strh	r5, [r3, #0]
1000c9e0:	22fa      	movs	r2, #250	; 0xfa
1000c9e2:	1c23      	adds	r3, r4, #0
1000c9e4:	0052      	lsls	r2, r2, #1
1000c9e6:	33d4      	adds	r3, #212	; 0xd4
1000c9e8:	801a      	strh	r2, [r3, #0]
1000c9ea:	1c23      	adds	r3, r4, #0
1000c9ec:	33d6      	adds	r3, #214	; 0xd6
1000c9ee:	701d      	strb	r5, [r3, #0]
1000c9f0:	1c20      	adds	r0, r4, #0
1000c9f2:	4b23      	ldr	r3, [pc, #140]	; (1000ca80 <at_ble_init+0x1b0>)
1000c9f4:	76e5      	strb	r5, [r4, #27]
1000c9f6:	7725      	strb	r5, [r4, #28]
1000c9f8:	7765      	strb	r5, [r4, #29]
1000c9fa:	77a5      	strb	r5, [r4, #30]
1000c9fc:	77e5      	strb	r5, [r4, #31]
1000c9fe:	8425      	strh	r5, [r4, #32]
1000ca00:	8465      	strh	r5, [r4, #34]	; 0x22
1000ca02:	4798      	blx	r3
1000ca04:	1c23      	adds	r3, r4, #0
1000ca06:	2207      	movs	r2, #7
1000ca08:	3374      	adds	r3, #116	; 0x74
1000ca0a:	701a      	strb	r2, [r3, #0]
1000ca0c:	1c23      	adds	r3, r4, #0
1000ca0e:	3204      	adds	r2, #4
1000ca10:	33aa      	adds	r3, #170	; 0xaa
1000ca12:	801a      	strh	r2, [r3, #0]
1000ca14:	1c2b      	adds	r3, r5, #0
1000ca16:	5d7a      	ldrb	r2, [r7, r5]
1000ca18:	33ac      	adds	r3, #172	; 0xac
1000ca1a:	3501      	adds	r5, #1
1000ca1c:	54e2      	strb	r2, [r4, r3]
1000ca1e:	2d0b      	cmp	r5, #11
1000ca20:	d1f8      	bne.n	1000ca14 <at_ble_init+0x144>
1000ca22:	1c30      	adds	r0, r6, #0
1000ca24:	b007      	add	sp, #28
1000ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca28:	100150fc 	.word	0x100150fc
1000ca2c:	1001310d 	.word	0x1001310d
1000ca30:	10017fb4 	.word	0x10017fb4
1000ca34:	10016e2c 	.word	0x10016e2c
1000ca38:	10016d8c 	.word	0x10016d8c
1000ca3c:	100152f4 	.word	0x100152f4
1000ca40:	1000f285 	.word	0x1000f285
1000ca44:	1000cd35 	.word	0x1000cd35
1000ca48:	1000d489 	.word	0x1000d489
1000ca4c:	1000d73d 	.word	0x1000d73d
1000ca50:	1000d4c5 	.word	0x1000d4c5
1000ca54:	1000b159 	.word	0x1000b159
1000ca58:	1000da3d 	.word	0x1000da3d
1000ca5c:	1000b39d 	.word	0x1000b39d
1000ca60:	1000dae5 	.word	0x1000dae5
1000ca64:	1000bfbd 	.word	0x1000bfbd
1000ca68:	1000c079 	.word	0x1000c079
1000ca6c:	1000e6ad 	.word	0x1000e6ad
1000ca70:	10017fb6 	.word	0x10017fb6
1000ca74:	10018046 	.word	0x10018046
1000ca78:	00003a98 	.word	0x00003a98
1000ca7c:	10018051 	.word	0x10018051
1000ca80:	1000c841 	.word	0x1000c841

1000ca84 <at_ble_addr_set>:
1000ca84:	b538      	push	{r3, r4, r5, lr}
1000ca86:	1c45      	adds	r5, r0, #1
1000ca88:	1c03      	adds	r3, r0, #0
1000ca8a:	20cf      	movs	r0, #207	; 0xcf
1000ca8c:	2d00      	cmp	r5, #0
1000ca8e:	d018      	beq.n	1000cac2 <at_ble_addr_set+0x3e>
1000ca90:	781a      	ldrb	r2, [r3, #0]
1000ca92:	2a03      	cmp	r2, #3
1000ca94:	d815      	bhi.n	1000cac2 <at_ble_addr_set+0x3e>
1000ca96:	2a01      	cmp	r2, #1
1000ca98:	d102      	bne.n	1000caa0 <at_ble_addr_set+0x1c>
1000ca9a:	785a      	ldrb	r2, [r3, #1]
1000ca9c:	2a00      	cmp	r2, #0
1000ca9e:	d010      	beq.n	1000cac2 <at_ble_addr_set+0x3e>
1000caa0:	1c1c      	adds	r4, r3, #0
1000caa2:	1c29      	adds	r1, r5, #0
1000caa4:	2206      	movs	r2, #6
1000caa6:	4b07      	ldr	r3, [pc, #28]	; (1000cac4 <at_ble_addr_set+0x40>)
1000caa8:	4807      	ldr	r0, [pc, #28]	; (1000cac8 <at_ble_addr_set+0x44>)
1000caaa:	4798      	blx	r3
1000caac:	7823      	ldrb	r3, [r4, #0]
1000caae:	4807      	ldr	r0, [pc, #28]	; (1000cacc <at_ble_addr_set+0x48>)
1000cab0:	7103      	strb	r3, [r0, #4]
1000cab2:	4b07      	ldr	r3, [pc, #28]	; (1000cad0 <at_ble_addr_set+0x4c>)
1000cab4:	4798      	blx	r3
1000cab6:	7823      	ldrb	r3, [r4, #0]
1000cab8:	2b00      	cmp	r3, #0
1000caba:	d102      	bne.n	1000cac2 <at_ble_addr_set+0x3e>
1000cabc:	1c28      	adds	r0, r5, #0
1000cabe:	4b05      	ldr	r3, [pc, #20]	; (1000cad4 <at_ble_addr_set+0x50>)
1000cac0:	4798      	blx	r3
1000cac2:	bd38      	pop	{r3, r4, r5, pc}
1000cac4:	1001310d 	.word	0x1001310d
1000cac8:	1001804b 	.word	0x1001804b
1000cacc:	10018046 	.word	0x10018046
1000cad0:	1000c841 	.word	0x1000c841
1000cad4:	1000db69 	.word	0x1000db69

1000cad8 <at_ble_adv_data_set>:
1000cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cada:	4684      	mov	ip, r0
1000cadc:	1c0f      	adds	r7, r1, #0
1000cade:	1c16      	adds	r6, r2, #0
1000cae0:	1c1c      	adds	r4, r3, #0
1000cae2:	2800      	cmp	r0, #0
1000cae4:	d102      	bne.n	1000caec <at_ble_adv_data_set+0x14>
1000cae6:	20e2      	movs	r0, #226	; 0xe2
1000cae8:	2a00      	cmp	r2, #0
1000caea:	d02b      	beq.n	1000cb44 <at_ble_adv_data_set+0x6c>
1000caec:	20cf      	movs	r0, #207	; 0xcf
1000caee:	2f1f      	cmp	r7, #31
1000caf0:	d828      	bhi.n	1000cb44 <at_ble_adv_data_set+0x6c>
1000caf2:	2c1f      	cmp	r4, #31
1000caf4:	d826      	bhi.n	1000cb44 <at_ble_adv_data_set+0x6c>
1000caf6:	4663      	mov	r3, ip
1000caf8:	2b00      	cmp	r3, #0
1000cafa:	d00e      	beq.n	1000cb1a <at_ble_adv_data_set+0x42>
1000cafc:	4812      	ldr	r0, [pc, #72]	; (1000cb48 <at_ble_adv_data_set+0x70>)
1000cafe:	4d13      	ldr	r5, [pc, #76]	; (1000cb4c <at_ble_adv_data_set+0x74>)
1000cb00:	2f00      	cmp	r7, #0
1000cb02:	d104      	bne.n	1000cb0e <at_ble_adv_data_set+0x36>
1000cb04:	1c39      	adds	r1, r7, #0
1000cb06:	221f      	movs	r2, #31
1000cb08:	4b11      	ldr	r3, [pc, #68]	; (1000cb50 <at_ble_adv_data_set+0x78>)
1000cb0a:	4798      	blx	r3
1000cb0c:	e003      	b.n	1000cb16 <at_ble_adv_data_set+0x3e>
1000cb0e:	4661      	mov	r1, ip
1000cb10:	1c3a      	adds	r2, r7, #0
1000cb12:	4b10      	ldr	r3, [pc, #64]	; (1000cb54 <at_ble_adv_data_set+0x7c>)
1000cb14:	4798      	blx	r3
1000cb16:	3572      	adds	r5, #114	; 0x72
1000cb18:	702f      	strb	r7, [r5, #0]
1000cb1a:	1e30      	subs	r0, r6, #0
1000cb1c:	d012      	beq.n	1000cb44 <at_ble_adv_data_set+0x6c>
1000cb1e:	4d0b      	ldr	r5, [pc, #44]	; (1000cb4c <at_ble_adv_data_set+0x74>)
1000cb20:	480d      	ldr	r0, [pc, #52]	; (1000cb58 <at_ble_adv_data_set+0x80>)
1000cb22:	2c00      	cmp	r4, #0
1000cb24:	d107      	bne.n	1000cb36 <at_ble_adv_data_set+0x5e>
1000cb26:	1c21      	adds	r1, r4, #0
1000cb28:	221f      	movs	r2, #31
1000cb2a:	4b09      	ldr	r3, [pc, #36]	; (1000cb50 <at_ble_adv_data_set+0x78>)
1000cb2c:	3573      	adds	r5, #115	; 0x73
1000cb2e:	4798      	blx	r3
1000cb30:	702c      	strb	r4, [r5, #0]
1000cb32:	1c20      	adds	r0, r4, #0
1000cb34:	e006      	b.n	1000cb44 <at_ble_adv_data_set+0x6c>
1000cb36:	1c31      	adds	r1, r6, #0
1000cb38:	1c22      	adds	r2, r4, #0
1000cb3a:	4b06      	ldr	r3, [pc, #24]	; (1000cb54 <at_ble_adv_data_set+0x7c>)
1000cb3c:	4798      	blx	r3
1000cb3e:	2000      	movs	r0, #0
1000cb40:	3573      	adds	r5, #115	; 0x73
1000cb42:	702c      	strb	r4, [r5, #0]
1000cb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cb46:	46c0      	nop			; (mov r8, r8)
1000cb48:	1001807a 	.word	0x1001807a
1000cb4c:	10018046 	.word	0x10018046
1000cb50:	1001311f 	.word	0x1001311f
1000cb54:	1001310d 	.word	0x1001310d
1000cb58:	10018099 	.word	0x10018099

1000cb5c <at_ble_adv_start>:
1000cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb5e:	b091      	sub	sp, #68	; 0x44
1000cb60:	1c1f      	adds	r7, r3, #0
1000cb62:	ab16      	add	r3, sp, #88	; 0x58
1000cb64:	881d      	ldrh	r5, [r3, #0]
1000cb66:	ab17      	add	r3, sp, #92	; 0x5c
1000cb68:	881b      	ldrh	r3, [r3, #0]
1000cb6a:	910d      	str	r1, [sp, #52]	; 0x34
1000cb6c:	930e      	str	r3, [sp, #56]	; 0x38
1000cb6e:	ab18      	add	r3, sp, #96	; 0x60
1000cb70:	781b      	ldrb	r3, [r3, #0]
1000cb72:	1c04      	adds	r4, r0, #0
1000cb74:	930f      	str	r3, [sp, #60]	; 0x3c
1000cb76:	4b42      	ldr	r3, [pc, #264]	; (1000cc80 <at_ble_adv_start+0x124>)
1000cb78:	1c16      	adds	r6, r2, #0
1000cb7a:	3373      	adds	r3, #115	; 0x73
1000cb7c:	781b      	ldrb	r3, [r3, #0]
1000cb7e:	20cf      	movs	r0, #207	; 0xcf
1000cb80:	930c      	str	r3, [sp, #48]	; 0x30
1000cb82:	2c01      	cmp	r4, #1
1000cb84:	d103      	bne.n	1000cb8e <at_ble_adv_start+0x32>
1000cb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000cb88:	2b00      	cmp	r3, #0
1000cb8a:	d176      	bne.n	1000cc7a <at_ble_adv_start+0x11e>
1000cb8c:	e024      	b.n	1000cbd8 <at_ble_adv_start+0x7c>
1000cb8e:	2c04      	cmp	r4, #4
1000cb90:	d873      	bhi.n	1000cc7a <at_ble_adv_start+0x11e>
1000cb92:	2380      	movs	r3, #128	; 0x80
1000cb94:	01db      	lsls	r3, r3, #7
1000cb96:	429d      	cmp	r5, r3
1000cb98:	d86f      	bhi.n	1000cc7a <at_ble_adv_start+0x11e>
1000cb9a:	2c00      	cmp	r4, #0
1000cb9c:	d102      	bne.n	1000cba4 <at_ble_adv_start+0x48>
1000cb9e:	2d1f      	cmp	r5, #31
1000cba0:	d96b      	bls.n	1000cc7a <at_ble_adv_start+0x11e>
1000cba2:	e003      	b.n	1000cbac <at_ble_adv_start+0x50>
1000cba4:	2d9f      	cmp	r5, #159	; 0x9f
1000cba6:	d801      	bhi.n	1000cbac <at_ble_adv_start+0x50>
1000cba8:	2c01      	cmp	r4, #1
1000cbaa:	d166      	bne.n	1000cc7a <at_ble_adv_start+0x11e>
1000cbac:	2f00      	cmp	r7, #0
1000cbae:	d009      	beq.n	1000cbc4 <at_ble_adv_start+0x68>
1000cbb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000cbb2:	20cf      	movs	r0, #207	; 0xcf
1000cbb4:	3b01      	subs	r3, #1
1000cbb6:	2b01      	cmp	r3, #1
1000cbb8:	d95f      	bls.n	1000cc7a <at_ble_adv_start+0x11e>
1000cbba:	2c01      	cmp	r4, #1
1000cbbc:	d102      	bne.n	1000cbc4 <at_ble_adv_start+0x68>
1000cbbe:	2d00      	cmp	r5, #0
1000cbc0:	d100      	bne.n	1000cbc4 <at_ble_adv_start+0x68>
1000cbc2:	3520      	adds	r5, #32
1000cbc4:	4b2f      	ldr	r3, [pc, #188]	; (1000cc84 <at_ble_adv_start+0x128>)
1000cbc6:	4798      	blx	r3
1000cbc8:	1c01      	adds	r1, r0, #0
1000cbca:	2e00      	cmp	r6, #0
1000cbcc:	d043      	beq.n	1000cc56 <at_ble_adv_start+0xfa>
1000cbce:	7833      	ldrb	r3, [r6, #0]
1000cbd0:	1e60      	subs	r0, r4, #1
1000cbd2:	2b00      	cmp	r3, #0
1000cbd4:	d109      	bne.n	1000cbea <at_ble_adv_start+0x8e>
1000cbd6:	e03b      	b.n	1000cc50 <at_ble_adv_start+0xf4>
1000cbd8:	2380      	movs	r3, #128	; 0x80
1000cbda:	01db      	lsls	r3, r3, #7
1000cbdc:	429d      	cmp	r5, r3
1000cbde:	d84c      	bhi.n	1000cc7a <at_ble_adv_start+0x11e>
1000cbe0:	2e00      	cmp	r6, #0
1000cbe2:	d04a      	beq.n	1000cc7a <at_ble_adv_start+0x11e>
1000cbe4:	2f00      	cmp	r7, #0
1000cbe6:	d1e3      	bne.n	1000cbb0 <at_ble_adv_start+0x54>
1000cbe8:	e02b      	b.n	1000cc42 <at_ble_adv_start+0xe6>
1000cbea:	2301      	movs	r3, #1
1000cbec:	2803      	cmp	r0, #3
1000cbee:	d93a      	bls.n	1000cc66 <at_ble_adv_start+0x10a>
1000cbf0:	200d      	movs	r0, #13
1000cbf2:	1c72      	adds	r2, r6, #1
1000cbf4:	e002      	b.n	1000cbfc <at_ble_adv_start+0xa0>
1000cbf6:	200e      	movs	r0, #14
1000cbf8:	1e32      	subs	r2, r6, #0
1000cbfa:	d1fa      	bne.n	1000cbf2 <at_ble_adv_start+0x96>
1000cbfc:	4c20      	ldr	r4, [pc, #128]	; (1000cc80 <at_ble_adv_start+0x124>)
1000cbfe:	3474      	adds	r4, #116	; 0x74
1000cc00:	7826      	ldrb	r6, [r4, #0]
1000cc02:	2407      	movs	r4, #7
1000cc04:	2e00      	cmp	r6, #0
1000cc06:	d000      	beq.n	1000cc0a <at_ble_adv_start+0xae>
1000cc08:	1c34      	adds	r4, r6, #0
1000cc0a:	9200      	str	r2, [sp, #0]
1000cc0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000cc0e:	9403      	str	r4, [sp, #12]
1000cc10:	9204      	str	r2, [sp, #16]
1000cc12:	4a1b      	ldr	r2, [pc, #108]	; (1000cc80 <at_ble_adv_start+0x124>)
1000cc14:	9501      	str	r5, [sp, #4]
1000cc16:	9502      	str	r5, [sp, #8]
1000cc18:	9705      	str	r7, [sp, #20]
1000cc1a:	3272      	adds	r2, #114	; 0x72
1000cc1c:	7812      	ldrb	r2, [r2, #0]
1000cc1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000cc20:	9206      	str	r2, [sp, #24]
1000cc22:	4a19      	ldr	r2, [pc, #100]	; (1000cc88 <at_ble_adv_start+0x12c>)
1000cc24:	9207      	str	r2, [sp, #28]
1000cc26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000cc28:	9208      	str	r2, [sp, #32]
1000cc2a:	4a18      	ldr	r2, [pc, #96]	; (1000cc8c <at_ble_adv_start+0x130>)
1000cc2c:	9209      	str	r2, [sp, #36]	; 0x24
1000cc2e:	2264      	movs	r2, #100	; 0x64
1000cc30:	4362      	muls	r2, r4
1000cc32:	b292      	uxth	r2, r2
1000cc34:	920a      	str	r2, [sp, #40]	; 0x28
1000cc36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000cc38:	4c15      	ldr	r4, [pc, #84]	; (1000cc90 <at_ble_adv_start+0x134>)
1000cc3a:	920b      	str	r2, [sp, #44]	; 0x2c
1000cc3c:	4a15      	ldr	r2, [pc, #84]	; (1000cc94 <at_ble_adv_start+0x138>)
1000cc3e:	47a0      	blx	r4
1000cc40:	e01b      	b.n	1000cc7a <at_ble_adv_start+0x11e>
1000cc42:	2d00      	cmp	r5, #0
1000cc44:	d1be      	bne.n	1000cbc4 <at_ble_adv_start+0x68>
1000cc46:	4b0f      	ldr	r3, [pc, #60]	; (1000cc84 <at_ble_adv_start+0x128>)
1000cc48:	4798      	blx	r3
1000cc4a:	2520      	movs	r5, #32
1000cc4c:	1c01      	adds	r1, r0, #0
1000cc4e:	e7be      	b.n	1000cbce <at_ble_adv_start+0x72>
1000cc50:	2803      	cmp	r0, #3
1000cc52:	d8cd      	bhi.n	1000cbf0 <at_ble_adv_start+0x94>
1000cc54:	e006      	b.n	1000cc64 <at_ble_adv_start+0x108>
1000cc56:	1e60      	subs	r0, r4, #1
1000cc58:	2803      	cmp	r0, #3
1000cc5a:	d903      	bls.n	1000cc64 <at_ble_adv_start+0x108>
1000cc5c:	1c33      	adds	r3, r6, #0
1000cc5e:	200d      	movs	r0, #13
1000cc60:	1c32      	adds	r2, r6, #0
1000cc62:	e7cb      	b.n	1000cbfc <at_ble_adv_start+0xa0>
1000cc64:	2300      	movs	r3, #0
1000cc66:	f003 fd8f 	bl	10010788 <__gnu_thumb1_case_sqi>
1000cc6a:	06c6      	.short	0x06c6
1000cc6c:	0204      	.short	0x0204
1000cc6e:	200f      	movs	r0, #15
1000cc70:	e7c2      	b.n	1000cbf8 <at_ble_adv_start+0x9c>
1000cc72:	2200      	movs	r2, #0
1000cc74:	920c      	str	r2, [sp, #48]	; 0x30
1000cc76:	200c      	movs	r0, #12
1000cc78:	e7be      	b.n	1000cbf8 <at_ble_adv_start+0x9c>
1000cc7a:	b011      	add	sp, #68	; 0x44
1000cc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc7e:	46c0      	nop			; (mov r8, r8)
1000cc80:	10018046 	.word	0x10018046
1000cc84:	1000ebf9 	.word	0x1000ebf9
1000cc88:	1001807a 	.word	0x1001807a
1000cc8c:	10018099 	.word	0x10018099
1000cc90:	1000ead9 	.word	0x1000ead9
1000cc94:	00003a98 	.word	0x00003a98

1000cc98 <at_ble_scan_stop>:
1000cc98:	b510      	push	{r4, lr}
1000cc9a:	4b05      	ldr	r3, [pc, #20]	; (1000ccb0 <at_ble_scan_stop+0x18>)
1000cc9c:	4798      	blx	r3
1000cc9e:	1e04      	subs	r4, r0, #0
1000cca0:	d103      	bne.n	1000ccaa <at_ble_scan_stop+0x12>
1000cca2:	20d1      	movs	r0, #209	; 0xd1
1000cca4:	4b03      	ldr	r3, [pc, #12]	; (1000ccb4 <at_ble_scan_stop+0x1c>)
1000cca6:	0100      	lsls	r0, r0, #4
1000cca8:	4798      	blx	r3
1000ccaa:	1c20      	adds	r0, r4, #0
1000ccac:	bd10      	pop	{r4, pc}
1000ccae:	46c0      	nop			; (mov r8, r8)
1000ccb0:	1000e905 	.word	0x1000e905
1000ccb4:	1000c751 	.word	0x1000c751

1000ccb8 <at_ble_disconnect>:
1000ccb8:	b538      	push	{r3, r4, r5, lr}
1000ccba:	1c04      	adds	r4, r0, #0
1000ccbc:	4b04      	ldr	r3, [pc, #16]	; (1000ccd0 <at_ble_disconnect+0x18>)
1000ccbe:	1c08      	adds	r0, r1, #0
1000ccc0:	1c21      	adds	r1, r4, #0
1000ccc2:	4798      	blx	r3
1000ccc4:	1c05      	adds	r5, r0, #0
1000ccc6:	4b03      	ldr	r3, [pc, #12]	; (1000ccd4 <at_ble_disconnect+0x1c>)
1000ccc8:	1c20      	adds	r0, r4, #0
1000ccca:	4798      	blx	r3
1000cccc:	1c28      	adds	r0, r5, #0
1000ccce:	bd38      	pop	{r3, r4, r5, pc}
1000ccd0:	1000df7d 	.word	0x1000df7d
1000ccd4:	1000c795 	.word	0x1000c795

1000ccd8 <at_ble_conn_update_reply>:
1000ccd8:	b510      	push	{r4, lr}
1000ccda:	4c01      	ldr	r4, [pc, #4]	; (1000cce0 <at_ble_conn_update_reply+0x8>)
1000ccdc:	47a0      	blx	r4
1000ccde:	bd10      	pop	{r4, pc}
1000cce0:	1000e46d 	.word	0x1000e46d

1000cce4 <at_ble_random_address_resolve>:
1000cce4:	b510      	push	{r4, lr}
1000cce6:	23cf      	movs	r3, #207	; 0xcf
1000cce8:	2800      	cmp	r0, #0
1000ccea:	d00a      	beq.n	1000cd02 <at_ble_random_address_resolve+0x1e>
1000ccec:	2900      	cmp	r1, #0
1000ccee:	d008      	beq.n	1000cd02 <at_ble_random_address_resolve+0x1e>
1000ccf0:	2a00      	cmp	r2, #0
1000ccf2:	d006      	beq.n	1000cd02 <at_ble_random_address_resolve+0x1e>
1000ccf4:	780c      	ldrb	r4, [r1, #0]
1000ccf6:	2c02      	cmp	r4, #2
1000ccf8:	d103      	bne.n	1000cd02 <at_ble_random_address_resolve+0x1e>
1000ccfa:	4b03      	ldr	r3, [pc, #12]	; (1000cd08 <at_ble_random_address_resolve+0x24>)
1000ccfc:	3101      	adds	r1, #1
1000ccfe:	4798      	blx	r3
1000cd00:	2300      	movs	r3, #0
1000cd02:	1c18      	adds	r0, r3, #0
1000cd04:	bd10      	pop	{r4, pc}
1000cd06:	46c0      	nop			; (mov r8, r8)
1000cd08:	1000ec99 	.word	0x1000ec99

1000cd0c <at_ble_uuid_type2len>:
1000cd0c:	23cf      	movs	r3, #207	; 0xcf
1000cd0e:	2802      	cmp	r0, #2
1000cd10:	d801      	bhi.n	1000cd16 <at_ble_uuid_type2len+0xa>
1000cd12:	4b02      	ldr	r3, [pc, #8]	; (1000cd1c <at_ble_uuid_type2len+0x10>)
1000cd14:	5c1b      	ldrb	r3, [r3, r0]
1000cd16:	1c18      	adds	r0, r3, #0
1000cd18:	4770      	bx	lr
1000cd1a:	46c0      	nop			; (mov r8, r8)
1000cd1c:	10015107 	.word	0x10015107

1000cd20 <at_ble_uuid_len2type>:
1000cd20:	1e83      	subs	r3, r0, #2
1000cd22:	b2db      	uxtb	r3, r3
1000cd24:	2003      	movs	r0, #3
1000cd26:	2b0e      	cmp	r3, #14
1000cd28:	d801      	bhi.n	1000cd2e <at_ble_uuid_len2type+0xe>
1000cd2a:	4a01      	ldr	r2, [pc, #4]	; (1000cd30 <at_ble_uuid_len2type+0x10>)
1000cd2c:	5cd0      	ldrb	r0, [r2, r3]
1000cd2e:	4770      	bx	lr
1000cd30:	1001510a 	.word	0x1001510a

1000cd34 <init_gatt_client_module>:
1000cd34:	2200      	movs	r2, #0
1000cd36:	4b01      	ldr	r3, [pc, #4]	; (1000cd3c <init_gatt_client_module+0x8>)
1000cd38:	801a      	strh	r2, [r3, #0]
1000cd3a:	4770      	bx	lr
1000cd3c:	10016d84 	.word	0x10016d84

1000cd40 <at_ble_primary_service_discover_by_uuid>:
1000cd40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cd42:	2b00      	cmp	r3, #0
1000cd44:	d101      	bne.n	1000cd4a <at_ble_primary_service_discover_by_uuid+0xa>
1000cd46:	20cf      	movs	r0, #207	; 0xcf
1000cd48:	e021      	b.n	1000cd8e <at_ble_primary_service_discover_by_uuid+0x4e>
1000cd4a:	2900      	cmp	r1, #0
1000cd4c:	d0fb      	beq.n	1000cd46 <at_ble_primary_service_discover_by_uuid+0x6>
1000cd4e:	428a      	cmp	r2, r1
1000cd50:	d3f9      	bcc.n	1000cd46 <at_ble_primary_service_discover_by_uuid+0x6>
1000cd52:	1c1c      	adds	r4, r3, #0
1000cd54:	1c07      	adds	r7, r0, #0
1000cd56:	7818      	ldrb	r0, [r3, #0]
1000cd58:	4b0d      	ldr	r3, [pc, #52]	; (1000cd90 <at_ble_primary_service_discover_by_uuid+0x50>)
1000cd5a:	1c16      	adds	r6, r2, #0
1000cd5c:	1c0d      	adds	r5, r1, #0
1000cd5e:	4798      	blx	r3
1000cd60:	1c22      	adds	r2, r4, #0
1000cd62:	1e01      	subs	r1, r0, #0
1000cd64:	29cf      	cmp	r1, #207	; 0xcf
1000cd66:	d0ee      	beq.n	1000cd46 <at_ble_primary_service_discover_by_uuid+0x6>
1000cd68:	1b13      	subs	r3, r2, r4
1000cd6a:	b2db      	uxtb	r3, r3
1000cd6c:	428b      	cmp	r3, r1
1000cd6e:	d203      	bcs.n	1000cd78 <at_ble_primary_service_discover_by_uuid+0x38>
1000cd70:	3201      	adds	r2, #1
1000cd72:	7810      	ldrb	r0, [r2, #0]
1000cd74:	2800      	cmp	r0, #0
1000cd76:	d0f7      	beq.n	1000cd68 <at_ble_primary_service_discover_by_uuid+0x28>
1000cd78:	428b      	cmp	r3, r1
1000cd7a:	d0e4      	beq.n	1000cd46 <at_ble_primary_service_discover_by_uuid+0x6>
1000cd7c:	3401      	adds	r4, #1
1000cd7e:	9400      	str	r4, [sp, #0]
1000cd80:	2003      	movs	r0, #3
1000cd82:	9701      	str	r7, [sp, #4]
1000cd84:	1c2a      	adds	r2, r5, #0
1000cd86:	1c33      	adds	r3, r6, #0
1000cd88:	4c02      	ldr	r4, [pc, #8]	; (1000cd94 <at_ble_primary_service_discover_by_uuid+0x54>)
1000cd8a:	47a0      	blx	r4
1000cd8c:	2000      	movs	r0, #0
1000cd8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cd90:	1000cd0d 	.word	0x1000cd0d
1000cd94:	1000ef05 	.word	0x1000ef05

1000cd98 <at_ble_characteristic_discover_all>:
1000cd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000cd9a:	24cf      	movs	r4, #207	; 0xcf
1000cd9c:	2900      	cmp	r1, #0
1000cd9e:	d00a      	beq.n	1000cdb6 <at_ble_characteristic_discover_all+0x1e>
1000cda0:	428a      	cmp	r2, r1
1000cda2:	d308      	bcc.n	1000cdb6 <at_ble_characteristic_discover_all+0x1e>
1000cda4:	2400      	movs	r4, #0
1000cda6:	1c13      	adds	r3, r2, #0
1000cda8:	9001      	str	r0, [sp, #4]
1000cdaa:	1c0a      	adds	r2, r1, #0
1000cdac:	9400      	str	r4, [sp, #0]
1000cdae:	2005      	movs	r0, #5
1000cdb0:	1c21      	adds	r1, r4, #0
1000cdb2:	4d02      	ldr	r5, [pc, #8]	; (1000cdbc <at_ble_characteristic_discover_all+0x24>)
1000cdb4:	47a8      	blx	r5
1000cdb6:	1c20      	adds	r0, r4, #0
1000cdb8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cdba:	46c0      	nop			; (mov r8, r8)
1000cdbc:	1000ef05 	.word	0x1000ef05

1000cdc0 <at_ble_descriptor_discover_all>:
1000cdc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000cdc2:	24cf      	movs	r4, #207	; 0xcf
1000cdc4:	2900      	cmp	r1, #0
1000cdc6:	d00a      	beq.n	1000cdde <at_ble_descriptor_discover_all+0x1e>
1000cdc8:	428a      	cmp	r2, r1
1000cdca:	d308      	bcc.n	1000cdde <at_ble_descriptor_discover_all+0x1e>
1000cdcc:	2400      	movs	r4, #0
1000cdce:	1c13      	adds	r3, r2, #0
1000cdd0:	9001      	str	r0, [sp, #4]
1000cdd2:	1c0a      	adds	r2, r1, #0
1000cdd4:	9400      	str	r4, [sp, #0]
1000cdd6:	2007      	movs	r0, #7
1000cdd8:	1c21      	adds	r1, r4, #0
1000cdda:	4d02      	ldr	r5, [pc, #8]	; (1000cde4 <at_ble_descriptor_discover_all+0x24>)
1000cddc:	47a8      	blx	r5
1000cdde:	1c20      	adds	r0, r4, #0
1000cde0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cde2:	46c0      	nop			; (mov r8, r8)
1000cde4:	1000ef05 	.word	0x1000ef05

1000cde8 <at_ble_characteristic_write>:
1000cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdea:	b085      	sub	sp, #20
1000cdec:	1c14      	adds	r4, r2, #0
1000cdee:	aa0a      	add	r2, sp, #40	; 0x28
1000cdf0:	1c0d      	adds	r5, r1, #0
1000cdf2:	ca02      	ldmia	r2!, {r1}
1000cdf4:	1c06      	adds	r6, r0, #0
1000cdf6:	a80c      	add	r0, sp, #48	; 0x30
1000cdf8:	7807      	ldrb	r7, [r0, #0]
1000cdfa:	7812      	ldrb	r2, [r2, #0]
1000cdfc:	20cf      	movs	r0, #207	; 0xcf
1000cdfe:	2900      	cmp	r1, #0
1000ce00:	d014      	beq.n	1000ce2c <at_ble_characteristic_write+0x44>
1000ce02:	2b00      	cmp	r3, #0
1000ce04:	d012      	beq.n	1000ce2c <at_ble_characteristic_write+0x44>
1000ce06:	2f00      	cmp	r7, #0
1000ce08:	d003      	beq.n	1000ce12 <at_ble_characteristic_write+0x2a>
1000ce0a:	2a00      	cmp	r2, #0
1000ce0c:	d10e      	bne.n	1000ce2c <at_ble_characteristic_write+0x44>
1000ce0e:	38c3      	subs	r0, #195	; 0xc3
1000ce10:	e003      	b.n	1000ce1a <at_ble_characteristic_write+0x32>
1000ce12:	1e50      	subs	r0, r2, #1
1000ce14:	4182      	sbcs	r2, r0
1000ce16:	320d      	adds	r2, #13
1000ce18:	1c10      	adds	r0, r2, #0
1000ce1a:	9300      	str	r3, [sp, #0]
1000ce1c:	9101      	str	r1, [sp, #4]
1000ce1e:	1c23      	adds	r3, r4, #0
1000ce20:	9602      	str	r6, [sp, #8]
1000ce22:	2101      	movs	r1, #1
1000ce24:	1c2a      	adds	r2, r5, #0
1000ce26:	4c02      	ldr	r4, [pc, #8]	; (1000ce30 <at_ble_characteristic_write+0x48>)
1000ce28:	47a0      	blx	r4
1000ce2a:	2000      	movs	r0, #0
1000ce2c:	b005      	add	sp, #20
1000ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce30:	1000ef95 	.word	0x1000ef95

1000ce34 <db_searchATT>:
1000ce34:	b570      	push	{r4, r5, r6, lr}
1000ce36:	1c05      	adds	r5, r0, #0
1000ce38:	2400      	movs	r4, #0
1000ce3a:	4b0c      	ldr	r3, [pc, #48]	; (1000ce6c <db_searchATT+0x38>)
1000ce3c:	6819      	ldr	r1, [r3, #0]
1000ce3e:	4b0c      	ldr	r3, [pc, #48]	; (1000ce70 <db_searchATT+0x3c>)
1000ce40:	681e      	ldr	r6, [r3, #0]
1000ce42:	428c      	cmp	r4, r1
1000ce44:	dc10      	bgt.n	1000ce68 <db_searchATT+0x34>
1000ce46:	200c      	movs	r0, #12
1000ce48:	1863      	adds	r3, r4, r1
1000ce4a:	0fda      	lsrs	r2, r3, #31
1000ce4c:	18d3      	adds	r3, r2, r3
1000ce4e:	1c02      	adds	r2, r0, #0
1000ce50:	105b      	asrs	r3, r3, #1
1000ce52:	435a      	muls	r2, r3
1000ce54:	18b0      	adds	r0, r6, r2
1000ce56:	8802      	ldrh	r2, [r0, #0]
1000ce58:	42aa      	cmp	r2, r5
1000ce5a:	d201      	bcs.n	1000ce60 <db_searchATT+0x2c>
1000ce5c:	1e59      	subs	r1, r3, #1
1000ce5e:	e7f0      	b.n	1000ce42 <db_searchATT+0xe>
1000ce60:	42aa      	cmp	r2, r5
1000ce62:	d902      	bls.n	1000ce6a <db_searchATT+0x36>
1000ce64:	1c5c      	adds	r4, r3, #1
1000ce66:	e7ec      	b.n	1000ce42 <db_searchATT+0xe>
1000ce68:	2000      	movs	r0, #0
1000ce6a:	bd70      	pop	{r4, r5, r6, pc}
1000ce6c:	10016d98 	.word	0x10016d98
1000ce70:	10016d90 	.word	0x10016d90

1000ce74 <att_permissions>:
1000ce74:	b530      	push	{r4, r5, lr}
1000ce76:	2403      	movs	r4, #3
1000ce78:	1c05      	adds	r5, r0, #0
1000ce7a:	2301      	movs	r3, #1
1000ce7c:	4025      	ands	r5, r4
1000ce7e:	42a5      	cmp	r5, r4
1000ce80:	d009      	beq.n	1000ce96 <att_permissions+0x22>
1000ce82:	1c23      	adds	r3, r4, #0
1000ce84:	1924      	adds	r4, r4, r4
1000ce86:	4220      	tst	r0, r4
1000ce88:	d105      	bne.n	1000ce96 <att_permissions+0x22>
1000ce8a:	3b02      	subs	r3, #2
1000ce8c:	4218      	tst	r0, r3
1000ce8e:	d102      	bne.n	1000ce96 <att_permissions+0x22>
1000ce90:	1e4b      	subs	r3, r1, #1
1000ce92:	4199      	sbcs	r1, r3
1000ce94:	b28b      	uxth	r3, r1
1000ce96:	2130      	movs	r1, #48	; 0x30
1000ce98:	4001      	ands	r1, r0
1000ce9a:	2930      	cmp	r1, #48	; 0x30
1000ce9c:	d007      	beq.n	1000ceae <att_permissions+0x3a>
1000ce9e:	0641      	lsls	r1, r0, #25
1000cea0:	d401      	bmi.n	1000cea6 <att_permissions+0x32>
1000cea2:	0681      	lsls	r1, r0, #26
1000cea4:	d501      	bpl.n	1000ceaa <att_permissions+0x36>
1000cea6:	4807      	ldr	r0, [pc, #28]	; (1000cec4 <att_permissions+0x50>)
1000cea8:	e009      	b.n	1000cebe <att_permissions+0x4a>
1000ceaa:	06c1      	lsls	r1, r0, #27
1000ceac:	d501      	bpl.n	1000ceb2 <att_permissions+0x3e>
1000ceae:	4806      	ldr	r0, [pc, #24]	; (1000cec8 <att_permissions+0x54>)
1000ceb0:	e005      	b.n	1000cebe <att_permissions+0x4a>
1000ceb2:	2a00      	cmp	r2, #0
1000ceb4:	d001      	beq.n	1000ceba <att_permissions+0x46>
1000ceb6:	2204      	movs	r2, #4
1000ceb8:	4313      	orrs	r3, r2
1000ceba:	2080      	movs	r0, #128	; 0x80
1000cebc:	0180      	lsls	r0, r0, #6
1000cebe:	4318      	orrs	r0, r3
1000cec0:	bd30      	pop	{r4, r5, pc}
1000cec2:	46c0      	nop			; (mov r8, r8)
1000cec4:	0000200c 	.word	0x0000200c
1000cec8:	00002004 	.word	0x00002004

1000cecc <char_permissions>:
1000cecc:	b530      	push	{r4, r5, lr}
1000cece:	2300      	movs	r3, #0
1000ced0:	0784      	lsls	r4, r0, #30
1000ced2:	d503      	bpl.n	1000cedc <char_permissions+0x10>
1000ced4:	3301      	adds	r3, #1
1000ced6:	4219      	tst	r1, r3
1000ced8:	d100      	bne.n	1000cedc <char_permissions+0x10>
1000ceda:	3302      	adds	r3, #2
1000cedc:	0704      	lsls	r4, r0, #28
1000cede:	d508      	bpl.n	1000cef2 <char_permissions+0x26>
1000cee0:	06cc      	lsls	r4, r1, #27
1000cee2:	d501      	bpl.n	1000cee8 <char_permissions+0x1c>
1000cee4:	2404      	movs	r4, #4
1000cee6:	e000      	b.n	1000ceea <char_permissions+0x1e>
1000cee8:	240c      	movs	r4, #12
1000ceea:	4323      	orrs	r3, r4
1000ceec:	2480      	movs	r4, #128	; 0x80
1000ceee:	01a4      	lsls	r4, r4, #6
1000cef0:	4323      	orrs	r3, r4
1000cef2:	0684      	lsls	r4, r0, #26
1000cef4:	d506      	bpl.n	1000cf04 <char_permissions+0x38>
1000cef6:	2406      	movs	r4, #6
1000cef8:	4221      	tst	r1, r4
1000cefa:	d101      	bne.n	1000cf00 <char_permissions+0x34>
1000cefc:	340a      	adds	r4, #10
1000cefe:	e000      	b.n	1000cf02 <char_permissions+0x36>
1000cf00:	2430      	movs	r4, #48	; 0x30
1000cf02:	4323      	orrs	r3, r4
1000cf04:	06c4      	lsls	r4, r0, #27
1000cf06:	d506      	bpl.n	1000cf16 <char_permissions+0x4a>
1000cf08:	2406      	movs	r4, #6
1000cf0a:	4221      	tst	r1, r4
1000cf0c:	d101      	bne.n	1000cf12 <char_permissions+0x46>
1000cf0e:	343a      	adds	r4, #58	; 0x3a
1000cf10:	e000      	b.n	1000cf14 <char_permissions+0x48>
1000cf12:	24c0      	movs	r4, #192	; 0xc0
1000cf14:	4323      	orrs	r3, r4
1000cf16:	2480      	movs	r4, #128	; 0x80
1000cf18:	0064      	lsls	r4, r4, #1
1000cf1a:	4220      	tst	r0, r4
1000cf1c:	d000      	beq.n	1000cf20 <char_permissions+0x54>
1000cf1e:	4323      	orrs	r3, r4
1000cf20:	07c4      	lsls	r4, r0, #31
1000cf22:	d502      	bpl.n	1000cf2a <char_permissions+0x5e>
1000cf24:	2480      	movs	r4, #128	; 0x80
1000cf26:	00a4      	lsls	r4, r4, #2
1000cf28:	4323      	orrs	r3, r4
1000cf2a:	2404      	movs	r4, #4
1000cf2c:	4220      	tst	r0, r4
1000cf2e:	d006      	beq.n	1000cf3e <char_permissions+0x72>
1000cf30:	06cd      	lsls	r5, r1, #27
1000cf32:	d400      	bmi.n	1000cf36 <char_permissions+0x6a>
1000cf34:	240c      	movs	r4, #12
1000cf36:	4323      	orrs	r3, r4
1000cf38:	2480      	movs	r4, #128	; 0x80
1000cf3a:	0124      	lsls	r4, r4, #4
1000cf3c:	4323      	orrs	r3, r4
1000cf3e:	0644      	lsls	r4, r0, #25
1000cf40:	d501      	bpl.n	1000cf46 <char_permissions+0x7a>
1000cf42:	4c08      	ldr	r4, [pc, #32]	; (1000cf64 <char_permissions+0x98>)
1000cf44:	4323      	orrs	r3, r4
1000cf46:	0600      	lsls	r0, r0, #24
1000cf48:	d507      	bpl.n	1000cf5a <char_permissions+0x8e>
1000cf4a:	2004      	movs	r0, #4
1000cf4c:	06c9      	lsls	r1, r1, #27
1000cf4e:	d400      	bmi.n	1000cf52 <char_permissions+0x86>
1000cf50:	200c      	movs	r0, #12
1000cf52:	4303      	orrs	r3, r0
1000cf54:	2084      	movs	r0, #132	; 0x84
1000cf56:	0180      	lsls	r0, r0, #6
1000cf58:	4303      	orrs	r3, r0
1000cf5a:	0390      	lsls	r0, r2, #14
1000cf5c:	4303      	orrs	r3, r0
1000cf5e:	b298      	uxth	r0, r3
1000cf60:	bd30      	pop	{r4, r5, pc}
1000cf62:	46c0      	nop			; (mov r8, r8)
1000cf64:	00001004 	.word	0x00001004

1000cf68 <presentation_format_define>:
1000cf68:	b507      	push	{r0, r1, r2, lr}
1000cf6a:	466a      	mov	r2, sp
1000cf6c:	780b      	ldrb	r3, [r1, #0]
1000cf6e:	7013      	strb	r3, [r2, #0]
1000cf70:	784b      	ldrb	r3, [r1, #1]
1000cf72:	7053      	strb	r3, [r2, #1]
1000cf74:	884b      	ldrh	r3, [r1, #2]
1000cf76:	7093      	strb	r3, [r2, #2]
1000cf78:	0a1b      	lsrs	r3, r3, #8
1000cf7a:	70d3      	strb	r3, [r2, #3]
1000cf7c:	790b      	ldrb	r3, [r1, #4]
1000cf7e:	7113      	strb	r3, [r2, #4]
1000cf80:	88cb      	ldrh	r3, [r1, #6]
1000cf82:	2107      	movs	r1, #7
1000cf84:	7153      	strb	r3, [r2, #5]
1000cf86:	0a1b      	lsrs	r3, r3, #8
1000cf88:	7193      	strb	r3, [r2, #6]
1000cf8a:	4b01      	ldr	r3, [pc, #4]	; (1000cf90 <presentation_format_define+0x28>)
1000cf8c:	4798      	blx	r3
1000cf8e:	bd0e      	pop	{r1, r2, r3, pc}
1000cf90:	1000f415 	.word	0x1000f415

1000cf94 <db_addATT>:
1000cf94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cf96:	4c29      	ldr	r4, [pc, #164]	; (1000d03c <db_addATT+0xa8>)
1000cf98:	1c1d      	adds	r5, r3, #0
1000cf9a:	6823      	ldr	r3, [r4, #0]
1000cf9c:	9001      	str	r0, [sp, #4]
1000cf9e:	26d3      	movs	r6, #211	; 0xd3
1000cfa0:	2b00      	cmp	r3, #0
1000cfa2:	d048      	beq.n	1000d036 <db_addATT+0xa2>
1000cfa4:	1c1e      	adds	r6, r3, #0
1000cfa6:	3e0c      	subs	r6, #12
1000cfa8:	6026      	str	r6, [r4, #0]
1000cfaa:	2900      	cmp	r1, #0
1000cfac:	d005      	beq.n	1000cfba <db_addATT+0x26>
1000cfae:	4f24      	ldr	r7, [pc, #144]	; (1000d040 <db_addATT+0xac>)
1000cfb0:	46bc      	mov	ip, r7
1000cfb2:	4660      	mov	r0, ip
1000cfb4:	683f      	ldr	r7, [r7, #0]
1000cfb6:	18bf      	adds	r7, r7, r2
1000cfb8:	6007      	str	r7, [r0, #0]
1000cfba:	4821      	ldr	r0, [pc, #132]	; (1000d040 <db_addATT+0xac>)
1000cfbc:	6807      	ldr	r7, [r0, #0]
1000cfbe:	4684      	mov	ip, r0
1000cfc0:	42be      	cmp	r6, r7
1000cfc2:	d932      	bls.n	1000d02a <db_addATT+0x96>
1000cfc4:	4668      	mov	r0, sp
1000cfc6:	8880      	ldrh	r0, [r0, #4]
1000cfc8:	3b0c      	subs	r3, #12
1000cfca:	8018      	strh	r0, [r3, #0]
1000cfcc:	6823      	ldr	r3, [r4, #0]
1000cfce:	2900      	cmp	r1, #0
1000cfd0:	d009      	beq.n	1000cfe6 <db_addATT+0x52>
1000cfd2:	2a00      	cmp	r2, #0
1000cfd4:	d007      	beq.n	1000cfe6 <db_addATT+0x52>
1000cfd6:	4660      	mov	r0, ip
1000cfd8:	6800      	ldr	r0, [r0, #0]
1000cfda:	809a      	strh	r2, [r3, #4]
1000cfdc:	1a80      	subs	r0, r0, r2
1000cfde:	6098      	str	r0, [r3, #8]
1000cfe0:	4b18      	ldr	r3, [pc, #96]	; (1000d044 <db_addATT+0xb0>)
1000cfe2:	4798      	blx	r3
1000cfe4:	e002      	b.n	1000cfec <db_addATT+0x58>
1000cfe6:	2100      	movs	r1, #0
1000cfe8:	809a      	strh	r2, [r3, #4]
1000cfea:	6099      	str	r1, [r3, #8]
1000cfec:	2300      	movs	r3, #0
1000cfee:	6822      	ldr	r2, [r4, #0]
1000cff0:	7093      	strb	r3, [r2, #2]
1000cff2:	3303      	adds	r3, #3
1000cff4:	402b      	ands	r3, r5
1000cff6:	2b03      	cmp	r3, #3
1000cff8:	d001      	beq.n	1000cffe <db_addATT+0x6a>
1000cffa:	076b      	lsls	r3, r5, #29
1000cffc:	d504      	bpl.n	1000d008 <db_addATT+0x74>
1000cffe:	2101      	movs	r1, #1
1000d000:	6822      	ldr	r2, [r4, #0]
1000d002:	7893      	ldrb	r3, [r2, #2]
1000d004:	430b      	orrs	r3, r1
1000d006:	7093      	strb	r3, [r2, #2]
1000d008:	2330      	movs	r3, #48	; 0x30
1000d00a:	402b      	ands	r3, r5
1000d00c:	2b30      	cmp	r3, #48	; 0x30
1000d00e:	d001      	beq.n	1000d014 <db_addATT+0x80>
1000d010:	066b      	lsls	r3, r5, #25
1000d012:	d504      	bpl.n	1000d01e <db_addATT+0x8a>
1000d014:	2102      	movs	r1, #2
1000d016:	6822      	ldr	r2, [r4, #0]
1000d018:	7893      	ldrb	r3, [r2, #2]
1000d01a:	430b      	orrs	r3, r1
1000d01c:	7093      	strb	r3, [r2, #2]
1000d01e:	4a0a      	ldr	r2, [pc, #40]	; (1000d048 <db_addATT+0xb4>)
1000d020:	2600      	movs	r6, #0
1000d022:	6813      	ldr	r3, [r2, #0]
1000d024:	3301      	adds	r3, #1
1000d026:	6013      	str	r3, [r2, #0]
1000d028:	e005      	b.n	1000d036 <db_addATT+0xa2>
1000d02a:	6023      	str	r3, [r4, #0]
1000d02c:	2611      	movs	r6, #17
1000d02e:	2900      	cmp	r1, #0
1000d030:	d001      	beq.n	1000d036 <db_addATT+0xa2>
1000d032:	1aba      	subs	r2, r7, r2
1000d034:	6002      	str	r2, [r0, #0]
1000d036:	1c30      	adds	r0, r6, #0
1000d038:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d03a:	46c0      	nop			; (mov r8, r8)
1000d03c:	10016d90 	.word	0x10016d90
1000d040:	10016d94 	.word	0x10016d94
1000d044:	1001310d 	.word	0x1001310d
1000d048:	10016d98 	.word	0x10016d98

1000d04c <user_description_define>:
1000d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d04e:	1c05      	adds	r5, r0, #0
1000d050:	20cf      	movs	r0, #207	; 0xcf
1000d052:	2a00      	cmp	r2, #0
1000d054:	d01c      	beq.n	1000d090 <user_description_define+0x44>
1000d056:	1c14      	adds	r4, r2, #0
1000d058:	2203      	movs	r2, #3
1000d05a:	1c1e      	adds	r6, r3, #0
1000d05c:	400a      	ands	r2, r1
1000d05e:	1c0b      	adds	r3, r1, #0
1000d060:	3a03      	subs	r2, #3
1000d062:	4251      	negs	r1, r2
1000d064:	4151      	adcs	r1, r2
1000d066:	075a      	lsls	r2, r3, #29
1000d068:	0fd2      	lsrs	r2, r2, #31
1000d06a:	430a      	orrs	r2, r1
1000d06c:	03d2      	lsls	r2, r2, #15
1000d06e:	4f09      	ldr	r7, [pc, #36]	; (1000d094 <user_description_define+0x48>)
1000d070:	1c28      	adds	r0, r5, #0
1000d072:	2a00      	cmp	r2, #0
1000d074:	d003      	beq.n	1000d07e <user_description_define+0x32>
1000d076:	1c21      	adds	r1, r4, #0
1000d078:	1c32      	adds	r2, r6, #0
1000d07a:	47b8      	blx	r7
1000d07c:	e008      	b.n	1000d090 <user_description_define+0x44>
1000d07e:	1c11      	adds	r1, r2, #0
1000d080:	47b8      	blx	r7
1000d082:	2800      	cmp	r0, #0
1000d084:	d104      	bne.n	1000d090 <user_description_define+0x44>
1000d086:	1c28      	adds	r0, r5, #0
1000d088:	1c31      	adds	r1, r6, #0
1000d08a:	1c22      	adds	r2, r4, #0
1000d08c:	4b02      	ldr	r3, [pc, #8]	; (1000d098 <user_description_define+0x4c>)
1000d08e:	4798      	blx	r3
1000d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d092:	46c0      	nop			; (mov r8, r8)
1000d094:	1000cf95 	.word	0x1000cf95
1000d098:	1000f415 	.word	0x1000f415

1000d09c <at_ble_read_authorize_reply.part.1>:
1000d09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d09e:	4b09      	ldr	r3, [pc, #36]	; (1000d0c4 <at_ble_read_authorize_reply.part.1+0x28>)
1000d0a0:	1c05      	adds	r5, r0, #0
1000d0a2:	1c08      	adds	r0, r1, #0
1000d0a4:	1c0c      	adds	r4, r1, #0
1000d0a6:	4798      	blx	r3
1000d0a8:	2800      	cmp	r0, #0
1000d0aa:	d009      	beq.n	1000d0c0 <at_ble_read_authorize_reply.part.1+0x24>
1000d0ac:	6882      	ldr	r2, [r0, #8]
1000d0ae:	2a00      	cmp	r2, #0
1000d0b0:	d006      	beq.n	1000d0c0 <at_ble_read_authorize_reply.part.1+0x24>
1000d0b2:	8883      	ldrh	r3, [r0, #4]
1000d0b4:	1c29      	adds	r1, r5, #0
1000d0b6:	9200      	str	r2, [sp, #0]
1000d0b8:	1c20      	adds	r0, r4, #0
1000d0ba:	2200      	movs	r2, #0
1000d0bc:	4c02      	ldr	r4, [pc, #8]	; (1000d0c8 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d0be:	47a0      	blx	r4
1000d0c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d0c2:	46c0      	nop			; (mov r8, r8)
1000d0c4:	1000ce35 	.word	0x1000ce35
1000d0c8:	1000ed95 	.word	0x1000ed95

1000d0cc <internal_at_ble_service_define>:
1000d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0ce:	b08b      	sub	sp, #44	; 0x2c
1000d0d0:	9306      	str	r3, [sp, #24]
1000d0d2:	ab10      	add	r3, sp, #64	; 0x40
1000d0d4:	9202      	str	r2, [sp, #8]
1000d0d6:	cb04      	ldmia	r3!, {r2}
1000d0d8:	1c05      	adds	r5, r0, #0
1000d0da:	881b      	ldrh	r3, [r3, #0]
1000d0dc:	9105      	str	r1, [sp, #20]
1000d0de:	9303      	str	r3, [sp, #12]
1000d0e0:	ab12      	add	r3, sp, #72	; 0x48
1000d0e2:	781b      	ldrb	r3, [r3, #0]
1000d0e4:	20cf      	movs	r0, #207	; 0xcf
1000d0e6:	9304      	str	r3, [sp, #16]
1000d0e8:	2d00      	cmp	r5, #0
1000d0ea:	d100      	bne.n	1000d0ee <internal_at_ble_service_define+0x22>
1000d0ec:	e1ca      	b.n	1000d484 <internal_at_ble_service_define+0x3b8>
1000d0ee:	2900      	cmp	r1, #0
1000d0f0:	d100      	bne.n	1000d0f4 <internal_at_ble_service_define+0x28>
1000d0f2:	e1c7      	b.n	1000d484 <internal_at_ble_service_define+0x3b8>
1000d0f4:	2a00      	cmp	r2, #0
1000d0f6:	d100      	bne.n	1000d0fa <internal_at_ble_service_define+0x2e>
1000d0f8:	e1c4      	b.n	1000d484 <internal_at_ble_service_define+0x3b8>
1000d0fa:	9b03      	ldr	r3, [sp, #12]
1000d0fc:	2b00      	cmp	r3, #0
1000d0fe:	d100      	bne.n	1000d102 <internal_at_ble_service_define+0x36>
1000d100:	e1c0      	b.n	1000d484 <internal_at_ble_service_define+0x3b8>
1000d102:	4bc9      	ldr	r3, [pc, #804]	; (1000d428 <internal_at_ble_service_define+0x35c>)
1000d104:	3004      	adds	r0, #4
1000d106:	681e      	ldr	r6, [r3, #0]
1000d108:	2e00      	cmp	r6, #0
1000d10a:	d100      	bne.n	1000d10e <internal_at_ble_service_define+0x42>
1000d10c:	e1ba      	b.n	1000d484 <internal_at_ble_service_define+0x3b8>
1000d10e:	2400      	movs	r4, #0
1000d110:	4bc6      	ldr	r3, [pc, #792]	; (1000d42c <internal_at_ble_service_define+0x360>)
1000d112:	8034      	strh	r4, [r6, #0]
1000d114:	881b      	ldrh	r3, [r3, #0]
1000d116:	1db7      	adds	r7, r6, #6
1000d118:	1c21      	adds	r1, r4, #0
1000d11a:	2210      	movs	r2, #16
1000d11c:	8073      	strh	r3, [r6, #2]
1000d11e:	1c38      	adds	r0, r7, #0
1000d120:	4bc3      	ldr	r3, [pc, #780]	; (1000d430 <internal_at_ble_service_define+0x364>)
1000d122:	4798      	blx	r3
1000d124:	7828      	ldrb	r0, [r5, #0]
1000d126:	4bc3      	ldr	r3, [pc, #780]	; (1000d434 <internal_at_ble_service_define+0x368>)
1000d128:	4798      	blx	r3
1000d12a:	1c69      	adds	r1, r5, #1
1000d12c:	1c02      	adds	r2, r0, #0
1000d12e:	4bc2      	ldr	r3, [pc, #776]	; (1000d438 <internal_at_ble_service_define+0x36c>)
1000d130:	1c38      	adds	r0, r7, #0
1000d132:	4798      	blx	r3
1000d134:	2204      	movs	r2, #4
1000d136:	782b      	ldrb	r3, [r5, #0]
1000d138:	9d02      	ldr	r5, [sp, #8]
1000d13a:	011b      	lsls	r3, r3, #4
1000d13c:	4313      	orrs	r3, r2
1000d13e:	9a04      	ldr	r2, [sp, #16]
1000d140:	7174      	strb	r4, [r6, #5]
1000d142:	0192      	lsls	r2, r2, #6
1000d144:	4313      	orrs	r3, r2
1000d146:	7133      	strb	r3, [r6, #4]
1000d148:	2316      	movs	r3, #22
1000d14a:	9a06      	ldr	r2, [sp, #24]
1000d14c:	3512      	adds	r5, #18
1000d14e:	4353      	muls	r3, r2
1000d150:	9a02      	ldr	r2, [sp, #8]
1000d152:	3312      	adds	r3, #18
1000d154:	18d7      	adds	r7, r2, r3
1000d156:	42bd      	cmp	r5, r7
1000d158:	d00f      	beq.n	1000d17a <internal_at_ble_service_define+0xae>
1000d15a:	4bb8      	ldr	r3, [pc, #736]	; (1000d43c <internal_at_ble_service_define+0x370>)
1000d15c:	8829      	ldrh	r1, [r5, #0]
1000d15e:	9300      	str	r3, [sp, #0]
1000d160:	230e      	movs	r3, #14
1000d162:	aa06      	add	r2, sp, #24
1000d164:	189b      	adds	r3, r3, r2
1000d166:	9301      	str	r3, [sp, #4]
1000d168:	4cb5      	ldr	r4, [pc, #724]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d16a:	1c30      	adds	r0, r6, #0
1000d16c:	2201      	movs	r2, #1
1000d16e:	2302      	movs	r3, #2
1000d170:	47a0      	blx	r4
1000d172:	3516      	adds	r5, #22
1000d174:	1e04      	subs	r4, r0, #0
1000d176:	d0ee      	beq.n	1000d156 <internal_at_ble_service_define+0x8a>
1000d178:	e183      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d17a:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000d17c:	2300      	movs	r3, #0
1000d17e:	3714      	adds	r7, #20
1000d180:	1c3d      	adds	r5, r7, #0
1000d182:	9302      	str	r3, [sp, #8]
1000d184:	9b02      	ldr	r3, [sp, #8]
1000d186:	9a03      	ldr	r2, [sp, #12]
1000d188:	4293      	cmp	r3, r2
1000d18a:	db00      	blt.n	1000d18e <internal_at_ble_service_define+0xc2>
1000d18c:	e0bf      	b.n	1000d30e <internal_at_ble_service_define+0x242>
1000d18e:	4bad      	ldr	r3, [pc, #692]	; (1000d444 <internal_at_ble_service_define+0x378>)
1000d190:	aa06      	add	r2, sp, #24
1000d192:	9300      	str	r3, [sp, #0]
1000d194:	230e      	movs	r3, #14
1000d196:	189b      	adds	r3, r3, r2
1000d198:	9301      	str	r3, [sp, #4]
1000d19a:	4ca9      	ldr	r4, [pc, #676]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d19c:	1c30      	adds	r0, r6, #0
1000d19e:	2104      	movs	r1, #4
1000d1a0:	2201      	movs	r2, #1
1000d1a2:	2302      	movs	r3, #2
1000d1a4:	47a0      	blx	r4
1000d1a6:	1e04      	subs	r4, r0, #0
1000d1a8:	d000      	beq.n	1000d1ac <internal_at_ble_service_define+0xe0>
1000d1aa:	e16a      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d1ac:	1c2b      	adds	r3, r5, #0
1000d1ae:	3b12      	subs	r3, #18
1000d1b0:	7b2c      	ldrb	r4, [r5, #12]
1000d1b2:	781b      	ldrb	r3, [r3, #0]
1000d1b4:	1c21      	adds	r1, r4, #0
1000d1b6:	1c1a      	adds	r2, r3, #0
1000d1b8:	9304      	str	r3, [sp, #16]
1000d1ba:	8828      	ldrh	r0, [r5, #0]
1000d1bc:	4ba2      	ldr	r3, [pc, #648]	; (1000d448 <internal_at_ble_service_define+0x37c>)
1000d1be:	4798      	blx	r3
1000d1c0:	2303      	movs	r3, #3
1000d1c2:	4023      	ands	r3, r4
1000d1c4:	3b03      	subs	r3, #3
1000d1c6:	4259      	negs	r1, r3
1000d1c8:	4159      	adcs	r1, r3
1000d1ca:	2301      	movs	r3, #1
1000d1cc:	08a4      	lsrs	r4, r4, #2
1000d1ce:	401c      	ands	r4, r3
1000d1d0:	430c      	orrs	r4, r1
1000d1d2:	896b      	ldrh	r3, [r5, #10]
1000d1d4:	03e4      	lsls	r4, r4, #15
1000d1d6:	431c      	orrs	r4, r3
1000d1d8:	9007      	str	r0, [sp, #28]
1000d1da:	4b96      	ldr	r3, [pc, #600]	; (1000d434 <internal_at_ble_service_define+0x368>)
1000d1dc:	9804      	ldr	r0, [sp, #16]
1000d1de:	4798      	blx	r3
1000d1e0:	1c2a      	adds	r2, r5, #0
1000d1e2:	3a11      	subs	r2, #17
1000d1e4:	9200      	str	r2, [sp, #0]
1000d1e6:	3a03      	subs	r2, #3
1000d1e8:	1c03      	adds	r3, r0, #0
1000d1ea:	9201      	str	r2, [sp, #4]
1000d1ec:	1c21      	adds	r1, r4, #0
1000d1ee:	1c30      	adds	r0, r6, #0
1000d1f0:	4c93      	ldr	r4, [pc, #588]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d1f2:	9a07      	ldr	r2, [sp, #28]
1000d1f4:	47a0      	blx	r4
1000d1f6:	1e04      	subs	r4, r0, #0
1000d1f8:	d000      	beq.n	1000d1fc <internal_at_ble_service_define+0x130>
1000d1fa:	e142      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d1fc:	22c0      	movs	r2, #192	; 0xc0
1000d1fe:	882b      	ldrh	r3, [r5, #0]
1000d200:	0052      	lsls	r2, r2, #1
1000d202:	4213      	tst	r3, r2
1000d204:	d104      	bne.n	1000d210 <internal_at_ble_service_define+0x144>
1000d206:	8aab      	ldrh	r3, [r5, #20]
1000d208:	9304      	str	r3, [sp, #16]
1000d20a:	2b00      	cmp	r3, #0
1000d20c:	d116      	bne.n	1000d23c <internal_at_ble_service_define+0x170>
1000d20e:	e03a      	b.n	1000d286 <internal_at_ble_service_define+0x1ba>
1000d210:	2201      	movs	r2, #1
1000d212:	09d9      	lsrs	r1, r3, #7
1000d214:	4011      	ands	r1, r2
1000d216:	05db      	lsls	r3, r3, #23
1000d218:	d501      	bpl.n	1000d21e <internal_at_ble_service_define+0x152>
1000d21a:	2302      	movs	r3, #2
1000d21c:	4319      	orrs	r1, r3
1000d21e:	4b8b      	ldr	r3, [pc, #556]	; (1000d44c <internal_at_ble_service_define+0x380>)
1000d220:	aa06      	add	r2, sp, #24
1000d222:	9300      	str	r3, [sp, #0]
1000d224:	230e      	movs	r3, #14
1000d226:	189b      	adds	r3, r3, r2
1000d228:	9301      	str	r3, [sp, #4]
1000d22a:	4c85      	ldr	r4, [pc, #532]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d22c:	0209      	lsls	r1, r1, #8
1000d22e:	1c30      	adds	r0, r6, #0
1000d230:	2201      	movs	r2, #1
1000d232:	2302      	movs	r3, #2
1000d234:	47a0      	blx	r4
1000d236:	1e04      	subs	r4, r0, #0
1000d238:	d0e5      	beq.n	1000d206 <internal_at_ble_service_define+0x13a>
1000d23a:	e122      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d23c:	2380      	movs	r3, #128	; 0x80
1000d23e:	882a      	ldrh	r2, [r5, #0]
1000d240:	7f2c      	ldrb	r4, [r5, #28]
1000d242:	005b      	lsls	r3, r3, #1
1000d244:	401a      	ands	r2, r3
1000d246:	1c20      	adds	r0, r4, #0
1000d248:	2101      	movs	r1, #1
1000d24a:	2a00      	cmp	r2, #0
1000d24c:	d000      	beq.n	1000d250 <internal_at_ble_service_define+0x184>
1000d24e:	1c0a      	adds	r2, r1, #0
1000d250:	4b7f      	ldr	r3, [pc, #508]	; (1000d450 <internal_at_ble_service_define+0x384>)
1000d252:	4798      	blx	r3
1000d254:	2203      	movs	r2, #3
1000d256:	4022      	ands	r2, r4
1000d258:	3a03      	subs	r2, #3
1000d25a:	4251      	negs	r1, r2
1000d25c:	4151      	adcs	r1, r2
1000d25e:	4b7d      	ldr	r3, [pc, #500]	; (1000d454 <internal_at_ble_service_define+0x388>)
1000d260:	1c0a      	adds	r2, r1, #0
1000d262:	9300      	str	r3, [sp, #0]
1000d264:	1c2b      	adds	r3, r5, #0
1000d266:	0764      	lsls	r4, r4, #29
1000d268:	0fe4      	lsrs	r4, r4, #31
1000d26a:	4322      	orrs	r2, r4
1000d26c:	03d2      	lsls	r2, r2, #15
1000d26e:	4310      	orrs	r0, r2
1000d270:	3320      	adds	r3, #32
1000d272:	b282      	uxth	r2, r0
1000d274:	9301      	str	r3, [sp, #4]
1000d276:	4c72      	ldr	r4, [pc, #456]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d278:	1c30      	adds	r0, r6, #0
1000d27a:	9904      	ldr	r1, [sp, #16]
1000d27c:	2302      	movs	r3, #2
1000d27e:	47a0      	blx	r4
1000d280:	1e04      	subs	r4, r0, #0
1000d282:	d000      	beq.n	1000d286 <internal_at_ble_service_define+0x1ba>
1000d284:	e0fd      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d286:	2101      	movs	r1, #1
1000d288:	882b      	ldrh	r3, [r5, #0]
1000d28a:	420b      	tst	r3, r1
1000d28c:	d011      	beq.n	1000d2b2 <internal_at_ble_service_define+0x1e6>
1000d28e:	7fa8      	ldrb	r0, [r5, #30]
1000d290:	4b6f      	ldr	r3, [pc, #444]	; (1000d450 <internal_at_ble_service_define+0x384>)
1000d292:	2200      	movs	r2, #0
1000d294:	4798      	blx	r3
1000d296:	4b70      	ldr	r3, [pc, #448]	; (1000d458 <internal_at_ble_service_define+0x38c>)
1000d298:	1c02      	adds	r2, r0, #0
1000d29a:	9300      	str	r3, [sp, #0]
1000d29c:	1c2b      	adds	r3, r5, #0
1000d29e:	3324      	adds	r3, #36	; 0x24
1000d2a0:	9301      	str	r3, [sp, #4]
1000d2a2:	4c67      	ldr	r4, [pc, #412]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d2a4:	1c30      	adds	r0, r6, #0
1000d2a6:	496d      	ldr	r1, [pc, #436]	; (1000d45c <internal_at_ble_service_define+0x390>)
1000d2a8:	2302      	movs	r3, #2
1000d2aa:	47a0      	blx	r4
1000d2ac:	1e04      	subs	r4, r0, #0
1000d2ae:	d000      	beq.n	1000d2b2 <internal_at_ble_service_define+0x1e6>
1000d2b0:	e0e7      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d2b2:	2330      	movs	r3, #48	; 0x30
1000d2b4:	882a      	ldrh	r2, [r5, #0]
1000d2b6:	421a      	tst	r2, r3
1000d2b8:	d012      	beq.n	1000d2e0 <internal_at_ble_service_define+0x214>
1000d2ba:	2101      	movs	r1, #1
1000d2bc:	7f68      	ldrb	r0, [r5, #29]
1000d2be:	1c0a      	adds	r2, r1, #0
1000d2c0:	4b63      	ldr	r3, [pc, #396]	; (1000d450 <internal_at_ble_service_define+0x384>)
1000d2c2:	4798      	blx	r3
1000d2c4:	4b66      	ldr	r3, [pc, #408]	; (1000d460 <internal_at_ble_service_define+0x394>)
1000d2c6:	1c02      	adds	r2, r0, #0
1000d2c8:	9300      	str	r3, [sp, #0]
1000d2ca:	1c2b      	adds	r3, r5, #0
1000d2cc:	3322      	adds	r3, #34	; 0x22
1000d2ce:	9301      	str	r3, [sp, #4]
1000d2d0:	4c5b      	ldr	r4, [pc, #364]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d2d2:	1c30      	adds	r0, r6, #0
1000d2d4:	4961      	ldr	r1, [pc, #388]	; (1000d45c <internal_at_ble_service_define+0x390>)
1000d2d6:	2302      	movs	r3, #2
1000d2d8:	47a0      	blx	r4
1000d2da:	1e04      	subs	r4, r0, #0
1000d2dc:	d000      	beq.n	1000d2e0 <internal_at_ble_service_define+0x214>
1000d2de:	e0d0      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d2e0:	69ab      	ldr	r3, [r5, #24]
1000d2e2:	2b00      	cmp	r3, #0
1000d2e4:	d00e      	beq.n	1000d304 <internal_at_ble_service_define+0x238>
1000d2e6:	4b5f      	ldr	r3, [pc, #380]	; (1000d464 <internal_at_ble_service_define+0x398>)
1000d2e8:	aa06      	add	r2, sp, #24
1000d2ea:	9300      	str	r3, [sp, #0]
1000d2ec:	230e      	movs	r3, #14
1000d2ee:	189b      	adds	r3, r3, r2
1000d2f0:	9301      	str	r3, [sp, #4]
1000d2f2:	4c53      	ldr	r4, [pc, #332]	; (1000d440 <internal_at_ble_service_define+0x374>)
1000d2f4:	1c30      	adds	r0, r6, #0
1000d2f6:	2107      	movs	r1, #7
1000d2f8:	2201      	movs	r2, #1
1000d2fa:	2302      	movs	r3, #2
1000d2fc:	47a0      	blx	r4
1000d2fe:	1e04      	subs	r4, r0, #0
1000d300:	d000      	beq.n	1000d304 <internal_at_ble_service_define+0x238>
1000d302:	e0be      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d304:	9b02      	ldr	r3, [sp, #8]
1000d306:	353c      	adds	r5, #60	; 0x3c
1000d308:	3301      	adds	r3, #1
1000d30a:	9302      	str	r3, [sp, #8]
1000d30c:	e73a      	b.n	1000d184 <internal_at_ble_service_define+0xb8>
1000d30e:	1c30      	adds	r0, r6, #0
1000d310:	4b55      	ldr	r3, [pc, #340]	; (1000d468 <internal_at_ble_service_define+0x39c>)
1000d312:	4798      	blx	r3
1000d314:	1e04      	subs	r4, r0, #0
1000d316:	d000      	beq.n	1000d31a <internal_at_ble_service_define+0x24e>
1000d318:	e0b3      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d31a:	8833      	ldrh	r3, [r6, #0]
1000d31c:	9a05      	ldr	r2, [sp, #20]
1000d31e:	8013      	strh	r3, [r2, #0]
1000d320:	8836      	ldrh	r6, [r6, #0]
1000d322:	9b06      	ldr	r3, [sp, #24]
1000d324:	9a03      	ldr	r2, [sp, #12]
1000d326:	18f6      	adds	r6, r6, r3
1000d328:	b2b3      	uxth	r3, r6
1000d32a:	9302      	str	r3, [sp, #8]
1000d32c:	233c      	movs	r3, #60	; 0x3c
1000d32e:	4353      	muls	r3, r2
1000d330:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d332:	3314      	adds	r3, #20
1000d334:	18d3      	adds	r3, r2, r3
1000d336:	9304      	str	r3, [sp, #16]
1000d338:	9b04      	ldr	r3, [sp, #16]
1000d33a:	429f      	cmp	r7, r3
1000d33c:	d100      	bne.n	1000d340 <internal_at_ble_service_define+0x274>
1000d33e:	e0a0      	b.n	1000d482 <internal_at_ble_service_define+0x3b6>
1000d340:	9b02      	ldr	r3, [sp, #8]
1000d342:	1c9d      	adds	r5, r3, #2
1000d344:	1c3b      	adds	r3, r7, #0
1000d346:	b2ad      	uxth	r5, r5
1000d348:	3b14      	subs	r3, #20
1000d34a:	801d      	strh	r5, [r3, #0]
1000d34c:	9303      	str	r3, [sp, #12]
1000d34e:	893b      	ldrh	r3, [r7, #8]
1000d350:	2b00      	cmp	r3, #0
1000d352:	d108      	bne.n	1000d366 <internal_at_ble_service_define+0x29a>
1000d354:	23c0      	movs	r3, #192	; 0xc0
1000d356:	883a      	ldrh	r2, [r7, #0]
1000d358:	005b      	lsls	r3, r3, #1
1000d35a:	421a      	tst	r2, r3
1000d35c:	d026      	beq.n	1000d3ac <internal_at_ble_service_define+0x2e0>
1000d35e:	9e02      	ldr	r6, [sp, #8]
1000d360:	3603      	adds	r6, #3
1000d362:	b2b5      	uxth	r5, r6
1000d364:	e022      	b.n	1000d3ac <internal_at_ble_service_define+0x2e0>
1000d366:	2103      	movs	r1, #3
1000d368:	7b3b      	ldrb	r3, [r7, #12]
1000d36a:	4019      	ands	r1, r3
1000d36c:	3903      	subs	r1, #3
1000d36e:	424a      	negs	r2, r1
1000d370:	414a      	adcs	r2, r1
1000d372:	0759      	lsls	r1, r3, #29
1000d374:	0fc9      	lsrs	r1, r1, #31
1000d376:	4311      	orrs	r1, r2
1000d378:	03c9      	lsls	r1, r1, #15
1000d37a:	897a      	ldrh	r2, [r7, #10]
1000d37c:	2900      	cmp	r1, #0
1000d37e:	d007      	beq.n	1000d390 <internal_at_ble_service_define+0x2c4>
1000d380:	6879      	ldr	r1, [r7, #4]
1000d382:	2900      	cmp	r1, #0
1000d384:	d100      	bne.n	1000d388 <internal_at_ble_service_define+0x2bc>
1000d386:	4939      	ldr	r1, [pc, #228]	; (1000d46c <internal_at_ble_service_define+0x3a0>)
1000d388:	1c28      	adds	r0, r5, #0
1000d38a:	4e39      	ldr	r6, [pc, #228]	; (1000d470 <internal_at_ble_service_define+0x3a4>)
1000d38c:	47b0      	blx	r6
1000d38e:	e00a      	b.n	1000d3a6 <internal_at_ble_service_define+0x2da>
1000d390:	1c28      	adds	r0, r5, #0
1000d392:	4e37      	ldr	r6, [pc, #220]	; (1000d470 <internal_at_ble_service_define+0x3a4>)
1000d394:	47b0      	blx	r6
1000d396:	2800      	cmp	r0, #0
1000d398:	d172      	bne.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d39a:	9b03      	ldr	r3, [sp, #12]
1000d39c:	8939      	ldrh	r1, [r7, #8]
1000d39e:	8818      	ldrh	r0, [r3, #0]
1000d3a0:	687a      	ldr	r2, [r7, #4]
1000d3a2:	4b34      	ldr	r3, [pc, #208]	; (1000d474 <internal_at_ble_service_define+0x3a8>)
1000d3a4:	4798      	blx	r3
1000d3a6:	2800      	cmp	r0, #0
1000d3a8:	d0d4      	beq.n	1000d354 <internal_at_ble_service_define+0x288>
1000d3aa:	e069      	b.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d3ac:	8abb      	ldrh	r3, [r7, #20]
1000d3ae:	2b00      	cmp	r3, #0
1000d3b0:	d00a      	beq.n	1000d3c8 <internal_at_ble_service_define+0x2fc>
1000d3b2:	3501      	adds	r5, #1
1000d3b4:	b2ad      	uxth	r5, r5
1000d3b6:	843d      	strh	r5, [r7, #32]
1000d3b8:	7f39      	ldrb	r1, [r7, #28]
1000d3ba:	8afb      	ldrh	r3, [r7, #22]
1000d3bc:	1c28      	adds	r0, r5, #0
1000d3be:	693a      	ldr	r2, [r7, #16]
1000d3c0:	4e2d      	ldr	r6, [pc, #180]	; (1000d478 <internal_at_ble_service_define+0x3ac>)
1000d3c2:	47b0      	blx	r6
1000d3c4:	2800      	cmp	r0, #0
1000d3c6:	d15b      	bne.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d3c8:	883b      	ldrh	r3, [r7, #0]
1000d3ca:	07db      	lsls	r3, r3, #31
1000d3cc:	d50d      	bpl.n	1000d3ea <internal_at_ble_service_define+0x31e>
1000d3ce:	2200      	movs	r2, #0
1000d3d0:	3501      	adds	r5, #1
1000d3d2:	b2ad      	uxth	r5, r5
1000d3d4:	a909      	add	r1, sp, #36	; 0x24
1000d3d6:	84bd      	strh	r5, [r7, #36]	; 0x24
1000d3d8:	7fbb      	ldrb	r3, [r7, #30]
1000d3da:	1c28      	adds	r0, r5, #0
1000d3dc:	700a      	strb	r2, [r1, #0]
1000d3de:	704a      	strb	r2, [r1, #1]
1000d3e0:	4e23      	ldr	r6, [pc, #140]	; (1000d470 <internal_at_ble_service_define+0x3a4>)
1000d3e2:	3202      	adds	r2, #2
1000d3e4:	47b0      	blx	r6
1000d3e6:	2800      	cmp	r0, #0
1000d3e8:	d14a      	bne.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d3ea:	2330      	movs	r3, #48	; 0x30
1000d3ec:	883a      	ldrh	r2, [r7, #0]
1000d3ee:	421a      	tst	r2, r3
1000d3f0:	d00d      	beq.n	1000d40e <internal_at_ble_service_define+0x342>
1000d3f2:	2200      	movs	r2, #0
1000d3f4:	3501      	adds	r5, #1
1000d3f6:	b2ad      	uxth	r5, r5
1000d3f8:	a909      	add	r1, sp, #36	; 0x24
1000d3fa:	847d      	strh	r5, [r7, #34]	; 0x22
1000d3fc:	7f7b      	ldrb	r3, [r7, #29]
1000d3fe:	1c28      	adds	r0, r5, #0
1000d400:	700a      	strb	r2, [r1, #0]
1000d402:	704a      	strb	r2, [r1, #1]
1000d404:	4e1a      	ldr	r6, [pc, #104]	; (1000d470 <internal_at_ble_service_define+0x3a4>)
1000d406:	3202      	adds	r2, #2
1000d408:	47b0      	blx	r6
1000d40a:	2800      	cmp	r0, #0
1000d40c:	d138      	bne.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d40e:	69b9      	ldr	r1, [r7, #24]
1000d410:	2900      	cmp	r1, #0
1000d412:	d006      	beq.n	1000d422 <internal_at_ble_service_define+0x356>
1000d414:	3501      	adds	r5, #1
1000d416:	b2ad      	uxth	r5, r5
1000d418:	1c28      	adds	r0, r5, #0
1000d41a:	4b18      	ldr	r3, [pc, #96]	; (1000d47c <internal_at_ble_service_define+0x3b0>)
1000d41c:	4798      	blx	r3
1000d41e:	2800      	cmp	r0, #0
1000d420:	d12e      	bne.n	1000d480 <internal_at_ble_service_define+0x3b4>
1000d422:	373c      	adds	r7, #60	; 0x3c
1000d424:	9502      	str	r5, [sp, #8]
1000d426:	e787      	b.n	1000d338 <internal_at_ble_service_define+0x26c>
1000d428:	10016da0 	.word	0x10016da0
1000d42c:	10017fb4 	.word	0x10017fb4
1000d430:	1001311f 	.word	0x1001311f
1000d434:	1000cd0d 	.word	0x1000cd0d
1000d438:	1001310d 	.word	0x1001310d
1000d43c:	10015123 	.word	0x10015123
1000d440:	1000f3a5 	.word	0x1000f3a5
1000d444:	10015125 	.word	0x10015125
1000d448:	1000cecd 	.word	0x1000cecd
1000d44c:	10015121 	.word	0x10015121
1000d450:	1000ce75 	.word	0x1000ce75
1000d454:	1001511d 	.word	0x1001511d
1000d458:	1001511f 	.word	0x1001511f
1000d45c:	00008002 	.word	0x00008002
1000d460:	10015119 	.word	0x10015119
1000d464:	1001511b 	.word	0x1001511b
1000d468:	1000f299 	.word	0x1000f299
1000d46c:	10016d8c 	.word	0x10016d8c
1000d470:	1000cf95 	.word	0x1000cf95
1000d474:	1000f415 	.word	0x1000f415
1000d478:	1000d04d 	.word	0x1000d04d
1000d47c:	1000cf69 	.word	0x1000cf69
1000d480:	1c04      	adds	r4, r0, #0
1000d482:	1c20      	adds	r0, r4, #0
1000d484:	b00b      	add	sp, #44	; 0x2c
1000d486:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d488 <initi_gatt_server_module>:
1000d488:	2300      	movs	r3, #0
1000d48a:	4a07      	ldr	r2, [pc, #28]	; (1000d4a8 <initi_gatt_server_module+0x20>)
1000d48c:	7013      	strb	r3, [r2, #0]
1000d48e:	4a07      	ldr	r2, [pc, #28]	; (1000d4ac <initi_gatt_server_module+0x24>)
1000d490:	6013      	str	r3, [r2, #0]
1000d492:	4a07      	ldr	r2, [pc, #28]	; (1000d4b0 <initi_gatt_server_module+0x28>)
1000d494:	6013      	str	r3, [r2, #0]
1000d496:	4a07      	ldr	r2, [pc, #28]	; (1000d4b4 <initi_gatt_server_module+0x2c>)
1000d498:	6013      	str	r3, [r2, #0]
1000d49a:	4a07      	ldr	r2, [pc, #28]	; (1000d4b8 <initi_gatt_server_module+0x30>)
1000d49c:	6013      	str	r3, [r2, #0]
1000d49e:	4a07      	ldr	r2, [pc, #28]	; (1000d4bc <initi_gatt_server_module+0x34>)
1000d4a0:	6013      	str	r3, [r2, #0]
1000d4a2:	4a07      	ldr	r2, [pc, #28]	; (1000d4c0 <initi_gatt_server_module+0x38>)
1000d4a4:	6013      	str	r3, [r2, #0]
1000d4a6:	4770      	bx	lr
1000d4a8:	10016d8c 	.word	0x10016d8c
1000d4ac:	10016d9c 	.word	0x10016d9c
1000d4b0:	10016d98 	.word	0x10016d98
1000d4b4:	10016d88 	.word	0x10016d88
1000d4b8:	10016d94 	.word	0x10016d94
1000d4bc:	10016d90 	.word	0x10016d90
1000d4c0:	10016da0 	.word	0x10016da0

1000d4c4 <db_init>:
1000d4c4:	4b0a      	ldr	r3, [pc, #40]	; (1000d4f0 <db_init+0x2c>)
1000d4c6:	4a0b      	ldr	r2, [pc, #44]	; (1000d4f4 <db_init+0x30>)
1000d4c8:	6018      	str	r0, [r3, #0]
1000d4ca:	084b      	lsrs	r3, r1, #1
1000d4cc:	6013      	str	r3, [r2, #0]
1000d4ce:	4a0a      	ldr	r2, [pc, #40]	; (1000d4f8 <db_init+0x34>)
1000d4d0:	18c3      	adds	r3, r0, r3
1000d4d2:	6013      	str	r3, [r2, #0]
1000d4d4:	4a09      	ldr	r2, [pc, #36]	; (1000d4fc <db_init+0x38>)
1000d4d6:	1841      	adds	r1, r0, r1
1000d4d8:	6013      	str	r3, [r2, #0]
1000d4da:	2303      	movs	r3, #3
1000d4dc:	2200      	movs	r2, #0
1000d4de:	3103      	adds	r1, #3
1000d4e0:	4399      	bics	r1, r3
1000d4e2:	4b07      	ldr	r3, [pc, #28]	; (1000d500 <db_init+0x3c>)
1000d4e4:	3904      	subs	r1, #4
1000d4e6:	6019      	str	r1, [r3, #0]
1000d4e8:	4b06      	ldr	r3, [pc, #24]	; (1000d504 <db_init+0x40>)
1000d4ea:	601a      	str	r2, [r3, #0]
1000d4ec:	4770      	bx	lr
1000d4ee:	46c0      	nop			; (mov r8, r8)
1000d4f0:	10016da0 	.word	0x10016da0
1000d4f4:	10016d9c 	.word	0x10016d9c
1000d4f8:	10016d88 	.word	0x10016d88
1000d4fc:	10016d94 	.word	0x10016d94
1000d500:	10016d90 	.word	0x10016d90
1000d504:	10016d98 	.word	0x10016d98

1000d508 <at_ble_primary_service_define>:
1000d508:	b530      	push	{r4, r5, lr}
1000d50a:	b085      	sub	sp, #20
1000d50c:	ac08      	add	r4, sp, #32
1000d50e:	cc20      	ldmia	r4!, {r5}
1000d510:	8824      	ldrh	r4, [r4, #0]
1000d512:	9500      	str	r5, [sp, #0]
1000d514:	9401      	str	r4, [sp, #4]
1000d516:	2401      	movs	r4, #1
1000d518:	9402      	str	r4, [sp, #8]
1000d51a:	4c02      	ldr	r4, [pc, #8]	; (1000d524 <at_ble_primary_service_define+0x1c>)
1000d51c:	47a0      	blx	r4
1000d51e:	b005      	add	sp, #20
1000d520:	bd30      	pop	{r4, r5, pc}
1000d522:	46c0      	nop			; (mov r8, r8)
1000d524:	1000d0cd 	.word	0x1000d0cd

1000d528 <at_ble_characteristic_value_set>:
1000d528:	b570      	push	{r4, r5, r6, lr}
1000d52a:	4b0b      	ldr	r3, [pc, #44]	; (1000d558 <at_ble_characteristic_value_set+0x30>)
1000d52c:	1c06      	adds	r6, r0, #0
1000d52e:	1c0c      	adds	r4, r1, #0
1000d530:	1c15      	adds	r5, r2, #0
1000d532:	4798      	blx	r3
1000d534:	2800      	cmp	r0, #0
1000d536:	d008      	beq.n	1000d54a <at_ble_characteristic_value_set+0x22>
1000d538:	6880      	ldr	r0, [r0, #8]
1000d53a:	2800      	cmp	r0, #0
1000d53c:	d005      	beq.n	1000d54a <at_ble_characteristic_value_set+0x22>
1000d53e:	1c21      	adds	r1, r4, #0
1000d540:	1c2a      	adds	r2, r5, #0
1000d542:	4b06      	ldr	r3, [pc, #24]	; (1000d55c <at_ble_characteristic_value_set+0x34>)
1000d544:	4798      	blx	r3
1000d546:	2000      	movs	r0, #0
1000d548:	e004      	b.n	1000d554 <at_ble_characteristic_value_set+0x2c>
1000d54a:	1c30      	adds	r0, r6, #0
1000d54c:	1c29      	adds	r1, r5, #0
1000d54e:	1c22      	adds	r2, r4, #0
1000d550:	4b03      	ldr	r3, [pc, #12]	; (1000d560 <at_ble_characteristic_value_set+0x38>)
1000d552:	4798      	blx	r3
1000d554:	bd70      	pop	{r4, r5, r6, pc}
1000d556:	46c0      	nop			; (mov r8, r8)
1000d558:	1000ce35 	.word	0x1000ce35
1000d55c:	1001310d 	.word	0x1001310d
1000d560:	1000f415 	.word	0x1000f415

1000d564 <at_ble_characteristic_value_get>:
1000d564:	b570      	push	{r4, r5, r6, lr}
1000d566:	4b0c      	ldr	r3, [pc, #48]	; (1000d598 <at_ble_characteristic_value_get+0x34>)
1000d568:	1c06      	adds	r6, r0, #0
1000d56a:	1c0c      	adds	r4, r1, #0
1000d56c:	1c15      	adds	r5, r2, #0
1000d56e:	4798      	blx	r3
1000d570:	2800      	cmp	r0, #0
1000d572:	d00b      	beq.n	1000d58c <at_ble_characteristic_value_get+0x28>
1000d574:	6883      	ldr	r3, [r0, #8]
1000d576:	2b00      	cmp	r3, #0
1000d578:	d008      	beq.n	1000d58c <at_ble_characteristic_value_get+0x28>
1000d57a:	8883      	ldrh	r3, [r0, #4]
1000d57c:	802b      	strh	r3, [r5, #0]
1000d57e:	8882      	ldrh	r2, [r0, #4]
1000d580:	6881      	ldr	r1, [r0, #8]
1000d582:	4b06      	ldr	r3, [pc, #24]	; (1000d59c <at_ble_characteristic_value_get+0x38>)
1000d584:	1c20      	adds	r0, r4, #0
1000d586:	4798      	blx	r3
1000d588:	2000      	movs	r0, #0
1000d58a:	e004      	b.n	1000d596 <at_ble_characteristic_value_get+0x32>
1000d58c:	1c30      	adds	r0, r6, #0
1000d58e:	1c29      	adds	r1, r5, #0
1000d590:	1c22      	adds	r2, r4, #0
1000d592:	4b03      	ldr	r3, [pc, #12]	; (1000d5a0 <at_ble_characteristic_value_get+0x3c>)
1000d594:	4798      	blx	r3
1000d596:	bd70      	pop	{r4, r5, r6, pc}
1000d598:	1000ce35 	.word	0x1000ce35
1000d59c:	1001310d 	.word	0x1001310d
1000d5a0:	1000f4a1 	.word	0x1000f4a1

1000d5a4 <at_ble_write_authorize_reply>:
1000d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5a6:	b085      	sub	sp, #20
1000d5a8:	1c04      	adds	r4, r0, #0
1000d5aa:	9101      	str	r1, [sp, #4]
1000d5ac:	2900      	cmp	r1, #0
1000d5ae:	d128      	bne.n	1000d602 <at_ble_write_authorize_reply+0x5e>
1000d5b0:	8843      	ldrh	r3, [r0, #2]
1000d5b2:	1c27      	adds	r7, r4, #0
1000d5b4:	9300      	str	r3, [sp, #0]
1000d5b6:	1c18      	adds	r0, r3, #0
1000d5b8:	4b16      	ldr	r3, [pc, #88]	; (1000d614 <at_ble_write_authorize_reply+0x70>)
1000d5ba:	4798      	blx	r3
1000d5bc:	3708      	adds	r7, #8
1000d5be:	2800      	cmp	r0, #0
1000d5c0:	d009      	beq.n	1000d5d6 <at_ble_write_authorize_reply+0x32>
1000d5c2:	6880      	ldr	r0, [r0, #8]
1000d5c4:	2800      	cmp	r0, #0
1000d5c6:	d006      	beq.n	1000d5d6 <at_ble_write_authorize_reply+0x32>
1000d5c8:	88a3      	ldrh	r3, [r4, #4]
1000d5ca:	88e2      	ldrh	r2, [r4, #6]
1000d5cc:	18c0      	adds	r0, r0, r3
1000d5ce:	1c39      	adds	r1, r7, #0
1000d5d0:	4b11      	ldr	r3, [pc, #68]	; (1000d618 <at_ble_write_authorize_reply+0x74>)
1000d5d2:	4798      	blx	r3
1000d5d4:	e015      	b.n	1000d602 <at_ble_write_authorize_reply+0x5e>
1000d5d6:	ab02      	add	r3, sp, #8
1000d5d8:	1d9e      	adds	r6, r3, #6
1000d5da:	2300      	movs	r3, #0
1000d5dc:	4d0f      	ldr	r5, [pc, #60]	; (1000d61c <at_ble_write_authorize_reply+0x78>)
1000d5de:	8033      	strh	r3, [r6, #0]
1000d5e0:	6829      	ldr	r1, [r5, #0]
1000d5e2:	1c32      	adds	r2, r6, #0
1000d5e4:	4b0e      	ldr	r3, [pc, #56]	; (1000d620 <at_ble_write_authorize_reply+0x7c>)
1000d5e6:	9800      	ldr	r0, [sp, #0]
1000d5e8:	4798      	blx	r3
1000d5ea:	682b      	ldr	r3, [r5, #0]
1000d5ec:	88a0      	ldrh	r0, [r4, #4]
1000d5ee:	88e2      	ldrh	r2, [r4, #6]
1000d5f0:	1818      	adds	r0, r3, r0
1000d5f2:	1c39      	adds	r1, r7, #0
1000d5f4:	4b08      	ldr	r3, [pc, #32]	; (1000d618 <at_ble_write_authorize_reply+0x74>)
1000d5f6:	4798      	blx	r3
1000d5f8:	8860      	ldrh	r0, [r4, #2]
1000d5fa:	8832      	ldrh	r2, [r6, #0]
1000d5fc:	6829      	ldr	r1, [r5, #0]
1000d5fe:	4b09      	ldr	r3, [pc, #36]	; (1000d624 <at_ble_write_authorize_reply+0x80>)
1000d600:	4798      	blx	r3
1000d602:	8860      	ldrh	r0, [r4, #2]
1000d604:	8821      	ldrh	r1, [r4, #0]
1000d606:	9a01      	ldr	r2, [sp, #4]
1000d608:	4b07      	ldr	r3, [pc, #28]	; (1000d628 <at_ble_write_authorize_reply+0x84>)
1000d60a:	4798      	blx	r3
1000d60c:	2000      	movs	r0, #0
1000d60e:	b005      	add	sp, #20
1000d610:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d612:	46c0      	nop			; (mov r8, r8)
1000d614:	1000ce35 	.word	0x1000ce35
1000d618:	1001310d 	.word	0x1001310d
1000d61c:	100152f8 	.word	0x100152f8
1000d620:	1000d565 	.word	0x1000d565
1000d624:	1000d529 	.word	0x1000d529
1000d628:	1000ee01 	.word	0x1000ee01

1000d62c <gatts_handle_read_req>:
1000d62c:	b538      	push	{r3, r4, r5, lr}
1000d62e:	1c0c      	adds	r4, r1, #0
1000d630:	4b07      	ldr	r3, [pc, #28]	; (1000d650 <gatts_handle_read_req+0x24>)
1000d632:	4798      	blx	r3
1000d634:	8865      	ldrh	r5, [r4, #2]
1000d636:	4b07      	ldr	r3, [pc, #28]	; (1000d654 <gatts_handle_read_req+0x28>)
1000d638:	1c28      	adds	r0, r5, #0
1000d63a:	4798      	blx	r3
1000d63c:	7883      	ldrb	r3, [r0, #2]
1000d63e:	2026      	movs	r0, #38	; 0x26
1000d640:	07db      	lsls	r3, r3, #31
1000d642:	d404      	bmi.n	1000d64e <gatts_handle_read_req+0x22>
1000d644:	8820      	ldrh	r0, [r4, #0]
1000d646:	1c29      	adds	r1, r5, #0
1000d648:	4b03      	ldr	r3, [pc, #12]	; (1000d658 <gatts_handle_read_req+0x2c>)
1000d64a:	4798      	blx	r3
1000d64c:	203b      	movs	r0, #59	; 0x3b
1000d64e:	bd38      	pop	{r3, r4, r5, pc}
1000d650:	1000ed45 	.word	0x1000ed45
1000d654:	1000ce35 	.word	0x1000ce35
1000d658:	1000d09d 	.word	0x1000d09d

1000d65c <gatts_handle_att_info_req>:
1000d65c:	b538      	push	{r3, r4, r5, lr}
1000d65e:	1c0d      	adds	r5, r1, #0
1000d660:	4b0a      	ldr	r3, [pc, #40]	; (1000d68c <gatts_handle_att_info_req+0x30>)
1000d662:	1c14      	adds	r4, r2, #0
1000d664:	4798      	blx	r3
1000d666:	882d      	ldrh	r5, [r5, #0]
1000d668:	4b09      	ldr	r3, [pc, #36]	; (1000d690 <gatts_handle_att_info_req+0x34>)
1000d66a:	1c28      	adds	r0, r5, #0
1000d66c:	4798      	blx	r3
1000d66e:	0a22      	lsrs	r2, r4, #8
1000d670:	1c03      	adds	r3, r0, #0
1000d672:	4c08      	ldr	r4, [pc, #32]	; (1000d694 <gatts_handle_att_info_req+0x38>)
1000d674:	b291      	uxth	r1, r2
1000d676:	2800      	cmp	r0, #0
1000d678:	d003      	beq.n	1000d682 <gatts_handle_att_info_req+0x26>
1000d67a:	8882      	ldrh	r2, [r0, #4]
1000d67c:	2300      	movs	r3, #0
1000d67e:	1c28      	adds	r0, r5, #0
1000d680:	e001      	b.n	1000d686 <gatts_handle_att_info_req+0x2a>
1000d682:	1c28      	adds	r0, r5, #0
1000d684:	2201      	movs	r2, #1
1000d686:	47a0      	blx	r4
1000d688:	203b      	movs	r0, #59	; 0x3b
1000d68a:	bd38      	pop	{r3, r4, r5, pc}
1000d68c:	1000ed89 	.word	0x1000ed89
1000d690:	1000ce35 	.word	0x1000ce35
1000d694:	1000ee45 	.word	0x1000ee45

1000d698 <gatts_handle_write_req>:
1000d698:	b510      	push	{r4, lr}
1000d69a:	1c14      	adds	r4, r2, #0
1000d69c:	4b07      	ldr	r3, [pc, #28]	; (1000d6bc <gatts_handle_write_req+0x24>)
1000d69e:	4798      	blx	r3
1000d6a0:	4b07      	ldr	r3, [pc, #28]	; (1000d6c0 <gatts_handle_write_req+0x28>)
1000d6a2:	8860      	ldrh	r0, [r4, #2]
1000d6a4:	4798      	blx	r3
1000d6a6:	2302      	movs	r3, #2
1000d6a8:	7881      	ldrb	r1, [r0, #2]
1000d6aa:	2022      	movs	r0, #34	; 0x22
1000d6ac:	4019      	ands	r1, r3
1000d6ae:	d103      	bne.n	1000d6b8 <gatts_handle_write_req+0x20>
1000d6b0:	1c20      	adds	r0, r4, #0
1000d6b2:	4b04      	ldr	r3, [pc, #16]	; (1000d6c4 <gatts_handle_write_req+0x2c>)
1000d6b4:	4798      	blx	r3
1000d6b6:	201f      	movs	r0, #31
1000d6b8:	bd10      	pop	{r4, pc}
1000d6ba:	46c0      	nop			; (mov r8, r8)
1000d6bc:	1000ed51 	.word	0x1000ed51
1000d6c0:	1000ce35 	.word	0x1000ce35
1000d6c4:	1000d5a5 	.word	0x1000d5a5

1000d6c8 <at_ble_notification_send>:
1000d6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6ca:	4d17      	ldr	r5, [pc, #92]	; (1000d728 <at_ble_notification_send+0x60>)
1000d6cc:	4c17      	ldr	r4, [pc, #92]	; (1000d72c <at_ble_notification_send+0x64>)
1000d6ce:	682a      	ldr	r2, [r5, #0]
1000d6d0:	44a5      	add	sp, r4
1000d6d2:	23d2      	movs	r3, #210	; 0xd2
1000d6d4:	2a04      	cmp	r2, #4
1000d6d6:	d822      	bhi.n	1000d71e <at_ble_notification_send+0x56>
1000d6d8:	1c06      	adds	r6, r0, #0
1000d6da:	4b15      	ldr	r3, [pc, #84]	; (1000d730 <at_ble_notification_send+0x68>)
1000d6dc:	1c08      	adds	r0, r1, #0
1000d6de:	1c0c      	adds	r4, r1, #0
1000d6e0:	4798      	blx	r3
1000d6e2:	2800      	cmp	r0, #0
1000d6e4:	d008      	beq.n	1000d6f8 <at_ble_notification_send+0x30>
1000d6e6:	6883      	ldr	r3, [r0, #8]
1000d6e8:	2b00      	cmp	r3, #0
1000d6ea:	d005      	beq.n	1000d6f8 <at_ble_notification_send+0x30>
1000d6ec:	8882      	ldrh	r2, [r0, #4]
1000d6ee:	1c21      	adds	r1, r4, #0
1000d6f0:	9200      	str	r2, [sp, #0]
1000d6f2:	2012      	movs	r0, #18
1000d6f4:	1c32      	adds	r2, r6, #0
1000d6f6:	e00c      	b.n	1000d712 <at_ble_notification_send+0x4a>
1000d6f8:	270e      	movs	r7, #14
1000d6fa:	446f      	add	r7, sp
1000d6fc:	1c39      	adds	r1, r7, #0
1000d6fe:	aa04      	add	r2, sp, #16
1000d700:	4b0c      	ldr	r3, [pc, #48]	; (1000d734 <at_ble_notification_send+0x6c>)
1000d702:	1c20      	adds	r0, r4, #0
1000d704:	4798      	blx	r3
1000d706:	2012      	movs	r0, #18
1000d708:	1c21      	adds	r1, r4, #0
1000d70a:	1c32      	adds	r2, r6, #0
1000d70c:	883b      	ldrh	r3, [r7, #0]
1000d70e:	9300      	str	r3, [sp, #0]
1000d710:	ab04      	add	r3, sp, #16
1000d712:	4c09      	ldr	r4, [pc, #36]	; (1000d738 <at_ble_notification_send+0x70>)
1000d714:	47a0      	blx	r4
1000d716:	682b      	ldr	r3, [r5, #0]
1000d718:	3301      	adds	r3, #1
1000d71a:	602b      	str	r3, [r5, #0]
1000d71c:	2300      	movs	r3, #0
1000d71e:	1c18      	adds	r0, r3, #0
1000d720:	2385      	movs	r3, #133	; 0x85
1000d722:	009b      	lsls	r3, r3, #2
1000d724:	449d      	add	sp, r3
1000d726:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d728:	10016e2c 	.word	0x10016e2c
1000d72c:	fffffdec 	.word	0xfffffdec
1000d730:	1000ce35 	.word	0x1000ce35
1000d734:	1000f4a1 	.word	0x1000f4a1
1000d738:	1000ee8d 	.word	0x1000ee8d

1000d73c <init_l2cc_task_module>:
1000d73c:	220a      	movs	r2, #10
1000d73e:	4b01      	ldr	r3, [pc, #4]	; (1000d744 <init_l2cc_task_module+0x8>)
1000d740:	701a      	strb	r2, [r3, #0]
1000d742:	4770      	bx	lr
1000d744:	100152f4 	.word	0x100152f4

1000d748 <l2cc_data_send_rsp_handler>:
1000d748:	b510      	push	{r4, lr}
1000d74a:	7802      	ldrb	r2, [r0, #0]
1000d74c:	700a      	strb	r2, [r1, #0]
1000d74e:	7883      	ldrb	r3, [r0, #2]
1000d750:	7844      	ldrb	r4, [r0, #1]
1000d752:	021b      	lsls	r3, r3, #8
1000d754:	4323      	orrs	r3, r4
1000d756:	804b      	strh	r3, [r1, #2]
1000d758:	7903      	ldrb	r3, [r0, #4]
1000d75a:	78c0      	ldrb	r0, [r0, #3]
1000d75c:	021b      	lsls	r3, r3, #8
1000d75e:	4303      	orrs	r3, r0
1000d760:	808b      	strh	r3, [r1, #4]
1000d762:	2a00      	cmp	r2, #0
1000d764:	d103      	bne.n	1000d76e <l2cc_data_send_rsp_handler+0x26>
1000d766:	4a02      	ldr	r2, [pc, #8]	; (1000d770 <l2cc_data_send_rsp_handler+0x28>)
1000d768:	7813      	ldrb	r3, [r2, #0]
1000d76a:	3301      	adds	r3, #1
1000d76c:	7013      	strb	r3, [r2, #0]
1000d76e:	bd10      	pop	{r4, pc}
1000d770:	100152f4 	.word	0x100152f4

1000d774 <l2cc_data_received_handler>:
1000d774:	b508      	push	{r3, lr}
1000d776:	1c03      	adds	r3, r0, #0
1000d778:	7842      	ldrb	r2, [r0, #1]
1000d77a:	7800      	ldrb	r0, [r0, #0]
1000d77c:	0212      	lsls	r2, r2, #8
1000d77e:	4302      	orrs	r2, r0
1000d780:	800a      	strh	r2, [r1, #0]
1000d782:	78da      	ldrb	r2, [r3, #3]
1000d784:	7898      	ldrb	r0, [r3, #2]
1000d786:	0212      	lsls	r2, r2, #8
1000d788:	4302      	orrs	r2, r0
1000d78a:	804a      	strh	r2, [r1, #2]
1000d78c:	795a      	ldrb	r2, [r3, #5]
1000d78e:	7918      	ldrb	r0, [r3, #4]
1000d790:	0212      	lsls	r2, r2, #8
1000d792:	4302      	orrs	r2, r0
1000d794:	808a      	strh	r2, [r1, #4]
1000d796:	1d88      	adds	r0, r1, #6
1000d798:	1d99      	adds	r1, r3, #6
1000d79a:	4b01      	ldr	r3, [pc, #4]	; (1000d7a0 <l2cc_data_received_handler+0x2c>)
1000d79c:	4798      	blx	r3
1000d79e:	bd08      	pop	{r3, pc}
1000d7a0:	1001310d 	.word	0x1001310d

1000d7a4 <at_ble_authenticate>:
1000d7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7a6:	1c0c      	adds	r4, r1, #0
1000d7a8:	211f      	movs	r1, #31
1000d7aa:	b08b      	sub	sp, #44	; 0x2c
1000d7ac:	9307      	str	r3, [sp, #28]
1000d7ae:	ab02      	add	r3, sp, #8
1000d7b0:	18c9      	adds	r1, r1, r3
1000d7b2:	230f      	movs	r3, #15
1000d7b4:	700b      	strb	r3, [r1, #0]
1000d7b6:	4b40      	ldr	r3, [pc, #256]	; (1000d8b8 <at_ble_authenticate+0x114>)
1000d7b8:	1c05      	adds	r5, r0, #0
1000d7ba:	1c16      	adds	r6, r2, #0
1000d7bc:	4798      	blx	r3
1000d7be:	1c07      	adds	r7, r0, #0
1000d7c0:	2001      	movs	r0, #1
1000d7c2:	2f07      	cmp	r7, #7
1000d7c4:	d875      	bhi.n	1000d8b2 <at_ble_authenticate+0x10e>
1000d7c6:	2c00      	cmp	r4, #0
1000d7c8:	d113      	bne.n	1000d7f2 <at_ble_authenticate+0x4e>
1000d7ca:	2312      	movs	r3, #18
1000d7cc:	435f      	muls	r7, r3
1000d7ce:	4b3b      	ldr	r3, [pc, #236]	; (1000d8bc <at_ble_authenticate+0x118>)
1000d7d0:	5cfb      	ldrb	r3, [r7, r3]
1000d7d2:	4283      	cmp	r3, r0
1000d7d4:	d001      	beq.n	1000d7da <at_ble_authenticate+0x36>
1000d7d6:	20cf      	movs	r0, #207	; 0xcf
1000d7d8:	e06b      	b.n	1000d8b2 <at_ble_authenticate+0x10e>
1000d7da:	9504      	str	r5, [sp, #16]
1000d7dc:	9400      	str	r4, [sp, #0]
1000d7de:	9401      	str	r4, [sp, #4]
1000d7e0:	9402      	str	r4, [sp, #8]
1000d7e2:	9403      	str	r4, [sp, #12]
1000d7e4:	1c20      	adds	r0, r4, #0
1000d7e6:	1c21      	adds	r1, r4, #0
1000d7e8:	1c22      	adds	r2, r4, #0
1000d7ea:	1c23      	adds	r3, r4, #0
1000d7ec:	4d34      	ldr	r5, [pc, #208]	; (1000d8c0 <at_ble_authenticate+0x11c>)
1000d7ee:	47a8      	blx	r5
1000d7f0:	e05e      	b.n	1000d8b0 <at_ble_authenticate+0x10c>
1000d7f2:	7922      	ldrb	r2, [r4, #4]
1000d7f4:	2a06      	cmp	r2, #6
1000d7f6:	d9ee      	bls.n	1000d7d6 <at_ble_authenticate+0x32>
1000d7f8:	7963      	ldrb	r3, [r4, #5]
1000d7fa:	2b10      	cmp	r3, #16
1000d7fc:	d8eb      	bhi.n	1000d7d6 <at_ble_authenticate+0x32>
1000d7fe:	429a      	cmp	r2, r3
1000d800:	d8e9      	bhi.n	1000d7d6 <at_ble_authenticate+0x32>
1000d802:	7a23      	ldrb	r3, [r4, #8]
1000d804:	2b04      	cmp	r3, #4
1000d806:	d8e6      	bhi.n	1000d7d6 <at_ble_authenticate+0x32>
1000d808:	79a3      	ldrb	r3, [r4, #6]
1000d80a:	2b07      	cmp	r3, #7
1000d80c:	d8e3      	bhi.n	1000d7d6 <at_ble_authenticate+0x32>
1000d80e:	79e3      	ldrb	r3, [r4, #7]
1000d810:	2b07      	cmp	r3, #7
1000d812:	d8e0      	bhi.n	1000d7d6 <at_ble_authenticate+0x32>
1000d814:	78a3      	ldrb	r3, [r4, #2]
1000d816:	2b00      	cmp	r3, #0
1000d818:	d006      	beq.n	1000d828 <at_ble_authenticate+0x84>
1000d81a:	2e00      	cmp	r6, #0
1000d81c:	d0db      	beq.n	1000d7d6 <at_ble_authenticate+0x32>
1000d81e:	4829      	ldr	r0, [pc, #164]	; (1000d8c4 <at_ble_authenticate+0x120>)
1000d820:	1c31      	adds	r1, r6, #0
1000d822:	221c      	movs	r2, #28
1000d824:	4b28      	ldr	r3, [pc, #160]	; (1000d8c8 <at_ble_authenticate+0x124>)
1000d826:	4798      	blx	r3
1000d828:	9b07      	ldr	r3, [sp, #28]
1000d82a:	2b00      	cmp	r3, #0
1000d82c:	d005      	beq.n	1000d83a <at_ble_authenticate+0x96>
1000d82e:	4827      	ldr	r0, [pc, #156]	; (1000d8cc <at_ble_authenticate+0x128>)
1000d830:	1c19      	adds	r1, r3, #0
1000d832:	309a      	adds	r0, #154	; 0x9a
1000d834:	2210      	movs	r2, #16
1000d836:	4b24      	ldr	r3, [pc, #144]	; (1000d8c8 <at_ble_authenticate+0x124>)
1000d838:	4798      	blx	r3
1000d83a:	7863      	ldrb	r3, [r4, #1]
1000d83c:	78a2      	ldrb	r2, [r4, #2]
1000d83e:	009b      	lsls	r3, r3, #2
1000d840:	4313      	orrs	r3, r2
1000d842:	2212      	movs	r2, #18
1000d844:	4357      	muls	r7, r2
1000d846:	4a1d      	ldr	r2, [pc, #116]	; (1000d8bc <at_ble_authenticate+0x118>)
1000d848:	b2db      	uxtb	r3, r3
1000d84a:	5cba      	ldrb	r2, [r7, r2]
1000d84c:	2a00      	cmp	r2, #0
1000d84e:	d116      	bne.n	1000d87e <at_ble_authenticate+0xda>
1000d850:	79a0      	ldrb	r0, [r4, #6]
1000d852:	0742      	lsls	r2, r0, #29
1000d854:	d502      	bpl.n	1000d85c <at_ble_authenticate+0xb8>
1000d856:	9a07      	ldr	r2, [sp, #28]
1000d858:	2a00      	cmp	r2, #0
1000d85a:	d0bc      	beq.n	1000d7d6 <at_ble_authenticate+0x32>
1000d85c:	07c2      	lsls	r2, r0, #31
1000d85e:	d501      	bpl.n	1000d864 <at_ble_authenticate+0xc0>
1000d860:	2e00      	cmp	r6, #0
1000d862:	d0b8      	beq.n	1000d7d6 <at_ble_authenticate+0x32>
1000d864:	7966      	ldrb	r6, [r4, #5]
1000d866:	7821      	ldrb	r1, [r4, #0]
1000d868:	78e2      	ldrb	r2, [r4, #3]
1000d86a:	9600      	str	r6, [sp, #0]
1000d86c:	9001      	str	r0, [sp, #4]
1000d86e:	79e0      	ldrb	r0, [r4, #7]
1000d870:	9002      	str	r0, [sp, #8]
1000d872:	7a20      	ldrb	r0, [r4, #8]
1000d874:	4c16      	ldr	r4, [pc, #88]	; (1000d8d0 <at_ble_authenticate+0x12c>)
1000d876:	9003      	str	r0, [sp, #12]
1000d878:	1c28      	adds	r0, r5, #0
1000d87a:	47a0      	blx	r4
1000d87c:	e018      	b.n	1000d8b0 <at_ble_authenticate+0x10c>
1000d87e:	2a01      	cmp	r2, #1
1000d880:	d1a9      	bne.n	1000d7d6 <at_ble_authenticate+0x32>
1000d882:	79e0      	ldrb	r0, [r4, #7]
1000d884:	0742      	lsls	r2, r0, #29
1000d886:	d502      	bpl.n	1000d88e <at_ble_authenticate+0xea>
1000d888:	9a07      	ldr	r2, [sp, #28]
1000d88a:	2a00      	cmp	r2, #0
1000d88c:	d0a3      	beq.n	1000d7d6 <at_ble_authenticate+0x32>
1000d88e:	07c2      	lsls	r2, r0, #31
1000d890:	d501      	bpl.n	1000d896 <at_ble_authenticate+0xf2>
1000d892:	2e00      	cmp	r6, #0
1000d894:	d09f      	beq.n	1000d7d6 <at_ble_authenticate+0x32>
1000d896:	7966      	ldrb	r6, [r4, #5]
1000d898:	7821      	ldrb	r1, [r4, #0]
1000d89a:	78e2      	ldrb	r2, [r4, #3]
1000d89c:	9600      	str	r6, [sp, #0]
1000d89e:	79a6      	ldrb	r6, [r4, #6]
1000d8a0:	9002      	str	r0, [sp, #8]
1000d8a2:	9601      	str	r6, [sp, #4]
1000d8a4:	7a20      	ldrb	r0, [r4, #8]
1000d8a6:	9504      	str	r5, [sp, #16]
1000d8a8:	9003      	str	r0, [sp, #12]
1000d8aa:	4c05      	ldr	r4, [pc, #20]	; (1000d8c0 <at_ble_authenticate+0x11c>)
1000d8ac:	2001      	movs	r0, #1
1000d8ae:	47a0      	blx	r4
1000d8b0:	2000      	movs	r0, #0
1000d8b2:	b00b      	add	sp, #44	; 0x2c
1000d8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8b6:	46c0      	nop			; (mov r8, r8)
1000d8b8:	1000dca5 	.word	0x1000dca5
1000d8bc:	10017fb6 	.word	0x10017fb6
1000d8c0:	1000e215 	.word	0x1000e215
1000d8c4:	100180c4 	.word	0x100180c4
1000d8c8:	1001310d 	.word	0x1001310d
1000d8cc:	10018046 	.word	0x10018046
1000d8d0:	1000dff5 	.word	0x1000dff5

1000d8d4 <at_ble_pair_key_reply>:
1000d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8d6:	b085      	sub	sp, #20
1000d8d8:	1c05      	adds	r5, r0, #0
1000d8da:	1c0c      	adds	r4, r1, #0
1000d8dc:	1c16      	adds	r6, r2, #0
1000d8de:	2100      	movs	r1, #0
1000d8e0:	4668      	mov	r0, sp
1000d8e2:	2210      	movs	r2, #16
1000d8e4:	4b18      	ldr	r3, [pc, #96]	; (1000d948 <at_ble_pair_key_reply+0x74>)
1000d8e6:	4798      	blx	r3
1000d8e8:	2101      	movs	r1, #1
1000d8ea:	2e00      	cmp	r6, #0
1000d8ec:	d101      	bne.n	1000d8f2 <at_ble_pair_key_reply+0x1e>
1000d8ee:	1c31      	adds	r1, r6, #0
1000d8f0:	466e      	mov	r6, sp
1000d8f2:	2c00      	cmp	r4, #0
1000d8f4:	d116      	bne.n	1000d924 <at_ble_pair_key_reply+0x50>
1000d8f6:	2701      	movs	r7, #1
1000d8f8:	1c23      	adds	r3, r4, #0
1000d8fa:	1d70      	adds	r0, r6, #5
1000d8fc:	3e01      	subs	r6, #1
1000d8fe:	7802      	ldrb	r2, [r0, #0]
1000d900:	3801      	subs	r0, #1
1000d902:	3a30      	subs	r2, #48	; 0x30
1000d904:	437a      	muls	r2, r7
1000d906:	189b      	adds	r3, r3, r2
1000d908:	220a      	movs	r2, #10
1000d90a:	4357      	muls	r7, r2
1000d90c:	42b0      	cmp	r0, r6
1000d90e:	d1f6      	bne.n	1000d8fe <at_ble_pair_key_reply+0x2a>
1000d910:	466a      	mov	r2, sp
1000d912:	4668      	mov	r0, sp
1000d914:	7013      	strb	r3, [r2, #0]
1000d916:	0a1a      	lsrs	r2, r3, #8
1000d918:	7042      	strb	r2, [r0, #1]
1000d91a:	0c1a      	lsrs	r2, r3, #16
1000d91c:	0e1b      	lsrs	r3, r3, #24
1000d91e:	7082      	strb	r2, [r0, #2]
1000d920:	70c3      	strb	r3, [r0, #3]
1000d922:	e009      	b.n	1000d938 <at_ble_pair_key_reply+0x64>
1000d924:	20cf      	movs	r0, #207	; 0xcf
1000d926:	2c01      	cmp	r4, #1
1000d928:	d10c      	bne.n	1000d944 <at_ble_pair_key_reply+0x70>
1000d92a:	2300      	movs	r3, #0
1000d92c:	4668      	mov	r0, sp
1000d92e:	5cf2      	ldrb	r2, [r6, r3]
1000d930:	54c2      	strb	r2, [r0, r3]
1000d932:	3301      	adds	r3, #1
1000d934:	2b10      	cmp	r3, #16
1000d936:	d1f9      	bne.n	1000d92c <at_ble_pair_key_reply+0x58>
1000d938:	2004      	movs	r0, #4
1000d93a:	466a      	mov	r2, sp
1000d93c:	1c2b      	adds	r3, r5, #0
1000d93e:	4c03      	ldr	r4, [pc, #12]	; (1000d94c <at_ble_pair_key_reply+0x78>)
1000d940:	47a0      	blx	r4
1000d942:	2000      	movs	r0, #0
1000d944:	b005      	add	sp, #20
1000d946:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d948:	1001311f 	.word	0x1001311f
1000d94c:	1000e291 	.word	0x1000e291

1000d950 <at_ble_send_slave_sec_request>:
1000d950:	b570      	push	{r4, r5, r6, lr}
1000d952:	4b0c      	ldr	r3, [pc, #48]	; (1000d984 <at_ble_send_slave_sec_request+0x34>)
1000d954:	1c0e      	adds	r6, r1, #0
1000d956:	2100      	movs	r1, #0
1000d958:	1c05      	adds	r5, r0, #0
1000d95a:	1c14      	adds	r4, r2, #0
1000d95c:	4798      	blx	r3
1000d95e:	2301      	movs	r3, #1
1000d960:	2807      	cmp	r0, #7
1000d962:	d80d      	bhi.n	1000d980 <at_ble_send_slave_sec_request+0x30>
1000d964:	3311      	adds	r3, #17
1000d966:	4358      	muls	r0, r3
1000d968:	4b07      	ldr	r3, [pc, #28]	; (1000d988 <at_ble_send_slave_sec_request+0x38>)
1000d96a:	5cc2      	ldrb	r2, [r0, r3]
1000d96c:	23e0      	movs	r3, #224	; 0xe0
1000d96e:	2a01      	cmp	r2, #1
1000d970:	d106      	bne.n	1000d980 <at_ble_send_slave_sec_request+0x30>
1000d972:	00b1      	lsls	r1, r6, #2
1000d974:	430c      	orrs	r4, r1
1000d976:	4b05      	ldr	r3, [pc, #20]	; (1000d98c <at_ble_send_slave_sec_request+0x3c>)
1000d978:	b2e1      	uxtb	r1, r4
1000d97a:	1c28      	adds	r0, r5, #0
1000d97c:	4798      	blx	r3
1000d97e:	2300      	movs	r3, #0
1000d980:	1c18      	adds	r0, r3, #0
1000d982:	bd70      	pop	{r4, r5, r6, pc}
1000d984:	1000dca5 	.word	0x1000dca5
1000d988:	10017fb6 	.word	0x10017fb6
1000d98c:	1000e2e1 	.word	0x1000e2e1

1000d990 <at_ble_encryption_start>:
1000d990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d992:	23cf      	movs	r3, #207	; 0xcf
1000d994:	2900      	cmp	r1, #0
1000d996:	d02b      	beq.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d998:	2a05      	cmp	r2, #5
1000d99a:	d829      	bhi.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d99c:	2701      	movs	r7, #1
1000d99e:	1c3d      	adds	r5, r7, #0
1000d9a0:	2433      	movs	r4, #51	; 0x33
1000d9a2:	4095      	lsls	r5, r2
1000d9a4:	4225      	tst	r5, r4
1000d9a6:	d023      	beq.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d9a8:	7e8c      	ldrb	r4, [r1, #26]
1000d9aa:	3c07      	subs	r4, #7
1000d9ac:	2c09      	cmp	r4, #9
1000d9ae:	d81f      	bhi.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d9b0:	4b10      	ldr	r3, [pc, #64]	; (1000d9f4 <at_ble_encryption_start+0x64>)
1000d9b2:	1c0c      	adds	r4, r1, #0
1000d9b4:	2100      	movs	r1, #0
1000d9b6:	1c15      	adds	r5, r2, #0
1000d9b8:	1c06      	adds	r6, r0, #0
1000d9ba:	4798      	blx	r3
1000d9bc:	1c3b      	adds	r3, r7, #0
1000d9be:	2807      	cmp	r0, #7
1000d9c0:	d816      	bhi.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d9c2:	2312      	movs	r3, #18
1000d9c4:	4358      	muls	r0, r3
1000d9c6:	4b0c      	ldr	r3, [pc, #48]	; (1000d9f8 <at_ble_encryption_start+0x68>)
1000d9c8:	5cc7      	ldrb	r7, [r0, r3]
1000d9ca:	23e0      	movs	r3, #224	; 0xe0
1000d9cc:	2f00      	cmp	r7, #0
1000d9ce:	d10f      	bne.n	1000d9f0 <at_ble_encryption_start+0x60>
1000d9d0:	1c21      	adds	r1, r4, #0
1000d9d2:	221c      	movs	r2, #28
1000d9d4:	4b09      	ldr	r3, [pc, #36]	; (1000d9fc <at_ble_encryption_start+0x6c>)
1000d9d6:	480a      	ldr	r0, [pc, #40]	; (1000da00 <at_ble_encryption_start+0x70>)
1000d9d8:	4798      	blx	r3
1000d9da:	1c23      	adds	r3, r4, #0
1000d9dc:	7ea1      	ldrb	r1, [r4, #26]
1000d9de:	8a22      	ldrh	r2, [r4, #16]
1000d9e0:	3312      	adds	r3, #18
1000d9e2:	9100      	str	r1, [sp, #0]
1000d9e4:	9501      	str	r5, [sp, #4]
1000d9e6:	1c21      	adds	r1, r4, #0
1000d9e8:	1c30      	adds	r0, r6, #0
1000d9ea:	4c06      	ldr	r4, [pc, #24]	; (1000da04 <at_ble_encryption_start+0x74>)
1000d9ec:	47a0      	blx	r4
1000d9ee:	1c3b      	adds	r3, r7, #0
1000d9f0:	1c18      	adds	r0, r3, #0
1000d9f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d9f4:	1000dca5 	.word	0x1000dca5
1000d9f8:	10017fb6 	.word	0x10017fb6
1000d9fc:	1001310d 	.word	0x1001310d
1000da00:	100180c4 	.word	0x100180c4
1000da04:	1000e321 	.word	0x1000e321

1000da08 <at_ble_encryption_request_reply>:
1000da08:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000da0a:	24cf      	movs	r4, #207	; 0xcf
1000da0c:	2b00      	cmp	r3, #0
1000da0e:	d011      	beq.n	1000da34 <at_ble_encryption_request_reply+0x2c>
1000da10:	2a00      	cmp	r2, #0
1000da12:	d00a      	beq.n	1000da2a <at_ble_encryption_request_reply+0x22>
1000da14:	2905      	cmp	r1, #5
1000da16:	d80d      	bhi.n	1000da34 <at_ble_encryption_request_reply+0x2c>
1000da18:	2501      	movs	r5, #1
1000da1a:	2633      	movs	r6, #51	; 0x33
1000da1c:	408d      	lsls	r5, r1
1000da1e:	4235      	tst	r5, r6
1000da20:	d008      	beq.n	1000da34 <at_ble_encryption_request_reply+0x2c>
1000da22:	7e9d      	ldrb	r5, [r3, #26]
1000da24:	3d07      	subs	r5, #7
1000da26:	2d09      	cmp	r5, #9
1000da28:	d804      	bhi.n	1000da34 <at_ble_encryption_request_reply+0x2c>
1000da2a:	7e9c      	ldrb	r4, [r3, #26]
1000da2c:	9400      	str	r4, [sp, #0]
1000da2e:	4c02      	ldr	r4, [pc, #8]	; (1000da38 <at_ble_encryption_request_reply+0x30>)
1000da30:	47a0      	blx	r4
1000da32:	2400      	movs	r4, #0
1000da34:	1c20      	adds	r0, r4, #0
1000da36:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000da38:	1000e3dd 	.word	0x1000e3dd

1000da3c <rx_callback>:
1000da3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000da3e:	8883      	ldrh	r3, [r0, #4]
1000da40:	1c01      	adds	r1, r0, #0
1000da42:	9301      	str	r3, [sp, #4]
1000da44:	88c5      	ldrh	r5, [r0, #6]
1000da46:	8806      	ldrh	r6, [r0, #0]
1000da48:	2d00      	cmp	r5, #0
1000da4a:	d10f      	bne.n	1000da6c <rx_callback+0x30>
1000da4c:	1c19      	adds	r1, r3, #0
1000da4e:	1c30      	adds	r0, r6, #0
1000da50:	4b19      	ldr	r3, [pc, #100]	; (1000dab8 <rx_callback+0x7c>)
1000da52:	1c2a      	adds	r2, r5, #0
1000da54:	4798      	blx	r3
1000da56:	1e03      	subs	r3, r0, #0
1000da58:	d105      	bne.n	1000da66 <rx_callback+0x2a>
1000da5a:	1c30      	adds	r0, r6, #0
1000da5c:	9901      	ldr	r1, [sp, #4]
1000da5e:	1c1a      	adds	r2, r3, #0
1000da60:	4c16      	ldr	r4, [pc, #88]	; (1000dabc <rx_callback+0x80>)
1000da62:	47a0      	blx	r4
1000da64:	e027      	b.n	1000dab6 <rx_callback+0x7a>
1000da66:	4b16      	ldr	r3, [pc, #88]	; (1000dac0 <rx_callback+0x84>)
1000da68:	4798      	blx	r3
1000da6a:	e024      	b.n	1000dab6 <rx_callback+0x7a>
1000da6c:	4c15      	ldr	r4, [pc, #84]	; (1000dac4 <rx_callback+0x88>)
1000da6e:	4a16      	ldr	r2, [pc, #88]	; (1000dac8 <rx_callback+0x8c>)
1000da70:	6823      	ldr	r3, [r4, #0]
1000da72:	6812      	ldr	r2, [r2, #0]
1000da74:	18eb      	adds	r3, r5, r3
1000da76:	4293      	cmp	r3, r2
1000da78:	d901      	bls.n	1000da7e <rx_callback+0x42>
1000da7a:	2300      	movs	r3, #0
1000da7c:	6023      	str	r3, [r4, #0]
1000da7e:	4f13      	ldr	r7, [pc, #76]	; (1000dacc <rx_callback+0x90>)
1000da80:	6822      	ldr	r2, [r4, #0]
1000da82:	683b      	ldr	r3, [r7, #0]
1000da84:	3108      	adds	r1, #8
1000da86:	1898      	adds	r0, r3, r2
1000da88:	1c2a      	adds	r2, r5, #0
1000da8a:	4b11      	ldr	r3, [pc, #68]	; (1000dad0 <rx_callback+0x94>)
1000da8c:	4798      	blx	r3
1000da8e:	683b      	ldr	r3, [r7, #0]
1000da90:	6822      	ldr	r2, [r4, #0]
1000da92:	1c30      	adds	r0, r6, #0
1000da94:	189a      	adds	r2, r3, r2
1000da96:	9901      	ldr	r1, [sp, #4]
1000da98:	4b07      	ldr	r3, [pc, #28]	; (1000dab8 <rx_callback+0x7c>)
1000da9a:	4798      	blx	r3
1000da9c:	2800      	cmp	r0, #0
1000da9e:	d1e2      	bne.n	1000da66 <rx_callback+0x2a>
1000daa0:	6823      	ldr	r3, [r4, #0]
1000daa2:	683a      	ldr	r2, [r7, #0]
1000daa4:	1c30      	adds	r0, r6, #0
1000daa6:	18d2      	adds	r2, r2, r3
1000daa8:	9901      	ldr	r1, [sp, #4]
1000daaa:	1c2b      	adds	r3, r5, #0
1000daac:	4e03      	ldr	r6, [pc, #12]	; (1000dabc <rx_callback+0x80>)
1000daae:	47b0      	blx	r6
1000dab0:	6823      	ldr	r3, [r4, #0]
1000dab2:	18ed      	adds	r5, r5, r3
1000dab4:	6025      	str	r5, [r4, #0]
1000dab6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dab8:	1000bfe9 	.word	0x1000bfe9
1000dabc:	1000bf61 	.word	0x1000bf61
1000dac0:	1000b6c1 	.word	0x1000b6c1
1000dac4:	10018120 	.word	0x10018120
1000dac8:	10016da8 	.word	0x10016da8
1000dacc:	10016da4 	.word	0x10016da4
1000dad0:	1001310d 	.word	0x1001310d

1000dad4 <interface_send>:
1000dad4:	b508      	push	{r3, lr}
1000dad6:	4b02      	ldr	r3, [pc, #8]	; (1000dae0 <interface_send+0xc>)
1000dad8:	4798      	blx	r3
1000dada:	2000      	movs	r0, #0
1000dadc:	bd08      	pop	{r3, pc}
1000dade:	46c0      	nop			; (mov r8, r8)
1000dae0:	1000b3b9 	.word	0x1000b3b9

1000dae4 <interface_init>:
1000dae4:	2280      	movs	r2, #128	; 0x80
1000dae6:	b510      	push	{r4, lr}
1000dae8:	2100      	movs	r1, #0
1000daea:	1c04      	adds	r4, r0, #0
1000daec:	0092      	lsls	r2, r2, #2
1000daee:	4b08      	ldr	r3, [pc, #32]	; (1000db10 <interface_init+0x2c>)
1000daf0:	4808      	ldr	r0, [pc, #32]	; (1000db14 <interface_init+0x30>)
1000daf2:	4798      	blx	r3
1000daf4:	2200      	movs	r2, #0
1000daf6:	4b08      	ldr	r3, [pc, #32]	; (1000db18 <interface_init+0x34>)
1000daf8:	601a      	str	r2, [r3, #0]
1000dafa:	4a08      	ldr	r2, [pc, #32]	; (1000db1c <interface_init+0x38>)
1000dafc:	4b08      	ldr	r3, [pc, #32]	; (1000db20 <interface_init+0x3c>)
1000dafe:	601a      	str	r2, [r3, #0]
1000db00:	4b08      	ldr	r3, [pc, #32]	; (1000db24 <interface_init+0x40>)
1000db02:	6922      	ldr	r2, [r4, #16]
1000db04:	601a      	str	r2, [r3, #0]
1000db06:	6962      	ldr	r2, [r4, #20]
1000db08:	4b07      	ldr	r3, [pc, #28]	; (1000db28 <interface_init+0x44>)
1000db0a:	601a      	str	r2, [r3, #0]
1000db0c:	bd10      	pop	{r4, pc}
1000db0e:	46c0      	nop			; (mov r8, r8)
1000db10:	1001311f 	.word	0x1001311f
1000db14:	10018324 	.word	0x10018324
1000db18:	10018120 	.word	0x10018120
1000db1c:	10018124 	.word	0x10018124
1000db20:	100152f8 	.word	0x100152f8
1000db24:	10016da4 	.word	0x10016da4
1000db28:	10016da8 	.word	0x10016da8

1000db2c <platform_cmd_cmpl_signal>:
1000db2c:	2201      	movs	r2, #1
1000db2e:	4b01      	ldr	r3, [pc, #4]	; (1000db34 <platform_cmd_cmpl_signal+0x8>)
1000db30:	601a      	str	r2, [r3, #0]
1000db32:	4770      	bx	lr
1000db34:	10016dac 	.word	0x10016dac

1000db38 <platform_cmd_cmpl_wait>:
1000db38:	b510      	push	{r4, lr}
1000db3a:	1c04      	adds	r4, r0, #0
1000db3c:	4b07      	ldr	r3, [pc, #28]	; (1000db5c <platform_cmd_cmpl_wait+0x24>)
1000db3e:	681a      	ldr	r2, [r3, #0]
1000db40:	2a01      	cmp	r2, #1
1000db42:	d003      	beq.n	1000db4c <platform_cmd_cmpl_wait+0x14>
1000db44:	4b06      	ldr	r3, [pc, #24]	; (1000db60 <platform_cmd_cmpl_wait+0x28>)
1000db46:	2000      	movs	r0, #0
1000db48:	4798      	blx	r3
1000db4a:	e7f7      	b.n	1000db3c <platform_cmd_cmpl_wait+0x4>
1000db4c:	6819      	ldr	r1, [r3, #0]
1000db4e:	2901      	cmp	r1, #1
1000db50:	d102      	bne.n	1000db58 <platform_cmd_cmpl_wait+0x20>
1000db52:	2200      	movs	r2, #0
1000db54:	601a      	str	r2, [r3, #0]
1000db56:	e000      	b.n	1000db5a <platform_cmd_cmpl_wait+0x22>
1000db58:	7022      	strb	r2, [r4, #0]
1000db5a:	bd10      	pop	{r4, pc}
1000db5c:	10016dac 	.word	0x10016dac
1000db60:	1000b449 	.word	0x1000b449

1000db64 <start_timer>:
1000db64:	4770      	bx	lr

1000db66 <stop_timer>:
1000db66:	4770      	bx	lr

1000db68 <dbg_le_set_bd_addr_req_handler>:
1000db68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000db6a:	466b      	mov	r3, sp
1000db6c:	1dde      	adds	r6, r3, #7
1000db6e:	2300      	movs	r3, #0
1000db70:	7033      	strb	r3, [r6, #0]
1000db72:	230f      	movs	r3, #15
1000db74:	4c13      	ldr	r4, [pc, #76]	; (1000dbc4 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000db76:	2703      	movs	r7, #3
1000db78:	7023      	strb	r3, [r4, #0]
1000db7a:	2300      	movs	r3, #0
1000db7c:	70e3      	strb	r3, [r4, #3]
1000db7e:	4b12      	ldr	r3, [pc, #72]	; (1000dbc8 <dbg_le_set_bd_addr_req_handler+0x60>)
1000db80:	1c01      	adds	r1, r0, #0
1000db82:	881a      	ldrh	r2, [r3, #0]
1000db84:	881b      	ldrh	r3, [r3, #0]
1000db86:	7122      	strb	r2, [r4, #4]
1000db88:	0a1b      	lsrs	r3, r3, #8
1000db8a:	2206      	movs	r2, #6
1000db8c:	7163      	strb	r3, [r4, #5]
1000db8e:	480f      	ldr	r0, [pc, #60]	; (1000dbcc <dbg_le_set_bd_addr_req_handler+0x64>)
1000db90:	4b0f      	ldr	r3, [pc, #60]	; (1000dbd0 <dbg_le_set_bd_addr_req_handler+0x68>)
1000db92:	7067      	strb	r7, [r4, #1]
1000db94:	70a7      	strb	r7, [r4, #2]
1000db96:	4798      	blx	r3
1000db98:	4d0e      	ldr	r5, [pc, #56]	; (1000dbd4 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000db9a:	4b0f      	ldr	r3, [pc, #60]	; (1000dbd8 <dbg_le_set_bd_addr_req_handler+0x70>)
1000db9c:	210e      	movs	r1, #14
1000db9e:	802b      	strh	r3, [r5, #0]
1000dba0:	2306      	movs	r3, #6
1000dba2:	71a3      	strb	r3, [r4, #6]
1000dba4:	2300      	movs	r3, #0
1000dba6:	1c20      	adds	r0, r4, #0
1000dba8:	71e3      	strb	r3, [r4, #7]
1000dbaa:	4b0c      	ldr	r3, [pc, #48]	; (1000dbdc <dbg_le_set_bd_addr_req_handler+0x74>)
1000dbac:	80af      	strh	r7, [r5, #4]
1000dbae:	4798      	blx	r3
1000dbb0:	1c30      	adds	r0, r6, #0
1000dbb2:	4b0b      	ldr	r3, [pc, #44]	; (1000dbe0 <dbg_le_set_bd_addr_req_handler+0x78>)
1000dbb4:	4798      	blx	r3
1000dbb6:	7833      	ldrb	r3, [r6, #0]
1000dbb8:	20e2      	movs	r0, #226	; 0xe2
1000dbba:	2b00      	cmp	r3, #0
1000dbbc:	d101      	bne.n	1000dbc2 <dbg_le_set_bd_addr_req_handler+0x5a>
1000dbbe:	68ab      	ldr	r3, [r5, #8]
1000dbc0:	7818      	ldrb	r0, [r3, #0]
1000dbc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dbc4:	10018324 	.word	0x10018324
1000dbc8:	10017fb4 	.word	0x10017fb4
1000dbcc:	1001832c 	.word	0x1001832c
1000dbd0:	1001310d 	.word	0x1001310d
1000dbd4:	10017fa8 	.word	0x10017fa8
1000dbd8:	00000329 	.word	0x00000329
1000dbdc:	1000dad5 	.word	0x1000dad5
1000dbe0:	1000db39 	.word	0x1000db39

1000dbe4 <gapc_get_dev_info_cfm.constprop.1>:
1000dbe4:	b538      	push	{r3, r4, r5, lr}
1000dbe6:	230b      	movs	r3, #11
1000dbe8:	4c27      	ldr	r4, [pc, #156]	; (1000dc88 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000dbea:	7023      	strb	r3, [r4, #0]
1000dbec:	3303      	adds	r3, #3
1000dbee:	7063      	strb	r3, [r4, #1]
1000dbf0:	3329      	adds	r3, #41	; 0x29
1000dbf2:	70a3      	strb	r3, [r4, #2]
1000dbf4:	4b25      	ldr	r3, [pc, #148]	; (1000dc8c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000dbf6:	70e1      	strb	r1, [r4, #3]
1000dbf8:	881a      	ldrh	r2, [r3, #0]
1000dbfa:	881b      	ldrh	r3, [r3, #0]
1000dbfc:	7122      	strb	r2, [r4, #4]
1000dbfe:	0a1b      	lsrs	r3, r3, #8
1000dc00:	7163      	strb	r3, [r4, #5]
1000dc02:	2300      	movs	r3, #0
1000dc04:	7220      	strb	r0, [r4, #8]
1000dc06:	7263      	strb	r3, [r4, #9]
1000dc08:	2801      	cmp	r0, #1
1000dc0a:	d02b      	beq.n	1000dc64 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000dc0c:	4298      	cmp	r0, r3
1000dc0e:	d01b      	beq.n	1000dc48 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000dc10:	2802      	cmp	r0, #2
1000dc12:	d12f      	bne.n	1000dc74 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000dc14:	4b1e      	ldr	r3, [pc, #120]	; (1000dc90 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dc16:	2112      	movs	r1, #18
1000dc18:	1c1a      	adds	r2, r3, #0
1000dc1a:	32ce      	adds	r2, #206	; 0xce
1000dc1c:	8812      	ldrh	r2, [r2, #0]
1000dc1e:	72a2      	strb	r2, [r4, #10]
1000dc20:	0a12      	lsrs	r2, r2, #8
1000dc22:	72e2      	strb	r2, [r4, #11]
1000dc24:	1c1a      	adds	r2, r3, #0
1000dc26:	32d0      	adds	r2, #208	; 0xd0
1000dc28:	8812      	ldrh	r2, [r2, #0]
1000dc2a:	7322      	strb	r2, [r4, #12]
1000dc2c:	0a12      	lsrs	r2, r2, #8
1000dc2e:	7362      	strb	r2, [r4, #13]
1000dc30:	1c1a      	adds	r2, r3, #0
1000dc32:	32d2      	adds	r2, #210	; 0xd2
1000dc34:	8812      	ldrh	r2, [r2, #0]
1000dc36:	33d4      	adds	r3, #212	; 0xd4
1000dc38:	73a2      	strb	r2, [r4, #14]
1000dc3a:	0a12      	lsrs	r2, r2, #8
1000dc3c:	73e2      	strb	r2, [r4, #15]
1000dc3e:	881b      	ldrh	r3, [r3, #0]
1000dc40:	7423      	strb	r3, [r4, #16]
1000dc42:	0a1b      	lsrs	r3, r3, #8
1000dc44:	7463      	strb	r3, [r4, #17]
1000dc46:	e016      	b.n	1000dc76 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dc48:	4b11      	ldr	r3, [pc, #68]	; (1000dc90 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dc4a:	4912      	ldr	r1, [pc, #72]	; (1000dc94 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000dc4c:	33aa      	adds	r3, #170	; 0xaa
1000dc4e:	881d      	ldrh	r5, [r3, #0]
1000dc50:	4811      	ldr	r0, [pc, #68]	; (1000dc98 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000dc52:	0a2b      	lsrs	r3, r5, #8
1000dc54:	72a5      	strb	r5, [r4, #10]
1000dc56:	72e3      	strb	r3, [r4, #11]
1000dc58:	1c2a      	adds	r2, r5, #0
1000dc5a:	4b10      	ldr	r3, [pc, #64]	; (1000dc9c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000dc5c:	350c      	adds	r5, #12
1000dc5e:	4798      	blx	r3
1000dc60:	b2a9      	uxth	r1, r5
1000dc62:	e008      	b.n	1000dc76 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dc64:	4b0a      	ldr	r3, [pc, #40]	; (1000dc90 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dc66:	210c      	movs	r1, #12
1000dc68:	33cc      	adds	r3, #204	; 0xcc
1000dc6a:	881b      	ldrh	r3, [r3, #0]
1000dc6c:	72a3      	strb	r3, [r4, #10]
1000dc6e:	0a1b      	lsrs	r3, r3, #8
1000dc70:	72e3      	strb	r3, [r4, #11]
1000dc72:	e000      	b.n	1000dc76 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dc74:	210a      	movs	r1, #10
1000dc76:	1c0b      	adds	r3, r1, #0
1000dc78:	3b08      	subs	r3, #8
1000dc7a:	71a3      	strb	r3, [r4, #6]
1000dc7c:	121b      	asrs	r3, r3, #8
1000dc7e:	71e3      	strb	r3, [r4, #7]
1000dc80:	1c20      	adds	r0, r4, #0
1000dc82:	4b07      	ldr	r3, [pc, #28]	; (1000dca0 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000dc84:	4798      	blx	r3
1000dc86:	bd38      	pop	{r3, r4, r5, pc}
1000dc88:	10018324 	.word	0x10018324
1000dc8c:	10017fb4 	.word	0x10017fb4
1000dc90:	10018046 	.word	0x10018046
1000dc94:	100180f2 	.word	0x100180f2
1000dc98:	10018330 	.word	0x10018330
1000dc9c:	1001310d 	.word	0x1001310d
1000dca0:	1000dad5 	.word	0x1000dad5

1000dca4 <check_ConnData_idx_role>:
1000dca4:	4b0c      	ldr	r3, [pc, #48]	; (1000dcd8 <check_ConnData_idx_role+0x34>)
1000dca6:	b570      	push	{r4, r5, r6, lr}
1000dca8:	1c04      	adds	r4, r0, #0
1000dcaa:	2008      	movs	r0, #8
1000dcac:	429c      	cmp	r4, r3
1000dcae:	d011      	beq.n	1000dcd4 <check_ConnData_idx_role+0x30>
1000dcb0:	2300      	movs	r3, #0
1000dcb2:	2212      	movs	r2, #18
1000dcb4:	435a      	muls	r2, r3
1000dcb6:	4d09      	ldr	r5, [pc, #36]	; (1000dcdc <check_ConnData_idx_role+0x38>)
1000dcb8:	b2d8      	uxtb	r0, r3
1000dcba:	1956      	adds	r6, r2, r5
1000dcbc:	8976      	ldrh	r6, [r6, #10]
1000dcbe:	42a6      	cmp	r6, r4
1000dcc0:	d104      	bne.n	1000dccc <check_ConnData_idx_role+0x28>
1000dcc2:	2900      	cmp	r1, #0
1000dcc4:	d006      	beq.n	1000dcd4 <check_ConnData_idx_role+0x30>
1000dcc6:	5d53      	ldrb	r3, [r2, r5]
1000dcc8:	700b      	strb	r3, [r1, #0]
1000dcca:	e003      	b.n	1000dcd4 <check_ConnData_idx_role+0x30>
1000dccc:	3301      	adds	r3, #1
1000dcce:	2b08      	cmp	r3, #8
1000dcd0:	d1ef      	bne.n	1000dcb2 <check_ConnData_idx_role+0xe>
1000dcd2:	1c18      	adds	r0, r3, #0
1000dcd4:	bd70      	pop	{r4, r5, r6, pc}
1000dcd6:	46c0      	nop			; (mov r8, r8)
1000dcd8:	0000ffff 	.word	0x0000ffff
1000dcdc:	10017fb6 	.word	0x10017fb6

1000dce0 <check_ConnData_emptyEntry>:
1000dce0:	2300      	movs	r3, #0
1000dce2:	2212      	movs	r2, #18
1000dce4:	435a      	muls	r2, r3
1000dce6:	4906      	ldr	r1, [pc, #24]	; (1000dd00 <check_ConnData_emptyEntry+0x20>)
1000dce8:	b2d8      	uxtb	r0, r3
1000dcea:	1852      	adds	r2, r2, r1
1000dcec:	8951      	ldrh	r1, [r2, #10]
1000dcee:	4a05      	ldr	r2, [pc, #20]	; (1000dd04 <check_ConnData_emptyEntry+0x24>)
1000dcf0:	4291      	cmp	r1, r2
1000dcf2:	d003      	beq.n	1000dcfc <check_ConnData_emptyEntry+0x1c>
1000dcf4:	3301      	adds	r3, #1
1000dcf6:	2b08      	cmp	r3, #8
1000dcf8:	d1f3      	bne.n	1000dce2 <check_ConnData_emptyEntry+0x2>
1000dcfa:	1c18      	adds	r0, r3, #0
1000dcfc:	4770      	bx	lr
1000dcfe:	46c0      	nop			; (mov r8, r8)
1000dd00:	10017fb6 	.word	0x10017fb6
1000dd04:	0000ffff 	.word	0x0000ffff

1000dd08 <gapc_cmp_evt>:
1000dd08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dd0a:	780b      	ldrb	r3, [r1, #0]
1000dd0c:	1c05      	adds	r5, r0, #0
1000dd0e:	1e58      	subs	r0, r3, #1
1000dd10:	784e      	ldrb	r6, [r1, #1]
1000dd12:	280f      	cmp	r0, #15
1000dd14:	d85a      	bhi.n	1000ddcc <gapc_cmp_evt+0xc4>
1000dd16:	1c14      	adds	r4, r2, #0
1000dd18:	f002 fd40 	bl	1001079c <__gnu_thumb1_case_uqi>
1000dd1c:	5858440a 	.word	0x5858440a
1000dd20:	4b584444 	.word	0x4b584444
1000dd24:	0825122d 	.word	0x0825122d
1000dd28:	3e395858 	.word	0x3e395858
1000dd2c:	203b      	movs	r0, #59	; 0x3b
1000dd2e:	e04e      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd30:	203b      	movs	r0, #59	; 0x3b
1000dd32:	2e00      	cmp	r6, #0
1000dd34:	d04b      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd36:	0a2d      	lsrs	r5, r5, #8
1000dd38:	8015      	strh	r5, [r2, #0]
1000dd3a:	7096      	strb	r6, [r2, #2]
1000dd3c:	3835      	subs	r0, #53	; 0x35
1000dd3e:	e046      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd40:	466b      	mov	r3, sp
1000dd42:	1ddf      	adds	r7, r3, #7
1000dd44:	2301      	movs	r3, #1
1000dd46:	0a2d      	lsrs	r5, r5, #8
1000dd48:	703b      	strb	r3, [r7, #0]
1000dd4a:	1c28      	adds	r0, r5, #0
1000dd4c:	1c39      	adds	r1, r7, #0
1000dd4e:	4b20      	ldr	r3, [pc, #128]	; (1000ddd0 <gapc_cmp_evt+0xc8>)
1000dd50:	4798      	blx	r3
1000dd52:	2807      	cmp	r0, #7
1000dd54:	d803      	bhi.n	1000dd5e <gapc_cmp_evt+0x56>
1000dd56:	783b      	ldrb	r3, [r7, #0]
1000dd58:	203b      	movs	r0, #59	; 0x3b
1000dd5a:	2b00      	cmp	r3, #0
1000dd5c:	d037      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd5e:	8065      	strh	r5, [r4, #2]
1000dd60:	7126      	strb	r6, [r4, #4]
1000dd62:	2009      	movs	r0, #9
1000dd64:	e033      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd66:	203b      	movs	r0, #59	; 0x3b
1000dd68:	2e00      	cmp	r6, #0
1000dd6a:	d030      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd6c:	0a2d      	lsrs	r5, r5, #8
1000dd6e:	8015      	strh	r5, [r2, #0]
1000dd70:	7096      	strb	r6, [r2, #2]
1000dd72:	382d      	subs	r0, #45	; 0x2d
1000dd74:	e02b      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd76:	203b      	movs	r0, #59	; 0x3b
1000dd78:	2e00      	cmp	r6, #0
1000dd7a:	d028      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd7c:	2300      	movs	r3, #0
1000dd7e:	0a2d      	lsrs	r5, r5, #8
1000dd80:	8015      	strh	r5, [r2, #0]
1000dd82:	7096      	strb	r6, [r2, #2]
1000dd84:	8093      	strh	r3, [r2, #4]
1000dd86:	80d3      	strh	r3, [r2, #6]
1000dd88:	8113      	strh	r3, [r2, #8]
1000dd8a:	3834      	subs	r0, #52	; 0x34
1000dd8c:	e01f      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd8e:	203b      	movs	r0, #59	; 0x3b
1000dd90:	2e00      	cmp	r6, #0
1000dd92:	d01c      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd94:	7216      	strb	r6, [r2, #8]
1000dd96:	e003      	b.n	1000dda0 <gapc_cmp_evt+0x98>
1000dd98:	203b      	movs	r0, #59	; 0x3b
1000dd9a:	2e00      	cmp	r6, #0
1000dd9c:	d017      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000dd9e:	7116      	strb	r6, [r2, #4]
1000dda0:	3812      	subs	r0, #18
1000dda2:	e014      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000dda4:	203b      	movs	r0, #59	; 0x3b
1000dda6:	2e00      	cmp	r6, #0
1000dda8:	d011      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000ddaa:	7093      	strb	r3, [r2, #2]
1000ddac:	70d6      	strb	r6, [r2, #3]
1000ddae:	382a      	subs	r0, #42	; 0x2a
1000ddb0:	e00d      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000ddb2:	203b      	movs	r0, #59	; 0x3b
1000ddb4:	2e00      	cmp	r6, #0
1000ddb6:	d00a      	beq.n	1000ddce <gapc_cmp_evt+0xc6>
1000ddb8:	0a2d      	lsrs	r5, r5, #8
1000ddba:	7016      	strb	r6, [r2, #0]
1000ddbc:	8055      	strh	r5, [r2, #2]
1000ddbe:	1d10      	adds	r0, r2, #4
1000ddc0:	2100      	movs	r1, #0
1000ddc2:	2205      	movs	r2, #5
1000ddc4:	4b03      	ldr	r3, [pc, #12]	; (1000ddd4 <gapc_cmp_evt+0xcc>)
1000ddc6:	4798      	blx	r3
1000ddc8:	2012      	movs	r0, #18
1000ddca:	e000      	b.n	1000ddce <gapc_cmp_evt+0xc6>
1000ddcc:	2000      	movs	r0, #0
1000ddce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ddd0:	1000dca5 	.word	0x1000dca5
1000ddd4:	1001311f 	.word	0x1001311f

1000ddd8 <gapc_connection_cfm_handler>:
1000ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddda:	b085      	sub	sp, #20
1000dddc:	1c1d      	adds	r5, r3, #0
1000ddde:	ab0a      	add	r3, sp, #40	; 0x28
1000dde0:	781b      	ldrb	r3, [r3, #0]
1000dde2:	9201      	str	r2, [sp, #4]
1000dde4:	9302      	str	r3, [sp, #8]
1000dde6:	ab0b      	add	r3, sp, #44	; 0x2c
1000dde8:	781b      	ldrb	r3, [r3, #0]
1000ddea:	1c07      	adds	r7, r0, #0
1000ddec:	9303      	str	r3, [sp, #12]
1000ddee:	ab0c      	add	r3, sp, #48	; 0x30
1000ddf0:	881a      	ldrh	r2, [r3, #0]
1000ddf2:	2302      	movs	r3, #2
1000ddf4:	1c0e      	adds	r6, r1, #0
1000ddf6:	4c23      	ldr	r4, [pc, #140]	; (1000de84 <gapc_connection_cfm_handler+0xac>)
1000ddf8:	1c39      	adds	r1, r7, #0
1000ddfa:	7023      	strb	r3, [r4, #0]
1000ddfc:	330c      	adds	r3, #12
1000ddfe:	7063      	strb	r3, [r4, #1]
1000de00:	70a3      	strb	r3, [r4, #2]
1000de02:	4b21      	ldr	r3, [pc, #132]	; (1000de88 <gapc_connection_cfm_handler+0xb0>)
1000de04:	70e2      	strb	r2, [r4, #3]
1000de06:	881a      	ldrh	r2, [r3, #0]
1000de08:	881b      	ldrh	r3, [r3, #0]
1000de0a:	7122      	strb	r2, [r4, #4]
1000de0c:	0a1b      	lsrs	r3, r3, #8
1000de0e:	4f1f      	ldr	r7, [pc, #124]	; (1000de8c <gapc_connection_cfm_handler+0xb4>)
1000de10:	2210      	movs	r2, #16
1000de12:	481f      	ldr	r0, [pc, #124]	; (1000de90 <gapc_connection_cfm_handler+0xb8>)
1000de14:	7163      	strb	r3, [r4, #5]
1000de16:	47b8      	blx	r7
1000de18:	0a33      	lsrs	r3, r6, #8
1000de1a:	7626      	strb	r6, [r4, #24]
1000de1c:	7663      	strb	r3, [r4, #25]
1000de1e:	9901      	ldr	r1, [sp, #4]
1000de20:	0c33      	lsrs	r3, r6, #16
1000de22:	2210      	movs	r2, #16
1000de24:	0e36      	lsrs	r6, r6, #24
1000de26:	481b      	ldr	r0, [pc, #108]	; (1000de94 <gapc_connection_cfm_handler+0xbc>)
1000de28:	76a3      	strb	r3, [r4, #26]
1000de2a:	76e6      	strb	r6, [r4, #27]
1000de2c:	47b8      	blx	r7
1000de2e:	1c23      	adds	r3, r4, #0
1000de30:	332c      	adds	r3, #44	; 0x2c
1000de32:	701d      	strb	r5, [r3, #0]
1000de34:	1c23      	adds	r3, r4, #0
1000de36:	0a2a      	lsrs	r2, r5, #8
1000de38:	332d      	adds	r3, #45	; 0x2d
1000de3a:	701a      	strb	r2, [r3, #0]
1000de3c:	1c23      	adds	r3, r4, #0
1000de3e:	0c2a      	lsrs	r2, r5, #16
1000de40:	332e      	adds	r3, #46	; 0x2e
1000de42:	701a      	strb	r2, [r3, #0]
1000de44:	1c23      	adds	r3, r4, #0
1000de46:	0e2d      	lsrs	r5, r5, #24
1000de48:	332f      	adds	r3, #47	; 0x2f
1000de4a:	466a      	mov	r2, sp
1000de4c:	701d      	strb	r5, [r3, #0]
1000de4e:	1c23      	adds	r3, r4, #0
1000de50:	7a12      	ldrb	r2, [r2, #8]
1000de52:	3330      	adds	r3, #48	; 0x30
1000de54:	701a      	strb	r2, [r3, #0]
1000de56:	1c23      	adds	r3, r4, #0
1000de58:	2500      	movs	r5, #0
1000de5a:	3331      	adds	r3, #49	; 0x31
1000de5c:	466a      	mov	r2, sp
1000de5e:	701d      	strb	r5, [r3, #0]
1000de60:	1c23      	adds	r3, r4, #0
1000de62:	7b12      	ldrb	r2, [r2, #12]
1000de64:	3332      	adds	r3, #50	; 0x32
1000de66:	701a      	strb	r2, [r3, #0]
1000de68:	1c23      	adds	r3, r4, #0
1000de6a:	3333      	adds	r3, #51	; 0x33
1000de6c:	701d      	strb	r5, [r3, #0]
1000de6e:	232c      	movs	r3, #44	; 0x2c
1000de70:	1c20      	adds	r0, r4, #0
1000de72:	71a3      	strb	r3, [r4, #6]
1000de74:	2134      	movs	r1, #52	; 0x34
1000de76:	4b08      	ldr	r3, [pc, #32]	; (1000de98 <gapc_connection_cfm_handler+0xc0>)
1000de78:	71e5      	strb	r5, [r4, #7]
1000de7a:	4798      	blx	r3
1000de7c:	1c28      	adds	r0, r5, #0
1000de7e:	b005      	add	sp, #20
1000de80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de82:	46c0      	nop			; (mov r8, r8)
1000de84:	10018324 	.word	0x10018324
1000de88:	10017fb4 	.word	0x10017fb4
1000de8c:	1001310d 	.word	0x1001310d
1000de90:	1001832c 	.word	0x1001832c
1000de94:	10018340 	.word	0x10018340
1000de98:	1000dad5 	.word	0x1000dad5

1000de9c <gapc_con_req_ind>:
1000de9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de9e:	7845      	ldrb	r5, [r0, #1]
1000dea0:	7803      	ldrb	r3, [r0, #0]
1000dea2:	4c30      	ldr	r4, [pc, #192]	; (1000df64 <gapc_con_req_ind+0xc8>)
1000dea4:	022d      	lsls	r5, r5, #8
1000dea6:	431d      	orrs	r5, r3
1000dea8:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000deaa:	78c3      	ldrb	r3, [r0, #3]
1000deac:	7882      	ldrb	r2, [r0, #2]
1000deae:	b08b      	sub	sp, #44	; 0x2c
1000deb0:	021b      	lsls	r3, r3, #8
1000deb2:	431a      	orrs	r2, r3
1000deb4:	466b      	mov	r3, sp
1000deb6:	9205      	str	r2, [sp, #20]
1000deb8:	8a9b      	ldrh	r3, [r3, #20]
1000deba:	2120      	movs	r1, #32
1000debc:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000debe:	7943      	ldrb	r3, [r0, #5]
1000dec0:	7902      	ldrb	r2, [r0, #4]
1000dec2:	021b      	lsls	r3, r3, #8
1000dec4:	431a      	orrs	r2, r3
1000dec6:	466b      	mov	r3, sp
1000dec8:	9206      	str	r2, [sp, #24]
1000deca:	8b1b      	ldrh	r3, [r3, #24]
1000decc:	1c06      	adds	r6, r0, #0
1000dece:	8623      	strh	r3, [r4, #48]	; 0x30
1000ded0:	79c3      	ldrb	r3, [r0, #7]
1000ded2:	7982      	ldrb	r2, [r0, #6]
1000ded4:	021b      	lsls	r3, r3, #8
1000ded6:	431a      	orrs	r2, r3
1000ded8:	466b      	mov	r3, sp
1000deda:	9207      	str	r2, [sp, #28]
1000dedc:	466a      	mov	r2, sp
1000dede:	8b9b      	ldrh	r3, [r3, #28]
1000dee0:	1852      	adds	r2, r2, r1
1000dee2:	8663      	strh	r3, [r4, #50]	; 0x32
1000dee4:	7a43      	ldrb	r3, [r0, #9]
1000dee6:	1c01      	adds	r1, r0, #0
1000dee8:	9308      	str	r3, [sp, #32]
1000deea:	1c23      	adds	r3, r4, #0
1000deec:	7812      	ldrb	r2, [r2, #0]
1000deee:	3377      	adds	r3, #119	; 0x77
1000def0:	3478      	adds	r4, #120	; 0x78
1000def2:	701a      	strb	r2, [r3, #0]
1000def4:	310a      	adds	r1, #10
1000def6:	2206      	movs	r2, #6
1000def8:	4b1b      	ldr	r3, [pc, #108]	; (1000df68 <gapc_con_req_ind+0xcc>)
1000defa:	1c20      	adds	r0, r4, #0
1000defc:	4798      	blx	r3
1000defe:	7c33      	ldrb	r3, [r6, #16]
1000df00:	9309      	str	r3, [sp, #36]	; 0x24
1000df02:	4b1a      	ldr	r3, [pc, #104]	; (1000df6c <gapc_con_req_ind+0xd0>)
1000df04:	4798      	blx	r3
1000df06:	4e1a      	ldr	r6, [pc, #104]	; (1000df70 <gapc_con_req_ind+0xd4>)
1000df08:	1e07      	subs	r7, r0, #0
1000df0a:	2f07      	cmp	r7, #7
1000df0c:	d81b      	bhi.n	1000df46 <gapc_con_req_ind+0xaa>
1000df0e:	2312      	movs	r3, #18
1000df10:	4343      	muls	r3, r0
1000df12:	18f0      	adds	r0, r6, r3
1000df14:	8145      	strh	r5, [r0, #10]
1000df16:	4669      	mov	r1, sp
1000df18:	2524      	movs	r5, #36	; 0x24
1000df1a:	1949      	adds	r1, r1, r5
1000df1c:	7809      	ldrb	r1, [r1, #0]
1000df1e:	2206      	movs	r2, #6
1000df20:	54f1      	strb	r1, [r6, r3]
1000df22:	2120      	movs	r1, #32
1000df24:	466b      	mov	r3, sp
1000df26:	185b      	adds	r3, r3, r1
1000df28:	781b      	ldrb	r3, [r3, #0]
1000df2a:	1c21      	adds	r1, r4, #0
1000df2c:	7043      	strb	r3, [r0, #1]
1000df2e:	466b      	mov	r3, sp
1000df30:	8a9b      	ldrh	r3, [r3, #20]
1000df32:	3002      	adds	r0, #2
1000df34:	8143      	strh	r3, [r0, #10]
1000df36:	466b      	mov	r3, sp
1000df38:	8b1b      	ldrh	r3, [r3, #24]
1000df3a:	8183      	strh	r3, [r0, #12]
1000df3c:	466b      	mov	r3, sp
1000df3e:	8b9b      	ldrh	r3, [r3, #28]
1000df40:	81c3      	strh	r3, [r0, #14]
1000df42:	4b09      	ldr	r3, [pc, #36]	; (1000df68 <gapc_con_req_ind+0xcc>)
1000df44:	4798      	blx	r3
1000df46:	2112      	movs	r1, #18
1000df48:	2300      	movs	r3, #0
1000df4a:	434f      	muls	r7, r1
1000df4c:	9300      	str	r3, [sp, #0]
1000df4e:	9301      	str	r3, [sp, #4]
1000df50:	19f6      	adds	r6, r6, r7
1000df52:	8971      	ldrh	r1, [r6, #10]
1000df54:	4a07      	ldr	r2, [pc, #28]	; (1000df74 <gapc_con_req_ind+0xd8>)
1000df56:	9102      	str	r1, [sp, #8]
1000df58:	1c10      	adds	r0, r2, #0
1000df5a:	1c19      	adds	r1, r3, #0
1000df5c:	4c06      	ldr	r4, [pc, #24]	; (1000df78 <gapc_con_req_ind+0xdc>)
1000df5e:	47a0      	blx	r4
1000df60:	b00b      	add	sp, #44	; 0x2c
1000df62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df64:	10018046 	.word	0x10018046
1000df68:	1001310d 	.word	0x1001310d
1000df6c:	1000dce1 	.word	0x1000dce1
1000df70:	10017fb6 	.word	0x10017fb6
1000df74:	10016db0 	.word	0x10016db0
1000df78:	1000ddd9 	.word	0x1000ddd9

1000df7c <gapc_disconnect_cmd_handler>:
1000df7c:	2204      	movs	r2, #4
1000df7e:	b510      	push	{r4, lr}
1000df80:	4b0c      	ldr	r3, [pc, #48]	; (1000dfb4 <gapc_disconnect_cmd_handler+0x38>)
1000df82:	2400      	movs	r4, #0
1000df84:	701a      	strb	r2, [r3, #0]
1000df86:	320a      	adds	r2, #10
1000df88:	705a      	strb	r2, [r3, #1]
1000df8a:	709a      	strb	r2, [r3, #2]
1000df8c:	4a0a      	ldr	r2, [pc, #40]	; (1000dfb8 <gapc_disconnect_cmd_handler+0x3c>)
1000df8e:	70d9      	strb	r1, [r3, #3]
1000df90:	8811      	ldrh	r1, [r2, #0]
1000df92:	8812      	ldrh	r2, [r2, #0]
1000df94:	7119      	strb	r1, [r3, #4]
1000df96:	0a12      	lsrs	r2, r2, #8
1000df98:	715a      	strb	r2, [r3, #5]
1000df9a:	2201      	movs	r2, #1
1000df9c:	721a      	strb	r2, [r3, #8]
1000df9e:	1892      	adds	r2, r2, r2
1000dfa0:	7258      	strb	r0, [r3, #9]
1000dfa2:	719a      	strb	r2, [r3, #6]
1000dfa4:	71dc      	strb	r4, [r3, #7]
1000dfa6:	1c18      	adds	r0, r3, #0
1000dfa8:	210a      	movs	r1, #10
1000dfaa:	4b04      	ldr	r3, [pc, #16]	; (1000dfbc <gapc_disconnect_cmd_handler+0x40>)
1000dfac:	4798      	blx	r3
1000dfae:	1c20      	adds	r0, r4, #0
1000dfb0:	bd10      	pop	{r4, pc}
1000dfb2:	46c0      	nop			; (mov r8, r8)
1000dfb4:	10018324 	.word	0x10018324
1000dfb8:	10017fb4 	.word	0x10017fb4
1000dfbc:	1000dad5 	.word	0x1000dad5

1000dfc0 <gapc_disconnect_ind>:
1000dfc0:	1c02      	adds	r2, r0, #0
1000dfc2:	b508      	push	{r3, lr}
1000dfc4:	7843      	ldrb	r3, [r0, #1]
1000dfc6:	7800      	ldrb	r0, [r0, #0]
1000dfc8:	021b      	lsls	r3, r3, #8
1000dfca:	4318      	orrs	r0, r3
1000dfcc:	8008      	strh	r0, [r1, #0]
1000dfce:	7893      	ldrb	r3, [r2, #2]
1000dfd0:	708b      	strb	r3, [r1, #2]
1000dfd2:	2100      	movs	r1, #0
1000dfd4:	4b05      	ldr	r3, [pc, #20]	; (1000dfec <gapc_disconnect_ind+0x2c>)
1000dfd6:	4798      	blx	r3
1000dfd8:	2807      	cmp	r0, #7
1000dfda:	d806      	bhi.n	1000dfea <gapc_disconnect_ind+0x2a>
1000dfdc:	2312      	movs	r3, #18
1000dfde:	4358      	muls	r0, r3
1000dfe0:	4b03      	ldr	r3, [pc, #12]	; (1000dff0 <gapc_disconnect_ind+0x30>)
1000dfe2:	1818      	adds	r0, r3, r0
1000dfe4:	2301      	movs	r3, #1
1000dfe6:	425b      	negs	r3, r3
1000dfe8:	8143      	strh	r3, [r0, #10]
1000dfea:	bd08      	pop	{r3, pc}
1000dfec:	1000dca5 	.word	0x1000dca5
1000dff0:	10017fb6 	.word	0x10017fb6

1000dff4 <gapc_bond_cmd_handler>:
1000dff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dff6:	9300      	str	r3, [sp, #0]
1000dff8:	2312      	movs	r3, #18
1000dffa:	1c04      	adds	r4, r0, #0
1000dffc:	a808      	add	r0, sp, #32
1000dffe:	7807      	ldrb	r7, [r0, #0]
1000e000:	a809      	add	r0, sp, #36	; 0x24
1000e002:	7806      	ldrb	r6, [r0, #0]
1000e004:	a80a      	add	r0, sp, #40	; 0x28
1000e006:	7805      	ldrb	r5, [r0, #0]
1000e008:	a80b      	add	r0, sp, #44	; 0x2c
1000e00a:	7800      	ldrb	r0, [r0, #0]
1000e00c:	9001      	str	r0, [sp, #4]
1000e00e:	4810      	ldr	r0, [pc, #64]	; (1000e050 <gapc_bond_cmd_handler+0x5c>)
1000e010:	7003      	strb	r3, [r0, #0]
1000e012:	230e      	movs	r3, #14
1000e014:	70c4      	strb	r4, [r0, #3]
1000e016:	4c0f      	ldr	r4, [pc, #60]	; (1000e054 <gapc_bond_cmd_handler+0x60>)
1000e018:	7043      	strb	r3, [r0, #1]
1000e01a:	7083      	strb	r3, [r0, #2]
1000e01c:	8823      	ldrh	r3, [r4, #0]
1000e01e:	8824      	ldrh	r4, [r4, #0]
1000e020:	7103      	strb	r3, [r0, #4]
1000e022:	466b      	mov	r3, sp
1000e024:	781b      	ldrb	r3, [r3, #0]
1000e026:	0a24      	lsrs	r4, r4, #8
1000e028:	72c3      	strb	r3, [r0, #11]
1000e02a:	466b      	mov	r3, sp
1000e02c:	791b      	ldrb	r3, [r3, #4]
1000e02e:	7144      	strb	r4, [r0, #5]
1000e030:	73c3      	strb	r3, [r0, #15]
1000e032:	2308      	movs	r3, #8
1000e034:	7183      	strb	r3, [r0, #6]
1000e036:	2300      	movs	r3, #0
1000e038:	240a      	movs	r4, #10
1000e03a:	7241      	strb	r1, [r0, #9]
1000e03c:	71c3      	strb	r3, [r0, #7]
1000e03e:	2110      	movs	r1, #16
1000e040:	4b05      	ldr	r3, [pc, #20]	; (1000e058 <gapc_bond_cmd_handler+0x64>)
1000e042:	7307      	strb	r7, [r0, #12]
1000e044:	7346      	strb	r6, [r0, #13]
1000e046:	7385      	strb	r5, [r0, #14]
1000e048:	7204      	strb	r4, [r0, #8]
1000e04a:	7282      	strb	r2, [r0, #10]
1000e04c:	4798      	blx	r3
1000e04e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e050:	10018324 	.word	0x10018324
1000e054:	10017fb4 	.word	0x10017fb4
1000e058:	1000dad5 	.word	0x1000dad5

1000e05c <gapc_bond_ind>:
1000e05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e05e:	780e      	ldrb	r6, [r1, #0]
1000e060:	1c03      	adds	r3, r0, #0
1000e062:	1eb0      	subs	r0, r6, #2
1000e064:	2805      	cmp	r0, #5
1000e066:	d85d      	bhi.n	1000e124 <gapc_bond_ind+0xc8>
1000e068:	1c15      	adds	r5, r2, #0
1000e06a:	1c0c      	adds	r4, r1, #0
1000e06c:	f002 fb96 	bl	1001079c <__gnu_thumb1_case_uqi>
1000e070:	2f5a030d 	.word	0x2f5a030d
1000e074:	4740      	.short	0x4740
1000e076:	2009      	movs	r0, #9
1000e078:	2a00      	cmp	r2, #0
1000e07a:	d054      	beq.n	1000e126 <gapc_bond_ind+0xca>
1000e07c:	0a1b      	lsrs	r3, r3, #8
1000e07e:	8053      	strh	r3, [r2, #2]
1000e080:	788b      	ldrb	r3, [r1, #2]
1000e082:	4829      	ldr	r0, [pc, #164]	; (1000e128 <gapc_bond_ind+0xcc>)
1000e084:	7113      	strb	r3, [r2, #4]
1000e086:	2100      	movs	r1, #0
1000e088:	e01c      	b.n	1000e0c4 <gapc_bond_ind+0x68>
1000e08a:	2009      	movs	r0, #9
1000e08c:	2a00      	cmp	r2, #0
1000e08e:	d04a      	beq.n	1000e126 <gapc_bond_ind+0xca>
1000e090:	4c25      	ldr	r4, [pc, #148]	; (1000e128 <gapc_bond_ind+0xcc>)
1000e092:	0a1b      	lsrs	r3, r3, #8
1000e094:	8053      	strh	r3, [r2, #2]
1000e096:	788b      	ldrb	r3, [r1, #2]
1000e098:	2700      	movs	r7, #0
1000e09a:	1c10      	adds	r0, r2, #0
1000e09c:	1c21      	adds	r1, r4, #0
1000e09e:	7013      	strb	r3, [r2, #0]
1000e0a0:	4e22      	ldr	r6, [pc, #136]	; (1000e12c <gapc_bond_ind+0xd0>)
1000e0a2:	7117      	strb	r7, [r2, #4]
1000e0a4:	312e      	adds	r1, #46	; 0x2e
1000e0a6:	2217      	movs	r2, #23
1000e0a8:	3032      	adds	r0, #50	; 0x32
1000e0aa:	47b0      	blx	r6
1000e0ac:	1c28      	adds	r0, r5, #0
1000e0ae:	1c21      	adds	r1, r4, #0
1000e0b0:	2210      	movs	r2, #16
1000e0b2:	311e      	adds	r1, #30
1000e0b4:	3022      	adds	r0, #34	; 0x22
1000e0b6:	47b0      	blx	r6
1000e0b8:	1ca1      	adds	r1, r4, #2
1000e0ba:	1da8      	adds	r0, r5, #6
1000e0bc:	221c      	movs	r2, #28
1000e0be:	47b0      	blx	r6
1000e0c0:	1c20      	adds	r0, r4, #0
1000e0c2:	1c39      	adds	r1, r7, #0
1000e0c4:	2246      	movs	r2, #70	; 0x46
1000e0c6:	4b1a      	ldr	r3, [pc, #104]	; (1000e130 <gapc_bond_ind+0xd4>)
1000e0c8:	4798      	blx	r3
1000e0ca:	2009      	movs	r0, #9
1000e0cc:	e02b      	b.n	1000e126 <gapc_bond_ind+0xca>
1000e0ce:	4d16      	ldr	r5, [pc, #88]	; (1000e128 <gapc_bond_ind+0xcc>)
1000e0d0:	3102      	adds	r1, #2
1000e0d2:	1c28      	adds	r0, r5, #0
1000e0d4:	2210      	movs	r2, #16
1000e0d6:	4e15      	ldr	r6, [pc, #84]	; (1000e12c <gapc_bond_ind+0xd0>)
1000e0d8:	302e      	adds	r0, #46	; 0x2e
1000e0da:	47b0      	blx	r6
1000e0dc:	1c28      	adds	r0, r5, #0
1000e0de:	1c21      	adds	r1, r4, #0
1000e0e0:	303f      	adds	r0, #63	; 0x3f
1000e0e2:	3112      	adds	r1, #18
1000e0e4:	2206      	movs	r2, #6
1000e0e6:	47b0      	blx	r6
1000e0e8:	7e23      	ldrb	r3, [r4, #24]
1000e0ea:	353e      	adds	r5, #62	; 0x3e
1000e0ec:	702b      	strb	r3, [r5, #0]
1000e0ee:	e019      	b.n	1000e124 <gapc_bond_ind+0xc8>
1000e0f0:	480d      	ldr	r0, [pc, #52]	; (1000e128 <gapc_bond_ind+0xcc>)
1000e0f2:	3102      	adds	r1, #2
1000e0f4:	2210      	movs	r2, #16
1000e0f6:	4b0d      	ldr	r3, [pc, #52]	; (1000e12c <gapc_bond_ind+0xd0>)
1000e0f8:	301e      	adds	r0, #30
1000e0fa:	4798      	blx	r3
1000e0fc:	e012      	b.n	1000e124 <gapc_bond_ind+0xc8>
1000e0fe:	4d0a      	ldr	r5, [pc, #40]	; (1000e128 <gapc_bond_ind+0xcc>)
1000e100:	3102      	adds	r1, #2
1000e102:	2210      	movs	r2, #16
1000e104:	4e09      	ldr	r6, [pc, #36]	; (1000e12c <gapc_bond_ind+0xd0>)
1000e106:	1ca8      	adds	r0, r5, #2
1000e108:	47b0      	blx	r6
1000e10a:	1c28      	adds	r0, r5, #0
1000e10c:	1c21      	adds	r1, r4, #0
1000e10e:	7ce3      	ldrb	r3, [r4, #19]
1000e110:	7ca2      	ldrb	r2, [r4, #18]
1000e112:	021b      	lsls	r3, r3, #8
1000e114:	4313      	orrs	r3, r2
1000e116:	3014      	adds	r0, #20
1000e118:	3114      	adds	r1, #20
1000e11a:	2208      	movs	r2, #8
1000e11c:	826b      	strh	r3, [r5, #18]
1000e11e:	47b0      	blx	r6
1000e120:	7f23      	ldrb	r3, [r4, #28]
1000e122:	772b      	strb	r3, [r5, #28]
1000e124:	2000      	movs	r0, #0
1000e126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e128:	10016de0 	.word	0x10016de0
1000e12c:	1001310d 	.word	0x1001310d
1000e130:	1001311f 	.word	0x1001311f

1000e134 <gapc_bond_req_ind>:
1000e134:	b570      	push	{r4, r5, r6, lr}
1000e136:	780c      	ldrb	r4, [r1, #0]
1000e138:	1c03      	adds	r3, r0, #0
1000e13a:	7849      	ldrb	r1, [r1, #1]
1000e13c:	2c07      	cmp	r4, #7
1000e13e:	d85c      	bhi.n	1000e1fa <gapc_bond_req_ind+0xc6>
1000e140:	1c20      	adds	r0, r4, #0
1000e142:	f002 fb2b 	bl	1001079c <__gnu_thumb1_case_uqi>
1000e146:	5a04      	.short	0x5a04
1000e148:	5a0b5a5a 	.word	0x5a0b5a5a
1000e14c:	1f1f      	.short	0x1f1f
1000e14e:	200a      	movs	r0, #10
1000e150:	2a00      	cmp	r2, #0
1000e152:	d053      	beq.n	1000e1fc <gapc_bond_req_ind+0xc8>
1000e154:	0a1b      	lsrs	r3, r3, #8
1000e156:	8013      	strh	r3, [r2, #0]
1000e158:	7091      	strb	r1, [r2, #2]
1000e15a:	e04f      	b.n	1000e1fc <gapc_bond_req_ind+0xc8>
1000e15c:	2a00      	cmp	r2, #0
1000e15e:	d00b      	beq.n	1000e178 <gapc_bond_req_ind+0x44>
1000e160:	0a1b      	lsrs	r3, r3, #8
1000e162:	8013      	strh	r3, [r2, #0]
1000e164:	2900      	cmp	r1, #0
1000e166:	d102      	bne.n	1000e16e <gapc_bond_req_ind+0x3a>
1000e168:	2301      	movs	r3, #1
1000e16a:	7093      	strb	r3, [r2, #2]
1000e16c:	e004      	b.n	1000e178 <gapc_bond_req_ind+0x44>
1000e16e:	2300      	movs	r3, #0
1000e170:	7093      	strb	r3, [r2, #2]
1000e172:	2902      	cmp	r1, #2
1000e174:	d102      	bne.n	1000e17c <gapc_bond_req_ind+0x48>
1000e176:	70d3      	strb	r3, [r2, #3]
1000e178:	200c      	movs	r0, #12
1000e17a:	e03f      	b.n	1000e1fc <gapc_bond_req_ind+0xc8>
1000e17c:	2901      	cmp	r1, #1
1000e17e:	d1fb      	bne.n	1000e178 <gapc_bond_req_ind+0x44>
1000e180:	70d1      	strb	r1, [r2, #3]
1000e182:	e7f9      	b.n	1000e178 <gapc_bond_req_ind+0x44>
1000e184:	2214      	movs	r2, #20
1000e186:	481e      	ldr	r0, [pc, #120]	; (1000e200 <gapc_bond_req_ind+0xcc>)
1000e188:	0a1b      	lsrs	r3, r3, #8
1000e18a:	70c3      	strb	r3, [r0, #3]
1000e18c:	4b1d      	ldr	r3, [pc, #116]	; (1000e204 <gapc_bond_req_ind+0xd0>)
1000e18e:	7002      	strb	r2, [r0, #0]
1000e190:	3a06      	subs	r2, #6
1000e192:	7042      	strb	r2, [r0, #1]
1000e194:	7082      	strb	r2, [r0, #2]
1000e196:	881a      	ldrh	r2, [r3, #0]
1000e198:	881b      	ldrh	r3, [r3, #0]
1000e19a:	4e1b      	ldr	r6, [pc, #108]	; (1000e208 <gapc_bond_req_ind+0xd4>)
1000e19c:	0a1b      	lsrs	r3, r3, #8
1000e19e:	7143      	strb	r3, [r0, #5]
1000e1a0:	2301      	movs	r3, #1
1000e1a2:	7102      	strb	r2, [r0, #4]
1000e1a4:	7204      	strb	r4, [r0, #8]
1000e1a6:	7243      	strb	r3, [r0, #9]
1000e1a8:	1c05      	adds	r5, r0, #0
1000e1aa:	1c31      	adds	r1, r6, #0
1000e1ac:	300a      	adds	r0, #10
1000e1ae:	2c07      	cmp	r4, #7
1000e1b0:	d116      	bne.n	1000e1e0 <gapc_bond_req_ind+0xac>
1000e1b2:	317e      	adds	r1, #126	; 0x7e
1000e1b4:	2210      	movs	r2, #16
1000e1b6:	4c15      	ldr	r4, [pc, #84]	; (1000e20c <gapc_bond_req_ind+0xd8>)
1000e1b8:	47a0      	blx	r4
1000e1ba:	1c33      	adds	r3, r6, #0
1000e1bc:	1c31      	adds	r1, r6, #0
1000e1be:	1c28      	adds	r0, r5, #0
1000e1c0:	338e      	adds	r3, #142	; 0x8e
1000e1c2:	881b      	ldrh	r3, [r3, #0]
1000e1c4:	3190      	adds	r1, #144	; 0x90
1000e1c6:	76ab      	strb	r3, [r5, #26]
1000e1c8:	2208      	movs	r2, #8
1000e1ca:	0a1b      	lsrs	r3, r3, #8
1000e1cc:	301c      	adds	r0, #28
1000e1ce:	76eb      	strb	r3, [r5, #27]
1000e1d0:	47a0      	blx	r4
1000e1d2:	1c31      	adds	r1, r6, #0
1000e1d4:	3198      	adds	r1, #152	; 0x98
1000e1d6:	780a      	ldrb	r2, [r1, #0]
1000e1d8:	1d6b      	adds	r3, r5, #5
1000e1da:	77da      	strb	r2, [r3, #31]
1000e1dc:	2125      	movs	r1, #37	; 0x25
1000e1de:	e004      	b.n	1000e1ea <gapc_bond_req_ind+0xb6>
1000e1e0:	319a      	adds	r1, #154	; 0x9a
1000e1e2:	2210      	movs	r2, #16
1000e1e4:	4b09      	ldr	r3, [pc, #36]	; (1000e20c <gapc_bond_req_ind+0xd8>)
1000e1e6:	4798      	blx	r3
1000e1e8:	211a      	movs	r1, #26
1000e1ea:	1c0b      	adds	r3, r1, #0
1000e1ec:	2400      	movs	r4, #0
1000e1ee:	3b08      	subs	r3, #8
1000e1f0:	71ab      	strb	r3, [r5, #6]
1000e1f2:	1c28      	adds	r0, r5, #0
1000e1f4:	4b06      	ldr	r3, [pc, #24]	; (1000e210 <gapc_bond_req_ind+0xdc>)
1000e1f6:	71ec      	strb	r4, [r5, #7]
1000e1f8:	4798      	blx	r3
1000e1fa:	2000      	movs	r0, #0
1000e1fc:	bd70      	pop	{r4, r5, r6, pc}
1000e1fe:	46c0      	nop			; (mov r8, r8)
1000e200:	10018324 	.word	0x10018324
1000e204:	10017fb4 	.word	0x10017fb4
1000e208:	10018046 	.word	0x10018046
1000e20c:	1001310d 	.word	0x1001310d
1000e210:	1000dad5 	.word	0x1000dad5

1000e214 <gapc_bond_cfm_handler_pair_resp>:
1000e214:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e216:	b085      	sub	sp, #20
1000e218:	1c07      	adds	r7, r0, #0
1000e21a:	a80a      	add	r0, sp, #40	; 0x28
1000e21c:	7806      	ldrb	r6, [r0, #0]
1000e21e:	a80b      	add	r0, sp, #44	; 0x2c
1000e220:	7805      	ldrb	r5, [r0, #0]
1000e222:	a80c      	add	r0, sp, #48	; 0x30
1000e224:	7800      	ldrb	r0, [r0, #0]
1000e226:	2414      	movs	r4, #20
1000e228:	9002      	str	r0, [sp, #8]
1000e22a:	a80d      	add	r0, sp, #52	; 0x34
1000e22c:	7800      	ldrb	r0, [r0, #0]
1000e22e:	9301      	str	r3, [sp, #4]
1000e230:	9003      	str	r0, [sp, #12]
1000e232:	a80e      	add	r0, sp, #56	; 0x38
1000e234:	8800      	ldrh	r0, [r0, #0]
1000e236:	4684      	mov	ip, r0
1000e238:	4812      	ldr	r0, [pc, #72]	; (1000e284 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e23a:	7004      	strb	r4, [r0, #0]
1000e23c:	3c06      	subs	r4, #6
1000e23e:	7044      	strb	r4, [r0, #1]
1000e240:	7084      	strb	r4, [r0, #2]
1000e242:	4664      	mov	r4, ip
1000e244:	70c4      	strb	r4, [r0, #3]
1000e246:	4c10      	ldr	r4, [pc, #64]	; (1000e288 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e248:	7247      	strb	r7, [r0, #9]
1000e24a:	8823      	ldrh	r3, [r4, #0]
1000e24c:	8824      	ldrh	r4, [r4, #0]
1000e24e:	7103      	strb	r3, [r0, #4]
1000e250:	466b      	mov	r3, sp
1000e252:	791b      	ldrb	r3, [r3, #4]
1000e254:	0a24      	lsrs	r4, r4, #8
1000e256:	7303      	strb	r3, [r0, #12]
1000e258:	466b      	mov	r3, sp
1000e25a:	7a1b      	ldrb	r3, [r3, #8]
1000e25c:	7144      	strb	r4, [r0, #5]
1000e25e:	73c3      	strb	r3, [r0, #15]
1000e260:	466b      	mov	r3, sp
1000e262:	7b1b      	ldrb	r3, [r3, #12]
1000e264:	2401      	movs	r4, #1
1000e266:	7403      	strb	r3, [r0, #16]
1000e268:	2309      	movs	r3, #9
1000e26a:	7183      	strb	r3, [r0, #6]
1000e26c:	2300      	movs	r3, #0
1000e26e:	7204      	strb	r4, [r0, #8]
1000e270:	7281      	strb	r1, [r0, #10]
1000e272:	72c2      	strb	r2, [r0, #11]
1000e274:	7346      	strb	r6, [r0, #13]
1000e276:	7385      	strb	r5, [r0, #14]
1000e278:	71c3      	strb	r3, [r0, #7]
1000e27a:	2111      	movs	r1, #17
1000e27c:	4b03      	ldr	r3, [pc, #12]	; (1000e28c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e27e:	4798      	blx	r3
1000e280:	b005      	add	sp, #20
1000e282:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e284:	10018324 	.word	0x10018324
1000e288:	10017fb4 	.word	0x10017fb4
1000e28c:	1000dad5 	.word	0x1000dad5

1000e290 <gapc_bond_cfm_handler_key_exch>:
1000e290:	b538      	push	{r3, r4, r5, lr}
1000e292:	2514      	movs	r5, #20
1000e294:	4c0d      	ldr	r4, [pc, #52]	; (1000e2cc <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e296:	70e3      	strb	r3, [r4, #3]
1000e298:	4b0d      	ldr	r3, [pc, #52]	; (1000e2d0 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e29a:	7025      	strb	r5, [r4, #0]
1000e29c:	3d06      	subs	r5, #6
1000e29e:	7065      	strb	r5, [r4, #1]
1000e2a0:	70a5      	strb	r5, [r4, #2]
1000e2a2:	881d      	ldrh	r5, [r3, #0]
1000e2a4:	881b      	ldrh	r3, [r3, #0]
1000e2a6:	7220      	strb	r0, [r4, #8]
1000e2a8:	0a1b      	lsrs	r3, r3, #8
1000e2aa:	7163      	strb	r3, [r4, #5]
1000e2ac:	7261      	strb	r1, [r4, #9]
1000e2ae:	4b09      	ldr	r3, [pc, #36]	; (1000e2d4 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e2b0:	1c11      	adds	r1, r2, #0
1000e2b2:	4809      	ldr	r0, [pc, #36]	; (1000e2d8 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e2b4:	2210      	movs	r2, #16
1000e2b6:	7125      	strb	r5, [r4, #4]
1000e2b8:	4798      	blx	r3
1000e2ba:	2312      	movs	r3, #18
1000e2bc:	71a3      	strb	r3, [r4, #6]
1000e2be:	2300      	movs	r3, #0
1000e2c0:	1c20      	adds	r0, r4, #0
1000e2c2:	71e3      	strb	r3, [r4, #7]
1000e2c4:	211a      	movs	r1, #26
1000e2c6:	4b05      	ldr	r3, [pc, #20]	; (1000e2dc <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e2c8:	4798      	blx	r3
1000e2ca:	bd38      	pop	{r3, r4, r5, pc}
1000e2cc:	10018324 	.word	0x10018324
1000e2d0:	10017fb4 	.word	0x10017fb4
1000e2d4:	1001310d 	.word	0x1001310d
1000e2d8:	1001832e 	.word	0x1001832e
1000e2dc:	1000dad5 	.word	0x1000dad5

1000e2e0 <gapc_security_cmd_handler>:
1000e2e0:	221a      	movs	r2, #26
1000e2e2:	b508      	push	{r3, lr}
1000e2e4:	4b0b      	ldr	r3, [pc, #44]	; (1000e314 <gapc_security_cmd_handler+0x34>)
1000e2e6:	701a      	strb	r2, [r3, #0]
1000e2e8:	3a0c      	subs	r2, #12
1000e2ea:	705a      	strb	r2, [r3, #1]
1000e2ec:	709a      	strb	r2, [r3, #2]
1000e2ee:	4a0a      	ldr	r2, [pc, #40]	; (1000e318 <gapc_security_cmd_handler+0x38>)
1000e2f0:	70d8      	strb	r0, [r3, #3]
1000e2f2:	8810      	ldrh	r0, [r2, #0]
1000e2f4:	8812      	ldrh	r2, [r2, #0]
1000e2f6:	7118      	strb	r0, [r3, #4]
1000e2f8:	0a12      	lsrs	r2, r2, #8
1000e2fa:	715a      	strb	r2, [r3, #5]
1000e2fc:	220c      	movs	r2, #12
1000e2fe:	721a      	strb	r2, [r3, #8]
1000e300:	3a0a      	subs	r2, #10
1000e302:	719a      	strb	r2, [r3, #6]
1000e304:	2200      	movs	r2, #0
1000e306:	7259      	strb	r1, [r3, #9]
1000e308:	71da      	strb	r2, [r3, #7]
1000e30a:	1c18      	adds	r0, r3, #0
1000e30c:	210a      	movs	r1, #10
1000e30e:	4b03      	ldr	r3, [pc, #12]	; (1000e31c <gapc_security_cmd_handler+0x3c>)
1000e310:	4798      	blx	r3
1000e312:	bd08      	pop	{r3, pc}
1000e314:	10018324 	.word	0x10018324
1000e318:	10017fb4 	.word	0x10017fb4
1000e31c:	1000dad5 	.word	0x1000dad5

1000e320 <gapc_encrypt_cmd_handler>:
1000e320:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e322:	2500      	movs	r5, #0
1000e324:	b089      	sub	sp, #36	; 0x24
1000e326:	9306      	str	r3, [sp, #24]
1000e328:	ab0e      	add	r3, sp, #56	; 0x38
1000e32a:	781b      	ldrb	r3, [r3, #0]
1000e32c:	1c17      	adds	r7, r2, #0
1000e32e:	9307      	str	r3, [sp, #28]
1000e330:	ab0f      	add	r3, sp, #60	; 0x3c
1000e332:	781b      	ldrb	r3, [r3, #0]
1000e334:	4a19      	ldr	r2, [pc, #100]	; (1000e39c <gapc_encrypt_cmd_handler+0x7c>)
1000e336:	1c06      	adds	r6, r0, #0
1000e338:	9105      	str	r1, [sp, #20]
1000e33a:	9300      	str	r3, [sp, #0]
1000e33c:	9002      	str	r0, [sp, #8]
1000e33e:	1c29      	adds	r1, r5, #0
1000e340:	1c2b      	adds	r3, r5, #0
1000e342:	9501      	str	r5, [sp, #4]
1000e344:	1c10      	adds	r0, r2, #0
1000e346:	4c16      	ldr	r4, [pc, #88]	; (1000e3a0 <gapc_encrypt_cmd_handler+0x80>)
1000e348:	47a0      	blx	r4
1000e34a:	2316      	movs	r3, #22
1000e34c:	4c15      	ldr	r4, [pc, #84]	; (1000e3a4 <gapc_encrypt_cmd_handler+0x84>)
1000e34e:	9905      	ldr	r1, [sp, #20]
1000e350:	7023      	strb	r3, [r4, #0]
1000e352:	3b08      	subs	r3, #8
1000e354:	7063      	strb	r3, [r4, #1]
1000e356:	70a3      	strb	r3, [r4, #2]
1000e358:	4b13      	ldr	r3, [pc, #76]	; (1000e3a8 <gapc_encrypt_cmd_handler+0x88>)
1000e35a:	70e6      	strb	r6, [r4, #3]
1000e35c:	881a      	ldrh	r2, [r3, #0]
1000e35e:	881b      	ldrh	r3, [r3, #0]
1000e360:	7122      	strb	r2, [r4, #4]
1000e362:	0a1b      	lsrs	r3, r3, #8
1000e364:	7163      	strb	r3, [r4, #5]
1000e366:	230b      	movs	r3, #11
1000e368:	4e10      	ldr	r6, [pc, #64]	; (1000e3ac <gapc_encrypt_cmd_handler+0x8c>)
1000e36a:	2210      	movs	r2, #16
1000e36c:	4810      	ldr	r0, [pc, #64]	; (1000e3b0 <gapc_encrypt_cmd_handler+0x90>)
1000e36e:	7223      	strb	r3, [r4, #8]
1000e370:	7265      	strb	r5, [r4, #9]
1000e372:	47b0      	blx	r6
1000e374:	0a3b      	lsrs	r3, r7, #8
1000e376:	9906      	ldr	r1, [sp, #24]
1000e378:	2208      	movs	r2, #8
1000e37a:	480e      	ldr	r0, [pc, #56]	; (1000e3b4 <gapc_encrypt_cmd_handler+0x94>)
1000e37c:	76e3      	strb	r3, [r4, #27]
1000e37e:	76a7      	strb	r7, [r4, #26]
1000e380:	47b0      	blx	r6
1000e382:	466a      	mov	r2, sp
1000e384:	7f12      	ldrb	r2, [r2, #28]
1000e386:	1d63      	adds	r3, r4, #5
1000e388:	77da      	strb	r2, [r3, #31]
1000e38a:	231d      	movs	r3, #29
1000e38c:	1c20      	adds	r0, r4, #0
1000e38e:	71a3      	strb	r3, [r4, #6]
1000e390:	2125      	movs	r1, #37	; 0x25
1000e392:	4b09      	ldr	r3, [pc, #36]	; (1000e3b8 <gapc_encrypt_cmd_handler+0x98>)
1000e394:	71e5      	strb	r5, [r4, #7]
1000e396:	4798      	blx	r3
1000e398:	b009      	add	sp, #36	; 0x24
1000e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e39c:	10016dc0 	.word	0x10016dc0
1000e3a0:	1000ddd9 	.word	0x1000ddd9
1000e3a4:	10018324 	.word	0x10018324
1000e3a8:	10017fb4 	.word	0x10017fb4
1000e3ac:	1001310d 	.word	0x1001310d
1000e3b0:	1001832e 	.word	0x1001832e
1000e3b4:	10018340 	.word	0x10018340
1000e3b8:	1000dad5 	.word	0x1000dad5

1000e3bc <gapc_encrypt_req_ind>:
1000e3bc:	b508      	push	{r3, lr}
1000e3be:	0a00      	lsrs	r0, r0, #8
1000e3c0:	8010      	strh	r0, [r2, #0]
1000e3c2:	784b      	ldrb	r3, [r1, #1]
1000e3c4:	7808      	ldrb	r0, [r1, #0]
1000e3c6:	021b      	lsls	r3, r3, #8
1000e3c8:	4303      	orrs	r3, r0
1000e3ca:	8053      	strh	r3, [r2, #2]
1000e3cc:	1d10      	adds	r0, r2, #4
1000e3ce:	3102      	adds	r1, #2
1000e3d0:	2208      	movs	r2, #8
1000e3d2:	4b01      	ldr	r3, [pc, #4]	; (1000e3d8 <gapc_encrypt_req_ind+0x1c>)
1000e3d4:	4798      	blx	r3
1000e3d6:	bd08      	pop	{r3, pc}
1000e3d8:	1001310d 	.word	0x1001310d

1000e3dc <gapc_encrypt_cfm_handler>:
1000e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e3de:	2500      	movs	r5, #0
1000e3e0:	b087      	sub	sp, #28
1000e3e2:	9304      	str	r3, [sp, #16]
1000e3e4:	ab0c      	add	r3, sp, #48	; 0x30
1000e3e6:	781b      	ldrb	r3, [r3, #0]
1000e3e8:	1c17      	adds	r7, r2, #0
1000e3ea:	4a15      	ldr	r2, [pc, #84]	; (1000e440 <gapc_encrypt_cfm_handler+0x64>)
1000e3ec:	1c06      	adds	r6, r0, #0
1000e3ee:	9305      	str	r3, [sp, #20]
1000e3f0:	9100      	str	r1, [sp, #0]
1000e3f2:	9002      	str	r0, [sp, #8]
1000e3f4:	1c29      	adds	r1, r5, #0
1000e3f6:	1c2b      	adds	r3, r5, #0
1000e3f8:	9501      	str	r5, [sp, #4]
1000e3fa:	1c10      	adds	r0, r2, #0
1000e3fc:	4c11      	ldr	r4, [pc, #68]	; (1000e444 <gapc_encrypt_cfm_handler+0x68>)
1000e3fe:	47a0      	blx	r4
1000e400:	2318      	movs	r3, #24
1000e402:	4c11      	ldr	r4, [pc, #68]	; (1000e448 <gapc_encrypt_cfm_handler+0x6c>)
1000e404:	9904      	ldr	r1, [sp, #16]
1000e406:	7023      	strb	r3, [r4, #0]
1000e408:	3b0a      	subs	r3, #10
1000e40a:	7063      	strb	r3, [r4, #1]
1000e40c:	70a3      	strb	r3, [r4, #2]
1000e40e:	4b0f      	ldr	r3, [pc, #60]	; (1000e44c <gapc_encrypt_cfm_handler+0x70>)
1000e410:	480f      	ldr	r0, [pc, #60]	; (1000e450 <gapc_encrypt_cfm_handler+0x74>)
1000e412:	881a      	ldrh	r2, [r3, #0]
1000e414:	881b      	ldrh	r3, [r3, #0]
1000e416:	7122      	strb	r2, [r4, #4]
1000e418:	0a1b      	lsrs	r3, r3, #8
1000e41a:	7163      	strb	r3, [r4, #5]
1000e41c:	2210      	movs	r2, #16
1000e41e:	4b0d      	ldr	r3, [pc, #52]	; (1000e454 <gapc_encrypt_cfm_handler+0x78>)
1000e420:	70e6      	strb	r6, [r4, #3]
1000e422:	7227      	strb	r7, [r4, #8]
1000e424:	4798      	blx	r3
1000e426:	466b      	mov	r3, sp
1000e428:	7d1b      	ldrb	r3, [r3, #20]
1000e42a:	1c20      	adds	r0, r4, #0
1000e42c:	7663      	strb	r3, [r4, #25]
1000e42e:	2312      	movs	r3, #18
1000e430:	211a      	movs	r1, #26
1000e432:	71a3      	strb	r3, [r4, #6]
1000e434:	4b08      	ldr	r3, [pc, #32]	; (1000e458 <gapc_encrypt_cfm_handler+0x7c>)
1000e436:	71e5      	strb	r5, [r4, #7]
1000e438:	4798      	blx	r3
1000e43a:	b007      	add	sp, #28
1000e43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e43e:	46c0      	nop			; (mov r8, r8)
1000e440:	10016dd0 	.word	0x10016dd0
1000e444:	1000ddd9 	.word	0x1000ddd9
1000e448:	10018324 	.word	0x10018324
1000e44c:	10017fb4 	.word	0x10017fb4
1000e450:	1001832d 	.word	0x1001832d
1000e454:	1001310d 	.word	0x1001310d
1000e458:	1000dad5 	.word	0x1000dad5

1000e45c <gapc_encrypt_ind>:
1000e45c:	780b      	ldrb	r3, [r1, #0]
1000e45e:	0a00      	lsrs	r0, r0, #8
1000e460:	70d3      	strb	r3, [r2, #3]
1000e462:	2300      	movs	r3, #0
1000e464:	8010      	strh	r0, [r2, #0]
1000e466:	7093      	strb	r3, [r2, #2]
1000e468:	4770      	bx	lr
	...

1000e46c <gapc_param_update_cfm_handler>:
1000e46c:	b538      	push	{r3, r4, r5, lr}
1000e46e:	2410      	movs	r4, #16
1000e470:	1c05      	adds	r5, r0, #0
1000e472:	480e      	ldr	r0, [pc, #56]	; (1000e4ac <gapc_param_update_cfm_handler+0x40>)
1000e474:	7004      	strb	r4, [r0, #0]
1000e476:	3c02      	subs	r4, #2
1000e478:	7044      	strb	r4, [r0, #1]
1000e47a:	7084      	strb	r4, [r0, #2]
1000e47c:	4c0c      	ldr	r4, [pc, #48]	; (1000e4b0 <gapc_param_update_cfm_handler+0x44>)
1000e47e:	70c5      	strb	r5, [r0, #3]
1000e480:	8825      	ldrh	r5, [r4, #0]
1000e482:	8824      	ldrh	r4, [r4, #0]
1000e484:	72c3      	strb	r3, [r0, #11]
1000e486:	0a1b      	lsrs	r3, r3, #8
1000e488:	0a24      	lsrs	r4, r4, #8
1000e48a:	7303      	strb	r3, [r0, #12]
1000e48c:	2305      	movs	r3, #5
1000e48e:	7144      	strb	r4, [r0, #5]
1000e490:	2400      	movs	r4, #0
1000e492:	7201      	strb	r1, [r0, #8]
1000e494:	7242      	strb	r2, [r0, #9]
1000e496:	7183      	strb	r3, [r0, #6]
1000e498:	0a12      	lsrs	r2, r2, #8
1000e49a:	210d      	movs	r1, #13
1000e49c:	4b05      	ldr	r3, [pc, #20]	; (1000e4b4 <gapc_param_update_cfm_handler+0x48>)
1000e49e:	7105      	strb	r5, [r0, #4]
1000e4a0:	7282      	strb	r2, [r0, #10]
1000e4a2:	71c4      	strb	r4, [r0, #7]
1000e4a4:	4798      	blx	r3
1000e4a6:	1c20      	adds	r0, r4, #0
1000e4a8:	bd38      	pop	{r3, r4, r5, pc}
1000e4aa:	46c0      	nop			; (mov r8, r8)
1000e4ac:	10018324 	.word	0x10018324
1000e4b0:	10017fb4 	.word	0x10017fb4
1000e4b4:	1000dad5 	.word	0x1000dad5

1000e4b8 <gapc_param_updated_ind>:
1000e4b8:	2300      	movs	r3, #0
1000e4ba:	0a00      	lsrs	r0, r0, #8
1000e4bc:	8010      	strh	r0, [r2, #0]
1000e4be:	7093      	strb	r3, [r2, #2]
1000e4c0:	784b      	ldrb	r3, [r1, #1]
1000e4c2:	7808      	ldrb	r0, [r1, #0]
1000e4c4:	021b      	lsls	r3, r3, #8
1000e4c6:	4303      	orrs	r3, r0
1000e4c8:	8093      	strh	r3, [r2, #4]
1000e4ca:	78cb      	ldrb	r3, [r1, #3]
1000e4cc:	7888      	ldrb	r0, [r1, #2]
1000e4ce:	021b      	lsls	r3, r3, #8
1000e4d0:	4303      	orrs	r3, r0
1000e4d2:	80d3      	strh	r3, [r2, #6]
1000e4d4:	794b      	ldrb	r3, [r1, #5]
1000e4d6:	7909      	ldrb	r1, [r1, #4]
1000e4d8:	021b      	lsls	r3, r3, #8
1000e4da:	430b      	orrs	r3, r1
1000e4dc:	2007      	movs	r0, #7
1000e4de:	8113      	strh	r3, [r2, #8]
1000e4e0:	4770      	bx	lr

1000e4e2 <gapc_param_updated_req_ind>:
1000e4e2:	0a00      	lsrs	r0, r0, #8
1000e4e4:	8010      	strh	r0, [r2, #0]
1000e4e6:	784b      	ldrb	r3, [r1, #1]
1000e4e8:	7808      	ldrb	r0, [r1, #0]
1000e4ea:	021b      	lsls	r3, r3, #8
1000e4ec:	4303      	orrs	r3, r0
1000e4ee:	8053      	strh	r3, [r2, #2]
1000e4f0:	78cb      	ldrb	r3, [r1, #3]
1000e4f2:	7888      	ldrb	r0, [r1, #2]
1000e4f4:	021b      	lsls	r3, r3, #8
1000e4f6:	4303      	orrs	r3, r0
1000e4f8:	8093      	strh	r3, [r2, #4]
1000e4fa:	794b      	ldrb	r3, [r1, #5]
1000e4fc:	7908      	ldrb	r0, [r1, #4]
1000e4fe:	021b      	lsls	r3, r3, #8
1000e500:	4303      	orrs	r3, r0
1000e502:	80d3      	strh	r3, [r2, #6]
1000e504:	79cb      	ldrb	r3, [r1, #7]
1000e506:	7989      	ldrb	r1, [r1, #6]
1000e508:	021b      	lsls	r3, r3, #8
1000e50a:	430b      	orrs	r3, r1
1000e50c:	2008      	movs	r0, #8
1000e50e:	8113      	strh	r3, [r2, #8]
1000e510:	4770      	bx	lr
	...

1000e514 <gapc_dev_info_req_ind_handler>:
1000e514:	b508      	push	{r3, lr}
1000e516:	1c0b      	adds	r3, r1, #0
1000e518:	0a01      	lsrs	r1, r0, #8
1000e51a:	8011      	strh	r1, [r2, #0]
1000e51c:	7818      	ldrb	r0, [r3, #0]
1000e51e:	7090      	strb	r0, [r2, #2]
1000e520:	2800      	cmp	r0, #0
1000e522:	d104      	bne.n	1000e52e <gapc_dev_info_req_ind_handler+0x1a>
1000e524:	4b03      	ldr	r3, [pc, #12]	; (1000e534 <gapc_dev_info_req_ind_handler+0x20>)
1000e526:	33aa      	adds	r3, #170	; 0xaa
1000e528:	881b      	ldrh	r3, [r3, #0]
1000e52a:	2b00      	cmp	r3, #0
1000e52c:	d001      	beq.n	1000e532 <gapc_dev_info_req_ind_handler+0x1e>
1000e52e:	4b02      	ldr	r3, [pc, #8]	; (1000e538 <gapc_dev_info_req_ind_handler+0x24>)
1000e530:	4798      	blx	r3
1000e532:	bd08      	pop	{r3, pc}
1000e534:	10018046 	.word	0x10018046
1000e538:	1000dbe5 	.word	0x1000dbe5

1000e53c <gapc_sec_req_ind>:
1000e53c:	0a00      	lsrs	r0, r0, #8
1000e53e:	8010      	strh	r0, [r2, #0]
1000e540:	7809      	ldrb	r1, [r1, #0]
1000e542:	2301      	movs	r3, #1
1000e544:	1c08      	adds	r0, r1, #0
1000e546:	0889      	lsrs	r1, r1, #2
1000e548:	4018      	ands	r0, r3
1000e54a:	400b      	ands	r3, r1
1000e54c:	70d0      	strb	r0, [r2, #3]
1000e54e:	7113      	strb	r3, [r2, #4]
1000e550:	4770      	bx	lr

1000e552 <gapc_sign_counter_ind_handler>:
1000e552:	0a00      	lsrs	r0, r0, #8
1000e554:	8010      	strh	r0, [r2, #0]
1000e556:	784b      	ldrb	r3, [r1, #1]
1000e558:	0218      	lsls	r0, r3, #8
1000e55a:	788b      	ldrb	r3, [r1, #2]
1000e55c:	041b      	lsls	r3, r3, #16
1000e55e:	4303      	orrs	r3, r0
1000e560:	7808      	ldrb	r0, [r1, #0]
1000e562:	4303      	orrs	r3, r0
1000e564:	78c8      	ldrb	r0, [r1, #3]
1000e566:	0600      	lsls	r0, r0, #24
1000e568:	4303      	orrs	r3, r0
1000e56a:	6053      	str	r3, [r2, #4]
1000e56c:	794b      	ldrb	r3, [r1, #5]
1000e56e:	0218      	lsls	r0, r3, #8
1000e570:	798b      	ldrb	r3, [r1, #6]
1000e572:	041b      	lsls	r3, r3, #16
1000e574:	4303      	orrs	r3, r0
1000e576:	7908      	ldrb	r0, [r1, #4]
1000e578:	79c9      	ldrb	r1, [r1, #7]
1000e57a:	4303      	orrs	r3, r0
1000e57c:	0609      	lsls	r1, r1, #24
1000e57e:	430b      	orrs	r3, r1
1000e580:	2000      	movs	r0, #0
1000e582:	6093      	str	r3, [r2, #8]
1000e584:	4770      	bx	lr
	...

1000e588 <gapc_peer_att_info_ind_handler>:
1000e588:	b510      	push	{r4, lr}
1000e58a:	0a00      	lsrs	r0, r0, #8
1000e58c:	8010      	strh	r0, [r2, #0]
1000e58e:	7808      	ldrb	r0, [r1, #0]
1000e590:	7090      	strb	r0, [r2, #2]
1000e592:	788b      	ldrb	r3, [r1, #2]
1000e594:	784c      	ldrb	r4, [r1, #1]
1000e596:	021b      	lsls	r3, r3, #8
1000e598:	4323      	orrs	r3, r4
1000e59a:	8093      	strh	r3, [r2, #4]
1000e59c:	2801      	cmp	r0, #1
1000e59e:	d027      	beq.n	1000e5f0 <gapc_peer_att_info_ind_handler+0x68>
1000e5a0:	2800      	cmp	r0, #0
1000e5a2:	d017      	beq.n	1000e5d4 <gapc_peer_att_info_ind_handler+0x4c>
1000e5a4:	2802      	cmp	r0, #2
1000e5a6:	d12a      	bne.n	1000e5fe <gapc_peer_att_info_ind_handler+0x76>
1000e5a8:	790b      	ldrb	r3, [r1, #4]
1000e5aa:	78c8      	ldrb	r0, [r1, #3]
1000e5ac:	021b      	lsls	r3, r3, #8
1000e5ae:	4303      	orrs	r3, r0
1000e5b0:	8113      	strh	r3, [r2, #8]
1000e5b2:	798b      	ldrb	r3, [r1, #6]
1000e5b4:	7948      	ldrb	r0, [r1, #5]
1000e5b6:	021b      	lsls	r3, r3, #8
1000e5b8:	4303      	orrs	r3, r0
1000e5ba:	80d3      	strh	r3, [r2, #6]
1000e5bc:	7a0b      	ldrb	r3, [r1, #8]
1000e5be:	79c8      	ldrb	r0, [r1, #7]
1000e5c0:	021b      	lsls	r3, r3, #8
1000e5c2:	4303      	orrs	r3, r0
1000e5c4:	8193      	strh	r3, [r2, #12]
1000e5c6:	7a8b      	ldrb	r3, [r1, #10]
1000e5c8:	7a49      	ldrb	r1, [r1, #9]
1000e5ca:	021b      	lsls	r3, r3, #8
1000e5cc:	430b      	orrs	r3, r1
1000e5ce:	8153      	strh	r3, [r2, #10]
1000e5d0:	2306      	movs	r3, #6
1000e5d2:	e013      	b.n	1000e5fc <gapc_peer_att_info_ind_handler+0x74>
1000e5d4:	1c14      	adds	r4, r2, #0
1000e5d6:	1c20      	adds	r0, r4, #0
1000e5d8:	790a      	ldrb	r2, [r1, #4]
1000e5da:	78cb      	ldrb	r3, [r1, #3]
1000e5dc:	0212      	lsls	r2, r2, #8
1000e5de:	431a      	orrs	r2, r3
1000e5e0:	80e2      	strh	r2, [r4, #6]
1000e5e2:	4b07      	ldr	r3, [pc, #28]	; (1000e600 <gapc_peer_att_info_ind_handler+0x78>)
1000e5e4:	3008      	adds	r0, #8
1000e5e6:	3105      	adds	r1, #5
1000e5e8:	4798      	blx	r3
1000e5ea:	2302      	movs	r3, #2
1000e5ec:	70a3      	strb	r3, [r4, #2]
1000e5ee:	e006      	b.n	1000e5fe <gapc_peer_att_info_ind_handler+0x76>
1000e5f0:	790b      	ldrb	r3, [r1, #4]
1000e5f2:	78c9      	ldrb	r1, [r1, #3]
1000e5f4:	021b      	lsls	r3, r3, #8
1000e5f6:	430b      	orrs	r3, r1
1000e5f8:	80d3      	strh	r3, [r2, #6]
1000e5fa:	2305      	movs	r3, #5
1000e5fc:	7093      	strb	r3, [r2, #2]
1000e5fe:	bd10      	pop	{r4, pc}
1000e600:	1001310d 	.word	0x1001310d

1000e604 <gapc_con_channel_map_ind_handler>:
1000e604:	b508      	push	{r3, lr}
1000e606:	2300      	movs	r3, #0
1000e608:	0a00      	lsrs	r0, r0, #8
1000e60a:	7013      	strb	r3, [r2, #0]
1000e60c:	8050      	strh	r0, [r2, #2]
1000e60e:	4b02      	ldr	r3, [pc, #8]	; (1000e618 <gapc_con_channel_map_ind_handler+0x14>)
1000e610:	1d10      	adds	r0, r2, #4
1000e612:	2205      	movs	r2, #5
1000e614:	4798      	blx	r3
1000e616:	bd08      	pop	{r3, pc}
1000e618:	1001310d 	.word	0x1001310d

1000e61c <gapc_lecb_connected>:
1000e61c:	7843      	ldrb	r3, [r0, #1]
1000e61e:	7802      	ldrb	r2, [r0, #0]
1000e620:	021b      	lsls	r3, r3, #8
1000e622:	4313      	orrs	r3, r2
1000e624:	800b      	strh	r3, [r1, #0]
1000e626:	78c3      	ldrb	r3, [r0, #3]
1000e628:	7882      	ldrb	r2, [r0, #2]
1000e62a:	021b      	lsls	r3, r3, #8
1000e62c:	4313      	orrs	r3, r2
1000e62e:	804b      	strh	r3, [r1, #2]
1000e630:	7943      	ldrb	r3, [r0, #5]
1000e632:	7902      	ldrb	r2, [r0, #4]
1000e634:	021b      	lsls	r3, r3, #8
1000e636:	4313      	orrs	r3, r2
1000e638:	808b      	strh	r3, [r1, #4]
1000e63a:	79c3      	ldrb	r3, [r0, #7]
1000e63c:	7982      	ldrb	r2, [r0, #6]
1000e63e:	021b      	lsls	r3, r3, #8
1000e640:	4313      	orrs	r3, r2
1000e642:	80cb      	strh	r3, [r1, #6]
1000e644:	2300      	movs	r3, #0
1000e646:	720b      	strb	r3, [r1, #8]
1000e648:	4770      	bx	lr

1000e64a <gapc_lecb_disconnected>:
1000e64a:	7843      	ldrb	r3, [r0, #1]
1000e64c:	7802      	ldrb	r2, [r0, #0]
1000e64e:	021b      	lsls	r3, r3, #8
1000e650:	4313      	orrs	r3, r2
1000e652:	800b      	strh	r3, [r1, #0]
1000e654:	78c3      	ldrb	r3, [r0, #3]
1000e656:	7882      	ldrb	r2, [r0, #2]
1000e658:	021b      	lsls	r3, r3, #8
1000e65a:	4313      	orrs	r3, r2
1000e65c:	804b      	strh	r3, [r1, #2]
1000e65e:	4770      	bx	lr

1000e660 <gapc_lecb_connect_req_ind>:
1000e660:	7843      	ldrb	r3, [r0, #1]
1000e662:	7802      	ldrb	r2, [r0, #0]
1000e664:	021b      	lsls	r3, r3, #8
1000e666:	4313      	orrs	r3, r2
1000e668:	800b      	strh	r3, [r1, #0]
1000e66a:	78c3      	ldrb	r3, [r0, #3]
1000e66c:	7882      	ldrb	r2, [r0, #2]
1000e66e:	021b      	lsls	r3, r3, #8
1000e670:	4313      	orrs	r3, r2
1000e672:	804b      	strh	r3, [r1, #2]
1000e674:	7943      	ldrb	r3, [r0, #5]
1000e676:	7902      	ldrb	r2, [r0, #4]
1000e678:	021b      	lsls	r3, r3, #8
1000e67a:	4313      	orrs	r3, r2
1000e67c:	808b      	strh	r3, [r1, #4]
1000e67e:	79c3      	ldrb	r3, [r0, #7]
1000e680:	7982      	ldrb	r2, [r0, #6]
1000e682:	021b      	lsls	r3, r3, #8
1000e684:	4313      	orrs	r3, r2
1000e686:	80cb      	strh	r3, [r1, #6]
1000e688:	4770      	bx	lr

1000e68a <gapc_lecb_add_credit_resp_handler>:
1000e68a:	7843      	ldrb	r3, [r0, #1]
1000e68c:	7802      	ldrb	r2, [r0, #0]
1000e68e:	021b      	lsls	r3, r3, #8
1000e690:	4313      	orrs	r3, r2
1000e692:	800b      	strh	r3, [r1, #0]
1000e694:	78c3      	ldrb	r3, [r0, #3]
1000e696:	7882      	ldrb	r2, [r0, #2]
1000e698:	021b      	lsls	r3, r3, #8
1000e69a:	4313      	orrs	r3, r2
1000e69c:	804b      	strh	r3, [r1, #2]
1000e69e:	7943      	ldrb	r3, [r0, #5]
1000e6a0:	7902      	ldrb	r2, [r0, #4]
1000e6a2:	021b      	lsls	r3, r3, #8
1000e6a4:	4313      	orrs	r3, r2
1000e6a6:	808b      	strh	r3, [r1, #4]
1000e6a8:	4770      	bx	lr
	...

1000e6ac <gapm_reset_req_handler>:
1000e6ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e6ae:	466b      	mov	r3, sp
1000e6b0:	4915      	ldr	r1, [pc, #84]	; (1000e708 <gapm_reset_req_handler+0x5c>)
1000e6b2:	4816      	ldr	r0, [pc, #88]	; (1000e70c <gapm_reset_req_handler+0x60>)
1000e6b4:	880c      	ldrh	r4, [r1, #0]
1000e6b6:	8809      	ldrh	r1, [r1, #0]
1000e6b8:	1ddd      	adds	r5, r3, #7
1000e6ba:	0a09      	lsrs	r1, r1, #8
1000e6bc:	2300      	movs	r3, #0
1000e6be:	2202      	movs	r2, #2
1000e6c0:	7141      	strb	r1, [r0, #5]
1000e6c2:	26d0      	movs	r6, #208	; 0xd0
1000e6c4:	2101      	movs	r1, #1
1000e6c6:	7104      	strb	r4, [r0, #4]
1000e6c8:	4c11      	ldr	r4, [pc, #68]	; (1000e710 <gapm_reset_req_handler+0x64>)
1000e6ca:	702b      	strb	r3, [r5, #0]
1000e6cc:	7002      	strb	r2, [r0, #0]
1000e6ce:	70c3      	strb	r3, [r0, #3]
1000e6d0:	320b      	adds	r2, #11
1000e6d2:	7201      	strb	r1, [r0, #8]
1000e6d4:	7181      	strb	r1, [r0, #6]
1000e6d6:	71c3      	strb	r3, [r0, #7]
1000e6d8:	3108      	adds	r1, #8
1000e6da:	4b0e      	ldr	r3, [pc, #56]	; (1000e714 <gapm_reset_req_handler+0x68>)
1000e6dc:	0136      	lsls	r6, r6, #4
1000e6de:	7042      	strb	r2, [r0, #1]
1000e6e0:	7082      	strb	r2, [r0, #2]
1000e6e2:	80a2      	strh	r2, [r4, #4]
1000e6e4:	8026      	strh	r6, [r4, #0]
1000e6e6:	4798      	blx	r3
1000e6e8:	1c28      	adds	r0, r5, #0
1000e6ea:	4b0b      	ldr	r3, [pc, #44]	; (1000e718 <gapm_reset_req_handler+0x6c>)
1000e6ec:	4798      	blx	r3
1000e6ee:	782b      	ldrb	r3, [r5, #0]
1000e6f0:	20e2      	movs	r0, #226	; 0xe2
1000e6f2:	2b00      	cmp	r3, #0
1000e6f4:	d106      	bne.n	1000e704 <gapm_reset_req_handler+0x58>
1000e6f6:	68a3      	ldr	r3, [r4, #8]
1000e6f8:	20e2      	movs	r0, #226	; 0xe2
1000e6fa:	781a      	ldrb	r2, [r3, #0]
1000e6fc:	785b      	ldrb	r3, [r3, #1]
1000e6fe:	2a01      	cmp	r2, #1
1000e700:	d100      	bne.n	1000e704 <gapm_reset_req_handler+0x58>
1000e702:	1c18      	adds	r0, r3, #0
1000e704:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e706:	46c0      	nop			; (mov r8, r8)
1000e708:	10017fb4 	.word	0x10017fb4
1000e70c:	10018324 	.word	0x10018324
1000e710:	10017fa8 	.word	0x10017fa8
1000e714:	1000dad5 	.word	0x1000dad5
1000e718:	1000db39 	.word	0x1000db39

1000e71c <gapm_set_dev_config_cmd_handler>:
1000e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e71e:	b089      	sub	sp, #36	; 0x24
1000e720:	9303      	str	r3, [sp, #12]
1000e722:	ab0e      	add	r3, sp, #56	; 0x38
1000e724:	781b      	ldrb	r3, [r3, #0]
1000e726:	4c37      	ldr	r4, [pc, #220]	; (1000e804 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e728:	9304      	str	r3, [sp, #16]
1000e72a:	ab0f      	add	r3, sp, #60	; 0x3c
1000e72c:	781b      	ldrb	r3, [r3, #0]
1000e72e:	270d      	movs	r7, #13
1000e730:	9305      	str	r3, [sp, #20]
1000e732:	ab10      	add	r3, sp, #64	; 0x40
1000e734:	881b      	ldrh	r3, [r3, #0]
1000e736:	72a1      	strb	r1, [r4, #10]
1000e738:	9300      	str	r3, [sp, #0]
1000e73a:	ab11      	add	r3, sp, #68	; 0x44
1000e73c:	881b      	ldrh	r3, [r3, #0]
1000e73e:	0a09      	lsrs	r1, r1, #8
1000e740:	9301      	str	r3, [sp, #4]
1000e742:	ab12      	add	r3, sp, #72	; 0x48
1000e744:	881b      	ldrh	r3, [r3, #0]
1000e746:	7260      	strb	r0, [r4, #9]
1000e748:	9302      	str	r3, [sp, #8]
1000e74a:	ab06      	add	r3, sp, #24
1000e74c:	1dde      	adds	r6, r3, #7
1000e74e:	2300      	movs	r3, #0
1000e750:	7033      	strb	r3, [r6, #0]
1000e752:	2304      	movs	r3, #4
1000e754:	7023      	strb	r3, [r4, #0]
1000e756:	2300      	movs	r3, #0
1000e758:	70e3      	strb	r3, [r4, #3]
1000e75a:	4b2b      	ldr	r3, [pc, #172]	; (1000e808 <gapm_set_dev_config_cmd_handler+0xec>)
1000e75c:	72e1      	strb	r1, [r4, #11]
1000e75e:	881d      	ldrh	r5, [r3, #0]
1000e760:	881b      	ldrh	r3, [r3, #0]
1000e762:	1c11      	adds	r1, r2, #0
1000e764:	0a1b      	lsrs	r3, r3, #8
1000e766:	7163      	strb	r3, [r4, #5]
1000e768:	2303      	movs	r3, #3
1000e76a:	7125      	strb	r5, [r4, #4]
1000e76c:	2206      	movs	r2, #6
1000e76e:	4d27      	ldr	r5, [pc, #156]	; (1000e80c <gapm_set_dev_config_cmd_handler+0xf0>)
1000e770:	4827      	ldr	r0, [pc, #156]	; (1000e810 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e772:	7223      	strb	r3, [r4, #8]
1000e774:	7067      	strb	r7, [r4, #1]
1000e776:	70a7      	strb	r7, [r4, #2]
1000e778:	47a8      	blx	r5
1000e77a:	9903      	ldr	r1, [sp, #12]
1000e77c:	2210      	movs	r2, #16
1000e77e:	4825      	ldr	r0, [pc, #148]	; (1000e814 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e780:	47a8      	blx	r5
1000e782:	466a      	mov	r2, sp
1000e784:	7c12      	ldrb	r2, [r2, #16]
1000e786:	1ce3      	adds	r3, r4, #3
1000e788:	77da      	strb	r2, [r3, #31]
1000e78a:	466a      	mov	r2, sp
1000e78c:	7d12      	ldrb	r2, [r2, #20]
1000e78e:	1d23      	adds	r3, r4, #4
1000e790:	77da      	strb	r2, [r3, #31]
1000e792:	466a      	mov	r2, sp
1000e794:	7812      	ldrb	r2, [r2, #0]
1000e796:	1d63      	adds	r3, r4, #5
1000e798:	77da      	strb	r2, [r3, #31]
1000e79a:	9b00      	ldr	r3, [sp, #0]
1000e79c:	1da2      	adds	r2, r4, #6
1000e79e:	0a1b      	lsrs	r3, r3, #8
1000e7a0:	77d3      	strb	r3, [r2, #31]
1000e7a2:	466a      	mov	r2, sp
1000e7a4:	7912      	ldrb	r2, [r2, #4]
1000e7a6:	1de3      	adds	r3, r4, #7
1000e7a8:	77da      	strb	r2, [r3, #31]
1000e7aa:	1c22      	adds	r2, r4, #0
1000e7ac:	9b01      	ldr	r3, [sp, #4]
1000e7ae:	3208      	adds	r2, #8
1000e7b0:	0a1b      	lsrs	r3, r3, #8
1000e7b2:	77d3      	strb	r3, [r2, #31]
1000e7b4:	466a      	mov	r2, sp
1000e7b6:	1c23      	adds	r3, r4, #0
1000e7b8:	7a12      	ldrb	r2, [r2, #8]
1000e7ba:	3328      	adds	r3, #40	; 0x28
1000e7bc:	701a      	strb	r2, [r3, #0]
1000e7be:	1c22      	adds	r2, r4, #0
1000e7c0:	9b02      	ldr	r3, [sp, #8]
1000e7c2:	3229      	adds	r2, #41	; 0x29
1000e7c4:	0a1b      	lsrs	r3, r3, #8
1000e7c6:	7013      	strb	r3, [r2, #0]
1000e7c8:	23d0      	movs	r3, #208	; 0xd0
1000e7ca:	4d13      	ldr	r5, [pc, #76]	; (1000e818 <gapm_set_dev_config_cmd_handler+0xfc>)
1000e7cc:	011b      	lsls	r3, r3, #4
1000e7ce:	802b      	strh	r3, [r5, #0]
1000e7d0:	2322      	movs	r3, #34	; 0x22
1000e7d2:	71a3      	strb	r3, [r4, #6]
1000e7d4:	2300      	movs	r3, #0
1000e7d6:	212a      	movs	r1, #42	; 0x2a
1000e7d8:	71e3      	strb	r3, [r4, #7]
1000e7da:	1c20      	adds	r0, r4, #0
1000e7dc:	4b0f      	ldr	r3, [pc, #60]	; (1000e81c <gapm_set_dev_config_cmd_handler+0x100>)
1000e7de:	80af      	strh	r7, [r5, #4]
1000e7e0:	4798      	blx	r3
1000e7e2:	1c30      	adds	r0, r6, #0
1000e7e4:	4b0e      	ldr	r3, [pc, #56]	; (1000e820 <gapm_set_dev_config_cmd_handler+0x104>)
1000e7e6:	4798      	blx	r3
1000e7e8:	7833      	ldrb	r3, [r6, #0]
1000e7ea:	20e2      	movs	r0, #226	; 0xe2
1000e7ec:	2b00      	cmp	r3, #0
1000e7ee:	d106      	bne.n	1000e7fe <gapm_set_dev_config_cmd_handler+0xe2>
1000e7f0:	68ab      	ldr	r3, [r5, #8]
1000e7f2:	20e2      	movs	r0, #226	; 0xe2
1000e7f4:	781a      	ldrb	r2, [r3, #0]
1000e7f6:	785b      	ldrb	r3, [r3, #1]
1000e7f8:	2a03      	cmp	r2, #3
1000e7fa:	d100      	bne.n	1000e7fe <gapm_set_dev_config_cmd_handler+0xe2>
1000e7fc:	1c18      	adds	r0, r3, #0
1000e7fe:	b009      	add	sp, #36	; 0x24
1000e800:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e802:	46c0      	nop			; (mov r8, r8)
1000e804:	10018324 	.word	0x10018324
1000e808:	10017fb4 	.word	0x10017fb4
1000e80c:	1001310d 	.word	0x1001310d
1000e810:	10018330 	.word	0x10018330
1000e814:	10018336 	.word	0x10018336
1000e818:	10017fa8 	.word	0x10017fa8
1000e81c:	1000dad5 	.word	0x1000dad5
1000e820:	1000db39 	.word	0x1000db39

1000e824 <gapm_get_dev_config_cmd_handler>:
1000e824:	4684      	mov	ip, r0
1000e826:	4663      	mov	r3, ip
1000e828:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e82a:	b085      	sub	sp, #20
1000e82c:	9100      	str	r1, [sp, #0]
1000e82e:	20cf      	movs	r0, #207	; 0xcf
1000e830:	2b01      	cmp	r3, #1
1000e832:	d854      	bhi.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e834:	2900      	cmp	r1, #0
1000e836:	d052      	beq.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e838:	2200      	movs	r2, #0
1000e83a:	492a      	ldr	r1, [pc, #168]	; (1000e8e4 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e83c:	ab02      	add	r3, sp, #8
1000e83e:	880c      	ldrh	r4, [r1, #0]
1000e840:	8809      	ldrh	r1, [r1, #0]
1000e842:	1d9f      	adds	r7, r3, #6
1000e844:	719a      	strb	r2, [r3, #6]
1000e846:	4b28      	ldr	r3, [pc, #160]	; (1000e8e8 <gapm_get_dev_config_cmd_handler+0xc4>)
1000e848:	0a09      	lsrs	r1, r1, #8
1000e84a:	250d      	movs	r5, #13
1000e84c:	2606      	movs	r6, #6
1000e84e:	7159      	strb	r1, [r3, #5]
1000e850:	4661      	mov	r1, ip
1000e852:	701e      	strb	r6, [r3, #0]
1000e854:	705d      	strb	r5, [r3, #1]
1000e856:	709d      	strb	r5, [r3, #2]
1000e858:	70da      	strb	r2, [r3, #3]
1000e85a:	711c      	strb	r4, [r3, #4]
1000e85c:	2901      	cmp	r1, #1
1000e85e:	d13e      	bne.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e860:	21d0      	movs	r1, #208	; 0xd0
1000e862:	4c22      	ldr	r4, [pc, #136]	; (1000e8ec <gapm_get_dev_config_cmd_handler+0xc8>)
1000e864:	0109      	lsls	r1, r1, #4
1000e866:	8061      	strh	r1, [r4, #2]
1000e868:	4921      	ldr	r1, [pc, #132]	; (1000e8f0 <gapm_get_dev_config_cmd_handler+0xcc>)
1000e86a:	71da      	strb	r2, [r3, #7]
1000e86c:	8021      	strh	r1, [r4, #0]
1000e86e:	4661      	mov	r1, ip
1000e870:	721e      	strb	r6, [r3, #8]
1000e872:	7199      	strb	r1, [r3, #6]
1000e874:	1c18      	adds	r0, r3, #0
1000e876:	2109      	movs	r1, #9
1000e878:	4b1e      	ldr	r3, [pc, #120]	; (1000e8f4 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e87a:	80a5      	strh	r5, [r4, #4]
1000e87c:	4798      	blx	r3
1000e87e:	1c38      	adds	r0, r7, #0
1000e880:	4b1d      	ldr	r3, [pc, #116]	; (1000e8f8 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e882:	4798      	blx	r3
1000e884:	783b      	ldrb	r3, [r7, #0]
1000e886:	20e2      	movs	r0, #226	; 0xe2
1000e888:	9301      	str	r3, [sp, #4]
1000e88a:	2b00      	cmp	r3, #0
1000e88c:	d127      	bne.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e88e:	8821      	ldrh	r1, [r4, #0]
1000e890:	4a1a      	ldr	r2, [pc, #104]	; (1000e8fc <gapm_get_dev_config_cmd_handler+0xd8>)
1000e892:	68a7      	ldr	r7, [r4, #8]
1000e894:	3b01      	subs	r3, #1
1000e896:	4291      	cmp	r1, r2
1000e898:	d001      	beq.n	1000e89e <gapm_get_dev_config_cmd_handler+0x7a>
1000e89a:	8023      	strh	r3, [r4, #0]
1000e89c:	e01a      	b.n	1000e8d4 <gapm_get_dev_config_cmd_handler+0xb0>
1000e89e:	8063      	strh	r3, [r4, #2]
1000e8a0:	9b00      	ldr	r3, [sp, #0]
1000e8a2:	1c39      	adds	r1, r7, #0
1000e8a4:	1c58      	adds	r0, r3, #1
1000e8a6:	1c32      	adds	r2, r6, #0
1000e8a8:	4b15      	ldr	r3, [pc, #84]	; (1000e900 <gapm_get_dev_config_cmd_handler+0xdc>)
1000e8aa:	4798      	blx	r3
1000e8ac:	79bb      	ldrb	r3, [r7, #6]
1000e8ae:	9a00      	ldr	r2, [sp, #0]
1000e8b0:	7013      	strb	r3, [r2, #0]
1000e8b2:	23d0      	movs	r3, #208	; 0xd0
1000e8b4:	011b      	lsls	r3, r3, #4
1000e8b6:	8023      	strh	r3, [r4, #0]
1000e8b8:	ab02      	add	r3, sp, #8
1000e8ba:	80a5      	strh	r5, [r4, #4]
1000e8bc:	1ddd      	adds	r5, r3, #7
1000e8be:	466b      	mov	r3, sp
1000e8c0:	791b      	ldrb	r3, [r3, #4]
1000e8c2:	1c28      	adds	r0, r5, #0
1000e8c4:	702b      	strb	r3, [r5, #0]
1000e8c6:	4b0c      	ldr	r3, [pc, #48]	; (1000e8f8 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e8c8:	4798      	blx	r3
1000e8ca:	782b      	ldrb	r3, [r5, #0]
1000e8cc:	20d0      	movs	r0, #208	; 0xd0
1000e8ce:	2b00      	cmp	r3, #0
1000e8d0:	d105      	bne.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e8d2:	68a7      	ldr	r7, [r4, #8]
1000e8d4:	783b      	ldrb	r3, [r7, #0]
1000e8d6:	7878      	ldrb	r0, [r7, #1]
1000e8d8:	2b06      	cmp	r3, #6
1000e8da:	d000      	beq.n	1000e8de <gapm_get_dev_config_cmd_handler+0xba>
1000e8dc:	20e2      	movs	r0, #226	; 0xe2
1000e8de:	b005      	add	sp, #20
1000e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e8e2:	46c0      	nop			; (mov r8, r8)
1000e8e4:	10017fb4 	.word	0x10017fb4
1000e8e8:	10018324 	.word	0x10018324
1000e8ec:	10017fa8 	.word	0x10017fa8
1000e8f0:	00000d08 	.word	0x00000d08
1000e8f4:	1000dad5 	.word	0x1000dad5
1000e8f8:	1000db39 	.word	0x1000db39
1000e8fc:	0000ffff 	.word	0x0000ffff
1000e900:	1001310d 	.word	0x1001310d

1000e904 <gapm_cancel_cmd_handler>:
1000e904:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e906:	4916      	ldr	r1, [pc, #88]	; (1000e960 <gapm_cancel_cmd_handler+0x5c>)
1000e908:	4816      	ldr	r0, [pc, #88]	; (1000e964 <gapm_cancel_cmd_handler+0x60>)
1000e90a:	880c      	ldrh	r4, [r1, #0]
1000e90c:	8809      	ldrh	r1, [r1, #0]
1000e90e:	466b      	mov	r3, sp
1000e910:	0a09      	lsrs	r1, r1, #8
1000e912:	7141      	strb	r1, [r0, #5]
1000e914:	2102      	movs	r1, #2
1000e916:	2203      	movs	r2, #3
1000e918:	7201      	strb	r1, [r0, #8]
1000e91a:	21d0      	movs	r1, #208	; 0xd0
1000e91c:	1ddd      	adds	r5, r3, #7
1000e91e:	2300      	movs	r3, #0
1000e920:	7104      	strb	r4, [r0, #4]
1000e922:	4c11      	ldr	r4, [pc, #68]	; (1000e968 <gapm_cancel_cmd_handler+0x64>)
1000e924:	7002      	strb	r2, [r0, #0]
1000e926:	0109      	lsls	r1, r1, #4
1000e928:	320a      	adds	r2, #10
1000e92a:	702b      	strb	r3, [r5, #0]
1000e92c:	7042      	strb	r2, [r0, #1]
1000e92e:	7082      	strb	r2, [r0, #2]
1000e930:	70c3      	strb	r3, [r0, #3]
1000e932:	8021      	strh	r1, [r4, #0]
1000e934:	80a2      	strh	r2, [r4, #4]
1000e936:	71c3      	strb	r3, [r0, #7]
1000e938:	3a0c      	subs	r2, #12
1000e93a:	2109      	movs	r1, #9
1000e93c:	4b0b      	ldr	r3, [pc, #44]	; (1000e96c <gapm_cancel_cmd_handler+0x68>)
1000e93e:	7182      	strb	r2, [r0, #6]
1000e940:	4798      	blx	r3
1000e942:	1c28      	adds	r0, r5, #0
1000e944:	4b0a      	ldr	r3, [pc, #40]	; (1000e970 <gapm_cancel_cmd_handler+0x6c>)
1000e946:	4798      	blx	r3
1000e948:	7828      	ldrb	r0, [r5, #0]
1000e94a:	2800      	cmp	r0, #0
1000e94c:	d001      	beq.n	1000e952 <gapm_cancel_cmd_handler+0x4e>
1000e94e:	20e2      	movs	r0, #226	; 0xe2
1000e950:	e004      	b.n	1000e95c <gapm_cancel_cmd_handler+0x58>
1000e952:	68a3      	ldr	r3, [r4, #8]
1000e954:	785b      	ldrb	r3, [r3, #1]
1000e956:	2b44      	cmp	r3, #68	; 0x44
1000e958:	d000      	beq.n	1000e95c <gapm_cancel_cmd_handler+0x58>
1000e95a:	1c18      	adds	r0, r3, #0
1000e95c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e95e:	46c0      	nop			; (mov r8, r8)
1000e960:	10017fb4 	.word	0x10017fb4
1000e964:	10018324 	.word	0x10018324
1000e968:	10017fa8 	.word	0x10017fa8
1000e96c:	1000dad5 	.word	0x1000dad5
1000e970:	1000db39 	.word	0x1000db39

1000e974 <gapm_dev_bdaddr_ind_handler>:
1000e974:	b538      	push	{r3, r4, r5, lr}
1000e976:	1c05      	adds	r5, r0, #0
1000e978:	1c0c      	adds	r4, r1, #0
1000e97a:	1c48      	adds	r0, r1, #1
1000e97c:	2206      	movs	r2, #6
1000e97e:	1c29      	adds	r1, r5, #0
1000e980:	4b02      	ldr	r3, [pc, #8]	; (1000e98c <gapm_dev_bdaddr_ind_handler+0x18>)
1000e982:	4798      	blx	r3
1000e984:	79ab      	ldrb	r3, [r5, #6]
1000e986:	2000      	movs	r0, #0
1000e988:	7023      	strb	r3, [r4, #0]
1000e98a:	bd38      	pop	{r3, r4, r5, pc}
1000e98c:	1001310d 	.word	0x1001310d

1000e990 <gapm_cmp_evt>:
1000e990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e992:	7803      	ldrb	r3, [r0, #0]
1000e994:	7845      	ldrb	r5, [r0, #1]
1000e996:	3b0c      	subs	r3, #12
1000e998:	1e18      	subs	r0, r3, #0
1000e99a:	280b      	cmp	r0, #11
1000e99c:	d900      	bls.n	1000e9a0 <gapm_cmp_evt+0x10>
1000e99e:	e08d      	b.n	1000eabc <gapm_cmp_evt+0x12c>
1000e9a0:	1c0c      	adds	r4, r1, #0
1000e9a2:	f001 fefb 	bl	1001079c <__gnu_thumb1_case_uqi>
1000e9a6:	1952      	.short	0x1952
1000e9a8:	068b1919 	.word	0x068b1919
1000e9ac:	8b595906 	.word	0x8b595906
1000e9b0:	0d8b      	.short	0x0d8b
1000e9b2:	2300      	movs	r3, #0
1000e9b4:	2d45      	cmp	r5, #69	; 0x45
1000e9b6:	d000      	beq.n	1000e9ba <gapm_cmp_evt+0x2a>
1000e9b8:	1c2b      	adds	r3, r5, #0
1000e9ba:	7023      	strb	r3, [r4, #0]
1000e9bc:	2002      	movs	r0, #2
1000e9be:	e07e      	b.n	1000eabe <gapm_cmp_evt+0x12e>
1000e9c0:	203b      	movs	r0, #59	; 0x3b
1000e9c2:	2d00      	cmp	r5, #0
1000e9c4:	d100      	bne.n	1000e9c8 <gapm_cmp_evt+0x38>
1000e9c6:	e07a      	b.n	1000eabe <gapm_cmp_evt+0x12e>
1000e9c8:	700d      	strb	r5, [r1, #0]
1000e9ca:	1c48      	adds	r0, r1, #1
1000e9cc:	2210      	movs	r2, #16
1000e9ce:	2100      	movs	r1, #0
1000e9d0:	4b3b      	ldr	r3, [pc, #236]	; (1000eac0 <gapm_cmp_evt+0x130>)
1000e9d2:	4798      	blx	r3
1000e9d4:	200f      	movs	r0, #15
1000e9d6:	e072      	b.n	1000eabe <gapm_cmp_evt+0x12e>
1000e9d8:	2d00      	cmp	r5, #0
1000e9da:	d134      	bne.n	1000ea46 <gapm_cmp_evt+0xb6>
1000e9dc:	4b39      	ldr	r3, [pc, #228]	; (1000eac4 <gapm_cmp_evt+0x134>)
1000e9de:	4798      	blx	r3
1000e9e0:	1e43      	subs	r3, r0, #1
1000e9e2:	b2db      	uxtb	r3, r3
1000e9e4:	1c28      	adds	r0, r5, #0
1000e9e6:	2b06      	cmp	r3, #6
1000e9e8:	d869      	bhi.n	1000eabe <gapm_cmp_evt+0x12e>
1000e9ea:	466b      	mov	r3, sp
1000e9ec:	4e36      	ldr	r6, [pc, #216]	; (1000eac8 <gapm_cmp_evt+0x138>)
1000e9ee:	1dd9      	adds	r1, r3, #7
1000e9f0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e9f2:	4b36      	ldr	r3, [pc, #216]	; (1000eacc <gapm_cmp_evt+0x13c>)
1000e9f4:	4798      	blx	r3
1000e9f6:	2312      	movs	r3, #18
1000e9f8:	4358      	muls	r0, r3
1000e9fa:	4935      	ldr	r1, [pc, #212]	; (1000ead0 <gapm_cmp_evt+0x140>)
1000e9fc:	1809      	adds	r1, r1, r0
1000e9fe:	1c0b      	adds	r3, r1, #0
1000ea00:	894a      	ldrh	r2, [r1, #10]
1000ea02:	3308      	adds	r3, #8
1000ea04:	8122      	strh	r2, [r4, #8]
1000ea06:	784f      	ldrb	r7, [r1, #1]
1000ea08:	72a5      	strb	r5, [r4, #10]
1000ea0a:	7027      	strb	r7, [r4, #0]
1000ea0c:	898a      	ldrh	r2, [r1, #12]
1000ea0e:	1c60      	adds	r0, r4, #1
1000ea10:	81a2      	strh	r2, [r4, #12]
1000ea12:	88db      	ldrh	r3, [r3, #6]
1000ea14:	3102      	adds	r1, #2
1000ea16:	81e3      	strh	r3, [r4, #14]
1000ea18:	89cb      	ldrh	r3, [r1, #14]
1000ea1a:	2206      	movs	r2, #6
1000ea1c:	8223      	strh	r3, [r4, #16]
1000ea1e:	4b2d      	ldr	r3, [pc, #180]	; (1000ead4 <gapm_cmp_evt+0x144>)
1000ea20:	4798      	blx	r3
1000ea22:	2f00      	cmp	r7, #0
1000ea24:	d00a      	beq.n	1000ea3c <gapm_cmp_evt+0xac>
1000ea26:	79a3      	ldrb	r3, [r4, #6]
1000ea28:	223f      	movs	r2, #63	; 0x3f
1000ea2a:	1c19      	adds	r1, r3, #0
1000ea2c:	3501      	adds	r5, #1
1000ea2e:	4391      	bics	r1, r2
1000ea30:	29c0      	cmp	r1, #192	; 0xc0
1000ea32:	d003      	beq.n	1000ea3c <gapm_cmp_evt+0xac>
1000ea34:	065b      	lsls	r3, r3, #25
1000ea36:	0fdb      	lsrs	r3, r3, #31
1000ea38:	3502      	adds	r5, #2
1000ea3a:	1aed      	subs	r5, r5, r3
1000ea3c:	2301      	movs	r3, #1
1000ea3e:	425b      	negs	r3, r3
1000ea40:	7025      	strb	r5, [r4, #0]
1000ea42:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ea44:	e038      	b.n	1000eab8 <gapm_cmp_evt+0x128>
1000ea46:	700d      	strb	r5, [r1, #0]
1000ea48:	e004      	b.n	1000ea54 <gapm_cmp_evt+0xc4>
1000ea4a:	2300      	movs	r3, #0
1000ea4c:	2d45      	cmp	r5, #69	; 0x45
1000ea4e:	d000      	beq.n	1000ea52 <gapm_cmp_evt+0xc2>
1000ea50:	1c2b      	adds	r3, r5, #0
1000ea52:	7023      	strb	r3, [r4, #0]
1000ea54:	2003      	movs	r0, #3
1000ea56:	e032      	b.n	1000eabe <gapm_cmp_evt+0x12e>
1000ea58:	4e1b      	ldr	r6, [pc, #108]	; (1000eac8 <gapm_cmp_evt+0x138>)
1000ea5a:	2100      	movs	r1, #0
1000ea5c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ea5e:	4b1b      	ldr	r3, [pc, #108]	; (1000eacc <gapm_cmp_evt+0x13c>)
1000ea60:	4798      	blx	r3
1000ea62:	2807      	cmp	r0, #7
1000ea64:	d818      	bhi.n	1000ea98 <gapm_cmp_evt+0x108>
1000ea66:	2301      	movs	r3, #1
1000ea68:	425b      	negs	r3, r3
1000ea6a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ea6c:	3313      	adds	r3, #19
1000ea6e:	4358      	muls	r0, r3
1000ea70:	4917      	ldr	r1, [pc, #92]	; (1000ead0 <gapm_cmp_evt+0x140>)
1000ea72:	1809      	adds	r1, r1, r0
1000ea74:	1c0b      	adds	r3, r1, #0
1000ea76:	894a      	ldrh	r2, [r1, #10]
1000ea78:	3308      	adds	r3, #8
1000ea7a:	8122      	strh	r2, [r4, #8]
1000ea7c:	784a      	ldrb	r2, [r1, #1]
1000ea7e:	72a5      	strb	r5, [r4, #10]
1000ea80:	7022      	strb	r2, [r4, #0]
1000ea82:	898a      	ldrh	r2, [r1, #12]
1000ea84:	1c60      	adds	r0, r4, #1
1000ea86:	81a2      	strh	r2, [r4, #12]
1000ea88:	88db      	ldrh	r3, [r3, #6]
1000ea8a:	3102      	adds	r1, #2
1000ea8c:	81e3      	strh	r3, [r4, #14]
1000ea8e:	89cb      	ldrh	r3, [r1, #14]
1000ea90:	2206      	movs	r2, #6
1000ea92:	8223      	strh	r3, [r4, #16]
1000ea94:	4b0f      	ldr	r3, [pc, #60]	; (1000ead4 <gapm_cmp_evt+0x144>)
1000ea96:	4798      	blx	r3
1000ea98:	2200      	movs	r2, #0
1000ea9a:	7823      	ldrb	r3, [r4, #0]
1000ea9c:	4293      	cmp	r3, r2
1000ea9e:	d00a      	beq.n	1000eab6 <gapm_cmp_evt+0x126>
1000eaa0:	79a3      	ldrb	r3, [r4, #6]
1000eaa2:	323f      	adds	r2, #63	; 0x3f
1000eaa4:	1c19      	adds	r1, r3, #0
1000eaa6:	4391      	bics	r1, r2
1000eaa8:	3a3e      	subs	r2, #62	; 0x3e
1000eaaa:	29c0      	cmp	r1, #192	; 0xc0
1000eaac:	d003      	beq.n	1000eab6 <gapm_cmp_evt+0x126>
1000eaae:	065b      	lsls	r3, r3, #25
1000eab0:	0fdb      	lsrs	r3, r3, #31
1000eab2:	3202      	adds	r2, #2
1000eab4:	1ad2      	subs	r2, r2, r3
1000eab6:	7022      	strb	r2, [r4, #0]
1000eab8:	2005      	movs	r0, #5
1000eaba:	e000      	b.n	1000eabe <gapm_cmp_evt+0x12e>
1000eabc:	2000      	movs	r0, #0
1000eabe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000eac0:	1001311f 	.word	0x1001311f
1000eac4:	1000dce1 	.word	0x1000dce1
1000eac8:	10018046 	.word	0x10018046
1000eacc:	1000dca5 	.word	0x1000dca5
1000ead0:	10017fb6 	.word	0x10017fb6
1000ead4:	1001310d 	.word	0x1001310d

1000ead8 <gapm_start_adv_cmd_handler>:
1000ead8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eada:	b089      	sub	sp, #36	; 0x24
1000eadc:	9303      	str	r3, [sp, #12]
1000eade:	ab0e      	add	r3, sp, #56	; 0x38
1000eae0:	9102      	str	r1, [sp, #8]
1000eae2:	cb02      	ldmia	r3!, {r1}
1000eae4:	aa08      	add	r2, sp, #32
1000eae6:	881b      	ldrh	r3, [r3, #0]
1000eae8:	4e3c      	ldr	r6, [pc, #240]	; (1000ebdc <gapm_start_adv_cmd_handler+0x104>)
1000eaea:	9300      	str	r3, [sp, #0]
1000eaec:	ab10      	add	r3, sp, #64	; 0x40
1000eaee:	881b      	ldrh	r3, [r3, #0]
1000eaf0:	240d      	movs	r4, #13
1000eaf2:	469c      	mov	ip, r3
1000eaf4:	ab11      	add	r3, sp, #68	; 0x44
1000eaf6:	781b      	ldrb	r3, [r3, #0]
1000eaf8:	9304      	str	r3, [sp, #16]
1000eafa:	ab12      	add	r3, sp, #72	; 0x48
1000eafc:	781b      	ldrb	r3, [r3, #0]
1000eafe:	9305      	str	r3, [sp, #20]
1000eb00:	ab13      	add	r3, sp, #76	; 0x4c
1000eb02:	781b      	ldrb	r3, [r3, #0]
1000eb04:	9306      	str	r3, [sp, #24]
1000eb06:	ab14      	add	r3, sp, #80	; 0x50
1000eb08:	781b      	ldrb	r3, [r3, #0]
1000eb0a:	9301      	str	r3, [sp, #4]
1000eb0c:	2319      	movs	r3, #25
1000eb0e:	189b      	adds	r3, r3, r2
1000eb10:	7fdd      	ldrb	r5, [r3, #31]
1000eb12:	ab18      	add	r3, sp, #96	; 0x60
1000eb14:	881f      	ldrh	r7, [r3, #0]
1000eb16:	ab19      	add	r3, sp, #100	; 0x64
1000eb18:	781b      	ldrb	r3, [r3, #0]
1000eb1a:	8832      	ldrh	r2, [r6, #0]
1000eb1c:	9307      	str	r3, [sp, #28]
1000eb1e:	4b30      	ldr	r3, [pc, #192]	; (1000ebe0 <gapm_start_adv_cmd_handler+0x108>)
1000eb20:	8836      	ldrh	r6, [r6, #0]
1000eb22:	711a      	strb	r2, [r3, #4]
1000eb24:	466a      	mov	r2, sp
1000eb26:	7a12      	ldrb	r2, [r2, #8]
1000eb28:	701c      	strb	r4, [r3, #0]
1000eb2a:	705c      	strb	r4, [r3, #1]
1000eb2c:	709c      	strb	r4, [r3, #2]
1000eb2e:	725a      	strb	r2, [r3, #9]
1000eb30:	2400      	movs	r4, #0
1000eb32:	466a      	mov	r2, sp
1000eb34:	0a36      	lsrs	r6, r6, #8
1000eb36:	70dc      	strb	r4, [r3, #3]
1000eb38:	7218      	strb	r0, [r3, #8]
1000eb3a:	729c      	strb	r4, [r3, #10]
1000eb3c:	715e      	strb	r6, [r3, #5]
1000eb3e:	72dc      	strb	r4, [r3, #11]
1000eb40:	7812      	ldrb	r2, [r2, #0]
1000eb42:	380e      	subs	r0, #14
1000eb44:	731a      	strb	r2, [r3, #12]
1000eb46:	9a00      	ldr	r2, [sp, #0]
1000eb48:	0a14      	lsrs	r4, r2, #8
1000eb4a:	4662      	mov	r2, ip
1000eb4c:	739a      	strb	r2, [r3, #14]
1000eb4e:	4662      	mov	r2, ip
1000eb50:	735c      	strb	r4, [r3, #13]
1000eb52:	0a14      	lsrs	r4, r2, #8
1000eb54:	466a      	mov	r2, sp
1000eb56:	7c12      	ldrb	r2, [r2, #16]
1000eb58:	73dc      	strb	r4, [r3, #15]
1000eb5a:	741a      	strb	r2, [r3, #16]
1000eb5c:	1c1c      	adds	r4, r3, #0
1000eb5e:	2801      	cmp	r0, #1
1000eb60:	d809      	bhi.n	1000eb76 <gapm_start_adv_cmd_handler+0x9e>
1000eb62:	2900      	cmp	r1, #0
1000eb64:	d003      	beq.n	1000eb6e <gapm_start_adv_cmd_handler+0x96>
1000eb66:	481f      	ldr	r0, [pc, #124]	; (1000ebe4 <gapm_start_adv_cmd_handler+0x10c>)
1000eb68:	2206      	movs	r2, #6
1000eb6a:	4b1f      	ldr	r3, [pc, #124]	; (1000ebe8 <gapm_start_adv_cmd_handler+0x110>)
1000eb6c:	4798      	blx	r3
1000eb6e:	466b      	mov	r3, sp
1000eb70:	7b1b      	ldrb	r3, [r3, #12]
1000eb72:	75e3      	strb	r3, [r4, #23]
1000eb74:	e014      	b.n	1000eba0 <gapm_start_adv_cmd_handler+0xc8>
1000eb76:	466b      	mov	r3, sp
1000eb78:	7d1b      	ldrb	r3, [r3, #20]
1000eb7a:	9915      	ldr	r1, [sp, #84]	; 0x54
1000eb7c:	7463      	strb	r3, [r4, #17]
1000eb7e:	466b      	mov	r3, sp
1000eb80:	7e1b      	ldrb	r3, [r3, #24]
1000eb82:	9a01      	ldr	r2, [sp, #4]
1000eb84:	74a3      	strb	r3, [r4, #18]
1000eb86:	466b      	mov	r3, sp
1000eb88:	791b      	ldrb	r3, [r3, #4]
1000eb8a:	4818      	ldr	r0, [pc, #96]	; (1000ebec <gapm_start_adv_cmd_handler+0x114>)
1000eb8c:	4e16      	ldr	r6, [pc, #88]	; (1000ebe8 <gapm_start_adv_cmd_handler+0x110>)
1000eb8e:	74e3      	strb	r3, [r4, #19]
1000eb90:	47b0      	blx	r6
1000eb92:	1c23      	adds	r3, r4, #0
1000eb94:	4816      	ldr	r0, [pc, #88]	; (1000ebf0 <gapm_start_adv_cmd_handler+0x118>)
1000eb96:	3330      	adds	r3, #48	; 0x30
1000eb98:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000eb9a:	1c2a      	adds	r2, r5, #0
1000eb9c:	701d      	strb	r5, [r3, #0]
1000eb9e:	47b0      	blx	r6
1000eba0:	1c22      	adds	r2, r4, #0
1000eba2:	23a5      	movs	r3, #165	; 0xa5
1000eba4:	3250      	adds	r2, #80	; 0x50
1000eba6:	7013      	strb	r3, [r2, #0]
1000eba8:	1c22      	adds	r2, r4, #0
1000ebaa:	3251      	adds	r2, #81	; 0x51
1000ebac:	7013      	strb	r3, [r2, #0]
1000ebae:	1c23      	adds	r3, r4, #0
1000ebb0:	1c22      	adds	r2, r4, #0
1000ebb2:	3352      	adds	r3, #82	; 0x52
1000ebb4:	701f      	strb	r7, [r3, #0]
1000ebb6:	3253      	adds	r2, #83	; 0x53
1000ebb8:	0a3b      	lsrs	r3, r7, #8
1000ebba:	7013      	strb	r3, [r2, #0]
1000ebbc:	466a      	mov	r2, sp
1000ebbe:	1c23      	adds	r3, r4, #0
1000ebc0:	7f12      	ldrb	r2, [r2, #28]
1000ebc2:	3354      	adds	r3, #84	; 0x54
1000ebc4:	701a      	strb	r2, [r3, #0]
1000ebc6:	234d      	movs	r3, #77	; 0x4d
1000ebc8:	2500      	movs	r5, #0
1000ebca:	71a3      	strb	r3, [r4, #6]
1000ebcc:	1c20      	adds	r0, r4, #0
1000ebce:	2155      	movs	r1, #85	; 0x55
1000ebd0:	4b08      	ldr	r3, [pc, #32]	; (1000ebf4 <gapm_start_adv_cmd_handler+0x11c>)
1000ebd2:	71e5      	strb	r5, [r4, #7]
1000ebd4:	4798      	blx	r3
1000ebd6:	1c28      	adds	r0, r5, #0
1000ebd8:	b009      	add	sp, #36	; 0x24
1000ebda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebdc:	10017fb4 	.word	0x10017fb4
1000ebe0:	10018324 	.word	0x10018324
1000ebe4:	10018335 	.word	0x10018335
1000ebe8:	1001310d 	.word	0x1001310d
1000ebec:	10018338 	.word	0x10018338
1000ebf0:	10018355 	.word	0x10018355
1000ebf4:	1000dad5 	.word	0x1000dad5

1000ebf8 <get_gap_local_addr_type>:
1000ebf8:	4b04      	ldr	r3, [pc, #16]	; (1000ec0c <get_gap_local_addr_type+0x14>)
1000ebfa:	2001      	movs	r0, #1
1000ebfc:	791b      	ldrb	r3, [r3, #4]
1000ebfe:	2b02      	cmp	r3, #2
1000ec00:	d003      	beq.n	1000ec0a <get_gap_local_addr_type+0x12>
1000ec02:	3b03      	subs	r3, #3
1000ec04:	4258      	negs	r0, r3
1000ec06:	4158      	adcs	r0, r3
1000ec08:	0040      	lsls	r0, r0, #1
1000ec0a:	4770      	bx	lr
1000ec0c:	10018046 	.word	0x10018046

1000ec10 <gapm_adv_report_evt_handler>:
1000ec10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec12:	7843      	ldrb	r3, [r0, #1]
1000ec14:	1c05      	adds	r5, r0, #0
1000ec16:	9301      	str	r3, [sp, #4]
1000ec18:	466b      	mov	r3, sp
1000ec1a:	1c0c      	adds	r4, r1, #0
1000ec1c:	791b      	ldrb	r3, [r3, #4]
1000ec1e:	7806      	ldrb	r6, [r0, #0]
1000ec20:	2206      	movs	r2, #6
1000ec22:	704b      	strb	r3, [r1, #1]
1000ec24:	1c88      	adds	r0, r1, #2
1000ec26:	4f1b      	ldr	r7, [pc, #108]	; (1000ec94 <gapm_adv_report_evt_handler+0x84>)
1000ec28:	1ca9      	adds	r1, r5, #2
1000ec2a:	47b8      	blx	r7
1000ec2c:	1c20      	adds	r0, r4, #0
1000ec2e:	1c29      	adds	r1, r5, #0
1000ec30:	7a2a      	ldrb	r2, [r5, #8]
1000ec32:	3008      	adds	r0, #8
1000ec34:	77c2      	strb	r2, [r0, #31]
1000ec36:	3109      	adds	r1, #9
1000ec38:	3528      	adds	r5, #40	; 0x28
1000ec3a:	47b8      	blx	r7
1000ec3c:	782b      	ldrb	r3, [r5, #0]
1000ec3e:	b25a      	sxtb	r2, r3
1000ec40:	2a00      	cmp	r2, #0
1000ec42:	da01      	bge.n	1000ec48 <gapm_adv_report_evt_handler+0x38>
1000ec44:	3301      	adds	r3, #1
1000ec46:	b2db      	uxtb	r3, r3
1000ec48:	1c22      	adds	r2, r4, #0
1000ec4a:	3228      	adds	r2, #40	; 0x28
1000ec4c:	7013      	strb	r3, [r2, #0]
1000ec4e:	2200      	movs	r2, #0
1000ec50:	9b01      	ldr	r3, [sp, #4]
1000ec52:	4293      	cmp	r3, r2
1000ec54:	d00a      	beq.n	1000ec6c <gapm_adv_report_evt_handler+0x5c>
1000ec56:	79e3      	ldrb	r3, [r4, #7]
1000ec58:	323f      	adds	r2, #63	; 0x3f
1000ec5a:	1c19      	adds	r1, r3, #0
1000ec5c:	4391      	bics	r1, r2
1000ec5e:	3a3e      	subs	r2, #62	; 0x3e
1000ec60:	29c0      	cmp	r1, #192	; 0xc0
1000ec62:	d003      	beq.n	1000ec6c <gapm_adv_report_evt_handler+0x5c>
1000ec64:	065b      	lsls	r3, r3, #25
1000ec66:	0fdb      	lsrs	r3, r3, #31
1000ec68:	3202      	adds	r2, #2
1000ec6a:	1ad2      	subs	r2, r2, r3
1000ec6c:	7062      	strb	r2, [r4, #1]
1000ec6e:	2e04      	cmp	r6, #4
1000ec70:	d80f      	bhi.n	1000ec92 <gapm_adv_report_evt_handler+0x82>
1000ec72:	1c30      	adds	r0, r6, #0
1000ec74:	f001 fd92 	bl	1001079c <__gnu_thumb1_case_uqi>
1000ec78:	09070503 	.word	0x09070503
1000ec7c:	0b          	.byte	0x0b
1000ec7d:	00          	.byte	0x00
1000ec7e:	2300      	movs	r3, #0
1000ec80:	e006      	b.n	1000ec90 <gapm_adv_report_evt_handler+0x80>
1000ec82:	2301      	movs	r3, #1
1000ec84:	e004      	b.n	1000ec90 <gapm_adv_report_evt_handler+0x80>
1000ec86:	2302      	movs	r3, #2
1000ec88:	e002      	b.n	1000ec90 <gapm_adv_report_evt_handler+0x80>
1000ec8a:	2303      	movs	r3, #3
1000ec8c:	e000      	b.n	1000ec90 <gapm_adv_report_evt_handler+0x80>
1000ec8e:	2305      	movs	r3, #5
1000ec90:	7023      	strb	r3, [r4, #0]
1000ec92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ec94:	1001310d 	.word	0x1001310d

1000ec98 <gapm_resolv_addr_cmd_handler>:
1000ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ec9a:	2314      	movs	r3, #20
1000ec9c:	4c12      	ldr	r4, [pc, #72]	; (1000ece8 <gapm_resolv_addr_cmd_handler+0x50>)
1000ec9e:	1c17      	adds	r7, r2, #0
1000eca0:	7023      	strb	r3, [r4, #0]
1000eca2:	3b07      	subs	r3, #7
1000eca4:	7063      	strb	r3, [r4, #1]
1000eca6:	70a3      	strb	r3, [r4, #2]
1000eca8:	2300      	movs	r3, #0
1000ecaa:	70e3      	strb	r3, [r4, #3]
1000ecac:	4b0f      	ldr	r3, [pc, #60]	; (1000ecec <gapm_resolv_addr_cmd_handler+0x54>)
1000ecae:	1c05      	adds	r5, r0, #0
1000ecb0:	881a      	ldrh	r2, [r3, #0]
1000ecb2:	881b      	ldrh	r3, [r3, #0]
1000ecb4:	4e0e      	ldr	r6, [pc, #56]	; (1000ecf0 <gapm_resolv_addr_cmd_handler+0x58>)
1000ecb6:	0a1b      	lsrs	r3, r3, #8
1000ecb8:	7163      	strb	r3, [r4, #5]
1000ecba:	2317      	movs	r3, #23
1000ecbc:	012d      	lsls	r5, r5, #4
1000ecbe:	7122      	strb	r2, [r4, #4]
1000ecc0:	7260      	strb	r0, [r4, #9]
1000ecc2:	2206      	movs	r2, #6
1000ecc4:	480b      	ldr	r0, [pc, #44]	; (1000ecf4 <gapm_resolv_addr_cmd_handler+0x5c>)
1000ecc6:	7223      	strb	r3, [r4, #8]
1000ecc8:	47b0      	blx	r6
1000ecca:	1c39      	adds	r1, r7, #0
1000eccc:	1c2a      	adds	r2, r5, #0
1000ecce:	480a      	ldr	r0, [pc, #40]	; (1000ecf8 <gapm_resolv_addr_cmd_handler+0x60>)
1000ecd0:	47b0      	blx	r6
1000ecd2:	1c29      	adds	r1, r5, #0
1000ecd4:	3110      	adds	r1, #16
1000ecd6:	1c0b      	adds	r3, r1, #0
1000ecd8:	3b08      	subs	r3, #8
1000ecda:	71a3      	strb	r3, [r4, #6]
1000ecdc:	121b      	asrs	r3, r3, #8
1000ecde:	71e3      	strb	r3, [r4, #7]
1000ece0:	1c20      	adds	r0, r4, #0
1000ece2:	4b06      	ldr	r3, [pc, #24]	; (1000ecfc <gapm_resolv_addr_cmd_handler+0x64>)
1000ece4:	4798      	blx	r3
1000ece6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ece8:	10018324 	.word	0x10018324
1000ecec:	10017fb4 	.word	0x10017fb4
1000ecf0:	1001310d 	.word	0x1001310d
1000ecf4:	1001832e 	.word	0x1001832e
1000ecf8:	10018334 	.word	0x10018334
1000ecfc:	1000dad5 	.word	0x1000dad5

1000ed00 <gapm_addr_solved_ind_handler>:
1000ed00:	b570      	push	{r4, r5, r6, lr}
1000ed02:	1c04      	adds	r4, r0, #0
1000ed04:	1c08      	adds	r0, r1, #0
1000ed06:	1c0d      	adds	r5, r1, #0
1000ed08:	4e05      	ldr	r6, [pc, #20]	; (1000ed20 <gapm_addr_solved_ind_handler+0x20>)
1000ed0a:	1c21      	adds	r1, r4, #0
1000ed0c:	2206      	movs	r2, #6
1000ed0e:	3011      	adds	r0, #17
1000ed10:	47b0      	blx	r6
1000ed12:	1c68      	adds	r0, r5, #1
1000ed14:	1da1      	adds	r1, r4, #6
1000ed16:	2210      	movs	r2, #16
1000ed18:	47b0      	blx	r6
1000ed1a:	2300      	movs	r3, #0
1000ed1c:	702b      	strb	r3, [r5, #0]
1000ed1e:	bd70      	pop	{r4, r5, r6, pc}
1000ed20:	1001310d 	.word	0x1001310d

1000ed24 <gapm_profile_added_ind_handler>:
1000ed24:	b510      	push	{r4, lr}
1000ed26:	7843      	ldrb	r3, [r0, #1]
1000ed28:	7902      	ldrb	r2, [r0, #4]
1000ed2a:	7944      	ldrb	r4, [r0, #5]
1000ed2c:	7800      	ldrb	r0, [r0, #0]
1000ed2e:	021b      	lsls	r3, r3, #8
1000ed30:	4303      	orrs	r3, r0
1000ed32:	2b1b      	cmp	r3, #27
1000ed34:	d104      	bne.n	1000ed40 <gapm_profile_added_ind_handler+0x1c>
1000ed36:	2300      	movs	r3, #0
1000ed38:	700b      	strb	r3, [r1, #0]
1000ed3a:	0223      	lsls	r3, r4, #8
1000ed3c:	4313      	orrs	r3, r2
1000ed3e:	804b      	strh	r3, [r1, #2]
1000ed40:	203b      	movs	r0, #59	; 0x3b
1000ed42:	bd10      	pop	{r4, pc}

1000ed44 <gattc_read_req_ind_parser>:
1000ed44:	7843      	ldrb	r3, [r0, #1]
1000ed46:	7802      	ldrb	r2, [r0, #0]
1000ed48:	021b      	lsls	r3, r3, #8
1000ed4a:	4313      	orrs	r3, r2
1000ed4c:	804b      	strh	r3, [r1, #2]
1000ed4e:	4770      	bx	lr

1000ed50 <gattc_write_req_ind_parser>:
1000ed50:	b508      	push	{r3, lr}
1000ed52:	1c13      	adds	r3, r2, #0
1000ed54:	0a00      	lsrs	r0, r0, #8
1000ed56:	8010      	strh	r0, [r2, #0]
1000ed58:	784a      	ldrb	r2, [r1, #1]
1000ed5a:	7808      	ldrb	r0, [r1, #0]
1000ed5c:	0212      	lsls	r2, r2, #8
1000ed5e:	4302      	orrs	r2, r0
1000ed60:	805a      	strh	r2, [r3, #2]
1000ed62:	78ca      	ldrb	r2, [r1, #3]
1000ed64:	7888      	ldrb	r0, [r1, #2]
1000ed66:	0212      	lsls	r2, r2, #8
1000ed68:	4302      	orrs	r2, r0
1000ed6a:	809a      	strh	r2, [r3, #4]
1000ed6c:	794a      	ldrb	r2, [r1, #5]
1000ed6e:	7908      	ldrb	r0, [r1, #4]
1000ed70:	0212      	lsls	r2, r2, #8
1000ed72:	4302      	orrs	r2, r0
1000ed74:	80da      	strh	r2, [r3, #6]
1000ed76:	3308      	adds	r3, #8
1000ed78:	1c18      	adds	r0, r3, #0
1000ed7a:	3106      	adds	r1, #6
1000ed7c:	4b01      	ldr	r3, [pc, #4]	; (1000ed84 <gattc_write_req_ind_parser+0x34>)
1000ed7e:	4798      	blx	r3
1000ed80:	bd08      	pop	{r3, pc}
1000ed82:	46c0      	nop			; (mov r8, r8)
1000ed84:	1001310d 	.word	0x1001310d

1000ed88 <gattc_att_info_req_parser>:
1000ed88:	7843      	ldrb	r3, [r0, #1]
1000ed8a:	7802      	ldrb	r2, [r0, #0]
1000ed8c:	021b      	lsls	r3, r3, #8
1000ed8e:	4313      	orrs	r3, r2
1000ed90:	800b      	strh	r3, [r1, #0]
1000ed92:	4770      	bx	lr

1000ed94 <gattc_read_cfm>:
1000ed94:	b538      	push	{r3, r4, r5, lr}
1000ed96:	2514      	movs	r5, #20
1000ed98:	1c1c      	adds	r4, r3, #0
1000ed9a:	4b14      	ldr	r3, [pc, #80]	; (1000edec <gattc_read_cfm+0x58>)
1000ed9c:	70d9      	strb	r1, [r3, #3]
1000ed9e:	4914      	ldr	r1, [pc, #80]	; (1000edf0 <gattc_read_cfm+0x5c>)
1000eda0:	701d      	strb	r5, [r3, #0]
1000eda2:	3d08      	subs	r5, #8
1000eda4:	705d      	strb	r5, [r3, #1]
1000eda6:	709d      	strb	r5, [r3, #2]
1000eda8:	880d      	ldrh	r5, [r1, #0]
1000edaa:	8809      	ldrh	r1, [r1, #0]
1000edac:	7218      	strb	r0, [r3, #8]
1000edae:	0a09      	lsrs	r1, r1, #8
1000edb0:	7159      	strb	r1, [r3, #5]
1000edb2:	0a00      	lsrs	r0, r0, #8
1000edb4:	0a21      	lsrs	r1, r4, #8
1000edb6:	711d      	strb	r5, [r3, #4]
1000edb8:	7258      	strb	r0, [r3, #9]
1000edba:	729c      	strb	r4, [r3, #10]
1000edbc:	72d9      	strb	r1, [r3, #11]
1000edbe:	731a      	strb	r2, [r3, #12]
1000edc0:	1c1d      	adds	r5, r3, #0
1000edc2:	2c00      	cmp	r4, #0
1000edc4:	d007      	beq.n	1000edd6 <gattc_read_cfm+0x42>
1000edc6:	9904      	ldr	r1, [sp, #16]
1000edc8:	1c22      	adds	r2, r4, #0
1000edca:	480a      	ldr	r0, [pc, #40]	; (1000edf4 <gattc_read_cfm+0x60>)
1000edcc:	4b0a      	ldr	r3, [pc, #40]	; (1000edf8 <gattc_read_cfm+0x64>)
1000edce:	340d      	adds	r4, #13
1000edd0:	4798      	blx	r3
1000edd2:	b2a1      	uxth	r1, r4
1000edd4:	e001      	b.n	1000edda <gattc_read_cfm+0x46>
1000edd6:	210e      	movs	r1, #14
1000edd8:	735c      	strb	r4, [r3, #13]
1000edda:	1c0b      	adds	r3, r1, #0
1000eddc:	3b08      	subs	r3, #8
1000edde:	71ab      	strb	r3, [r5, #6]
1000ede0:	121b      	asrs	r3, r3, #8
1000ede2:	71eb      	strb	r3, [r5, #7]
1000ede4:	1c28      	adds	r0, r5, #0
1000ede6:	4b05      	ldr	r3, [pc, #20]	; (1000edfc <gattc_read_cfm+0x68>)
1000ede8:	4798      	blx	r3
1000edea:	bd38      	pop	{r3, r4, r5, pc}
1000edec:	10018324 	.word	0x10018324
1000edf0:	10017fb4 	.word	0x10017fb4
1000edf4:	10018331 	.word	0x10018331
1000edf8:	1001310d 	.word	0x1001310d
1000edfc:	1000dad5 	.word	0x1000dad5

1000ee00 <gattc_write_cfm>:
1000ee00:	4b0d      	ldr	r3, [pc, #52]	; (1000ee38 <gattc_write_cfm+0x38>)
1000ee02:	b510      	push	{r4, lr}
1000ee04:	729a      	strb	r2, [r3, #10]
1000ee06:	2203      	movs	r2, #3
1000ee08:	2416      	movs	r4, #22
1000ee0a:	719a      	strb	r2, [r3, #6]
1000ee0c:	2200      	movs	r2, #0
1000ee0e:	70d9      	strb	r1, [r3, #3]
1000ee10:	490a      	ldr	r1, [pc, #40]	; (1000ee3c <gattc_write_cfm+0x3c>)
1000ee12:	701c      	strb	r4, [r3, #0]
1000ee14:	3c0a      	subs	r4, #10
1000ee16:	705c      	strb	r4, [r3, #1]
1000ee18:	709c      	strb	r4, [r3, #2]
1000ee1a:	880c      	ldrh	r4, [r1, #0]
1000ee1c:	8809      	ldrh	r1, [r1, #0]
1000ee1e:	7218      	strb	r0, [r3, #8]
1000ee20:	0a09      	lsrs	r1, r1, #8
1000ee22:	0a00      	lsrs	r0, r0, #8
1000ee24:	711c      	strb	r4, [r3, #4]
1000ee26:	7159      	strb	r1, [r3, #5]
1000ee28:	7258      	strb	r0, [r3, #9]
1000ee2a:	71da      	strb	r2, [r3, #7]
1000ee2c:	1c18      	adds	r0, r3, #0
1000ee2e:	210b      	movs	r1, #11
1000ee30:	4b03      	ldr	r3, [pc, #12]	; (1000ee40 <gattc_write_cfm+0x40>)
1000ee32:	4798      	blx	r3
1000ee34:	bd10      	pop	{r4, pc}
1000ee36:	46c0      	nop			; (mov r8, r8)
1000ee38:	10018324 	.word	0x10018324
1000ee3c:	10017fb4 	.word	0x10017fb4
1000ee40:	1000dad5 	.word	0x1000dad5

1000ee44 <gattc_att_info_cfm>:
1000ee44:	b538      	push	{r3, r4, r5, lr}
1000ee46:	4c0e      	ldr	r4, [pc, #56]	; (1000ee80 <gattc_att_info_cfm+0x3c>)
1000ee48:	2518      	movs	r5, #24
1000ee4a:	7323      	strb	r3, [r4, #12]
1000ee4c:	2305      	movs	r3, #5
1000ee4e:	71a3      	strb	r3, [r4, #6]
1000ee50:	2300      	movs	r3, #0
1000ee52:	70e1      	strb	r1, [r4, #3]
1000ee54:	490b      	ldr	r1, [pc, #44]	; (1000ee84 <gattc_att_info_cfm+0x40>)
1000ee56:	7025      	strb	r5, [r4, #0]
1000ee58:	3d0c      	subs	r5, #12
1000ee5a:	7065      	strb	r5, [r4, #1]
1000ee5c:	70a5      	strb	r5, [r4, #2]
1000ee5e:	880d      	ldrh	r5, [r1, #0]
1000ee60:	8809      	ldrh	r1, [r1, #0]
1000ee62:	7220      	strb	r0, [r4, #8]
1000ee64:	0a09      	lsrs	r1, r1, #8
1000ee66:	0a00      	lsrs	r0, r0, #8
1000ee68:	7161      	strb	r1, [r4, #5]
1000ee6a:	7260      	strb	r0, [r4, #9]
1000ee6c:	72a2      	strb	r2, [r4, #10]
1000ee6e:	71e3      	strb	r3, [r4, #7]
1000ee70:	0a12      	lsrs	r2, r2, #8
1000ee72:	1c20      	adds	r0, r4, #0
1000ee74:	210d      	movs	r1, #13
1000ee76:	4b04      	ldr	r3, [pc, #16]	; (1000ee88 <gattc_att_info_cfm+0x44>)
1000ee78:	7125      	strb	r5, [r4, #4]
1000ee7a:	72e2      	strb	r2, [r4, #11]
1000ee7c:	4798      	blx	r3
1000ee7e:	bd38      	pop	{r3, r4, r5, pc}
1000ee80:	10018324 	.word	0x10018324
1000ee84:	10017fb4 	.word	0x10017fb4
1000ee88:	1000dad5 	.word	0x1000dad5

1000ee8c <gattc_send_evt_cmd_handler>:
1000ee8c:	b570      	push	{r4, r5, r6, lr}
1000ee8e:	2610      	movs	r6, #16
1000ee90:	ac04      	add	r4, sp, #16
1000ee92:	8825      	ldrh	r5, [r4, #0]
1000ee94:	4c15      	ldr	r4, [pc, #84]	; (1000eeec <gattc_send_evt_cmd_handler+0x60>)
1000ee96:	70e2      	strb	r2, [r4, #3]
1000ee98:	4a15      	ldr	r2, [pc, #84]	; (1000eef0 <gattc_send_evt_cmd_handler+0x64>)
1000ee9a:	7026      	strb	r6, [r4, #0]
1000ee9c:	3e04      	subs	r6, #4
1000ee9e:	7066      	strb	r6, [r4, #1]
1000eea0:	70a6      	strb	r6, [r4, #2]
1000eea2:	8816      	ldrh	r6, [r2, #0]
1000eea4:	8812      	ldrh	r2, [r2, #0]
1000eea6:	7220      	strb	r0, [r4, #8]
1000eea8:	0a12      	lsrs	r2, r2, #8
1000eeaa:	7162      	strb	r2, [r4, #5]
1000eeac:	4a11      	ldr	r2, [pc, #68]	; (1000eef4 <gattc_send_evt_cmd_handler+0x68>)
1000eeae:	7321      	strb	r1, [r4, #12]
1000eeb0:	8812      	ldrh	r2, [r2, #0]
1000eeb2:	73a5      	strb	r5, [r4, #14]
1000eeb4:	3201      	adds	r2, #1
1000eeb6:	7262      	strb	r2, [r4, #9]
1000eeb8:	1212      	asrs	r2, r2, #8
1000eeba:	72a2      	strb	r2, [r4, #10]
1000eebc:	2200      	movs	r2, #0
1000eebe:	72e2      	strb	r2, [r4, #11]
1000eec0:	0a0a      	lsrs	r2, r1, #8
1000eec2:	7362      	strb	r2, [r4, #13]
1000eec4:	0a2a      	lsrs	r2, r5, #8
1000eec6:	73e2      	strb	r2, [r4, #15]
1000eec8:	1c19      	adds	r1, r3, #0
1000eeca:	1c2a      	adds	r2, r5, #0
1000eecc:	4b0a      	ldr	r3, [pc, #40]	; (1000eef8 <gattc_send_evt_cmd_handler+0x6c>)
1000eece:	3510      	adds	r5, #16
1000eed0:	480a      	ldr	r0, [pc, #40]	; (1000eefc <gattc_send_evt_cmd_handler+0x70>)
1000eed2:	7126      	strb	r6, [r4, #4]
1000eed4:	4798      	blx	r3
1000eed6:	b2a9      	uxth	r1, r5
1000eed8:	1c0b      	adds	r3, r1, #0
1000eeda:	3b08      	subs	r3, #8
1000eedc:	71a3      	strb	r3, [r4, #6]
1000eede:	121b      	asrs	r3, r3, #8
1000eee0:	71e3      	strb	r3, [r4, #7]
1000eee2:	1c20      	adds	r0, r4, #0
1000eee4:	4b06      	ldr	r3, [pc, #24]	; (1000ef00 <gattc_send_evt_cmd_handler+0x74>)
1000eee6:	4798      	blx	r3
1000eee8:	bd70      	pop	{r4, r5, r6, pc}
1000eeea:	46c0      	nop			; (mov r8, r8)
1000eeec:	10018324 	.word	0x10018324
1000eef0:	10017fb4 	.word	0x10017fb4
1000eef4:	10016e28 	.word	0x10016e28
1000eef8:	1001310d 	.word	0x1001310d
1000eefc:	10018334 	.word	0x10018334
1000ef00:	1000dad5 	.word	0x1000dad5

1000ef04 <gattc_disc_cmd_handler>:
1000ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef06:	2603      	movs	r6, #3
1000ef08:	ac06      	add	r4, sp, #24
1000ef0a:	1c0d      	adds	r5, r1, #0
1000ef0c:	cc02      	ldmia	r4!, {r1}
1000ef0e:	8827      	ldrh	r7, [r4, #0]
1000ef10:	4c1a      	ldr	r4, [pc, #104]	; (1000ef7c <gattc_disc_cmd_handler+0x78>)
1000ef12:	7026      	strb	r6, [r4, #0]
1000ef14:	3609      	adds	r6, #9
1000ef16:	7066      	strb	r6, [r4, #1]
1000ef18:	70a6      	strb	r6, [r4, #2]
1000ef1a:	4e19      	ldr	r6, [pc, #100]	; (1000ef80 <gattc_disc_cmd_handler+0x7c>)
1000ef1c:	70e7      	strb	r7, [r4, #3]
1000ef1e:	8837      	ldrh	r7, [r6, #0]
1000ef20:	8836      	ldrh	r6, [r6, #0]
1000ef22:	7127      	strb	r7, [r4, #4]
1000ef24:	0a36      	lsrs	r6, r6, #8
1000ef26:	7166      	strb	r6, [r4, #5]
1000ef28:	7220      	strb	r0, [r4, #8]
1000ef2a:	2900      	cmp	r1, #0
1000ef2c:	d102      	bne.n	1000ef34 <gattc_disc_cmd_handler+0x30>
1000ef2e:	2002      	movs	r0, #2
1000ef30:	7260      	strb	r0, [r4, #9]
1000ef32:	e000      	b.n	1000ef36 <gattc_disc_cmd_handler+0x32>
1000ef34:	7265      	strb	r5, [r4, #9]
1000ef36:	4e13      	ldr	r6, [pc, #76]	; (1000ef84 <gattc_disc_cmd_handler+0x80>)
1000ef38:	7322      	strb	r2, [r4, #12]
1000ef3a:	8830      	ldrh	r0, [r6, #0]
1000ef3c:	0a12      	lsrs	r2, r2, #8
1000ef3e:	0a07      	lsrs	r7, r0, #8
1000ef40:	72a0      	strb	r0, [r4, #10]
1000ef42:	73a3      	strb	r3, [r4, #14]
1000ef44:	3001      	adds	r0, #1
1000ef46:	0a1b      	lsrs	r3, r3, #8
1000ef48:	72e7      	strb	r7, [r4, #11]
1000ef4a:	8030      	strh	r0, [r6, #0]
1000ef4c:	7362      	strb	r2, [r4, #13]
1000ef4e:	73e3      	strb	r3, [r4, #15]
1000ef50:	2900      	cmp	r1, #0
1000ef52:	d103      	bne.n	1000ef5c <gattc_disc_cmd_handler+0x58>
1000ef54:	7421      	strb	r1, [r4, #16]
1000ef56:	7461      	strb	r1, [r4, #17]
1000ef58:	3112      	adds	r1, #18
1000ef5a:	e005      	b.n	1000ef68 <gattc_disc_cmd_handler+0x64>
1000ef5c:	480a      	ldr	r0, [pc, #40]	; (1000ef88 <gattc_disc_cmd_handler+0x84>)
1000ef5e:	1c2a      	adds	r2, r5, #0
1000ef60:	4b0a      	ldr	r3, [pc, #40]	; (1000ef8c <gattc_disc_cmd_handler+0x88>)
1000ef62:	4798      	blx	r3
1000ef64:	1c29      	adds	r1, r5, #0
1000ef66:	3110      	adds	r1, #16
1000ef68:	1c0b      	adds	r3, r1, #0
1000ef6a:	3b08      	subs	r3, #8
1000ef6c:	71a3      	strb	r3, [r4, #6]
1000ef6e:	121b      	asrs	r3, r3, #8
1000ef70:	71e3      	strb	r3, [r4, #7]
1000ef72:	1c20      	adds	r0, r4, #0
1000ef74:	4b06      	ldr	r3, [pc, #24]	; (1000ef90 <gattc_disc_cmd_handler+0x8c>)
1000ef76:	4798      	blx	r3
1000ef78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef7a:	46c0      	nop			; (mov r8, r8)
1000ef7c:	10018324 	.word	0x10018324
1000ef80:	10017fb4 	.word	0x10017fb4
1000ef84:	10016e26 	.word	0x10016e26
1000ef88:	10018334 	.word	0x10018334
1000ef8c:	1001310d 	.word	0x1001310d
1000ef90:	1000dad5 	.word	0x1000dad5

1000ef94 <gattc_write_cmd_handler>:
1000ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef96:	260a      	movs	r6, #10
1000ef98:	ac06      	add	r4, sp, #24
1000ef9a:	8825      	ldrh	r5, [r4, #0]
1000ef9c:	ac08      	add	r4, sp, #32
1000ef9e:	8827      	ldrh	r7, [r4, #0]
1000efa0:	4c18      	ldr	r4, [pc, #96]	; (1000f004 <gattc_write_cmd_handler+0x70>)
1000efa2:	73a3      	strb	r3, [r4, #14]
1000efa4:	0a1b      	lsrs	r3, r3, #8
1000efa6:	73e3      	strb	r3, [r4, #15]
1000efa8:	0a2b      	lsrs	r3, r5, #8
1000efaa:	7463      	strb	r3, [r4, #17]
1000efac:	2300      	movs	r3, #0
1000efae:	7026      	strb	r6, [r4, #0]
1000efb0:	3602      	adds	r6, #2
1000efb2:	7066      	strb	r6, [r4, #1]
1000efb4:	70a6      	strb	r6, [r4, #2]
1000efb6:	4e14      	ldr	r6, [pc, #80]	; (1000f008 <gattc_write_cmd_handler+0x74>)
1000efb8:	7220      	strb	r0, [r4, #8]
1000efba:	4814      	ldr	r0, [pc, #80]	; (1000f00c <gattc_write_cmd_handler+0x78>)
1000efbc:	70e7      	strb	r7, [r4, #3]
1000efbe:	8837      	ldrh	r7, [r6, #0]
1000efc0:	8836      	ldrh	r6, [r6, #0]
1000efc2:	7261      	strb	r1, [r4, #9]
1000efc4:	8801      	ldrh	r1, [r0, #0]
1000efc6:	0a36      	lsrs	r6, r6, #8
1000efc8:	7166      	strb	r6, [r4, #5]
1000efca:	72a1      	strb	r1, [r4, #10]
1000efcc:	0a0e      	lsrs	r6, r1, #8
1000efce:	7322      	strb	r2, [r4, #12]
1000efd0:	3101      	adds	r1, #1
1000efd2:	0a12      	lsrs	r2, r2, #8
1000efd4:	8001      	strh	r1, [r0, #0]
1000efd6:	7362      	strb	r2, [r4, #13]
1000efd8:	7425      	strb	r5, [r4, #16]
1000efda:	1c2a      	adds	r2, r5, #0
1000efdc:	74a3      	strb	r3, [r4, #18]
1000efde:	74e3      	strb	r3, [r4, #19]
1000efe0:	9907      	ldr	r1, [sp, #28]
1000efe2:	3514      	adds	r5, #20
1000efe4:	4b0a      	ldr	r3, [pc, #40]	; (1000f010 <gattc_write_cmd_handler+0x7c>)
1000efe6:	480b      	ldr	r0, [pc, #44]	; (1000f014 <gattc_write_cmd_handler+0x80>)
1000efe8:	7127      	strb	r7, [r4, #4]
1000efea:	72e6      	strb	r6, [r4, #11]
1000efec:	4798      	blx	r3
1000efee:	b2a9      	uxth	r1, r5
1000eff0:	1c0b      	adds	r3, r1, #0
1000eff2:	3b08      	subs	r3, #8
1000eff4:	71a3      	strb	r3, [r4, #6]
1000eff6:	121b      	asrs	r3, r3, #8
1000eff8:	71e3      	strb	r3, [r4, #7]
1000effa:	1c20      	adds	r0, r4, #0
1000effc:	4b06      	ldr	r3, [pc, #24]	; (1000f018 <gattc_write_cmd_handler+0x84>)
1000effe:	4798      	blx	r3
1000f000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f002:	46c0      	nop			; (mov r8, r8)
1000f004:	10018324 	.word	0x10018324
1000f008:	10017fb4 	.word	0x10017fb4
1000f00c:	10016e26 	.word	0x10016e26
1000f010:	1001310d 	.word	0x1001310d
1000f014:	10018338 	.word	0x10018338
1000f018:	1000dad5 	.word	0x1000dad5

1000f01c <gattc_event_cfm_handler>:
1000f01c:	220e      	movs	r2, #14
1000f01e:	b508      	push	{r3, lr}
1000f020:	4b0b      	ldr	r3, [pc, #44]	; (1000f050 <gattc_event_cfm_handler+0x34>)
1000f022:	701a      	strb	r2, [r3, #0]
1000f024:	3a02      	subs	r2, #2
1000f026:	705a      	strb	r2, [r3, #1]
1000f028:	709a      	strb	r2, [r3, #2]
1000f02a:	4a0a      	ldr	r2, [pc, #40]	; (1000f054 <gattc_event_cfm_handler+0x38>)
1000f02c:	70d8      	strb	r0, [r3, #3]
1000f02e:	8810      	ldrh	r0, [r2, #0]
1000f030:	8812      	ldrh	r2, [r2, #0]
1000f032:	7219      	strb	r1, [r3, #8]
1000f034:	0a12      	lsrs	r2, r2, #8
1000f036:	715a      	strb	r2, [r3, #5]
1000f038:	2202      	movs	r2, #2
1000f03a:	719a      	strb	r2, [r3, #6]
1000f03c:	2200      	movs	r2, #0
1000f03e:	0a09      	lsrs	r1, r1, #8
1000f040:	7118      	strb	r0, [r3, #4]
1000f042:	7259      	strb	r1, [r3, #9]
1000f044:	71da      	strb	r2, [r3, #7]
1000f046:	1c18      	adds	r0, r3, #0
1000f048:	210a      	movs	r1, #10
1000f04a:	4b03      	ldr	r3, [pc, #12]	; (1000f058 <gattc_event_cfm_handler+0x3c>)
1000f04c:	4798      	blx	r3
1000f04e:	bd08      	pop	{r3, pc}
1000f050:	10018324 	.word	0x10018324
1000f054:	10017fb4 	.word	0x10017fb4
1000f058:	1000dad5 	.word	0x1000dad5

1000f05c <gattc_disc_svc_ind_parser>:
1000f05c:	b570      	push	{r4, r5, r6, lr}
1000f05e:	1c15      	adds	r5, r2, #0
1000f060:	0a00      	lsrs	r0, r0, #8
1000f062:	8010      	strh	r0, [r2, #0]
1000f064:	784b      	ldrb	r3, [r1, #1]
1000f066:	780a      	ldrb	r2, [r1, #0]
1000f068:	021b      	lsls	r3, r3, #8
1000f06a:	4313      	orrs	r3, r2
1000f06c:	806b      	strh	r3, [r5, #2]
1000f06e:	78cb      	ldrb	r3, [r1, #3]
1000f070:	788a      	ldrb	r2, [r1, #2]
1000f072:	021b      	lsls	r3, r3, #8
1000f074:	4313      	orrs	r3, r2
1000f076:	80ab      	strh	r3, [r5, #4]
1000f078:	790e      	ldrb	r6, [r1, #4]
1000f07a:	4b05      	ldr	r3, [pc, #20]	; (1000f090 <gattc_disc_svc_ind_parser+0x34>)
1000f07c:	1c30      	adds	r0, r6, #0
1000f07e:	1c0c      	adds	r4, r1, #0
1000f080:	4798      	blx	r3
1000f082:	1c32      	adds	r2, r6, #0
1000f084:	71a8      	strb	r0, [r5, #6]
1000f086:	1d61      	adds	r1, r4, #5
1000f088:	1de8      	adds	r0, r5, #7
1000f08a:	4b02      	ldr	r3, [pc, #8]	; (1000f094 <gattc_disc_svc_ind_parser+0x38>)
1000f08c:	4798      	blx	r3
1000f08e:	bd70      	pop	{r4, r5, r6, pc}
1000f090:	1000cd21 	.word	0x1000cd21
1000f094:	1001310d 	.word	0x1001310d

1000f098 <gattc_disc_svc_incl_ind_parser>:
1000f098:	b570      	push	{r4, r5, r6, lr}
1000f09a:	1c15      	adds	r5, r2, #0
1000f09c:	0a00      	lsrs	r0, r0, #8
1000f09e:	8010      	strh	r0, [r2, #0]
1000f0a0:	784b      	ldrb	r3, [r1, #1]
1000f0a2:	780a      	ldrb	r2, [r1, #0]
1000f0a4:	021b      	lsls	r3, r3, #8
1000f0a6:	4313      	orrs	r3, r2
1000f0a8:	806b      	strh	r3, [r5, #2]
1000f0aa:	78cb      	ldrb	r3, [r1, #3]
1000f0ac:	788a      	ldrb	r2, [r1, #2]
1000f0ae:	021b      	lsls	r3, r3, #8
1000f0b0:	4313      	orrs	r3, r2
1000f0b2:	80ab      	strh	r3, [r5, #4]
1000f0b4:	794b      	ldrb	r3, [r1, #5]
1000f0b6:	790a      	ldrb	r2, [r1, #4]
1000f0b8:	021b      	lsls	r3, r3, #8
1000f0ba:	4313      	orrs	r3, r2
1000f0bc:	80eb      	strh	r3, [r5, #6]
1000f0be:	798e      	ldrb	r6, [r1, #6]
1000f0c0:	4b05      	ldr	r3, [pc, #20]	; (1000f0d8 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f0c2:	1c30      	adds	r0, r6, #0
1000f0c4:	1c0c      	adds	r4, r1, #0
1000f0c6:	4798      	blx	r3
1000f0c8:	7228      	strb	r0, [r5, #8]
1000f0ca:	1c28      	adds	r0, r5, #0
1000f0cc:	1c32      	adds	r2, r6, #0
1000f0ce:	1de1      	adds	r1, r4, #7
1000f0d0:	4b02      	ldr	r3, [pc, #8]	; (1000f0dc <gattc_disc_svc_incl_ind_parser+0x44>)
1000f0d2:	3009      	adds	r0, #9
1000f0d4:	4798      	blx	r3
1000f0d6:	bd70      	pop	{r4, r5, r6, pc}
1000f0d8:	1000cd21 	.word	0x1000cd21
1000f0dc:	1001310d 	.word	0x1001310d

1000f0e0 <gattc_disc_char_ind_parser>:
1000f0e0:	b570      	push	{r4, r5, r6, lr}
1000f0e2:	1c15      	adds	r5, r2, #0
1000f0e4:	0a00      	lsrs	r0, r0, #8
1000f0e6:	8010      	strh	r0, [r2, #0]
1000f0e8:	784b      	ldrb	r3, [r1, #1]
1000f0ea:	780a      	ldrb	r2, [r1, #0]
1000f0ec:	021b      	lsls	r3, r3, #8
1000f0ee:	4313      	orrs	r3, r2
1000f0f0:	806b      	strh	r3, [r5, #2]
1000f0f2:	78cb      	ldrb	r3, [r1, #3]
1000f0f4:	788a      	ldrb	r2, [r1, #2]
1000f0f6:	021b      	lsls	r3, r3, #8
1000f0f8:	4313      	orrs	r3, r2
1000f0fa:	80ab      	strh	r3, [r5, #4]
1000f0fc:	790b      	ldrb	r3, [r1, #4]
1000f0fe:	1c0c      	adds	r4, r1, #0
1000f100:	71ab      	strb	r3, [r5, #6]
1000f102:	794e      	ldrb	r6, [r1, #5]
1000f104:	4b05      	ldr	r3, [pc, #20]	; (1000f11c <gattc_disc_char_ind_parser+0x3c>)
1000f106:	1c30      	adds	r0, r6, #0
1000f108:	4798      	blx	r3
1000f10a:	71e8      	strb	r0, [r5, #7]
1000f10c:	1c28      	adds	r0, r5, #0
1000f10e:	1c32      	adds	r2, r6, #0
1000f110:	1da1      	adds	r1, r4, #6
1000f112:	4b03      	ldr	r3, [pc, #12]	; (1000f120 <gattc_disc_char_ind_parser+0x40>)
1000f114:	3008      	adds	r0, #8
1000f116:	4798      	blx	r3
1000f118:	bd70      	pop	{r4, r5, r6, pc}
1000f11a:	46c0      	nop			; (mov r8, r8)
1000f11c:	1000cd21 	.word	0x1000cd21
1000f120:	1001310d 	.word	0x1001310d

1000f124 <gattc_disc_char_desc_ind_parser>:
1000f124:	b570      	push	{r4, r5, r6, lr}
1000f126:	1c15      	adds	r5, r2, #0
1000f128:	0a00      	lsrs	r0, r0, #8
1000f12a:	8010      	strh	r0, [r2, #0]
1000f12c:	784b      	ldrb	r3, [r1, #1]
1000f12e:	780a      	ldrb	r2, [r1, #0]
1000f130:	021b      	lsls	r3, r3, #8
1000f132:	4313      	orrs	r3, r2
1000f134:	806b      	strh	r3, [r5, #2]
1000f136:	788e      	ldrb	r6, [r1, #2]
1000f138:	4b05      	ldr	r3, [pc, #20]	; (1000f150 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f13a:	1c30      	adds	r0, r6, #0
1000f13c:	1c0c      	adds	r4, r1, #0
1000f13e:	4798      	blx	r3
1000f140:	1c32      	adds	r2, r6, #0
1000f142:	7128      	strb	r0, [r5, #4]
1000f144:	1ce1      	adds	r1, r4, #3
1000f146:	1d68      	adds	r0, r5, #5
1000f148:	4b02      	ldr	r3, [pc, #8]	; (1000f154 <gattc_disc_char_desc_ind_parser+0x30>)
1000f14a:	4798      	blx	r3
1000f14c:	bd70      	pop	{r4, r5, r6, pc}
1000f14e:	46c0      	nop			; (mov r8, r8)
1000f150:	1000cd21 	.word	0x1000cd21
1000f154:	1001310d 	.word	0x1001310d

1000f158 <gattc_event_ind_and_notification_parser>:
1000f158:	b510      	push	{r4, lr}
1000f15a:	780c      	ldrb	r4, [r1, #0]
1000f15c:	1c13      	adds	r3, r2, #0
1000f15e:	2c12      	cmp	r4, #18
1000f160:	d10e      	bne.n	1000f180 <gattc_event_ind_and_notification_parser+0x28>
1000f162:	0a00      	lsrs	r0, r0, #8
1000f164:	8010      	strh	r0, [r2, #0]
1000f166:	788a      	ldrb	r2, [r1, #2]
1000f168:	709a      	strb	r2, [r3, #2]
1000f16a:	7948      	ldrb	r0, [r1, #5]
1000f16c:	790c      	ldrb	r4, [r1, #4]
1000f16e:	0200      	lsls	r0, r0, #8
1000f170:	4320      	orrs	r0, r4
1000f172:	8098      	strh	r0, [r3, #4]
1000f174:	3106      	adds	r1, #6
1000f176:	1d98      	adds	r0, r3, #6
1000f178:	4b0b      	ldr	r3, [pc, #44]	; (1000f1a8 <gattc_event_ind_and_notification_parser+0x50>)
1000f17a:	4798      	blx	r3
1000f17c:	221b      	movs	r2, #27
1000f17e:	e010      	b.n	1000f1a2 <gattc_event_ind_and_notification_parser+0x4a>
1000f180:	2200      	movs	r2, #0
1000f182:	2c13      	cmp	r4, #19
1000f184:	d10d      	bne.n	1000f1a2 <gattc_event_ind_and_notification_parser+0x4a>
1000f186:	0a00      	lsrs	r0, r0, #8
1000f188:	8018      	strh	r0, [r3, #0]
1000f18a:	788a      	ldrb	r2, [r1, #2]
1000f18c:	709a      	strb	r2, [r3, #2]
1000f18e:	7908      	ldrb	r0, [r1, #4]
1000f190:	78cc      	ldrb	r4, [r1, #3]
1000f192:	0200      	lsls	r0, r0, #8
1000f194:	4320      	orrs	r0, r4
1000f196:	8098      	strh	r0, [r3, #4]
1000f198:	3106      	adds	r1, #6
1000f19a:	1d98      	adds	r0, r3, #6
1000f19c:	4b02      	ldr	r3, [pc, #8]	; (1000f1a8 <gattc_event_ind_and_notification_parser+0x50>)
1000f19e:	4798      	blx	r3
1000f1a0:	221c      	movs	r2, #28
1000f1a2:	1c10      	adds	r0, r2, #0
1000f1a4:	bd10      	pop	{r4, pc}
1000f1a6:	46c0      	nop			; (mov r8, r8)
1000f1a8:	1001310d 	.word	0x1001310d

1000f1ac <gattc_complete_evt_handler>:
1000f1ac:	b500      	push	{lr}
1000f1ae:	0a00      	lsrs	r0, r0, #8
1000f1b0:	8010      	strh	r0, [r2, #0]
1000f1b2:	7808      	ldrb	r0, [r1, #0]
1000f1b4:	7090      	strb	r0, [r2, #2]
1000f1b6:	784b      	ldrb	r3, [r1, #1]
1000f1b8:	3801      	subs	r0, #1
1000f1ba:	70d3      	strb	r3, [r2, #3]
1000f1bc:	2813      	cmp	r0, #19
1000f1be:	d82c      	bhi.n	1000f21a <gattc_complete_evt_handler+0x6e>
1000f1c0:	f001 faec 	bl	1001079c <__gnu_thumb1_case_uqi>
1000f1c4:	0a0a0a0c 	.word	0x0a0a0a0c
1000f1c8:	210a0a0a 	.word	0x210a0a0a
1000f1cc:	111f2121 	.word	0x111f2121
1000f1d0:	2b111111 	.word	0x2b111111
1000f1d4:	2919132b 	.word	0x2919132b
1000f1d8:	2017      	movs	r0, #23
1000f1da:	e01f      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f1dc:	2024      	movs	r0, #36	; 0x24
1000f1de:	2b00      	cmp	r3, #0
1000f1e0:	d11c      	bne.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f1e2:	3017      	adds	r0, #23
1000f1e4:	e01a      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f1e6:	2025      	movs	r0, #37	; 0x25
1000f1e8:	e018      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f1ea:	4a0d      	ldr	r2, [pc, #52]	; (1000f220 <gattc_complete_evt_handler+0x74>)
1000f1ec:	201d      	movs	r0, #29
1000f1ee:	6813      	ldr	r3, [r2, #0]
1000f1f0:	3b01      	subs	r3, #1
1000f1f2:	6013      	str	r3, [r2, #0]
1000f1f4:	e012      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f1f6:	4a0a      	ldr	r2, [pc, #40]	; (1000f220 <gattc_complete_evt_handler+0x74>)
1000f1f8:	201e      	movs	r0, #30
1000f1fa:	6813      	ldr	r3, [r2, #0]
1000f1fc:	3b01      	subs	r3, #1
1000f1fe:	6013      	str	r3, [r2, #0]
1000f200:	e00c      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f202:	2019      	movs	r0, #25
1000f204:	e00a      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f206:	203b      	movs	r0, #59	; 0x3b
1000f208:	2b00      	cmp	r3, #0
1000f20a:	d007      	beq.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f20c:	2182      	movs	r1, #130	; 0x82
1000f20e:	0089      	lsls	r1, r1, #2
1000f210:	5453      	strb	r3, [r2, r1]
1000f212:	3823      	subs	r0, #35	; 0x23
1000f214:	e002      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f216:	2021      	movs	r0, #33	; 0x21
1000f218:	e000      	b.n	1000f21c <gattc_complete_evt_handler+0x70>
1000f21a:	2000      	movs	r0, #0
1000f21c:	bd00      	pop	{pc}
1000f21e:	46c0      	nop			; (mov r8, r8)
1000f220:	10016e2c 	.word	0x10016e2c

1000f224 <gattc_event_mtu_changed_ind_parser>:
1000f224:	0a00      	lsrs	r0, r0, #8
1000f226:	8010      	strh	r0, [r2, #0]
1000f228:	784b      	ldrb	r3, [r1, #1]
1000f22a:	7809      	ldrb	r1, [r1, #0]
1000f22c:	021b      	lsls	r3, r3, #8
1000f22e:	430b      	orrs	r3, r1
1000f230:	8053      	strh	r3, [r2, #2]
1000f232:	4770      	bx	lr

1000f234 <gattc_read_ind_parser>:
1000f234:	0a00      	lsrs	r0, r0, #8
1000f236:	b508      	push	{r3, lr}
1000f238:	8010      	strh	r0, [r2, #0]
1000f23a:	1c13      	adds	r3, r2, #0
1000f23c:	2282      	movs	r2, #130	; 0x82
1000f23e:	2000      	movs	r0, #0
1000f240:	0092      	lsls	r2, r2, #2
1000f242:	5498      	strb	r0, [r3, r2]
1000f244:	784a      	ldrb	r2, [r1, #1]
1000f246:	7808      	ldrb	r0, [r1, #0]
1000f248:	0212      	lsls	r2, r2, #8
1000f24a:	4302      	orrs	r2, r0
1000f24c:	805a      	strh	r2, [r3, #2]
1000f24e:	78ca      	ldrb	r2, [r1, #3]
1000f250:	7888      	ldrb	r0, [r1, #2]
1000f252:	0212      	lsls	r2, r2, #8
1000f254:	4302      	orrs	r2, r0
1000f256:	80da      	strh	r2, [r3, #6]
1000f258:	794a      	ldrb	r2, [r1, #5]
1000f25a:	7908      	ldrb	r0, [r1, #4]
1000f25c:	0212      	lsls	r2, r2, #8
1000f25e:	4302      	orrs	r2, r0
1000f260:	809a      	strh	r2, [r3, #4]
1000f262:	3308      	adds	r3, #8
1000f264:	1c18      	adds	r0, r3, #0
1000f266:	3106      	adds	r1, #6
1000f268:	4b01      	ldr	r3, [pc, #4]	; (1000f270 <gattc_read_ind_parser+0x3c>)
1000f26a:	4798      	blx	r3
1000f26c:	bd08      	pop	{r3, pc}
1000f26e:	46c0      	nop			; (mov r8, r8)
1000f270:	1001310d 	.word	0x1001310d

1000f274 <gattc_svc_changed_cfg_ind_parser>:
1000f274:	0a00      	lsrs	r0, r0, #8
1000f276:	8010      	strh	r0, [r2, #0]
1000f278:	784b      	ldrb	r3, [r1, #1]
1000f27a:	7809      	ldrb	r1, [r1, #0]
1000f27c:	021b      	lsls	r3, r3, #8
1000f27e:	430b      	orrs	r3, r1
1000f280:	8053      	strh	r3, [r2, #2]
1000f282:	4770      	bx	lr

1000f284 <init_gattc_task_module>:
1000f284:	2300      	movs	r3, #0
1000f286:	4a02      	ldr	r2, [pc, #8]	; (1000f290 <init_gattc_task_module+0xc>)
1000f288:	8013      	strh	r3, [r2, #0]
1000f28a:	4a02      	ldr	r2, [pc, #8]	; (1000f294 <init_gattc_task_module+0x10>)
1000f28c:	8013      	strh	r3, [r2, #0]
1000f28e:	4770      	bx	lr
1000f290:	10016e26 	.word	0x10016e26
1000f294:	10016e28 	.word	0x10016e28

1000f298 <gattm_add_svc_req_handler>:
1000f298:	2200      	movs	r2, #0
1000f29a:	210b      	movs	r1, #11
1000f29c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f29e:	1c04      	adds	r4, r0, #0
1000f2a0:	7943      	ldrb	r3, [r0, #5]
1000f2a2:	b085      	sub	sp, #20
1000f2a4:	9301      	str	r3, [sp, #4]
1000f2a6:	ab02      	add	r3, sp, #8
1000f2a8:	71da      	strb	r2, [r3, #7]
1000f2aa:	4b37      	ldr	r3, [pc, #220]	; (1000f388 <gattm_add_svc_req_handler+0xf0>)
1000f2ac:	7059      	strb	r1, [r3, #1]
1000f2ae:	7099      	strb	r1, [r3, #2]
1000f2b0:	4936      	ldr	r1, [pc, #216]	; (1000f38c <gattm_add_svc_req_handler+0xf4>)
1000f2b2:	701a      	strb	r2, [r3, #0]
1000f2b4:	8808      	ldrh	r0, [r1, #0]
1000f2b6:	8809      	ldrh	r1, [r1, #0]
1000f2b8:	70da      	strb	r2, [r3, #3]
1000f2ba:	0a09      	lsrs	r1, r1, #8
1000f2bc:	7118      	strb	r0, [r3, #4]
1000f2be:	7159      	strb	r1, [r3, #5]
1000f2c0:	8821      	ldrh	r1, [r4, #0]
1000f2c2:	7219      	strb	r1, [r3, #8]
1000f2c4:	8821      	ldrh	r1, [r4, #0]
1000f2c6:	0a09      	lsrs	r1, r1, #8
1000f2c8:	7259      	strb	r1, [r3, #9]
1000f2ca:	8861      	ldrh	r1, [r4, #2]
1000f2cc:	7299      	strb	r1, [r3, #10]
1000f2ce:	8861      	ldrh	r1, [r4, #2]
1000f2d0:	0a09      	lsrs	r1, r1, #8
1000f2d2:	72d9      	strb	r1, [r3, #11]
1000f2d4:	7921      	ldrb	r1, [r4, #4]
1000f2d6:	7319      	strb	r1, [r3, #12]
1000f2d8:	4669      	mov	r1, sp
1000f2da:	7909      	ldrb	r1, [r1, #4]
1000f2dc:	7359      	strb	r1, [r3, #13]
1000f2de:	18a1      	adds	r1, r4, r2
1000f2e0:	7988      	ldrb	r0, [r1, #6]
1000f2e2:	1899      	adds	r1, r3, r2
1000f2e4:	3201      	adds	r2, #1
1000f2e6:	7388      	strb	r0, [r1, #14]
1000f2e8:	2a10      	cmp	r2, #16
1000f2ea:	d1f8      	bne.n	1000f2de <gattm_add_svc_req_handler+0x46>
1000f2ec:	1c27      	adds	r7, r4, #0
1000f2ee:	2300      	movs	r3, #0
1000f2f0:	251e      	movs	r5, #30
1000f2f2:	3716      	adds	r7, #22
1000f2f4:	9300      	str	r3, [sp, #0]
1000f2f6:	9b00      	ldr	r3, [sp, #0]
1000f2f8:	9a01      	ldr	r2, [sp, #4]
1000f2fa:	4e23      	ldr	r6, [pc, #140]	; (1000f388 <gattm_add_svc_req_handler+0xf0>)
1000f2fc:	4293      	cmp	r3, r2
1000f2fe:	da21      	bge.n	1000f344 <gattm_add_svc_req_handler+0xac>
1000f300:	1c39      	adds	r1, r7, #0
1000f302:	1970      	adds	r0, r6, r5
1000f304:	2210      	movs	r2, #16
1000f306:	4b22      	ldr	r3, [pc, #136]	; (1000f390 <gattm_add_svc_req_handler+0xf8>)
1000f308:	4798      	blx	r3
1000f30a:	1c2b      	adds	r3, r5, #0
1000f30c:	8a3a      	ldrh	r2, [r7, #16]
1000f30e:	3310      	adds	r3, #16
1000f310:	b29b      	uxth	r3, r3
1000f312:	54f2      	strb	r2, [r6, r3]
1000f314:	1c2b      	adds	r3, r5, #0
1000f316:	8a3a      	ldrh	r2, [r7, #16]
1000f318:	3311      	adds	r3, #17
1000f31a:	b29b      	uxth	r3, r3
1000f31c:	0a12      	lsrs	r2, r2, #8
1000f31e:	54f2      	strb	r2, [r6, r3]
1000f320:	1c2a      	adds	r2, r5, #0
1000f322:	1c2b      	adds	r3, r5, #0
1000f324:	8a79      	ldrh	r1, [r7, #18]
1000f326:	3212      	adds	r2, #18
1000f328:	b292      	uxth	r2, r2
1000f32a:	54b1      	strb	r1, [r6, r2]
1000f32c:	8a7a      	ldrh	r2, [r7, #18]
1000f32e:	3313      	adds	r3, #19
1000f330:	b29b      	uxth	r3, r3
1000f332:	0a12      	lsrs	r2, r2, #8
1000f334:	54f2      	strb	r2, [r6, r3]
1000f336:	9b00      	ldr	r3, [sp, #0]
1000f338:	3514      	adds	r5, #20
1000f33a:	3301      	adds	r3, #1
1000f33c:	b2ad      	uxth	r5, r5
1000f33e:	9300      	str	r3, [sp, #0]
1000f340:	3714      	adds	r7, #20
1000f342:	e7d8      	b.n	1000f2f6 <gattm_add_svc_req_handler+0x5e>
1000f344:	2114      	movs	r1, #20
1000f346:	4d13      	ldr	r5, [pc, #76]	; (1000f394 <gattm_add_svc_req_handler+0xfc>)
1000f348:	4b13      	ldr	r3, [pc, #76]	; (1000f398 <gattm_add_svc_req_handler+0x100>)
1000f34a:	4351      	muls	r1, r2
1000f34c:	802b      	strh	r3, [r5, #0]
1000f34e:	230b      	movs	r3, #11
1000f350:	311e      	adds	r1, #30
1000f352:	80ab      	strh	r3, [r5, #4]
1000f354:	1c0b      	adds	r3, r1, #0
1000f356:	3b08      	subs	r3, #8
1000f358:	71b3      	strb	r3, [r6, #6]
1000f35a:	121b      	asrs	r3, r3, #8
1000f35c:	71f3      	strb	r3, [r6, #7]
1000f35e:	1c30      	adds	r0, r6, #0
1000f360:	4b0e      	ldr	r3, [pc, #56]	; (1000f39c <gattm_add_svc_req_handler+0x104>)
1000f362:	4798      	blx	r3
1000f364:	ab02      	add	r3, sp, #8
1000f366:	1dde      	adds	r6, r3, #7
1000f368:	1c30      	adds	r0, r6, #0
1000f36a:	4b0d      	ldr	r3, [pc, #52]	; (1000f3a0 <gattm_add_svc_req_handler+0x108>)
1000f36c:	4798      	blx	r3
1000f36e:	7833      	ldrb	r3, [r6, #0]
1000f370:	20e2      	movs	r0, #226	; 0xe2
1000f372:	2b00      	cmp	r3, #0
1000f374:	d106      	bne.n	1000f384 <gattm_add_svc_req_handler+0xec>
1000f376:	68aa      	ldr	r2, [r5, #8]
1000f378:	7853      	ldrb	r3, [r2, #1]
1000f37a:	7811      	ldrb	r1, [r2, #0]
1000f37c:	021b      	lsls	r3, r3, #8
1000f37e:	430b      	orrs	r3, r1
1000f380:	8023      	strh	r3, [r4, #0]
1000f382:	7890      	ldrb	r0, [r2, #2]
1000f384:	b005      	add	sp, #20
1000f386:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f388:	10018324 	.word	0x10018324
1000f38c:	10017fb4 	.word	0x10017fb4
1000f390:	1001310d 	.word	0x1001310d
1000f394:	10017fa8 	.word	0x10017fa8
1000f398:	00000b01 	.word	0x00000b01
1000f39c:	1000dad5 	.word	0x1000dad5
1000f3a0:	1000db39 	.word	0x1000db39

1000f3a4 <gattm_add_attribute_req_handler>:
1000f3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f3a6:	1c1f      	adds	r7, r3, #0
1000f3a8:	4b16      	ldr	r3, [pc, #88]	; (1000f404 <gattm_add_attribute_req_handler+0x60>)
1000f3aa:	9100      	str	r1, [sp, #0]
1000f3ac:	9201      	str	r2, [sp, #4]
1000f3ae:	1c05      	adds	r5, r0, #0
1000f3b0:	7946      	ldrb	r6, [r0, #5]
1000f3b2:	6818      	ldr	r0, [r3, #0]
1000f3b4:	2114      	movs	r1, #20
1000f3b6:	4b14      	ldr	r3, [pc, #80]	; (1000f408 <gattm_add_attribute_req_handler+0x64>)
1000f3b8:	382a      	subs	r0, #42	; 0x2a
1000f3ba:	4798      	blx	r3
1000f3bc:	2311      	movs	r3, #17
1000f3be:	4286      	cmp	r6, r0
1000f3c0:	d21e      	bcs.n	1000f400 <gattm_add_attribute_req_handler+0x5c>
1000f3c2:	2414      	movs	r4, #20
1000f3c4:	4366      	muls	r6, r4
1000f3c6:	19a8      	adds	r0, r5, r6
1000f3c8:	2100      	movs	r1, #0
1000f3ca:	2210      	movs	r2, #16
1000f3cc:	4b0f      	ldr	r3, [pc, #60]	; (1000f40c <gattm_add_attribute_req_handler+0x68>)
1000f3ce:	3016      	adds	r0, #22
1000f3d0:	4798      	blx	r3
1000f3d2:	7968      	ldrb	r0, [r5, #5]
1000f3d4:	1c3a      	adds	r2, r7, #0
1000f3d6:	4360      	muls	r0, r4
1000f3d8:	1828      	adds	r0, r5, r0
1000f3da:	4b0d      	ldr	r3, [pc, #52]	; (1000f410 <gattm_add_attribute_req_handler+0x6c>)
1000f3dc:	3016      	adds	r0, #22
1000f3de:	9908      	ldr	r1, [sp, #32]
1000f3e0:	4798      	blx	r3
1000f3e2:	466a      	mov	r2, sp
1000f3e4:	796b      	ldrb	r3, [r5, #5]
1000f3e6:	8812      	ldrh	r2, [r2, #0]
1000f3e8:	435c      	muls	r4, r3
1000f3ea:	192c      	adds	r4, r5, r4
1000f3ec:	8522      	strh	r2, [r4, #40]	; 0x28
1000f3ee:	466a      	mov	r2, sp
1000f3f0:	8892      	ldrh	r2, [r2, #4]
1000f3f2:	84e2      	strh	r2, [r4, #38]	; 0x26
1000f3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f3f6:	8013      	strh	r3, [r2, #0]
1000f3f8:	796b      	ldrb	r3, [r5, #5]
1000f3fa:	3301      	adds	r3, #1
1000f3fc:	716b      	strb	r3, [r5, #5]
1000f3fe:	2300      	movs	r3, #0
1000f400:	1c18      	adds	r0, r3, #0
1000f402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f404:	10016d9c 	.word	0x10016d9c
1000f408:	100107b1 	.word	0x100107b1
1000f40c:	1001311f 	.word	0x1001311f
1000f410:	1001310d 	.word	0x1001310d

1000f414 <gattm_att_set_value_req_handler>:
1000f414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f416:	466b      	mov	r3, sp
1000f418:	1dde      	adds	r6, r3, #7
1000f41a:	2300      	movs	r3, #0
1000f41c:	1c0d      	adds	r5, r1, #0
1000f41e:	210c      	movs	r1, #12
1000f420:	270b      	movs	r7, #11
1000f422:	4c17      	ldr	r4, [pc, #92]	; (1000f480 <gattm_att_set_value_req_handler+0x6c>)
1000f424:	7033      	strb	r3, [r6, #0]
1000f426:	70e3      	strb	r3, [r4, #3]
1000f428:	4b16      	ldr	r3, [pc, #88]	; (1000f484 <gattm_att_set_value_req_handler+0x70>)
1000f42a:	7021      	strb	r1, [r4, #0]
1000f42c:	8819      	ldrh	r1, [r3, #0]
1000f42e:	881b      	ldrh	r3, [r3, #0]
1000f430:	7220      	strb	r0, [r4, #8]
1000f432:	0a1b      	lsrs	r3, r3, #8
1000f434:	7163      	strb	r3, [r4, #5]
1000f436:	0a00      	lsrs	r0, r0, #8
1000f438:	0a2b      	lsrs	r3, r5, #8
1000f43a:	7121      	strb	r1, [r4, #4]
1000f43c:	7260      	strb	r0, [r4, #9]
1000f43e:	1c11      	adds	r1, r2, #0
1000f440:	72a5      	strb	r5, [r4, #10]
1000f442:	1c2a      	adds	r2, r5, #0
1000f444:	72e3      	strb	r3, [r4, #11]
1000f446:	350c      	adds	r5, #12
1000f448:	4b0f      	ldr	r3, [pc, #60]	; (1000f488 <gattm_att_set_value_req_handler+0x74>)
1000f44a:	4810      	ldr	r0, [pc, #64]	; (1000f48c <gattm_att_set_value_req_handler+0x78>)
1000f44c:	7067      	strb	r7, [r4, #1]
1000f44e:	70a7      	strb	r7, [r4, #2]
1000f450:	4798      	blx	r3
1000f452:	b2a9      	uxth	r1, r5
1000f454:	4b0e      	ldr	r3, [pc, #56]	; (1000f490 <gattm_att_set_value_req_handler+0x7c>)
1000f456:	4d0f      	ldr	r5, [pc, #60]	; (1000f494 <gattm_att_set_value_req_handler+0x80>)
1000f458:	1c20      	adds	r0, r4, #0
1000f45a:	802b      	strh	r3, [r5, #0]
1000f45c:	1c0b      	adds	r3, r1, #0
1000f45e:	3b08      	subs	r3, #8
1000f460:	71a3      	strb	r3, [r4, #6]
1000f462:	121b      	asrs	r3, r3, #8
1000f464:	71e3      	strb	r3, [r4, #7]
1000f466:	4b0c      	ldr	r3, [pc, #48]	; (1000f498 <gattm_att_set_value_req_handler+0x84>)
1000f468:	80af      	strh	r7, [r5, #4]
1000f46a:	4798      	blx	r3
1000f46c:	1c30      	adds	r0, r6, #0
1000f46e:	4b0b      	ldr	r3, [pc, #44]	; (1000f49c <gattm_att_set_value_req_handler+0x88>)
1000f470:	4798      	blx	r3
1000f472:	7833      	ldrb	r3, [r6, #0]
1000f474:	20e2      	movs	r0, #226	; 0xe2
1000f476:	2b00      	cmp	r3, #0
1000f478:	d101      	bne.n	1000f47e <gattm_att_set_value_req_handler+0x6a>
1000f47a:	68ab      	ldr	r3, [r5, #8]
1000f47c:	7898      	ldrb	r0, [r3, #2]
1000f47e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f480:	10018324 	.word	0x10018324
1000f484:	10017fb4 	.word	0x10017fb4
1000f488:	1001310d 	.word	0x1001310d
1000f48c:	10018330 	.word	0x10018330
1000f490:	00000b0d 	.word	0x00000b0d
1000f494:	10017fa8 	.word	0x10017fa8
1000f498:	1000dad5 	.word	0x1000dad5
1000f49c:	1000db39 	.word	0x1000db39

1000f4a0 <gattm_att_get_value_req_handler>:
1000f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4a2:	b085      	sub	sp, #20
1000f4a4:	9201      	str	r2, [sp, #4]
1000f4a6:	220a      	movs	r2, #10
1000f4a8:	1c04      	adds	r4, r0, #0
1000f4aa:	481d      	ldr	r0, [pc, #116]	; (1000f520 <gattm_att_get_value_req_handler+0x80>)
1000f4ac:	ab02      	add	r3, sp, #8
1000f4ae:	1dde      	adds	r6, r3, #7
1000f4b0:	7002      	strb	r2, [r0, #0]
1000f4b2:	2300      	movs	r3, #0
1000f4b4:	220b      	movs	r2, #11
1000f4b6:	4d1b      	ldr	r5, [pc, #108]	; (1000f524 <gattm_att_get_value_req_handler+0x84>)
1000f4b8:	1c0f      	adds	r7, r1, #0
1000f4ba:	8829      	ldrh	r1, [r5, #0]
1000f4bc:	882d      	ldrh	r5, [r5, #0]
1000f4be:	7101      	strb	r1, [r0, #4]
1000f4c0:	0a2d      	lsrs	r5, r5, #8
1000f4c2:	7145      	strb	r5, [r0, #5]
1000f4c4:	0a25      	lsrs	r5, r4, #8
1000f4c6:	7245      	strb	r5, [r0, #9]
1000f4c8:	4917      	ldr	r1, [pc, #92]	; (1000f528 <gattm_att_get_value_req_handler+0x88>)
1000f4ca:	4d18      	ldr	r5, [pc, #96]	; (1000f52c <gattm_att_get_value_req_handler+0x8c>)
1000f4cc:	7033      	strb	r3, [r6, #0]
1000f4ce:	7042      	strb	r2, [r0, #1]
1000f4d0:	7082      	strb	r2, [r0, #2]
1000f4d2:	70c3      	strb	r3, [r0, #3]
1000f4d4:	8029      	strh	r1, [r5, #0]
1000f4d6:	80aa      	strh	r2, [r5, #4]
1000f4d8:	71c3      	strb	r3, [r0, #7]
1000f4da:	3a09      	subs	r2, #9
1000f4dc:	210a      	movs	r1, #10
1000f4de:	4b14      	ldr	r3, [pc, #80]	; (1000f530 <gattm_att_get_value_req_handler+0x90>)
1000f4e0:	7182      	strb	r2, [r0, #6]
1000f4e2:	7204      	strb	r4, [r0, #8]
1000f4e4:	4798      	blx	r3
1000f4e6:	1c30      	adds	r0, r6, #0
1000f4e8:	4b12      	ldr	r3, [pc, #72]	; (1000f534 <gattm_att_get_value_req_handler+0x94>)
1000f4ea:	4798      	blx	r3
1000f4ec:	7833      	ldrb	r3, [r6, #0]
1000f4ee:	20e2      	movs	r0, #226	; 0xe2
1000f4f0:	2b00      	cmp	r3, #0
1000f4f2:	d112      	bne.n	1000f51a <gattm_att_get_value_req_handler+0x7a>
1000f4f4:	68a9      	ldr	r1, [r5, #8]
1000f4f6:	9801      	ldr	r0, [sp, #4]
1000f4f8:	784d      	ldrb	r5, [r1, #1]
1000f4fa:	780b      	ldrb	r3, [r1, #0]
1000f4fc:	78ca      	ldrb	r2, [r1, #3]
1000f4fe:	022d      	lsls	r5, r5, #8
1000f500:	431d      	orrs	r5, r3
1000f502:	788b      	ldrb	r3, [r1, #2]
1000f504:	0212      	lsls	r2, r2, #8
1000f506:	431a      	orrs	r2, r3
1000f508:	803a      	strh	r2, [r7, #0]
1000f50a:	790e      	ldrb	r6, [r1, #4]
1000f50c:	4b0a      	ldr	r3, [pc, #40]	; (1000f538 <gattm_att_get_value_req_handler+0x98>)
1000f50e:	3105      	adds	r1, #5
1000f510:	4798      	blx	r3
1000f512:	20e2      	movs	r0, #226	; 0xe2
1000f514:	42ac      	cmp	r4, r5
1000f516:	d100      	bne.n	1000f51a <gattm_att_get_value_req_handler+0x7a>
1000f518:	1c30      	adds	r0, r6, #0
1000f51a:	b005      	add	sp, #20
1000f51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f51e:	46c0      	nop			; (mov r8, r8)
1000f520:	10018324 	.word	0x10018324
1000f524:	10017fb4 	.word	0x10017fb4
1000f528:	00000b0b 	.word	0x00000b0b
1000f52c:	10017fa8 	.word	0x10017fa8
1000f530:	1000dad5 	.word	0x1000dad5
1000f534:	1000db39 	.word	0x1000db39
1000f538:	1001310d 	.word	0x1001310d

1000f53c <htpt_enable_rsp_handler>:
1000f53c:	780b      	ldrb	r3, [r1, #0]
1000f53e:	7013      	strb	r3, [r2, #0]
1000f540:	784b      	ldrb	r3, [r1, #1]
1000f542:	7053      	strb	r3, [r2, #1]
1000f544:	4770      	bx	lr

1000f546 <htpt_temp_send_rsp_handler>:
1000f546:	780b      	ldrb	r3, [r1, #0]
1000f548:	7013      	strb	r3, [r2, #0]
1000f54a:	4770      	bx	lr

1000f54c <htpt_meas_intv_upd_rsp_handler>:
1000f54c:	780b      	ldrb	r3, [r1, #0]
1000f54e:	7013      	strb	r3, [r2, #0]
1000f550:	4770      	bx	lr

1000f552 <htpt_meas_intv_chg_req_ind_handler>:
1000f552:	78cb      	ldrb	r3, [r1, #3]
1000f554:	7889      	ldrb	r1, [r1, #2]
1000f556:	021b      	lsls	r3, r3, #8
1000f558:	430b      	orrs	r3, r1
1000f55a:	8013      	strh	r3, [r2, #0]
1000f55c:	4770      	bx	lr

1000f55e <htpt_cfg_indntf_ind_handler>:
1000f55e:	780b      	ldrb	r3, [r1, #0]
1000f560:	7013      	strb	r3, [r2, #0]
1000f562:	784b      	ldrb	r3, [r1, #1]
1000f564:	7053      	strb	r3, [r2, #1]
1000f566:	4770      	bx	lr

1000f568 <pow>:
1000f568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f56a:	465f      	mov	r7, fp
1000f56c:	464d      	mov	r5, r9
1000f56e:	4656      	mov	r6, sl
1000f570:	4644      	mov	r4, r8
1000f572:	b4f0      	push	{r4, r5, r6, r7}
1000f574:	b091      	sub	sp, #68	; 0x44
1000f576:	001f      	movs	r7, r3
1000f578:	0004      	movs	r4, r0
1000f57a:	000d      	movs	r5, r1
1000f57c:	0016      	movs	r6, r2
1000f57e:	f000 f9af 	bl	1000f8e0 <__ieee754_pow>
1000f582:	4bcf      	ldr	r3, [pc, #828]	; (1000f8c0 <pow+0x358>)
1000f584:	9002      	str	r0, [sp, #8]
1000f586:	9103      	str	r1, [sp, #12]
1000f588:	469b      	mov	fp, r3
1000f58a:	781b      	ldrb	r3, [r3, #0]
1000f58c:	b25b      	sxtb	r3, r3
1000f58e:	4699      	mov	r9, r3
1000f590:	3301      	adds	r3, #1
1000f592:	d04f      	beq.n	1000f634 <pow+0xcc>
1000f594:	0032      	movs	r2, r6
1000f596:	003b      	movs	r3, r7
1000f598:	0030      	movs	r0, r6
1000f59a:	0039      	movs	r1, r7
1000f59c:	f003 fbe6 	bl	10012d6c <__aeabi_dcmpun>
1000f5a0:	9000      	str	r0, [sp, #0]
1000f5a2:	2800      	cmp	r0, #0
1000f5a4:	d146      	bne.n	1000f634 <pow+0xcc>
1000f5a6:	0022      	movs	r2, r4
1000f5a8:	002b      	movs	r3, r5
1000f5aa:	0020      	movs	r0, r4
1000f5ac:	0029      	movs	r1, r5
1000f5ae:	f003 fbdd 	bl	10012d6c <__aeabi_dcmpun>
1000f5b2:	2200      	movs	r2, #0
1000f5b4:	4682      	mov	sl, r0
1000f5b6:	2800      	cmp	r0, #0
1000f5b8:	d134      	bne.n	1000f624 <pow+0xbc>
1000f5ba:	2300      	movs	r3, #0
1000f5bc:	0020      	movs	r0, r4
1000f5be:	0029      	movs	r1, r5
1000f5c0:	f001 fa7c 	bl	10010abc <__aeabi_dcmpeq>
1000f5c4:	2800      	cmp	r0, #0
1000f5c6:	d03a      	beq.n	1000f63e <pow+0xd6>
1000f5c8:	2200      	movs	r2, #0
1000f5ca:	2300      	movs	r3, #0
1000f5cc:	0030      	movs	r0, r6
1000f5ce:	0039      	movs	r1, r7
1000f5d0:	f001 fa74 	bl	10010abc <__aeabi_dcmpeq>
1000f5d4:	9005      	str	r0, [sp, #20]
1000f5d6:	2800      	cmp	r0, #0
1000f5d8:	d100      	bne.n	1000f5dc <pow+0x74>
1000f5da:	e074      	b.n	1000f6c6 <pow+0x15e>
1000f5dc:	ab06      	add	r3, sp, #24
1000f5de:	4698      	mov	r8, r3
1000f5e0:	2301      	movs	r3, #1
1000f5e2:	4642      	mov	r2, r8
1000f5e4:	9306      	str	r3, [sp, #24]
1000f5e6:	4bb7      	ldr	r3, [pc, #732]	; (1000f8c4 <pow+0x35c>)
1000f5e8:	6053      	str	r3, [r2, #4]
1000f5ea:	4643      	mov	r3, r8
1000f5ec:	4652      	mov	r2, sl
1000f5ee:	609c      	str	r4, [r3, #8]
1000f5f0:	60dd      	str	r5, [r3, #12]
1000f5f2:	621a      	str	r2, [r3, #32]
1000f5f4:	611e      	str	r6, [r3, #16]
1000f5f6:	615f      	str	r7, [r3, #20]
1000f5f8:	4642      	mov	r2, r8
1000f5fa:	2300      	movs	r3, #0
1000f5fc:	2400      	movs	r4, #0
1000f5fe:	6193      	str	r3, [r2, #24]
1000f600:	61d4      	str	r4, [r2, #28]
1000f602:	464b      	mov	r3, r9
1000f604:	2b00      	cmp	r3, #0
1000f606:	d100      	bne.n	1000f60a <pow+0xa2>
1000f608:	e094      	b.n	1000f734 <pow+0x1cc>
1000f60a:	2300      	movs	r3, #0
1000f60c:	4cae      	ldr	r4, [pc, #696]	; (1000f8c8 <pow+0x360>)
1000f60e:	9300      	str	r3, [sp, #0]
1000f610:	9401      	str	r4, [sp, #4]
1000f612:	9800      	ldr	r0, [sp, #0]
1000f614:	9901      	ldr	r1, [sp, #4]
1000f616:	b011      	add	sp, #68	; 0x44
1000f618:	bc3c      	pop	{r2, r3, r4, r5}
1000f61a:	4690      	mov	r8, r2
1000f61c:	4699      	mov	r9, r3
1000f61e:	46a2      	mov	sl, r4
1000f620:	46ab      	mov	fp, r5
1000f622:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f624:	2300      	movs	r3, #0
1000f626:	0030      	movs	r0, r6
1000f628:	0039      	movs	r1, r7
1000f62a:	f001 fa47 	bl	10010abc <__aeabi_dcmpeq>
1000f62e:	2800      	cmp	r0, #0
1000f630:	d000      	beq.n	1000f634 <pow+0xcc>
1000f632:	e0eb      	b.n	1000f80c <pow+0x2a4>
1000f634:	9b02      	ldr	r3, [sp, #8]
1000f636:	9c03      	ldr	r4, [sp, #12]
1000f638:	9300      	str	r3, [sp, #0]
1000f63a:	9401      	str	r4, [sp, #4]
1000f63c:	e7e9      	b.n	1000f612 <pow+0xaa>
1000f63e:	9802      	ldr	r0, [sp, #8]
1000f640:	9903      	ldr	r1, [sp, #12]
1000f642:	f000 ff7d 	bl	10010540 <finite>
1000f646:	4681      	mov	r9, r0
1000f648:	2800      	cmp	r0, #0
1000f64a:	d100      	bne.n	1000f64e <pow+0xe6>
1000f64c:	e086      	b.n	1000f75c <pow+0x1f4>
1000f64e:	9802      	ldr	r0, [sp, #8]
1000f650:	9903      	ldr	r1, [sp, #12]
1000f652:	2200      	movs	r2, #0
1000f654:	2300      	movs	r3, #0
1000f656:	f001 fa31 	bl	10010abc <__aeabi_dcmpeq>
1000f65a:	2800      	cmp	r0, #0
1000f65c:	d0ea      	beq.n	1000f634 <pow+0xcc>
1000f65e:	0020      	movs	r0, r4
1000f660:	0029      	movs	r1, r5
1000f662:	f000 ff6d 	bl	10010540 <finite>
1000f666:	9a02      	ldr	r2, [sp, #8]
1000f668:	9b03      	ldr	r3, [sp, #12]
1000f66a:	9200      	str	r2, [sp, #0]
1000f66c:	9301      	str	r3, [sp, #4]
1000f66e:	2800      	cmp	r0, #0
1000f670:	d0cf      	beq.n	1000f612 <pow+0xaa>
1000f672:	0030      	movs	r0, r6
1000f674:	0039      	movs	r1, r7
1000f676:	f000 ff63 	bl	10010540 <finite>
1000f67a:	9a02      	ldr	r2, [sp, #8]
1000f67c:	9b03      	ldr	r3, [sp, #12]
1000f67e:	9200      	str	r2, [sp, #0]
1000f680:	9301      	str	r3, [sp, #4]
1000f682:	2800      	cmp	r0, #0
1000f684:	d0c5      	beq.n	1000f612 <pow+0xaa>
1000f686:	ab06      	add	r3, sp, #24
1000f688:	4698      	mov	r8, r3
1000f68a:	2304      	movs	r3, #4
1000f68c:	4642      	mov	r2, r8
1000f68e:	9306      	str	r3, [sp, #24]
1000f690:	4b8c      	ldr	r3, [pc, #560]	; (1000f8c4 <pow+0x35c>)
1000f692:	6094      	str	r4, [r2, #8]
1000f694:	60d5      	str	r5, [r2, #12]
1000f696:	6053      	str	r3, [r2, #4]
1000f698:	2300      	movs	r3, #0
1000f69a:	2400      	movs	r4, #0
1000f69c:	6213      	str	r3, [r2, #32]
1000f69e:	2300      	movs	r3, #0
1000f6a0:	6193      	str	r3, [r2, #24]
1000f6a2:	61d4      	str	r4, [r2, #28]
1000f6a4:	465b      	mov	r3, fp
1000f6a6:	781b      	ldrb	r3, [r3, #0]
1000f6a8:	6116      	str	r6, [r2, #16]
1000f6aa:	6157      	str	r7, [r2, #20]
1000f6ac:	b25b      	sxtb	r3, r3
1000f6ae:	2b02      	cmp	r3, #2
1000f6b0:	d004      	beq.n	1000f6bc <pow+0x154>
1000f6b2:	4640      	mov	r0, r8
1000f6b4:	f000 ff4e 	bl	10010554 <matherr>
1000f6b8:	2800      	cmp	r0, #0
1000f6ba:	d140      	bne.n	1000f73e <pow+0x1d6>
1000f6bc:	f003 fcd0 	bl	10013060 <__errno>
1000f6c0:	2322      	movs	r3, #34	; 0x22
1000f6c2:	6003      	str	r3, [r0, #0]
1000f6c4:	e03b      	b.n	1000f73e <pow+0x1d6>
1000f6c6:	0030      	movs	r0, r6
1000f6c8:	0039      	movs	r1, r7
1000f6ca:	f000 ff39 	bl	10010540 <finite>
1000f6ce:	9a02      	ldr	r2, [sp, #8]
1000f6d0:	9b03      	ldr	r3, [sp, #12]
1000f6d2:	9200      	str	r2, [sp, #0]
1000f6d4:	9301      	str	r3, [sp, #4]
1000f6d6:	2800      	cmp	r0, #0
1000f6d8:	d09b      	beq.n	1000f612 <pow+0xaa>
1000f6da:	2200      	movs	r2, #0
1000f6dc:	2300      	movs	r3, #0
1000f6de:	0030      	movs	r0, r6
1000f6e0:	0039      	movs	r1, r7
1000f6e2:	f001 f9f1 	bl	10010ac8 <__aeabi_dcmplt>
1000f6e6:	2800      	cmp	r0, #0
1000f6e8:	d100      	bne.n	1000f6ec <pow+0x184>
1000f6ea:	e792      	b.n	1000f612 <pow+0xaa>
1000f6ec:	ab06      	add	r3, sp, #24
1000f6ee:	4698      	mov	r8, r3
1000f6f0:	2301      	movs	r3, #1
1000f6f2:	4642      	mov	r2, r8
1000f6f4:	9306      	str	r3, [sp, #24]
1000f6f6:	4b73      	ldr	r3, [pc, #460]	; (1000f8c4 <pow+0x35c>)
1000f6f8:	6053      	str	r3, [r2, #4]
1000f6fa:	4643      	mov	r3, r8
1000f6fc:	9a05      	ldr	r2, [sp, #20]
1000f6fe:	609c      	str	r4, [r3, #8]
1000f700:	60dd      	str	r5, [r3, #12]
1000f702:	621a      	str	r2, [r3, #32]
1000f704:	611e      	str	r6, [r3, #16]
1000f706:	615f      	str	r7, [r3, #20]
1000f708:	465b      	mov	r3, fp
1000f70a:	781b      	ldrb	r3, [r3, #0]
1000f70c:	b25b      	sxtb	r3, r3
1000f70e:	2b00      	cmp	r3, #0
1000f710:	d00b      	beq.n	1000f72a <pow+0x1c2>
1000f712:	2000      	movs	r0, #0
1000f714:	4642      	mov	r2, r8
1000f716:	496d      	ldr	r1, [pc, #436]	; (1000f8cc <pow+0x364>)
1000f718:	6190      	str	r0, [r2, #24]
1000f71a:	61d1      	str	r1, [r2, #28]
1000f71c:	2b02      	cmp	r3, #2
1000f71e:	d109      	bne.n	1000f734 <pow+0x1cc>
1000f720:	f003 fc9e 	bl	10013060 <__errno>
1000f724:	2321      	movs	r3, #33	; 0x21
1000f726:	6003      	str	r3, [r0, #0]
1000f728:	e009      	b.n	1000f73e <pow+0x1d6>
1000f72a:	4642      	mov	r2, r8
1000f72c:	2300      	movs	r3, #0
1000f72e:	2400      	movs	r4, #0
1000f730:	6193      	str	r3, [r2, #24]
1000f732:	61d4      	str	r4, [r2, #28]
1000f734:	4640      	mov	r0, r8
1000f736:	f000 ff0d 	bl	10010554 <matherr>
1000f73a:	2800      	cmp	r0, #0
1000f73c:	d0f0      	beq.n	1000f720 <pow+0x1b8>
1000f73e:	4643      	mov	r3, r8
1000f740:	6a1b      	ldr	r3, [r3, #32]
1000f742:	2b00      	cmp	r3, #0
1000f744:	d004      	beq.n	1000f750 <pow+0x1e8>
1000f746:	f003 fc8b 	bl	10013060 <__errno>
1000f74a:	4643      	mov	r3, r8
1000f74c:	6a1b      	ldr	r3, [r3, #32]
1000f74e:	6003      	str	r3, [r0, #0]
1000f750:	4643      	mov	r3, r8
1000f752:	69dc      	ldr	r4, [r3, #28]
1000f754:	699b      	ldr	r3, [r3, #24]
1000f756:	9300      	str	r3, [sp, #0]
1000f758:	9401      	str	r4, [sp, #4]
1000f75a:	e75a      	b.n	1000f612 <pow+0xaa>
1000f75c:	0020      	movs	r0, r4
1000f75e:	0029      	movs	r1, r5
1000f760:	f000 feee 	bl	10010540 <finite>
1000f764:	2800      	cmp	r0, #0
1000f766:	d100      	bne.n	1000f76a <pow+0x202>
1000f768:	e771      	b.n	1000f64e <pow+0xe6>
1000f76a:	0030      	movs	r0, r6
1000f76c:	0039      	movs	r1, r7
1000f76e:	f000 fee7 	bl	10010540 <finite>
1000f772:	2800      	cmp	r0, #0
1000f774:	d100      	bne.n	1000f778 <pow+0x210>
1000f776:	e76a      	b.n	1000f64e <pow+0xe6>
1000f778:	9802      	ldr	r0, [sp, #8]
1000f77a:	9903      	ldr	r1, [sp, #12]
1000f77c:	000b      	movs	r3, r1
1000f77e:	0002      	movs	r2, r0
1000f780:	f003 faf4 	bl	10012d6c <__aeabi_dcmpun>
1000f784:	ab06      	add	r3, sp, #24
1000f786:	4698      	mov	r8, r3
1000f788:	2800      	cmp	r0, #0
1000f78a:	d17a      	bne.n	1000f882 <pow+0x31a>
1000f78c:	2303      	movs	r3, #3
1000f78e:	4642      	mov	r2, r8
1000f790:	9306      	str	r3, [sp, #24]
1000f792:	4b4c      	ldr	r3, [pc, #304]	; (1000f8c4 <pow+0x35c>)
1000f794:	6210      	str	r0, [r2, #32]
1000f796:	6053      	str	r3, [r2, #4]
1000f798:	465b      	mov	r3, fp
1000f79a:	781b      	ldrb	r3, [r3, #0]
1000f79c:	6094      	str	r4, [r2, #8]
1000f79e:	60d5      	str	r5, [r2, #12]
1000f7a0:	b25b      	sxtb	r3, r3
1000f7a2:	6116      	str	r6, [r2, #16]
1000f7a4:	6157      	str	r7, [r2, #20]
1000f7a6:	4699      	mov	r9, r3
1000f7a8:	2b00      	cmp	r3, #0
1000f7aa:	d148      	bne.n	1000f83e <pow+0x2d6>
1000f7ac:	22e0      	movs	r2, #224	; 0xe0
1000f7ae:	4641      	mov	r1, r8
1000f7b0:	4b47      	ldr	r3, [pc, #284]	; (1000f8d0 <pow+0x368>)
1000f7b2:	0612      	lsls	r2, r2, #24
1000f7b4:	618a      	str	r2, [r1, #24]
1000f7b6:	61cb      	str	r3, [r1, #28]
1000f7b8:	0020      	movs	r0, r4
1000f7ba:	2200      	movs	r2, #0
1000f7bc:	2300      	movs	r3, #0
1000f7be:	0029      	movs	r1, r5
1000f7c0:	f001 f982 	bl	10010ac8 <__aeabi_dcmplt>
1000f7c4:	2800      	cmp	r0, #0
1000f7c6:	d100      	bne.n	1000f7ca <pow+0x262>
1000f7c8:	e773      	b.n	1000f6b2 <pow+0x14a>
1000f7ca:	2200      	movs	r2, #0
1000f7cc:	4b41      	ldr	r3, [pc, #260]	; (1000f8d4 <pow+0x36c>)
1000f7ce:	0030      	movs	r0, r6
1000f7d0:	0039      	movs	r1, r7
1000f7d2:	f002 fcfd 	bl	100121d0 <__aeabi_dmul>
1000f7d6:	0004      	movs	r4, r0
1000f7d8:	000d      	movs	r5, r1
1000f7da:	f000 fec3 	bl	10010564 <rint>
1000f7de:	0002      	movs	r2, r0
1000f7e0:	000b      	movs	r3, r1
1000f7e2:	0020      	movs	r0, r4
1000f7e4:	0029      	movs	r1, r5
1000f7e6:	f001 f969 	bl	10010abc <__aeabi_dcmpeq>
1000f7ea:	2800      	cmp	r0, #0
1000f7ec:	d105      	bne.n	1000f7fa <pow+0x292>
1000f7ee:	22e0      	movs	r2, #224	; 0xe0
1000f7f0:	4b39      	ldr	r3, [pc, #228]	; (1000f8d8 <pow+0x370>)
1000f7f2:	0612      	lsls	r2, r2, #24
1000f7f4:	4641      	mov	r1, r8
1000f7f6:	618a      	str	r2, [r1, #24]
1000f7f8:	61cb      	str	r3, [r1, #28]
1000f7fa:	465b      	mov	r3, fp
1000f7fc:	781b      	ldrb	r3, [r3, #0]
1000f7fe:	b25b      	sxtb	r3, r3
1000f800:	4699      	mov	r9, r3
1000f802:	464b      	mov	r3, r9
1000f804:	2b02      	cmp	r3, #2
1000f806:	d000      	beq.n	1000f80a <pow+0x2a2>
1000f808:	e753      	b.n	1000f6b2 <pow+0x14a>
1000f80a:	e757      	b.n	1000f6bc <pow+0x154>
1000f80c:	ab06      	add	r3, sp, #24
1000f80e:	4698      	mov	r8, r3
1000f810:	2301      	movs	r3, #1
1000f812:	4642      	mov	r2, r8
1000f814:	9306      	str	r3, [sp, #24]
1000f816:	4b2b      	ldr	r3, [pc, #172]	; (1000f8c4 <pow+0x35c>)
1000f818:	6053      	str	r3, [r2, #4]
1000f81a:	4643      	mov	r3, r8
1000f81c:	609c      	str	r4, [r3, #8]
1000f81e:	60dd      	str	r5, [r3, #12]
1000f820:	2400      	movs	r4, #0
1000f822:	9a00      	ldr	r2, [sp, #0]
1000f824:	4d28      	ldr	r5, [pc, #160]	; (1000f8c8 <pow+0x360>)
1000f826:	621a      	str	r2, [r3, #32]
1000f828:	611e      	str	r6, [r3, #16]
1000f82a:	615f      	str	r7, [r3, #20]
1000f82c:	619c      	str	r4, [r3, #24]
1000f82e:	61dd      	str	r5, [r3, #28]
1000f830:	464b      	mov	r3, r9
1000f832:	9400      	str	r4, [sp, #0]
1000f834:	9501      	str	r5, [sp, #4]
1000f836:	2b02      	cmp	r3, #2
1000f838:	d000      	beq.n	1000f83c <pow+0x2d4>
1000f83a:	e77b      	b.n	1000f734 <pow+0x1cc>
1000f83c:	e6e9      	b.n	1000f612 <pow+0xaa>
1000f83e:	2200      	movs	r2, #0
1000f840:	4641      	mov	r1, r8
1000f842:	4b26      	ldr	r3, [pc, #152]	; (1000f8dc <pow+0x374>)
1000f844:	0020      	movs	r0, r4
1000f846:	618a      	str	r2, [r1, #24]
1000f848:	61cb      	str	r3, [r1, #28]
1000f84a:	2200      	movs	r2, #0
1000f84c:	2300      	movs	r3, #0
1000f84e:	0029      	movs	r1, r5
1000f850:	f001 f93a 	bl	10010ac8 <__aeabi_dcmplt>
1000f854:	2800      	cmp	r0, #0
1000f856:	d0d4      	beq.n	1000f802 <pow+0x29a>
1000f858:	2200      	movs	r2, #0
1000f85a:	4b1e      	ldr	r3, [pc, #120]	; (1000f8d4 <pow+0x36c>)
1000f85c:	0030      	movs	r0, r6
1000f85e:	0039      	movs	r1, r7
1000f860:	f002 fcb6 	bl	100121d0 <__aeabi_dmul>
1000f864:	0004      	movs	r4, r0
1000f866:	000d      	movs	r5, r1
1000f868:	f000 fe7c 	bl	10010564 <rint>
1000f86c:	0002      	movs	r2, r0
1000f86e:	000b      	movs	r3, r1
1000f870:	0020      	movs	r0, r4
1000f872:	0029      	movs	r1, r5
1000f874:	f001 f922 	bl	10010abc <__aeabi_dcmpeq>
1000f878:	2800      	cmp	r0, #0
1000f87a:	d1be      	bne.n	1000f7fa <pow+0x292>
1000f87c:	2200      	movs	r2, #0
1000f87e:	4b13      	ldr	r3, [pc, #76]	; (1000f8cc <pow+0x364>)
1000f880:	e7b8      	b.n	1000f7f4 <pow+0x28c>
1000f882:	2301      	movs	r3, #1
1000f884:	4642      	mov	r2, r8
1000f886:	9306      	str	r3, [sp, #24]
1000f888:	4b0e      	ldr	r3, [pc, #56]	; (1000f8c4 <pow+0x35c>)
1000f88a:	6053      	str	r3, [r2, #4]
1000f88c:	4643      	mov	r3, r8
1000f88e:	464a      	mov	r2, r9
1000f890:	609c      	str	r4, [r3, #8]
1000f892:	60dd      	str	r5, [r3, #12]
1000f894:	621a      	str	r2, [r3, #32]
1000f896:	611e      	str	r6, [r3, #16]
1000f898:	615f      	str	r7, [r3, #20]
1000f89a:	2400      	movs	r4, #0
1000f89c:	465b      	mov	r3, fp
1000f89e:	571c      	ldrsb	r4, [r3, r4]
1000f8a0:	2c00      	cmp	r4, #0
1000f8a2:	d100      	bne.n	1000f8a6 <pow+0x33e>
1000f8a4:	e741      	b.n	1000f72a <pow+0x1c2>
1000f8a6:	2300      	movs	r3, #0
1000f8a8:	2200      	movs	r2, #0
1000f8aa:	0019      	movs	r1, r3
1000f8ac:	0010      	movs	r0, r2
1000f8ae:	f002 f86b 	bl	10011988 <__aeabi_ddiv>
1000f8b2:	4643      	mov	r3, r8
1000f8b4:	6198      	str	r0, [r3, #24]
1000f8b6:	61d9      	str	r1, [r3, #28]
1000f8b8:	2c02      	cmp	r4, #2
1000f8ba:	d100      	bne.n	1000f8be <pow+0x356>
1000f8bc:	e730      	b.n	1000f720 <pow+0x1b8>
1000f8be:	e739      	b.n	1000f734 <pow+0x1cc>
1000f8c0:	100152fc 	.word	0x100152fc
1000f8c4:	10015128 	.word	0x10015128
1000f8c8:	3ff00000 	.word	0x3ff00000
1000f8cc:	fff00000 	.word	0xfff00000
1000f8d0:	47efffff 	.word	0x47efffff
1000f8d4:	3fe00000 	.word	0x3fe00000
1000f8d8:	c7efffff 	.word	0xc7efffff
1000f8dc:	7ff00000 	.word	0x7ff00000

1000f8e0 <__ieee754_pow>:
1000f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8e2:	4656      	mov	r6, sl
1000f8e4:	464d      	mov	r5, r9
1000f8e6:	4644      	mov	r4, r8
1000f8e8:	465f      	mov	r7, fp
1000f8ea:	b4f0      	push	{r4, r5, r6, r7}
1000f8ec:	001c      	movs	r4, r3
1000f8ee:	0013      	movs	r3, r2
1000f8f0:	0067      	lsls	r7, r4, #1
1000f8f2:	b091      	sub	sp, #68	; 0x44
1000f8f4:	087f      	lsrs	r7, r7, #1
1000f8f6:	9300      	str	r3, [sp, #0]
1000f8f8:	9401      	str	r4, [sp, #4]
1000f8fa:	0006      	movs	r6, r0
1000f8fc:	000d      	movs	r5, r1
1000f8fe:	4680      	mov	r8, r0
1000f900:	4689      	mov	r9, r1
1000f902:	46a2      	mov	sl, r4
1000f904:	433b      	orrs	r3, r7
1000f906:	d032      	beq.n	1000f96e <__ieee754_pow+0x8e>
1000f908:	4b6e      	ldr	r3, [pc, #440]	; (1000fac4 <__ieee754_pow+0x1e4>)
1000f90a:	006c      	lsls	r4, r5, #1
1000f90c:	0864      	lsrs	r4, r4, #1
1000f90e:	429c      	cmp	r4, r3
1000f910:	dc29      	bgt.n	1000f966 <__ieee754_pow+0x86>
1000f912:	d026      	beq.n	1000f962 <__ieee754_pow+0x82>
1000f914:	429f      	cmp	r7, r3
1000f916:	dc26      	bgt.n	1000f966 <__ieee754_pow+0x86>
1000f918:	4b6a      	ldr	r3, [pc, #424]	; (1000fac4 <__ieee754_pow+0x1e4>)
1000f91a:	429f      	cmp	r7, r3
1000f91c:	d100      	bne.n	1000f920 <__ieee754_pow+0x40>
1000f91e:	e089      	b.n	1000fa34 <__ieee754_pow+0x154>
1000f920:	2300      	movs	r3, #0
1000f922:	469b      	mov	fp, r3
1000f924:	464b      	mov	r3, r9
1000f926:	2b00      	cmp	r3, #0
1000f928:	da00      	bge.n	1000f92c <__ieee754_pow+0x4c>
1000f92a:	e087      	b.n	1000fa3c <__ieee754_pow+0x15c>
1000f92c:	2a00      	cmp	r2, #0
1000f92e:	d12f      	bne.n	1000f990 <__ieee754_pow+0xb0>
1000f930:	4b64      	ldr	r3, [pc, #400]	; (1000fac4 <__ieee754_pow+0x1e4>)
1000f932:	429f      	cmp	r7, r3
1000f934:	d100      	bne.n	1000f938 <__ieee754_pow+0x58>
1000f936:	e09f      	b.n	1000fa78 <__ieee754_pow+0x198>
1000f938:	4b63      	ldr	r3, [pc, #396]	; (1000fac8 <__ieee754_pow+0x1e8>)
1000f93a:	429f      	cmp	r7, r3
1000f93c:	d05d      	beq.n	1000f9fa <__ieee754_pow+0x11a>
1000f93e:	2380      	movs	r3, #128	; 0x80
1000f940:	05db      	lsls	r3, r3, #23
1000f942:	459a      	cmp	sl, r3
1000f944:	d101      	bne.n	1000f94a <__ieee754_pow+0x6a>
1000f946:	f000 fbc1 	bl	100100cc <__ieee754_pow+0x7ec>
1000f94a:	4b60      	ldr	r3, [pc, #384]	; (1000facc <__ieee754_pow+0x1ec>)
1000f94c:	459a      	cmp	sl, r3
1000f94e:	d11f      	bne.n	1000f990 <__ieee754_pow+0xb0>
1000f950:	464b      	mov	r3, r9
1000f952:	2b00      	cmp	r3, #0
1000f954:	db1c      	blt.n	1000f990 <__ieee754_pow+0xb0>
1000f956:	0030      	movs	r0, r6
1000f958:	0029      	movs	r1, r5
1000f95a:	f000 fcf7 	bl	1001034c <__ieee754_sqrt>
1000f95e:	0006      	movs	r6, r0
1000f960:	e007      	b.n	1000f972 <__ieee754_pow+0x92>
1000f962:	2800      	cmp	r0, #0
1000f964:	d00d      	beq.n	1000f982 <__ieee754_pow+0xa2>
1000f966:	4b5a      	ldr	r3, [pc, #360]	; (1000fad0 <__ieee754_pow+0x1f0>)
1000f968:	18e0      	adds	r0, r4, r3
1000f96a:	4330      	orrs	r0, r6
1000f96c:	d10b      	bne.n	1000f986 <__ieee754_pow+0xa6>
1000f96e:	2600      	movs	r6, #0
1000f970:	4955      	ldr	r1, [pc, #340]	; (1000fac8 <__ieee754_pow+0x1e8>)
1000f972:	0030      	movs	r0, r6
1000f974:	b011      	add	sp, #68	; 0x44
1000f976:	bc3c      	pop	{r2, r3, r4, r5}
1000f978:	4690      	mov	r8, r2
1000f97a:	4699      	mov	r9, r3
1000f97c:	46a2      	mov	sl, r4
1000f97e:	46ab      	mov	fp, r5
1000f980:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f982:	42a7      	cmp	r7, r4
1000f984:	ddc8      	ble.n	1000f918 <__ieee754_pow+0x38>
1000f986:	4853      	ldr	r0, [pc, #332]	; (1000fad4 <__ieee754_pow+0x1f4>)
1000f988:	f000 fde6 	bl	10010558 <nan>
1000f98c:	0006      	movs	r6, r0
1000f98e:	e7f0      	b.n	1000f972 <__ieee754_pow+0x92>
1000f990:	0030      	movs	r0, r6
1000f992:	0029      	movs	r1, r5
1000f994:	f000 fdd0 	bl	10010538 <fabs>
1000f998:	4643      	mov	r3, r8
1000f99a:	2b00      	cmp	r3, #0
1000f99c:	d01d      	beq.n	1000f9da <__ieee754_pow+0xfa>
1000f99e:	0feb      	lsrs	r3, r5, #31
1000f9a0:	3b01      	subs	r3, #1
1000f9a2:	4698      	mov	r8, r3
1000f9a4:	465b      	mov	r3, fp
1000f9a6:	4642      	mov	r2, r8
1000f9a8:	4313      	orrs	r3, r2
1000f9aa:	d079      	beq.n	1000faa0 <__ieee754_pow+0x1c0>
1000f9ac:	4b4a      	ldr	r3, [pc, #296]	; (1000fad8 <__ieee754_pow+0x1f8>)
1000f9ae:	429f      	cmp	r7, r3
1000f9b0:	dc00      	bgt.n	1000f9b4 <__ieee754_pow+0xd4>
1000f9b2:	e09f      	b.n	1000faf4 <__ieee754_pow+0x214>
1000f9b4:	4b49      	ldr	r3, [pc, #292]	; (1000fadc <__ieee754_pow+0x1fc>)
1000f9b6:	429f      	cmp	r7, r3
1000f9b8:	dc01      	bgt.n	1000f9be <__ieee754_pow+0xde>
1000f9ba:	f000 fbce 	bl	1001015a <__ieee754_pow+0x87a>
1000f9be:	4b48      	ldr	r3, [pc, #288]	; (1000fae0 <__ieee754_pow+0x200>)
1000f9c0:	429c      	cmp	r4, r3
1000f9c2:	dd79      	ble.n	1000fab8 <__ieee754_pow+0x1d8>
1000f9c4:	4653      	mov	r3, sl
1000f9c6:	2b00      	cmp	r3, #0
1000f9c8:	dd79      	ble.n	1000fabe <__ieee754_pow+0x1de>
1000f9ca:	4a46      	ldr	r2, [pc, #280]	; (1000fae4 <__ieee754_pow+0x204>)
1000f9cc:	4b46      	ldr	r3, [pc, #280]	; (1000fae8 <__ieee754_pow+0x208>)
1000f9ce:	0010      	movs	r0, r2
1000f9d0:	0019      	movs	r1, r3
1000f9d2:	f002 fbfd 	bl	100121d0 <__aeabi_dmul>
1000f9d6:	0006      	movs	r6, r0
1000f9d8:	e7cb      	b.n	1000f972 <__ieee754_pow+0x92>
1000f9da:	2c00      	cmp	r4, #0
1000f9dc:	d004      	beq.n	1000f9e8 <__ieee754_pow+0x108>
1000f9de:	4a3a      	ldr	r2, [pc, #232]	; (1000fac8 <__ieee754_pow+0x1e8>)
1000f9e0:	00ab      	lsls	r3, r5, #2
1000f9e2:	089b      	lsrs	r3, r3, #2
1000f9e4:	4293      	cmp	r3, r2
1000f9e6:	d1da      	bne.n	1000f99e <__ieee754_pow+0xbe>
1000f9e8:	4653      	mov	r3, sl
1000f9ea:	2b00      	cmp	r3, #0
1000f9ec:	da00      	bge.n	1000f9f0 <__ieee754_pow+0x110>
1000f9ee:	e3ad      	b.n	1001014c <__ieee754_pow+0x86c>
1000f9f0:	464b      	mov	r3, r9
1000f9f2:	2b00      	cmp	r3, #0
1000f9f4:	db0d      	blt.n	1000fa12 <__ieee754_pow+0x132>
1000f9f6:	0006      	movs	r6, r0
1000f9f8:	e7bb      	b.n	1000f972 <__ieee754_pow+0x92>
1000f9fa:	4653      	mov	r3, sl
1000f9fc:	0029      	movs	r1, r5
1000f9fe:	2b00      	cmp	r3, #0
1000fa00:	dab7      	bge.n	1000f972 <__ieee754_pow+0x92>
1000fa02:	0032      	movs	r2, r6
1000fa04:	002b      	movs	r3, r5
1000fa06:	2000      	movs	r0, #0
1000fa08:	492f      	ldr	r1, [pc, #188]	; (1000fac8 <__ieee754_pow+0x1e8>)
1000fa0a:	f001 ffbd 	bl	10011988 <__aeabi_ddiv>
1000fa0e:	0006      	movs	r6, r0
1000fa10:	e7af      	b.n	1000f972 <__ieee754_pow+0x92>
1000fa12:	4b2f      	ldr	r3, [pc, #188]	; (1000fad0 <__ieee754_pow+0x1f0>)
1000fa14:	469c      	mov	ip, r3
1000fa16:	465b      	mov	r3, fp
1000fa18:	4464      	add	r4, ip
1000fa1a:	431c      	orrs	r4, r3
1000fa1c:	d101      	bne.n	1000fa22 <__ieee754_pow+0x142>
1000fa1e:	f000 fc2b 	bl	10010278 <__ieee754_pow+0x998>
1000fa22:	465b      	mov	r3, fp
1000fa24:	0006      	movs	r6, r0
1000fa26:	2b01      	cmp	r3, #1
1000fa28:	d1a3      	bne.n	1000f972 <__ieee754_pow+0x92>
1000fa2a:	2380      	movs	r3, #128	; 0x80
1000fa2c:	061b      	lsls	r3, r3, #24
1000fa2e:	469c      	mov	ip, r3
1000fa30:	4461      	add	r1, ip
1000fa32:	e79e      	b.n	1000f972 <__ieee754_pow+0x92>
1000fa34:	2a00      	cmp	r2, #0
1000fa36:	d100      	bne.n	1000fa3a <__ieee754_pow+0x15a>
1000fa38:	e772      	b.n	1000f920 <__ieee754_pow+0x40>
1000fa3a:	e794      	b.n	1000f966 <__ieee754_pow+0x86>
1000fa3c:	4b2b      	ldr	r3, [pc, #172]	; (1000faec <__ieee754_pow+0x20c>)
1000fa3e:	429f      	cmp	r7, r3
1000fa40:	dc2b      	bgt.n	1000fa9a <__ieee754_pow+0x1ba>
1000fa42:	4b27      	ldr	r3, [pc, #156]	; (1000fae0 <__ieee754_pow+0x200>)
1000fa44:	429f      	cmp	r7, r3
1000fa46:	dc00      	bgt.n	1000fa4a <__ieee754_pow+0x16a>
1000fa48:	e770      	b.n	1000f92c <__ieee754_pow+0x4c>
1000fa4a:	4929      	ldr	r1, [pc, #164]	; (1000faf0 <__ieee754_pow+0x210>)
1000fa4c:	153b      	asrs	r3, r7, #20
1000fa4e:	468c      	mov	ip, r1
1000fa50:	4463      	add	r3, ip
1000fa52:	2b14      	cmp	r3, #20
1000fa54:	dc01      	bgt.n	1000fa5a <__ieee754_pow+0x17a>
1000fa56:	f000 fbf2 	bl	1001023e <__ieee754_pow+0x95e>
1000fa5a:	2134      	movs	r1, #52	; 0x34
1000fa5c:	1acb      	subs	r3, r1, r3
1000fa5e:	9900      	ldr	r1, [sp, #0]
1000fa60:	40d9      	lsrs	r1, r3
1000fa62:	0008      	movs	r0, r1
1000fa64:	4098      	lsls	r0, r3
1000fa66:	4282      	cmp	r2, r0
1000fa68:	d000      	beq.n	1000fa6c <__ieee754_pow+0x18c>
1000fa6a:	e75f      	b.n	1000f92c <__ieee754_pow+0x4c>
1000fa6c:	2301      	movs	r3, #1
1000fa6e:	4019      	ands	r1, r3
1000fa70:	3301      	adds	r3, #1
1000fa72:	1a5b      	subs	r3, r3, r1
1000fa74:	469b      	mov	fp, r3
1000fa76:	e759      	b.n	1000f92c <__ieee754_pow+0x4c>
1000fa78:	4b15      	ldr	r3, [pc, #84]	; (1000fad0 <__ieee754_pow+0x1f0>)
1000fa7a:	18e0      	adds	r0, r4, r3
1000fa7c:	4306      	orrs	r6, r0
1000fa7e:	d100      	bne.n	1000fa82 <__ieee754_pow+0x1a2>
1000fa80:	e775      	b.n	1000f96e <__ieee754_pow+0x8e>
1000fa82:	4b17      	ldr	r3, [pc, #92]	; (1000fae0 <__ieee754_pow+0x200>)
1000fa84:	429c      	cmp	r4, r3
1000fa86:	dc00      	bgt.n	1000fa8a <__ieee754_pow+0x1aa>
1000fa88:	e351      	b.n	1001012e <__ieee754_pow+0x84e>
1000fa8a:	4653      	mov	r3, sl
1000fa8c:	2b00      	cmp	r3, #0
1000fa8e:	db16      	blt.n	1000fabe <__ieee754_pow+0x1de>
1000fa90:	9b00      	ldr	r3, [sp, #0]
1000fa92:	9c01      	ldr	r4, [sp, #4]
1000fa94:	001e      	movs	r6, r3
1000fa96:	0021      	movs	r1, r4
1000fa98:	e76b      	b.n	1000f972 <__ieee754_pow+0x92>
1000fa9a:	2302      	movs	r3, #2
1000fa9c:	469b      	mov	fp, r3
1000fa9e:	e745      	b.n	1000f92c <__ieee754_pow+0x4c>
1000faa0:	0032      	movs	r2, r6
1000faa2:	002b      	movs	r3, r5
1000faa4:	0030      	movs	r0, r6
1000faa6:	0029      	movs	r1, r5
1000faa8:	f002 fe0c 	bl	100126c4 <__aeabi_dsub>
1000faac:	0002      	movs	r2, r0
1000faae:	000b      	movs	r3, r1
1000fab0:	f001 ff6a 	bl	10011988 <__aeabi_ddiv>
1000fab4:	0006      	movs	r6, r0
1000fab6:	e75c      	b.n	1000f972 <__ieee754_pow+0x92>
1000fab8:	4653      	mov	r3, sl
1000faba:	2b00      	cmp	r3, #0
1000fabc:	db85      	blt.n	1000f9ca <__ieee754_pow+0xea>
1000fabe:	2600      	movs	r6, #0
1000fac0:	2100      	movs	r1, #0
1000fac2:	e756      	b.n	1000f972 <__ieee754_pow+0x92>
1000fac4:	7ff00000 	.word	0x7ff00000
1000fac8:	3ff00000 	.word	0x3ff00000
1000facc:	3fe00000 	.word	0x3fe00000
1000fad0:	c0100000 	.word	0xc0100000
1000fad4:	10014c58 	.word	0x10014c58
1000fad8:	41e00000 	.word	0x41e00000
1000fadc:	43f00000 	.word	0x43f00000
1000fae0:	3fefffff 	.word	0x3fefffff
1000fae4:	8800759c 	.word	0x8800759c
1000fae8:	7e37e43c 	.word	0x7e37e43c
1000faec:	433fffff 	.word	0x433fffff
1000faf0:	fffffc01 	.word	0xfffffc01
1000faf4:	4be8      	ldr	r3, [pc, #928]	; (1000fe98 <__ieee754_pow+0x5b8>)
1000faf6:	2200      	movs	r2, #0
1000faf8:	429c      	cmp	r4, r3
1000fafa:	dc06      	bgt.n	1000fb0a <__ieee754_pow+0x22a>
1000fafc:	2200      	movs	r2, #0
1000fafe:	4be7      	ldr	r3, [pc, #924]	; (1000fe9c <__ieee754_pow+0x5bc>)
1000fb00:	f002 fb66 	bl	100121d0 <__aeabi_dmul>
1000fb04:	2235      	movs	r2, #53	; 0x35
1000fb06:	000c      	movs	r4, r1
1000fb08:	4252      	negs	r2, r2
1000fb0a:	4de5      	ldr	r5, [pc, #916]	; (1000fea0 <__ieee754_pow+0x5c0>)
1000fb0c:	1523      	asrs	r3, r4, #20
1000fb0e:	46ac      	mov	ip, r5
1000fb10:	4463      	add	r3, ip
1000fb12:	4699      	mov	r9, r3
1000fb14:	0324      	lsls	r4, r4, #12
1000fb16:	4de3      	ldr	r5, [pc, #908]	; (1000fea4 <__ieee754_pow+0x5c4>)
1000fb18:	4be3      	ldr	r3, [pc, #908]	; (1000fea8 <__ieee754_pow+0x5c8>)
1000fb1a:	0b24      	lsrs	r4, r4, #12
1000fb1c:	4491      	add	r9, r2
1000fb1e:	4325      	orrs	r5, r4
1000fb20:	429c      	cmp	r4, r3
1000fb22:	dd09      	ble.n	1000fb38 <__ieee754_pow+0x258>
1000fb24:	4be1      	ldr	r3, [pc, #900]	; (1000feac <__ieee754_pow+0x5cc>)
1000fb26:	429c      	cmp	r4, r3
1000fb28:	dc00      	bgt.n	1000fb2c <__ieee754_pow+0x24c>
1000fb2a:	e3a9      	b.n	10010280 <__ieee754_pow+0x9a0>
1000fb2c:	2301      	movs	r3, #1
1000fb2e:	469c      	mov	ip, r3
1000fb30:	4bdf      	ldr	r3, [pc, #892]	; (1000feb0 <__ieee754_pow+0x5d0>)
1000fb32:	44e1      	add	r9, ip
1000fb34:	469c      	mov	ip, r3
1000fb36:	4465      	add	r5, ip
1000fb38:	2300      	movs	r3, #0
1000fb3a:	2400      	movs	r4, #0
1000fb3c:	2200      	movs	r2, #0
1000fb3e:	9308      	str	r3, [sp, #32]
1000fb40:	9409      	str	r4, [sp, #36]	; 0x24
1000fb42:	930c      	str	r3, [sp, #48]	; 0x30
1000fb44:	940d      	str	r4, [sp, #52]	; 0x34
1000fb46:	2400      	movs	r4, #0
1000fb48:	4bd6      	ldr	r3, [pc, #856]	; (1000fea4 <__ieee754_pow+0x5c4>)
1000fb4a:	9206      	str	r2, [sp, #24]
1000fb4c:	9307      	str	r3, [sp, #28]
1000fb4e:	9a06      	ldr	r2, [sp, #24]
1000fb50:	9b07      	ldr	r3, [sp, #28]
1000fb52:	0029      	movs	r1, r5
1000fb54:	900a      	str	r0, [sp, #40]	; 0x28
1000fb56:	910b      	str	r1, [sp, #44]	; 0x2c
1000fb58:	f002 fdb4 	bl	100126c4 <__aeabi_dsub>
1000fb5c:	9a06      	ldr	r2, [sp, #24]
1000fb5e:	9b07      	ldr	r3, [sp, #28]
1000fb60:	0006      	movs	r6, r0
1000fb62:	000f      	movs	r7, r1
1000fb64:	980a      	ldr	r0, [sp, #40]	; 0x28
1000fb66:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000fb68:	f001 fbe2 	bl	10011330 <__aeabi_dadd>
1000fb6c:	0002      	movs	r2, r0
1000fb6e:	000b      	movs	r3, r1
1000fb70:	2000      	movs	r0, #0
1000fb72:	49cc      	ldr	r1, [pc, #816]	; (1000fea4 <__ieee754_pow+0x5c4>)
1000fb74:	f001 ff08 	bl	10011988 <__aeabi_ddiv>
1000fb78:	000a      	movs	r2, r1
1000fb7a:	0001      	movs	r1, r0
1000fb7c:	0013      	movs	r3, r2
1000fb7e:	910e      	str	r1, [sp, #56]	; 0x38
1000fb80:	920f      	str	r2, [sp, #60]	; 0x3c
1000fb82:	0002      	movs	r2, r0
1000fb84:	0039      	movs	r1, r7
1000fb86:	0030      	movs	r0, r6
1000fb88:	f002 fb22 	bl	100121d0 <__aeabi_dmul>
1000fb8c:	000a      	movs	r2, r1
1000fb8e:	0001      	movs	r1, r0
1000fb90:	2080      	movs	r0, #128	; 0x80
1000fb92:	9104      	str	r1, [sp, #16]
1000fb94:	9205      	str	r2, [sp, #20]
1000fb96:	0013      	movs	r3, r2
1000fb98:	2200      	movs	r2, #0
1000fb9a:	2180      	movs	r1, #128	; 0x80
1000fb9c:	0300      	lsls	r0, r0, #12
1000fb9e:	4684      	mov	ip, r0
1000fba0:	9202      	str	r2, [sp, #8]
1000fba2:	9303      	str	r3, [sp, #12]
1000fba4:	2200      	movs	r2, #0
1000fba6:	0589      	lsls	r1, r1, #22
1000fba8:	106d      	asrs	r5, r5, #1
1000fbaa:	430d      	orrs	r5, r1
1000fbac:	4465      	add	r5, ip
1000fbae:	192b      	adds	r3, r5, r4
1000fbb0:	9802      	ldr	r0, [sp, #8]
1000fbb2:	9903      	ldr	r1, [sp, #12]
1000fbb4:	0014      	movs	r4, r2
1000fbb6:	001d      	movs	r5, r3
1000fbb8:	f002 fb0a 	bl	100121d0 <__aeabi_dmul>
1000fbbc:	0002      	movs	r2, r0
1000fbbe:	000b      	movs	r3, r1
1000fbc0:	0030      	movs	r0, r6
1000fbc2:	0039      	movs	r1, r7
1000fbc4:	f002 fd7e 	bl	100126c4 <__aeabi_dsub>
1000fbc8:	9a06      	ldr	r2, [sp, #24]
1000fbca:	9b07      	ldr	r3, [sp, #28]
1000fbcc:	0006      	movs	r6, r0
1000fbce:	000f      	movs	r7, r1
1000fbd0:	0020      	movs	r0, r4
1000fbd2:	0029      	movs	r1, r5
1000fbd4:	f002 fd76 	bl	100126c4 <__aeabi_dsub>
1000fbd8:	0002      	movs	r2, r0
1000fbda:	000b      	movs	r3, r1
1000fbdc:	980a      	ldr	r0, [sp, #40]	; 0x28
1000fbde:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000fbe0:	f002 fd70 	bl	100126c4 <__aeabi_dsub>
1000fbe4:	9a02      	ldr	r2, [sp, #8]
1000fbe6:	9b03      	ldr	r3, [sp, #12]
1000fbe8:	f002 faf2 	bl	100121d0 <__aeabi_dmul>
1000fbec:	0002      	movs	r2, r0
1000fbee:	000b      	movs	r3, r1
1000fbf0:	0030      	movs	r0, r6
1000fbf2:	0039      	movs	r1, r7
1000fbf4:	f002 fd66 	bl	100126c4 <__aeabi_dsub>
1000fbf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000fbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000fbfc:	f002 fae8 	bl	100121d0 <__aeabi_dmul>
1000fc00:	9d04      	ldr	r5, [sp, #16]
1000fc02:	9e05      	ldr	r6, [sp, #20]
1000fc04:	9006      	str	r0, [sp, #24]
1000fc06:	9107      	str	r1, [sp, #28]
1000fc08:	002a      	movs	r2, r5
1000fc0a:	0033      	movs	r3, r6
1000fc0c:	0028      	movs	r0, r5
1000fc0e:	0031      	movs	r1, r6
1000fc10:	f002 fade 	bl	100121d0 <__aeabi_dmul>
1000fc14:	0006      	movs	r6, r0
1000fc16:	000f      	movs	r7, r1
1000fc18:	4aa6      	ldr	r2, [pc, #664]	; (1000feb4 <__ieee754_pow+0x5d4>)
1000fc1a:	4ba7      	ldr	r3, [pc, #668]	; (1000feb8 <__ieee754_pow+0x5d8>)
1000fc1c:	f002 fad8 	bl	100121d0 <__aeabi_dmul>
1000fc20:	4aa6      	ldr	r2, [pc, #664]	; (1000febc <__ieee754_pow+0x5dc>)
1000fc22:	4ba7      	ldr	r3, [pc, #668]	; (1000fec0 <__ieee754_pow+0x5e0>)
1000fc24:	f001 fb84 	bl	10011330 <__aeabi_dadd>
1000fc28:	0032      	movs	r2, r6
1000fc2a:	003b      	movs	r3, r7
1000fc2c:	f002 fad0 	bl	100121d0 <__aeabi_dmul>
1000fc30:	4aa4      	ldr	r2, [pc, #656]	; (1000fec4 <__ieee754_pow+0x5e4>)
1000fc32:	4ba5      	ldr	r3, [pc, #660]	; (1000fec8 <__ieee754_pow+0x5e8>)
1000fc34:	f001 fb7c 	bl	10011330 <__aeabi_dadd>
1000fc38:	0032      	movs	r2, r6
1000fc3a:	003b      	movs	r3, r7
1000fc3c:	f002 fac8 	bl	100121d0 <__aeabi_dmul>
1000fc40:	4aa2      	ldr	r2, [pc, #648]	; (1000fecc <__ieee754_pow+0x5ec>)
1000fc42:	4ba3      	ldr	r3, [pc, #652]	; (1000fed0 <__ieee754_pow+0x5f0>)
1000fc44:	f001 fb74 	bl	10011330 <__aeabi_dadd>
1000fc48:	0032      	movs	r2, r6
1000fc4a:	003b      	movs	r3, r7
1000fc4c:	f002 fac0 	bl	100121d0 <__aeabi_dmul>
1000fc50:	4aa0      	ldr	r2, [pc, #640]	; (1000fed4 <__ieee754_pow+0x5f4>)
1000fc52:	4ba1      	ldr	r3, [pc, #644]	; (1000fed8 <__ieee754_pow+0x5f8>)
1000fc54:	f001 fb6c 	bl	10011330 <__aeabi_dadd>
1000fc58:	0032      	movs	r2, r6
1000fc5a:	003b      	movs	r3, r7
1000fc5c:	f002 fab8 	bl	100121d0 <__aeabi_dmul>
1000fc60:	4a9e      	ldr	r2, [pc, #632]	; (1000fedc <__ieee754_pow+0x5fc>)
1000fc62:	4b9f      	ldr	r3, [pc, #636]	; (1000fee0 <__ieee754_pow+0x600>)
1000fc64:	f001 fb64 	bl	10011330 <__aeabi_dadd>
1000fc68:	0032      	movs	r2, r6
1000fc6a:	0004      	movs	r4, r0
1000fc6c:	000d      	movs	r5, r1
1000fc6e:	003b      	movs	r3, r7
1000fc70:	0030      	movs	r0, r6
1000fc72:	0039      	movs	r1, r7
1000fc74:	f002 faac 	bl	100121d0 <__aeabi_dmul>
1000fc78:	0002      	movs	r2, r0
1000fc7a:	000b      	movs	r3, r1
1000fc7c:	0020      	movs	r0, r4
1000fc7e:	0029      	movs	r1, r5
1000fc80:	f002 faa6 	bl	100121d0 <__aeabi_dmul>
1000fc84:	9e02      	ldr	r6, [sp, #8]
1000fc86:	9f03      	ldr	r7, [sp, #12]
1000fc88:	0004      	movs	r4, r0
1000fc8a:	000d      	movs	r5, r1
1000fc8c:	9804      	ldr	r0, [sp, #16]
1000fc8e:	9905      	ldr	r1, [sp, #20]
1000fc90:	0032      	movs	r2, r6
1000fc92:	003b      	movs	r3, r7
1000fc94:	f001 fb4c 	bl	10011330 <__aeabi_dadd>
1000fc98:	9a06      	ldr	r2, [sp, #24]
1000fc9a:	9b07      	ldr	r3, [sp, #28]
1000fc9c:	f002 fa98 	bl	100121d0 <__aeabi_dmul>
1000fca0:	0022      	movs	r2, r4
1000fca2:	002b      	movs	r3, r5
1000fca4:	f001 fb44 	bl	10011330 <__aeabi_dadd>
1000fca8:	0032      	movs	r2, r6
1000fcaa:	900a      	str	r0, [sp, #40]	; 0x28
1000fcac:	910b      	str	r1, [sp, #44]	; 0x2c
1000fcae:	003b      	movs	r3, r7
1000fcb0:	0030      	movs	r0, r6
1000fcb2:	0039      	movs	r1, r7
1000fcb4:	9602      	str	r6, [sp, #8]
1000fcb6:	9703      	str	r7, [sp, #12]
1000fcb8:	f002 fa8a 	bl	100121d0 <__aeabi_dmul>
1000fcbc:	2200      	movs	r2, #0
1000fcbe:	4b89      	ldr	r3, [pc, #548]	; (1000fee4 <__ieee754_pow+0x604>)
1000fcc0:	0004      	movs	r4, r0
1000fcc2:	000d      	movs	r5, r1
1000fcc4:	f001 fb34 	bl	10011330 <__aeabi_dadd>
1000fcc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000fcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000fccc:	f001 fb30 	bl	10011330 <__aeabi_dadd>
1000fcd0:	2600      	movs	r6, #0
1000fcd2:	000f      	movs	r7, r1
1000fcd4:	0032      	movs	r2, r6
1000fcd6:	000b      	movs	r3, r1
1000fcd8:	9802      	ldr	r0, [sp, #8]
1000fcda:	9903      	ldr	r1, [sp, #12]
1000fcdc:	f002 fa78 	bl	100121d0 <__aeabi_dmul>
1000fce0:	2200      	movs	r2, #0
1000fce2:	9002      	str	r0, [sp, #8]
1000fce4:	9103      	str	r1, [sp, #12]
1000fce6:	4b7f      	ldr	r3, [pc, #508]	; (1000fee4 <__ieee754_pow+0x604>)
1000fce8:	0030      	movs	r0, r6
1000fcea:	0039      	movs	r1, r7
1000fcec:	f002 fcea 	bl	100126c4 <__aeabi_dsub>
1000fcf0:	0022      	movs	r2, r4
1000fcf2:	002b      	movs	r3, r5
1000fcf4:	f002 fce6 	bl	100126c4 <__aeabi_dsub>
1000fcf8:	0002      	movs	r2, r0
1000fcfa:	000b      	movs	r3, r1
1000fcfc:	980a      	ldr	r0, [sp, #40]	; 0x28
1000fcfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000fd00:	f002 fce0 	bl	100126c4 <__aeabi_dsub>
1000fd04:	9a04      	ldr	r2, [sp, #16]
1000fd06:	9b05      	ldr	r3, [sp, #20]
1000fd08:	f002 fa62 	bl	100121d0 <__aeabi_dmul>
1000fd0c:	0032      	movs	r2, r6
1000fd0e:	0004      	movs	r4, r0
1000fd10:	000d      	movs	r5, r1
1000fd12:	9806      	ldr	r0, [sp, #24]
1000fd14:	9907      	ldr	r1, [sp, #28]
1000fd16:	003b      	movs	r3, r7
1000fd18:	f002 fa5a 	bl	100121d0 <__aeabi_dmul>
1000fd1c:	0002      	movs	r2, r0
1000fd1e:	000b      	movs	r3, r1
1000fd20:	0020      	movs	r0, r4
1000fd22:	0029      	movs	r1, r5
1000fd24:	f001 fb04 	bl	10011330 <__aeabi_dadd>
1000fd28:	0004      	movs	r4, r0
1000fd2a:	000d      	movs	r5, r1
1000fd2c:	0002      	movs	r2, r0
1000fd2e:	000b      	movs	r3, r1
1000fd30:	9802      	ldr	r0, [sp, #8]
1000fd32:	9903      	ldr	r1, [sp, #12]
1000fd34:	f001 fafc 	bl	10011330 <__aeabi_dadd>
1000fd38:	2600      	movs	r6, #0
1000fd3a:	22e0      	movs	r2, #224	; 0xe0
1000fd3c:	4b6a      	ldr	r3, [pc, #424]	; (1000fee8 <__ieee754_pow+0x608>)
1000fd3e:	0612      	lsls	r2, r2, #24
1000fd40:	0030      	movs	r0, r6
1000fd42:	000f      	movs	r7, r1
1000fd44:	f002 fa44 	bl	100121d0 <__aeabi_dmul>
1000fd48:	9a02      	ldr	r2, [sp, #8]
1000fd4a:	9b03      	ldr	r3, [sp, #12]
1000fd4c:	9004      	str	r0, [sp, #16]
1000fd4e:	9105      	str	r1, [sp, #20]
1000fd50:	0030      	movs	r0, r6
1000fd52:	0039      	movs	r1, r7
1000fd54:	f002 fcb6 	bl	100126c4 <__aeabi_dsub>
1000fd58:	0002      	movs	r2, r0
1000fd5a:	000b      	movs	r3, r1
1000fd5c:	0020      	movs	r0, r4
1000fd5e:	0029      	movs	r1, r5
1000fd60:	f002 fcb0 	bl	100126c4 <__aeabi_dsub>
1000fd64:	4a61      	ldr	r2, [pc, #388]	; (1000feec <__ieee754_pow+0x60c>)
1000fd66:	4b60      	ldr	r3, [pc, #384]	; (1000fee8 <__ieee754_pow+0x608>)
1000fd68:	f002 fa32 	bl	100121d0 <__aeabi_dmul>
1000fd6c:	4a60      	ldr	r2, [pc, #384]	; (1000fef0 <__ieee754_pow+0x610>)
1000fd6e:	0004      	movs	r4, r0
1000fd70:	000d      	movs	r5, r1
1000fd72:	4b60      	ldr	r3, [pc, #384]	; (1000fef4 <__ieee754_pow+0x614>)
1000fd74:	0030      	movs	r0, r6
1000fd76:	0039      	movs	r1, r7
1000fd78:	f002 fa2a 	bl	100121d0 <__aeabi_dmul>
1000fd7c:	0002      	movs	r2, r0
1000fd7e:	000b      	movs	r3, r1
1000fd80:	0020      	movs	r0, r4
1000fd82:	0029      	movs	r1, r5
1000fd84:	f001 fad4 	bl	10011330 <__aeabi_dadd>
1000fd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000fd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fd8c:	f001 fad0 	bl	10011330 <__aeabi_dadd>
1000fd90:	0006      	movs	r6, r0
1000fd92:	4648      	mov	r0, r9
1000fd94:	000f      	movs	r7, r1
1000fd96:	f003 f83f 	bl	10012e18 <__aeabi_i2d>
1000fd9a:	0004      	movs	r4, r0
1000fd9c:	000d      	movs	r5, r1
1000fd9e:	9804      	ldr	r0, [sp, #16]
1000fda0:	9905      	ldr	r1, [sp, #20]
1000fda2:	0032      	movs	r2, r6
1000fda4:	003b      	movs	r3, r7
1000fda6:	f001 fac3 	bl	10011330 <__aeabi_dadd>
1000fdaa:	9a08      	ldr	r2, [sp, #32]
1000fdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000fdae:	f001 fabf 	bl	10011330 <__aeabi_dadd>
1000fdb2:	0022      	movs	r2, r4
1000fdb4:	002b      	movs	r3, r5
1000fdb6:	f001 fabb 	bl	10011330 <__aeabi_dadd>
1000fdba:	2000      	movs	r0, #0
1000fdbc:	0022      	movs	r2, r4
1000fdbe:	002b      	movs	r3, r5
1000fdc0:	9002      	str	r0, [sp, #8]
1000fdc2:	9103      	str	r1, [sp, #12]
1000fdc4:	f002 fc7e 	bl	100126c4 <__aeabi_dsub>
1000fdc8:	9a08      	ldr	r2, [sp, #32]
1000fdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000fdcc:	f002 fc7a 	bl	100126c4 <__aeabi_dsub>
1000fdd0:	9a04      	ldr	r2, [sp, #16]
1000fdd2:	9b05      	ldr	r3, [sp, #20]
1000fdd4:	f002 fc76 	bl	100126c4 <__aeabi_dsub>
1000fdd8:	0002      	movs	r2, r0
1000fdda:	000b      	movs	r3, r1
1000fddc:	0030      	movs	r0, r6
1000fdde:	0039      	movs	r1, r7
1000fde0:	f002 fc70 	bl	100126c4 <__aeabi_dsub>
1000fde4:	9004      	str	r0, [sp, #16]
1000fde6:	9105      	str	r1, [sp, #20]
1000fde8:	465b      	mov	r3, fp
1000fdea:	4642      	mov	r2, r8
1000fdec:	3b01      	subs	r3, #1
1000fdee:	4313      	orrs	r3, r2
1000fdf0:	d100      	bne.n	1000fdf4 <__ieee754_pow+0x514>
1000fdf2:	e197      	b.n	10010124 <__ieee754_pow+0x844>
1000fdf4:	2300      	movs	r3, #0
1000fdf6:	4c2b      	ldr	r4, [pc, #172]	; (1000fea4 <__ieee754_pow+0x5c4>)
1000fdf8:	9306      	str	r3, [sp, #24]
1000fdfa:	9407      	str	r4, [sp, #28]
1000fdfc:	9800      	ldr	r0, [sp, #0]
1000fdfe:	9901      	ldr	r1, [sp, #4]
1000fe00:	2600      	movs	r6, #0
1000fe02:	000b      	movs	r3, r1
1000fe04:	0032      	movs	r2, r6
1000fe06:	000f      	movs	r7, r1
1000fe08:	f002 fc5c 	bl	100126c4 <__aeabi_dsub>
1000fe0c:	9a02      	ldr	r2, [sp, #8]
1000fe0e:	9b03      	ldr	r3, [sp, #12]
1000fe10:	f002 f9de 	bl	100121d0 <__aeabi_dmul>
1000fe14:	9a00      	ldr	r2, [sp, #0]
1000fe16:	9b01      	ldr	r3, [sp, #4]
1000fe18:	0004      	movs	r4, r0
1000fe1a:	000d      	movs	r5, r1
1000fe1c:	9804      	ldr	r0, [sp, #16]
1000fe1e:	9905      	ldr	r1, [sp, #20]
1000fe20:	f002 f9d6 	bl	100121d0 <__aeabi_dmul>
1000fe24:	0002      	movs	r2, r0
1000fe26:	000b      	movs	r3, r1
1000fe28:	0020      	movs	r0, r4
1000fe2a:	0029      	movs	r1, r5
1000fe2c:	f001 fa80 	bl	10011330 <__aeabi_dadd>
1000fe30:	0004      	movs	r4, r0
1000fe32:	000d      	movs	r5, r1
1000fe34:	9802      	ldr	r0, [sp, #8]
1000fe36:	9903      	ldr	r1, [sp, #12]
1000fe38:	003b      	movs	r3, r7
1000fe3a:	0032      	movs	r2, r6
1000fe3c:	9404      	str	r4, [sp, #16]
1000fe3e:	9505      	str	r5, [sp, #20]
1000fe40:	f002 f9c6 	bl	100121d0 <__aeabi_dmul>
1000fe44:	9000      	str	r0, [sp, #0]
1000fe46:	9101      	str	r1, [sp, #4]
1000fe48:	000b      	movs	r3, r1
1000fe4a:	0002      	movs	r2, r0
1000fe4c:	0029      	movs	r1, r5
1000fe4e:	0020      	movs	r0, r4
1000fe50:	f001 fa6e 	bl	10011330 <__aeabi_dadd>
1000fe54:	4b28      	ldr	r3, [pc, #160]	; (1000fef8 <__ieee754_pow+0x618>)
1000fe56:	4681      	mov	r9, r0
1000fe58:	1e0f      	subs	r7, r1, #0
1000fe5a:	468a      	mov	sl, r1
1000fe5c:	429f      	cmp	r7, r3
1000fe5e:	dc00      	bgt.n	1000fe62 <__ieee754_pow+0x582>
1000fe60:	e13c      	b.n	100100dc <__ieee754_pow+0x7fc>
1000fe62:	4b26      	ldr	r3, [pc, #152]	; (1000fefc <__ieee754_pow+0x61c>)
1000fe64:	18cb      	adds	r3, r1, r3
1000fe66:	4303      	orrs	r3, r0
1000fe68:	d000      	beq.n	1000fe6c <__ieee754_pow+0x58c>
1000fe6a:	e1db      	b.n	10010224 <__ieee754_pow+0x944>
1000fe6c:	9804      	ldr	r0, [sp, #16]
1000fe6e:	9905      	ldr	r1, [sp, #20]
1000fe70:	4a23      	ldr	r2, [pc, #140]	; (1000ff00 <__ieee754_pow+0x620>)
1000fe72:	4b24      	ldr	r3, [pc, #144]	; (1000ff04 <__ieee754_pow+0x624>)
1000fe74:	f001 fa5c 	bl	10011330 <__aeabi_dadd>
1000fe78:	9a00      	ldr	r2, [sp, #0]
1000fe7a:	9b01      	ldr	r3, [sp, #4]
1000fe7c:	0004      	movs	r4, r0
1000fe7e:	000d      	movs	r5, r1
1000fe80:	4648      	mov	r0, r9
1000fe82:	0039      	movs	r1, r7
1000fe84:	f002 fc1e 	bl	100126c4 <__aeabi_dsub>
1000fe88:	0002      	movs	r2, r0
1000fe8a:	000b      	movs	r3, r1
1000fe8c:	0020      	movs	r0, r4
1000fe8e:	0029      	movs	r1, r5
1000fe90:	f000 fe2e 	bl	10010af0 <__aeabi_dcmpgt>
1000fe94:	003e      	movs	r6, r7
1000fe96:	e037      	b.n	1000ff08 <__ieee754_pow+0x628>
1000fe98:	000fffff 	.word	0x000fffff
1000fe9c:	43400000 	.word	0x43400000
1000fea0:	fffffc01 	.word	0xfffffc01
1000fea4:	3ff00000 	.word	0x3ff00000
1000fea8:	0003988e 	.word	0x0003988e
1000feac:	000bb679 	.word	0x000bb679
1000feb0:	fff00000 	.word	0xfff00000
1000feb4:	4a454eef 	.word	0x4a454eef
1000feb8:	3fca7e28 	.word	0x3fca7e28
1000febc:	93c9db65 	.word	0x93c9db65
1000fec0:	3fcd864a 	.word	0x3fcd864a
1000fec4:	a91d4101 	.word	0xa91d4101
1000fec8:	3fd17460 	.word	0x3fd17460
1000fecc:	518f264d 	.word	0x518f264d
1000fed0:	3fd55555 	.word	0x3fd55555
1000fed4:	db6fabff 	.word	0xdb6fabff
1000fed8:	3fdb6db6 	.word	0x3fdb6db6
1000fedc:	33333303 	.word	0x33333303
1000fee0:	3fe33333 	.word	0x3fe33333
1000fee4:	40080000 	.word	0x40080000
1000fee8:	3feec709 	.word	0x3feec709
1000feec:	dc3a03fd 	.word	0xdc3a03fd
1000fef0:	145b01f5 	.word	0x145b01f5
1000fef4:	be3e2fe0 	.word	0xbe3e2fe0
1000fef8:	408fffff 	.word	0x408fffff
1000fefc:	bf700000 	.word	0xbf700000
1000ff00:	652b82fe 	.word	0x652b82fe
1000ff04:	3c971547 	.word	0x3c971547
1000ff08:	2800      	cmp	r0, #0
1000ff0a:	d000      	beq.n	1000ff0e <__ieee754_pow+0x62e>
1000ff0c:	e18a      	b.n	10010224 <__ieee754_pow+0x944>
1000ff0e:	2280      	movs	r2, #128	; 0x80
1000ff10:	4be7      	ldr	r3, [pc, #924]	; (100102b0 <__ieee754_pow+0x9d0>)
1000ff12:	0352      	lsls	r2, r2, #13
1000ff14:	469c      	mov	ip, r3
1000ff16:	0013      	movs	r3, r2
1000ff18:	1536      	asrs	r6, r6, #20
1000ff1a:	4466      	add	r6, ip
1000ff1c:	4133      	asrs	r3, r6
1000ff1e:	49e5      	ldr	r1, [pc, #916]	; (100102b4 <__ieee754_pow+0x9d4>)
1000ff20:	19db      	adds	r3, r3, r7
1000ff22:	005e      	lsls	r6, r3, #1
1000ff24:	001c      	movs	r4, r3
1000ff26:	031b      	lsls	r3, r3, #12
1000ff28:	468c      	mov	ip, r1
1000ff2a:	0b1b      	lsrs	r3, r3, #12
1000ff2c:	4313      	orrs	r3, r2
1000ff2e:	2214      	movs	r2, #20
1000ff30:	0d76      	lsrs	r6, r6, #21
1000ff32:	4fe1      	ldr	r7, [pc, #900]	; (100102b8 <__ieee754_pow+0x9d8>)
1000ff34:	4466      	add	r6, ip
1000ff36:	4137      	asrs	r7, r6
1000ff38:	1b96      	subs	r6, r2, r6
1000ff3a:	4133      	asrs	r3, r6
1000ff3c:	4698      	mov	r8, r3
1000ff3e:	4653      	mov	r3, sl
1000ff40:	43bc      	bics	r4, r7
1000ff42:	2000      	movs	r0, #0
1000ff44:	0021      	movs	r1, r4
1000ff46:	2b00      	cmp	r3, #0
1000ff48:	da00      	bge.n	1000ff4c <__ieee754_pow+0x66c>
1000ff4a:	e1a9      	b.n	100102a0 <__ieee754_pow+0x9c0>
1000ff4c:	0002      	movs	r2, r0
1000ff4e:	000b      	movs	r3, r1
1000ff50:	9800      	ldr	r0, [sp, #0]
1000ff52:	9901      	ldr	r1, [sp, #4]
1000ff54:	f002 fbb6 	bl	100126c4 <__aeabi_dsub>
1000ff58:	000b      	movs	r3, r1
1000ff5a:	9000      	str	r0, [sp, #0]
1000ff5c:	9101      	str	r1, [sp, #4]
1000ff5e:	0002      	movs	r2, r0
1000ff60:	9804      	ldr	r0, [sp, #16]
1000ff62:	9905      	ldr	r1, [sp, #20]
1000ff64:	f001 f9e4 	bl	10011330 <__aeabi_dadd>
1000ff68:	4643      	mov	r3, r8
1000ff6a:	051b      	lsls	r3, r3, #20
1000ff6c:	4699      	mov	r9, r3
1000ff6e:	2000      	movs	r0, #0
1000ff70:	2200      	movs	r2, #0
1000ff72:	4bd2      	ldr	r3, [pc, #840]	; (100102bc <__ieee754_pow+0x9dc>)
1000ff74:	0006      	movs	r6, r0
1000ff76:	000f      	movs	r7, r1
1000ff78:	f002 f92a 	bl	100121d0 <__aeabi_dmul>
1000ff7c:	9a00      	ldr	r2, [sp, #0]
1000ff7e:	9b01      	ldr	r3, [sp, #4]
1000ff80:	9002      	str	r0, [sp, #8]
1000ff82:	9103      	str	r1, [sp, #12]
1000ff84:	0030      	movs	r0, r6
1000ff86:	0039      	movs	r1, r7
1000ff88:	f002 fb9c 	bl	100126c4 <__aeabi_dsub>
1000ff8c:	0002      	movs	r2, r0
1000ff8e:	000b      	movs	r3, r1
1000ff90:	9804      	ldr	r0, [sp, #16]
1000ff92:	9905      	ldr	r1, [sp, #20]
1000ff94:	f002 fb96 	bl	100126c4 <__aeabi_dsub>
1000ff98:	4ac9      	ldr	r2, [pc, #804]	; (100102c0 <__ieee754_pow+0x9e0>)
1000ff9a:	4bca      	ldr	r3, [pc, #808]	; (100102c4 <__ieee754_pow+0x9e4>)
1000ff9c:	f002 f918 	bl	100121d0 <__aeabi_dmul>
1000ffa0:	4ac9      	ldr	r2, [pc, #804]	; (100102c8 <__ieee754_pow+0x9e8>)
1000ffa2:	0004      	movs	r4, r0
1000ffa4:	000d      	movs	r5, r1
1000ffa6:	4bc9      	ldr	r3, [pc, #804]	; (100102cc <__ieee754_pow+0x9ec>)
1000ffa8:	0030      	movs	r0, r6
1000ffaa:	0039      	movs	r1, r7
1000ffac:	f002 f910 	bl	100121d0 <__aeabi_dmul>
1000ffb0:	0002      	movs	r2, r0
1000ffb2:	000b      	movs	r3, r1
1000ffb4:	0020      	movs	r0, r4
1000ffb6:	0029      	movs	r1, r5
1000ffb8:	f001 f9ba 	bl	10011330 <__aeabi_dadd>
1000ffbc:	0004      	movs	r4, r0
1000ffbe:	000d      	movs	r5, r1
1000ffc0:	0002      	movs	r2, r0
1000ffc2:	000b      	movs	r3, r1
1000ffc4:	9802      	ldr	r0, [sp, #8]
1000ffc6:	9903      	ldr	r1, [sp, #12]
1000ffc8:	f001 f9b2 	bl	10011330 <__aeabi_dadd>
1000ffcc:	9a02      	ldr	r2, [sp, #8]
1000ffce:	9b03      	ldr	r3, [sp, #12]
1000ffd0:	0006      	movs	r6, r0
1000ffd2:	000f      	movs	r7, r1
1000ffd4:	f002 fb76 	bl	100126c4 <__aeabi_dsub>
1000ffd8:	0002      	movs	r2, r0
1000ffda:	000b      	movs	r3, r1
1000ffdc:	0020      	movs	r0, r4
1000ffde:	0029      	movs	r1, r5
1000ffe0:	f002 fb70 	bl	100126c4 <__aeabi_dsub>
1000ffe4:	0032      	movs	r2, r6
1000ffe6:	9000      	str	r0, [sp, #0]
1000ffe8:	9101      	str	r1, [sp, #4]
1000ffea:	003b      	movs	r3, r7
1000ffec:	0030      	movs	r0, r6
1000ffee:	0039      	movs	r1, r7
1000fff0:	f002 f8ee 	bl	100121d0 <__aeabi_dmul>
1000fff4:	0004      	movs	r4, r0
1000fff6:	000d      	movs	r5, r1
1000fff8:	4ab5      	ldr	r2, [pc, #724]	; (100102d0 <__ieee754_pow+0x9f0>)
1000fffa:	4bb6      	ldr	r3, [pc, #728]	; (100102d4 <__ieee754_pow+0x9f4>)
1000fffc:	f002 f8e8 	bl	100121d0 <__aeabi_dmul>
10010000:	4ab5      	ldr	r2, [pc, #724]	; (100102d8 <__ieee754_pow+0x9f8>)
10010002:	4bb6      	ldr	r3, [pc, #728]	; (100102dc <__ieee754_pow+0x9fc>)
10010004:	f002 fb5e 	bl	100126c4 <__aeabi_dsub>
10010008:	0022      	movs	r2, r4
1001000a:	002b      	movs	r3, r5
1001000c:	f002 f8e0 	bl	100121d0 <__aeabi_dmul>
10010010:	4ab3      	ldr	r2, [pc, #716]	; (100102e0 <__ieee754_pow+0xa00>)
10010012:	4bb4      	ldr	r3, [pc, #720]	; (100102e4 <__ieee754_pow+0xa04>)
10010014:	f001 f98c 	bl	10011330 <__aeabi_dadd>
10010018:	0022      	movs	r2, r4
1001001a:	002b      	movs	r3, r5
1001001c:	f002 f8d8 	bl	100121d0 <__aeabi_dmul>
10010020:	4ab1      	ldr	r2, [pc, #708]	; (100102e8 <__ieee754_pow+0xa08>)
10010022:	4bb2      	ldr	r3, [pc, #712]	; (100102ec <__ieee754_pow+0xa0c>)
10010024:	f002 fb4e 	bl	100126c4 <__aeabi_dsub>
10010028:	0022      	movs	r2, r4
1001002a:	002b      	movs	r3, r5
1001002c:	f002 f8d0 	bl	100121d0 <__aeabi_dmul>
10010030:	4aaf      	ldr	r2, [pc, #700]	; (100102f0 <__ieee754_pow+0xa10>)
10010032:	4bb0      	ldr	r3, [pc, #704]	; (100102f4 <__ieee754_pow+0xa14>)
10010034:	f001 f97c 	bl	10011330 <__aeabi_dadd>
10010038:	0022      	movs	r2, r4
1001003a:	002b      	movs	r3, r5
1001003c:	f002 f8c8 	bl	100121d0 <__aeabi_dmul>
10010040:	0002      	movs	r2, r0
10010042:	000b      	movs	r3, r1
10010044:	0030      	movs	r0, r6
10010046:	0039      	movs	r1, r7
10010048:	f002 fb3c 	bl	100126c4 <__aeabi_dsub>
1001004c:	0004      	movs	r4, r0
1001004e:	000d      	movs	r5, r1
10010050:	0002      	movs	r2, r0
10010052:	000b      	movs	r3, r1
10010054:	0030      	movs	r0, r6
10010056:	0039      	movs	r1, r7
10010058:	f002 f8ba 	bl	100121d0 <__aeabi_dmul>
1001005c:	2380      	movs	r3, #128	; 0x80
1001005e:	9002      	str	r0, [sp, #8]
10010060:	9103      	str	r1, [sp, #12]
10010062:	2200      	movs	r2, #0
10010064:	05db      	lsls	r3, r3, #23
10010066:	0020      	movs	r0, r4
10010068:	0029      	movs	r1, r5
1001006a:	f002 fb2b 	bl	100126c4 <__aeabi_dsub>
1001006e:	0002      	movs	r2, r0
10010070:	000b      	movs	r3, r1
10010072:	9802      	ldr	r0, [sp, #8]
10010074:	9903      	ldr	r1, [sp, #12]
10010076:	f001 fc87 	bl	10011988 <__aeabi_ddiv>
1001007a:	9a00      	ldr	r2, [sp, #0]
1001007c:	9b01      	ldr	r3, [sp, #4]
1001007e:	0004      	movs	r4, r0
10010080:	000d      	movs	r5, r1
10010082:	0030      	movs	r0, r6
10010084:	0039      	movs	r1, r7
10010086:	f002 f8a3 	bl	100121d0 <__aeabi_dmul>
1001008a:	9a00      	ldr	r2, [sp, #0]
1001008c:	9b01      	ldr	r3, [sp, #4]
1001008e:	f001 f94f 	bl	10011330 <__aeabi_dadd>
10010092:	0002      	movs	r2, r0
10010094:	000b      	movs	r3, r1
10010096:	0020      	movs	r0, r4
10010098:	0029      	movs	r1, r5
1001009a:	f002 fb13 	bl	100126c4 <__aeabi_dsub>
1001009e:	0032      	movs	r2, r6
100100a0:	003b      	movs	r3, r7
100100a2:	f002 fb0f 	bl	100126c4 <__aeabi_dsub>
100100a6:	0002      	movs	r2, r0
100100a8:	000b      	movs	r3, r1
100100aa:	2000      	movs	r0, #0
100100ac:	4992      	ldr	r1, [pc, #584]	; (100102f8 <__ieee754_pow+0xa18>)
100100ae:	f002 fb09 	bl	100126c4 <__aeabi_dsub>
100100b2:	464b      	mov	r3, r9
100100b4:	185b      	adds	r3, r3, r1
100100b6:	151a      	asrs	r2, r3, #20
100100b8:	2a00      	cmp	r2, #0
100100ba:	dc00      	bgt.n	100100be <__ieee754_pow+0x7de>
100100bc:	e0f4      	b.n	100102a8 <__ieee754_pow+0x9c8>
100100be:	0019      	movs	r1, r3
100100c0:	9a06      	ldr	r2, [sp, #24]
100100c2:	9b07      	ldr	r3, [sp, #28]
100100c4:	f002 f884 	bl	100121d0 <__aeabi_dmul>
100100c8:	0006      	movs	r6, r0
100100ca:	e452      	b.n	1000f972 <__ieee754_pow+0x92>
100100cc:	0032      	movs	r2, r6
100100ce:	0030      	movs	r0, r6
100100d0:	002b      	movs	r3, r5
100100d2:	0029      	movs	r1, r5
100100d4:	f002 f87c 	bl	100121d0 <__aeabi_dmul>
100100d8:	0006      	movs	r6, r0
100100da:	e44a      	b.n	1000f972 <__ieee754_pow+0x92>
100100dc:	4b87      	ldr	r3, [pc, #540]	; (100102fc <__ieee754_pow+0xa1c>)
100100de:	004e      	lsls	r6, r1, #1
100100e0:	0876      	lsrs	r6, r6, #1
100100e2:	429e      	cmp	r6, r3
100100e4:	dc00      	bgt.n	100100e8 <__ieee754_pow+0x808>
100100e6:	e0bf      	b.n	10010268 <__ieee754_pow+0x988>
100100e8:	4b85      	ldr	r3, [pc, #532]	; (10010300 <__ieee754_pow+0xa20>)
100100ea:	18cb      	adds	r3, r1, r3
100100ec:	4303      	orrs	r3, r0
100100ee:	d10c      	bne.n	1001010a <__ieee754_pow+0x82a>
100100f0:	9a00      	ldr	r2, [sp, #0]
100100f2:	9b01      	ldr	r3, [sp, #4]
100100f4:	f002 fae6 	bl	100126c4 <__aeabi_dsub>
100100f8:	0002      	movs	r2, r0
100100fa:	000b      	movs	r3, r1
100100fc:	9804      	ldr	r0, [sp, #16]
100100fe:	9905      	ldr	r1, [sp, #20]
10010100:	f000 fcec 	bl	10010adc <__aeabi_dcmple>
10010104:	2800      	cmp	r0, #0
10010106:	d100      	bne.n	1001010a <__ieee754_pow+0x82a>
10010108:	e701      	b.n	1000ff0e <__ieee754_pow+0x62e>
1001010a:	9806      	ldr	r0, [sp, #24]
1001010c:	9907      	ldr	r1, [sp, #28]
1001010e:	4a7d      	ldr	r2, [pc, #500]	; (10010304 <__ieee754_pow+0xa24>)
10010110:	4b7d      	ldr	r3, [pc, #500]	; (10010308 <__ieee754_pow+0xa28>)
10010112:	f002 f85d 	bl	100121d0 <__aeabi_dmul>
10010116:	4a7b      	ldr	r2, [pc, #492]	; (10010304 <__ieee754_pow+0xa24>)
10010118:	4b7b      	ldr	r3, [pc, #492]	; (10010308 <__ieee754_pow+0xa28>)
1001011a:	f002 f859 	bl	100121d0 <__aeabi_dmul>
1001011e:	0006      	movs	r6, r0
10010120:	f7ff fc27 	bl	1000f972 <__ieee754_pow+0x92>
10010124:	2300      	movs	r3, #0
10010126:	4c79      	ldr	r4, [pc, #484]	; (1001030c <__ieee754_pow+0xa2c>)
10010128:	9306      	str	r3, [sp, #24]
1001012a:	9407      	str	r4, [sp, #28]
1001012c:	e666      	b.n	1000fdfc <__ieee754_pow+0x51c>
1001012e:	4653      	mov	r3, sl
10010130:	2b00      	cmp	r3, #0
10010132:	db00      	blt.n	10010136 <__ieee754_pow+0x856>
10010134:	e4c3      	b.n	1000fabe <__ieee754_pow+0x1de>
10010136:	9b00      	ldr	r3, [sp, #0]
10010138:	9c01      	ldr	r4, [sp, #4]
1001013a:	2280      	movs	r2, #128	; 0x80
1001013c:	0612      	lsls	r2, r2, #24
1001013e:	001e      	movs	r6, r3
10010140:	4694      	mov	ip, r2
10010142:	0023      	movs	r3, r4
10010144:	4463      	add	r3, ip
10010146:	0019      	movs	r1, r3
10010148:	f7ff fc13 	bl	1000f972 <__ieee754_pow+0x92>
1001014c:	0002      	movs	r2, r0
1001014e:	000b      	movs	r3, r1
10010150:	2000      	movs	r0, #0
10010152:	4969      	ldr	r1, [pc, #420]	; (100102f8 <__ieee754_pow+0xa18>)
10010154:	f001 fc18 	bl	10011988 <__aeabi_ddiv>
10010158:	e44a      	b.n	1000f9f0 <__ieee754_pow+0x110>
1001015a:	4b6d      	ldr	r3, [pc, #436]	; (10010310 <__ieee754_pow+0xa30>)
1001015c:	429c      	cmp	r4, r3
1001015e:	dc00      	bgt.n	10010162 <__ieee754_pow+0x882>
10010160:	e4aa      	b.n	1000fab8 <__ieee754_pow+0x1d8>
10010162:	4b65      	ldr	r3, [pc, #404]	; (100102f8 <__ieee754_pow+0xa18>)
10010164:	429c      	cmp	r4, r3
10010166:	dd01      	ble.n	1001016c <__ieee754_pow+0x88c>
10010168:	f7ff fc2c 	bl	1000f9c4 <__ieee754_pow+0xe4>
1001016c:	2200      	movs	r2, #0
1001016e:	4b62      	ldr	r3, [pc, #392]	; (100102f8 <__ieee754_pow+0xa18>)
10010170:	f002 faa8 	bl	100126c4 <__aeabi_dsub>
10010174:	22c0      	movs	r2, #192	; 0xc0
10010176:	4b67      	ldr	r3, [pc, #412]	; (10010314 <__ieee754_pow+0xa34>)
10010178:	05d2      	lsls	r2, r2, #23
1001017a:	0004      	movs	r4, r0
1001017c:	000d      	movs	r5, r1
1001017e:	f002 f827 	bl	100121d0 <__aeabi_dmul>
10010182:	4a65      	ldr	r2, [pc, #404]	; (10010318 <__ieee754_pow+0xa38>)
10010184:	0006      	movs	r6, r0
10010186:	000f      	movs	r7, r1
10010188:	4b64      	ldr	r3, [pc, #400]	; (1001031c <__ieee754_pow+0xa3c>)
1001018a:	0020      	movs	r0, r4
1001018c:	0029      	movs	r1, r5
1001018e:	f002 f81f 	bl	100121d0 <__aeabi_dmul>
10010192:	2200      	movs	r2, #0
10010194:	9002      	str	r0, [sp, #8]
10010196:	9103      	str	r1, [sp, #12]
10010198:	4b61      	ldr	r3, [pc, #388]	; (10010320 <__ieee754_pow+0xa40>)
1001019a:	0020      	movs	r0, r4
1001019c:	0029      	movs	r1, r5
1001019e:	f002 f817 	bl	100121d0 <__aeabi_dmul>
100101a2:	0002      	movs	r2, r0
100101a4:	000b      	movs	r3, r1
100101a6:	485f      	ldr	r0, [pc, #380]	; (10010324 <__ieee754_pow+0xa44>)
100101a8:	495f      	ldr	r1, [pc, #380]	; (10010328 <__ieee754_pow+0xa48>)
100101aa:	f002 fa8b 	bl	100126c4 <__aeabi_dsub>
100101ae:	0022      	movs	r2, r4
100101b0:	002b      	movs	r3, r5
100101b2:	f002 f80d 	bl	100121d0 <__aeabi_dmul>
100101b6:	0002      	movs	r2, r0
100101b8:	000b      	movs	r3, r1
100101ba:	2000      	movs	r0, #0
100101bc:	495b      	ldr	r1, [pc, #364]	; (1001032c <__ieee754_pow+0xa4c>)
100101be:	f002 fa81 	bl	100126c4 <__aeabi_dsub>
100101c2:	0022      	movs	r2, r4
100101c4:	9004      	str	r0, [sp, #16]
100101c6:	9105      	str	r1, [sp, #20]
100101c8:	002b      	movs	r3, r5
100101ca:	0020      	movs	r0, r4
100101cc:	0029      	movs	r1, r5
100101ce:	f001 ffff 	bl	100121d0 <__aeabi_dmul>
100101d2:	0002      	movs	r2, r0
100101d4:	000b      	movs	r3, r1
100101d6:	9804      	ldr	r0, [sp, #16]
100101d8:	9905      	ldr	r1, [sp, #20]
100101da:	f001 fff9 	bl	100121d0 <__aeabi_dmul>
100101de:	4a54      	ldr	r2, [pc, #336]	; (10010330 <__ieee754_pow+0xa50>)
100101e0:	4b4c      	ldr	r3, [pc, #304]	; (10010314 <__ieee754_pow+0xa34>)
100101e2:	f001 fff5 	bl	100121d0 <__aeabi_dmul>
100101e6:	0002      	movs	r2, r0
100101e8:	000b      	movs	r3, r1
100101ea:	9802      	ldr	r0, [sp, #8]
100101ec:	9903      	ldr	r1, [sp, #12]
100101ee:	f002 fa69 	bl	100126c4 <__aeabi_dsub>
100101f2:	0002      	movs	r2, r0
100101f4:	000b      	movs	r3, r1
100101f6:	0004      	movs	r4, r0
100101f8:	000d      	movs	r5, r1
100101fa:	0030      	movs	r0, r6
100101fc:	0039      	movs	r1, r7
100101fe:	f001 f897 	bl	10011330 <__aeabi_dadd>
10010202:	2200      	movs	r2, #0
10010204:	0010      	movs	r0, r2
10010206:	003b      	movs	r3, r7
10010208:	0032      	movs	r2, r6
1001020a:	9002      	str	r0, [sp, #8]
1001020c:	9103      	str	r1, [sp, #12]
1001020e:	f002 fa59 	bl	100126c4 <__aeabi_dsub>
10010212:	0002      	movs	r2, r0
10010214:	000b      	movs	r3, r1
10010216:	0020      	movs	r0, r4
10010218:	0029      	movs	r1, r5
1001021a:	f002 fa53 	bl	100126c4 <__aeabi_dsub>
1001021e:	9004      	str	r0, [sp, #16]
10010220:	9105      	str	r1, [sp, #20]
10010222:	e5e1      	b.n	1000fde8 <__ieee754_pow+0x508>
10010224:	4a43      	ldr	r2, [pc, #268]	; (10010334 <__ieee754_pow+0xa54>)
10010226:	4b44      	ldr	r3, [pc, #272]	; (10010338 <__ieee754_pow+0xa58>)
10010228:	9806      	ldr	r0, [sp, #24]
1001022a:	9907      	ldr	r1, [sp, #28]
1001022c:	f001 ffd0 	bl	100121d0 <__aeabi_dmul>
10010230:	4a40      	ldr	r2, [pc, #256]	; (10010334 <__ieee754_pow+0xa54>)
10010232:	4b41      	ldr	r3, [pc, #260]	; (10010338 <__ieee754_pow+0xa58>)
10010234:	f001 ffcc 	bl	100121d0 <__aeabi_dmul>
10010238:	0006      	movs	r6, r0
1001023a:	f7ff fb9a 	bl	1000f972 <__ieee754_pow+0x92>
1001023e:	2a00      	cmp	r2, #0
10010240:	d001      	beq.n	10010246 <__ieee754_pow+0x966>
10010242:	f7ff fba5 	bl	1000f990 <__ieee754_pow+0xb0>
10010246:	3214      	adds	r2, #20
10010248:	1ad3      	subs	r3, r2, r3
1001024a:	003a      	movs	r2, r7
1001024c:	411a      	asrs	r2, r3
1001024e:	0011      	movs	r1, r2
10010250:	4099      	lsls	r1, r3
10010252:	428f      	cmp	r7, r1
10010254:	d001      	beq.n	1001025a <__ieee754_pow+0x97a>
10010256:	f7ff fb6f 	bl	1000f938 <__ieee754_pow+0x58>
1001025a:	2301      	movs	r3, #1
1001025c:	4013      	ands	r3, r2
1001025e:	2202      	movs	r2, #2
10010260:	1ad3      	subs	r3, r2, r3
10010262:	469b      	mov	fp, r3
10010264:	f7ff fb68 	bl	1000f938 <__ieee754_pow+0x58>
10010268:	4b30      	ldr	r3, [pc, #192]	; (1001032c <__ieee754_pow+0xa4c>)
1001026a:	429e      	cmp	r6, r3
1001026c:	dd00      	ble.n	10010270 <__ieee754_pow+0x990>
1001026e:	e64e      	b.n	1000ff0e <__ieee754_pow+0x62e>
10010270:	2300      	movs	r3, #0
10010272:	4699      	mov	r9, r3
10010274:	4698      	mov	r8, r3
10010276:	e67a      	b.n	1000ff6e <__ieee754_pow+0x68e>
10010278:	0002      	movs	r2, r0
1001027a:	000b      	movs	r3, r1
1001027c:	f7ff fc14 	bl	1000faa8 <__ieee754_pow+0x1c8>
10010280:	2380      	movs	r3, #128	; 0x80
10010282:	4c2e      	ldr	r4, [pc, #184]	; (1001033c <__ieee754_pow+0xa5c>)
10010284:	05db      	lsls	r3, r3, #23
10010286:	9308      	str	r3, [sp, #32]
10010288:	9409      	str	r4, [sp, #36]	; 0x24
1001028a:	4b2d      	ldr	r3, [pc, #180]	; (10010340 <__ieee754_pow+0xa60>)
1001028c:	4c2d      	ldr	r4, [pc, #180]	; (10010344 <__ieee754_pow+0xa64>)
1001028e:	2200      	movs	r2, #0
10010290:	930c      	str	r3, [sp, #48]	; 0x30
10010292:	940d      	str	r4, [sp, #52]	; 0x34
10010294:	2480      	movs	r4, #128	; 0x80
10010296:	4b2c      	ldr	r3, [pc, #176]	; (10010348 <__ieee754_pow+0xa68>)
10010298:	02e4      	lsls	r4, r4, #11
1001029a:	9206      	str	r2, [sp, #24]
1001029c:	9307      	str	r3, [sp, #28]
1001029e:	e456      	b.n	1000fb4e <__ieee754_pow+0x26e>
100102a0:	4643      	mov	r3, r8
100102a2:	425b      	negs	r3, r3
100102a4:	4698      	mov	r8, r3
100102a6:	e651      	b.n	1000ff4c <__ieee754_pow+0x66c>
100102a8:	4642      	mov	r2, r8
100102aa:	f000 f9fd 	bl	100106a8 <scalbn>
100102ae:	e707      	b.n	100100c0 <__ieee754_pow+0x7e0>
100102b0:	fffffc02 	.word	0xfffffc02
100102b4:	fffffc01 	.word	0xfffffc01
100102b8:	000fffff 	.word	0x000fffff
100102bc:	3fe62e43 	.word	0x3fe62e43
100102c0:	fefa39ef 	.word	0xfefa39ef
100102c4:	3fe62e42 	.word	0x3fe62e42
100102c8:	0ca86c39 	.word	0x0ca86c39
100102cc:	be205c61 	.word	0xbe205c61
100102d0:	72bea4d0 	.word	0x72bea4d0
100102d4:	3e663769 	.word	0x3e663769
100102d8:	c5d26bf1 	.word	0xc5d26bf1
100102dc:	3ebbbd41 	.word	0x3ebbbd41
100102e0:	af25de2c 	.word	0xaf25de2c
100102e4:	3f11566a 	.word	0x3f11566a
100102e8:	16bebd93 	.word	0x16bebd93
100102ec:	3f66c16c 	.word	0x3f66c16c
100102f0:	5555553e 	.word	0x5555553e
100102f4:	3fc55555 	.word	0x3fc55555
100102f8:	3ff00000 	.word	0x3ff00000
100102fc:	4090cbff 	.word	0x4090cbff
10010300:	3f6f3400 	.word	0x3f6f3400
10010304:	c2f8f359 	.word	0xc2f8f359
10010308:	01a56e1f 	.word	0x01a56e1f
1001030c:	bff00000 	.word	0xbff00000
10010310:	3feffffe 	.word	0x3feffffe
10010314:	3ff71547 	.word	0x3ff71547
10010318:	f85ddf44 	.word	0xf85ddf44
1001031c:	3e54ae0b 	.word	0x3e54ae0b
10010320:	3fd00000 	.word	0x3fd00000
10010324:	55555555 	.word	0x55555555
10010328:	3fd55555 	.word	0x3fd55555
1001032c:	3fe00000 	.word	0x3fe00000
10010330:	652b82fe 	.word	0x652b82fe
10010334:	8800759c 	.word	0x8800759c
10010338:	7e37e43c 	.word	0x7e37e43c
1001033c:	3fe2b803 	.word	0x3fe2b803
10010340:	43cfd006 	.word	0x43cfd006
10010344:	3e4cfdeb 	.word	0x3e4cfdeb
10010348:	3ff80000 	.word	0x3ff80000

1001034c <__ieee754_sqrt>:
1001034c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001034e:	4656      	mov	r6, sl
10010350:	464d      	mov	r5, r9
10010352:	4644      	mov	r4, r8
10010354:	465f      	mov	r7, fp
10010356:	4b75      	ldr	r3, [pc, #468]	; (1001052c <__ieee754_sqrt+0x1e0>)
10010358:	b4f0      	push	{r4, r5, r6, r7}
1001035a:	000a      	movs	r2, r1
1001035c:	000d      	movs	r5, r1
1001035e:	0019      	movs	r1, r3
10010360:	b083      	sub	sp, #12
10010362:	0006      	movs	r6, r0
10010364:	0004      	movs	r4, r0
10010366:	4029      	ands	r1, r5
10010368:	4299      	cmp	r1, r3
1001036a:	d100      	bne.n	1001036e <__ieee754_sqrt+0x22>
1001036c:	e0ba      	b.n	100104e4 <__ieee754_sqrt+0x198>
1001036e:	2d00      	cmp	r5, #0
10010370:	dc00      	bgt.n	10010374 <__ieee754_sqrt+0x28>
10010372:	e094      	b.n	1001049e <__ieee754_sqrt+0x152>
10010374:	152d      	asrs	r5, r5, #20
10010376:	d100      	bne.n	1001037a <__ieee754_sqrt+0x2e>
10010378:	e0a3      	b.n	100104c2 <__ieee754_sqrt+0x176>
1001037a:	4b6d      	ldr	r3, [pc, #436]	; (10010530 <__ieee754_sqrt+0x1e4>)
1001037c:	0312      	lsls	r2, r2, #12
1001037e:	469c      	mov	ip, r3
10010380:	2380      	movs	r3, #128	; 0x80
10010382:	0b12      	lsrs	r2, r2, #12
10010384:	035b      	lsls	r3, r3, #13
10010386:	4465      	add	r5, ip
10010388:	431a      	orrs	r2, r3
1001038a:	07eb      	lsls	r3, r5, #31
1001038c:	d500      	bpl.n	10010390 <__ieee754_sqrt+0x44>
1001038e:	e081      	b.n	10010494 <__ieee754_sqrt+0x148>
10010390:	106b      	asrs	r3, r5, #1
10010392:	4698      	mov	r8, r3
10010394:	0fe3      	lsrs	r3, r4, #31
10010396:	189b      	adds	r3, r3, r2
10010398:	189b      	adds	r3, r3, r2
1001039a:	2280      	movs	r2, #128	; 0x80
1001039c:	2116      	movs	r1, #22
1001039e:	2600      	movs	r6, #0
100103a0:	2700      	movs	r7, #0
100103a2:	0064      	lsls	r4, r4, #1
100103a4:	0392      	lsls	r2, r2, #14
100103a6:	18b8      	adds	r0, r7, r2
100103a8:	4298      	cmp	r0, r3
100103aa:	dc02      	bgt.n	100103b2 <__ieee754_sqrt+0x66>
100103ac:	1887      	adds	r7, r0, r2
100103ae:	1a1b      	subs	r3, r3, r0
100103b0:	18b6      	adds	r6, r6, r2
100103b2:	0fe0      	lsrs	r0, r4, #31
100103b4:	005b      	lsls	r3, r3, #1
100103b6:	3901      	subs	r1, #1
100103b8:	181b      	adds	r3, r3, r0
100103ba:	0064      	lsls	r4, r4, #1
100103bc:	0852      	lsrs	r2, r2, #1
100103be:	2900      	cmp	r1, #0
100103c0:	d1f1      	bne.n	100103a6 <__ieee754_sqrt+0x5a>
100103c2:	2200      	movs	r2, #0
100103c4:	9201      	str	r2, [sp, #4]
100103c6:	4694      	mov	ip, r2
100103c8:	2280      	movs	r2, #128	; 0x80
100103ca:	0612      	lsls	r2, r2, #24
100103cc:	2020      	movs	r0, #32
100103ce:	4691      	mov	r9, r2
100103d0:	e009      	b.n	100103e6 <__ieee754_sqrt+0x9a>
100103d2:	429f      	cmp	r7, r3
100103d4:	d041      	beq.n	1001045a <__ieee754_sqrt+0x10e>
100103d6:	0fe1      	lsrs	r1, r4, #31
100103d8:	18c9      	adds	r1, r1, r3
100103da:	3801      	subs	r0, #1
100103dc:	18cb      	adds	r3, r1, r3
100103de:	0064      	lsls	r4, r4, #1
100103e0:	0852      	lsrs	r2, r2, #1
100103e2:	2800      	cmp	r0, #0
100103e4:	d01e      	beq.n	10010424 <__ieee754_sqrt+0xd8>
100103e6:	4661      	mov	r1, ip
100103e8:	1851      	adds	r1, r2, r1
100103ea:	429f      	cmp	r7, r3
100103ec:	daf1      	bge.n	100103d2 <__ieee754_sqrt+0x86>
100103ee:	188d      	adds	r5, r1, r2
100103f0:	46ac      	mov	ip, r5
100103f2:	0fcd      	lsrs	r5, r1, #31
100103f4:	07ed      	lsls	r5, r5, #31
100103f6:	46ba      	mov	sl, r7
100103f8:	454d      	cmp	r5, r9
100103fa:	d039      	beq.n	10010470 <__ieee754_sqrt+0x124>
100103fc:	1bdb      	subs	r3, r3, r7
100103fe:	428c      	cmp	r4, r1
10010400:	41bf      	sbcs	r7, r7
10010402:	427f      	negs	r7, r7
10010404:	1bdb      	subs	r3, r3, r7
10010406:	1a64      	subs	r4, r4, r1
10010408:	9901      	ldr	r1, [sp, #4]
1001040a:	3801      	subs	r0, #1
1001040c:	468b      	mov	fp, r1
1001040e:	4493      	add	fp, r2
10010410:	4659      	mov	r1, fp
10010412:	9101      	str	r1, [sp, #4]
10010414:	0fe1      	lsrs	r1, r4, #31
10010416:	18c9      	adds	r1, r1, r3
10010418:	4657      	mov	r7, sl
1001041a:	18cb      	adds	r3, r1, r3
1001041c:	0064      	lsls	r4, r4, #1
1001041e:	0852      	lsrs	r2, r2, #1
10010420:	2800      	cmp	r0, #0
10010422:	d1e0      	bne.n	100103e6 <__ieee754_sqrt+0x9a>
10010424:	4323      	orrs	r3, r4
10010426:	d12b      	bne.n	10010480 <__ieee754_sqrt+0x134>
10010428:	9b01      	ldr	r3, [sp, #4]
1001042a:	085b      	lsrs	r3, r3, #1
1001042c:	4941      	ldr	r1, [pc, #260]	; (10010534 <__ieee754_sqrt+0x1e8>)
1001042e:	1072      	asrs	r2, r6, #1
10010430:	468c      	mov	ip, r1
10010432:	4462      	add	r2, ip
10010434:	07f1      	lsls	r1, r6, #31
10010436:	d502      	bpl.n	1001043e <__ieee754_sqrt+0xf2>
10010438:	2180      	movs	r1, #128	; 0x80
1001043a:	0609      	lsls	r1, r1, #24
1001043c:	430b      	orrs	r3, r1
1001043e:	4641      	mov	r1, r8
10010440:	0509      	lsls	r1, r1, #20
10010442:	188d      	adds	r5, r1, r2
10010444:	001e      	movs	r6, r3
10010446:	002f      	movs	r7, r5
10010448:	0030      	movs	r0, r6
1001044a:	0039      	movs	r1, r7
1001044c:	b003      	add	sp, #12
1001044e:	bc3c      	pop	{r2, r3, r4, r5}
10010450:	4690      	mov	r8, r2
10010452:	4699      	mov	r9, r3
10010454:	46a2      	mov	sl, r4
10010456:	46ab      	mov	fp, r5
10010458:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001045a:	42a1      	cmp	r1, r4
1001045c:	d80e      	bhi.n	1001047c <__ieee754_sqrt+0x130>
1001045e:	188d      	adds	r5, r1, r2
10010460:	46ac      	mov	ip, r5
10010462:	0fcd      	lsrs	r5, r1, #31
10010464:	07ed      	lsls	r5, r5, #31
10010466:	454d      	cmp	r5, r9
10010468:	d048      	beq.n	100104fc <__ieee754_sqrt+0x1b0>
1001046a:	469a      	mov	sl, r3
1001046c:	2300      	movs	r3, #0
1001046e:	e7ca      	b.n	10010406 <__ieee754_sqrt+0xba>
10010470:	4665      	mov	r5, ip
10010472:	2d00      	cmp	r5, #0
10010474:	dbc2      	blt.n	100103fc <__ieee754_sqrt+0xb0>
10010476:	1c7d      	adds	r5, r7, #1
10010478:	46aa      	mov	sl, r5
1001047a:	e7bf      	b.n	100103fc <__ieee754_sqrt+0xb0>
1001047c:	003b      	movs	r3, r7
1001047e:	e7aa      	b.n	100103d6 <__ieee754_sqrt+0x8a>
10010480:	9b01      	ldr	r3, [sp, #4]
10010482:	3301      	adds	r3, #1
10010484:	d03e      	beq.n	10010504 <__ieee754_sqrt+0x1b8>
10010486:	9a01      	ldr	r2, [sp, #4]
10010488:	2301      	movs	r3, #1
1001048a:	4694      	mov	ip, r2
1001048c:	4013      	ands	r3, r2
1001048e:	4463      	add	r3, ip
10010490:	085b      	lsrs	r3, r3, #1
10010492:	e7cb      	b.n	1001042c <__ieee754_sqrt+0xe0>
10010494:	0fe3      	lsrs	r3, r4, #31
10010496:	0052      	lsls	r2, r2, #1
10010498:	189a      	adds	r2, r3, r2
1001049a:	0064      	lsls	r4, r4, #1
1001049c:	e778      	b.n	10010390 <__ieee754_sqrt+0x44>
1001049e:	006b      	lsls	r3, r5, #1
100104a0:	085b      	lsrs	r3, r3, #1
100104a2:	4303      	orrs	r3, r0
100104a4:	002f      	movs	r7, r5
100104a6:	2b00      	cmp	r3, #0
100104a8:	d0ce      	beq.n	10010448 <__ieee754_sqrt+0xfc>
100104aa:	2500      	movs	r5, #0
100104ac:	2a00      	cmp	r2, #0
100104ae:	d131      	bne.n	10010514 <__ieee754_sqrt+0x1c8>
100104b0:	0ae2      	lsrs	r2, r4, #11
100104b2:	3d15      	subs	r5, #21
100104b4:	0564      	lsls	r4, r4, #21
100104b6:	2a00      	cmp	r2, #0
100104b8:	d0fa      	beq.n	100104b0 <__ieee754_sqrt+0x164>
100104ba:	2380      	movs	r3, #128	; 0x80
100104bc:	035b      	lsls	r3, r3, #13
100104be:	421a      	tst	r2, r3
100104c0:	d123      	bne.n	1001050a <__ieee754_sqrt+0x1be>
100104c2:	2080      	movs	r0, #128	; 0x80
100104c4:	2300      	movs	r3, #0
100104c6:	0340      	lsls	r0, r0, #13
100104c8:	e000      	b.n	100104cc <__ieee754_sqrt+0x180>
100104ca:	000b      	movs	r3, r1
100104cc:	0052      	lsls	r2, r2, #1
100104ce:	1c59      	adds	r1, r3, #1
100104d0:	4202      	tst	r2, r0
100104d2:	d0fa      	beq.n	100104ca <__ieee754_sqrt+0x17e>
100104d4:	2020      	movs	r0, #32
100104d6:	1a40      	subs	r0, r0, r1
100104d8:	1aed      	subs	r5, r5, r3
100104da:	0023      	movs	r3, r4
100104dc:	40c3      	lsrs	r3, r0
100104de:	408c      	lsls	r4, r1
100104e0:	431a      	orrs	r2, r3
100104e2:	e74a      	b.n	1001037a <__ieee754_sqrt+0x2e>
100104e4:	0002      	movs	r2, r0
100104e6:	002b      	movs	r3, r5
100104e8:	0029      	movs	r1, r5
100104ea:	f001 fe71 	bl	100121d0 <__aeabi_dmul>
100104ee:	0032      	movs	r2, r6
100104f0:	002b      	movs	r3, r5
100104f2:	f000 ff1d 	bl	10011330 <__aeabi_dadd>
100104f6:	0006      	movs	r6, r0
100104f8:	000f      	movs	r7, r1
100104fa:	e7a5      	b.n	10010448 <__ieee754_sqrt+0xfc>
100104fc:	4665      	mov	r5, ip
100104fe:	2d00      	cmp	r5, #0
10010500:	dab9      	bge.n	10010476 <__ieee754_sqrt+0x12a>
10010502:	e7b2      	b.n	1001046a <__ieee754_sqrt+0x11e>
10010504:	3601      	adds	r6, #1
10010506:	2300      	movs	r3, #0
10010508:	e790      	b.n	1001042c <__ieee754_sqrt+0xe0>
1001050a:	2301      	movs	r3, #1
1001050c:	2020      	movs	r0, #32
1001050e:	425b      	negs	r3, r3
10010510:	2100      	movs	r1, #0
10010512:	e7e1      	b.n	100104d8 <__ieee754_sqrt+0x18c>
10010514:	003b      	movs	r3, r7
10010516:	0002      	movs	r2, r0
10010518:	0039      	movs	r1, r7
1001051a:	f002 f8d3 	bl	100126c4 <__aeabi_dsub>
1001051e:	0002      	movs	r2, r0
10010520:	000b      	movs	r3, r1
10010522:	f001 fa31 	bl	10011988 <__aeabi_ddiv>
10010526:	0006      	movs	r6, r0
10010528:	000f      	movs	r7, r1
1001052a:	e78d      	b.n	10010448 <__ieee754_sqrt+0xfc>
1001052c:	7ff00000 	.word	0x7ff00000
10010530:	fffffc01 	.word	0xfffffc01
10010534:	3fe00000 	.word	0x3fe00000

10010538 <fabs>:
10010538:	0049      	lsls	r1, r1, #1
1001053a:	084b      	lsrs	r3, r1, #1
1001053c:	0019      	movs	r1, r3
1001053e:	4770      	bx	lr

10010540 <finite>:
10010540:	4b03      	ldr	r3, [pc, #12]	; (10010550 <finite+0x10>)
10010542:	0048      	lsls	r0, r1, #1
10010544:	469c      	mov	ip, r3
10010546:	0840      	lsrs	r0, r0, #1
10010548:	4460      	add	r0, ip
1001054a:	0fc0      	lsrs	r0, r0, #31
1001054c:	4770      	bx	lr
1001054e:	46c0      	nop			; (mov r8, r8)
10010550:	80100000 	.word	0x80100000

10010554 <matherr>:
10010554:	2000      	movs	r0, #0
10010556:	4770      	bx	lr

10010558 <nan>:
10010558:	2000      	movs	r0, #0
1001055a:	4901      	ldr	r1, [pc, #4]	; (10010560 <nan+0x8>)
1001055c:	4770      	bx	lr
1001055e:	46c0      	nop			; (mov r8, r8)
10010560:	7ff80000 	.word	0x7ff80000

10010564 <rint>:
10010564:	b5f0      	push	{r4, r5, r6, r7, lr}
10010566:	4647      	mov	r7, r8
10010568:	b480      	push	{r7}
1001056a:	0fcb      	lsrs	r3, r1, #31
1001056c:	4698      	mov	r8, r3
1001056e:	4c4a      	ldr	r4, [pc, #296]	; (10010698 <rint+0x134>)
10010570:	004b      	lsls	r3, r1, #1
10010572:	0d5b      	lsrs	r3, r3, #21
10010574:	191e      	adds	r6, r3, r4
10010576:	b082      	sub	sp, #8
10010578:	0007      	movs	r7, r0
1001057a:	000a      	movs	r2, r1
1001057c:	2e13      	cmp	r6, #19
1001057e:	dc35      	bgt.n	100105ec <rint+0x88>
10010580:	2e00      	cmp	r6, #0
10010582:	db57      	blt.n	10010634 <rint+0xd0>
10010584:	4b45      	ldr	r3, [pc, #276]	; (1001069c <rint+0x138>)
10010586:	0004      	movs	r4, r0
10010588:	4133      	asrs	r3, r6
1001058a:	001f      	movs	r7, r3
1001058c:	400f      	ands	r7, r1
1001058e:	4307      	orrs	r7, r0
10010590:	000d      	movs	r5, r1
10010592:	2f00      	cmp	r7, #0
10010594:	d024      	beq.n	100105e0 <rint+0x7c>
10010596:	085b      	lsrs	r3, r3, #1
10010598:	001c      	movs	r4, r3
1001059a:	400c      	ands	r4, r1
1001059c:	4320      	orrs	r0, r4
1001059e:	2700      	movs	r7, #0
100105a0:	2800      	cmp	r0, #0
100105a2:	d007      	beq.n	100105b4 <rint+0x50>
100105a4:	2e13      	cmp	r6, #19
100105a6:	d100      	bne.n	100105aa <rint+0x46>
100105a8:	e072      	b.n	10010690 <rint+0x12c>
100105aa:	2280      	movs	r2, #128	; 0x80
100105ac:	02d2      	lsls	r2, r2, #11
100105ae:	4132      	asrs	r2, r6
100105b0:	4399      	bics	r1, r3
100105b2:	430a      	orrs	r2, r1
100105b4:	4643      	mov	r3, r8
100105b6:	00de      	lsls	r6, r3, #3
100105b8:	4b39      	ldr	r3, [pc, #228]	; (100106a0 <rint+0x13c>)
100105ba:	0011      	movs	r1, r2
100105bc:	199e      	adds	r6, r3, r6
100105be:	6834      	ldr	r4, [r6, #0]
100105c0:	6875      	ldr	r5, [r6, #4]
100105c2:	0038      	movs	r0, r7
100105c4:	0022      	movs	r2, r4
100105c6:	002b      	movs	r3, r5
100105c8:	f000 feb2 	bl	10011330 <__aeabi_dadd>
100105cc:	9000      	str	r0, [sp, #0]
100105ce:	9101      	str	r1, [sp, #4]
100105d0:	9800      	ldr	r0, [sp, #0]
100105d2:	9901      	ldr	r1, [sp, #4]
100105d4:	0022      	movs	r2, r4
100105d6:	002b      	movs	r3, r5
100105d8:	f002 f874 	bl	100126c4 <__aeabi_dsub>
100105dc:	0004      	movs	r4, r0
100105de:	000d      	movs	r5, r1
100105e0:	0020      	movs	r0, r4
100105e2:	0029      	movs	r1, r5
100105e4:	b002      	add	sp, #8
100105e6:	bc04      	pop	{r2}
100105e8:	4690      	mov	r8, r2
100105ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105ec:	2e33      	cmp	r6, #51	; 0x33
100105ee:	dd0c      	ble.n	1001060a <rint+0xa6>
100105f0:	2380      	movs	r3, #128	; 0x80
100105f2:	0004      	movs	r4, r0
100105f4:	000d      	movs	r5, r1
100105f6:	00db      	lsls	r3, r3, #3
100105f8:	429e      	cmp	r6, r3
100105fa:	d1f1      	bne.n	100105e0 <rint+0x7c>
100105fc:	0002      	movs	r2, r0
100105fe:	000b      	movs	r3, r1
10010600:	f000 fe96 	bl	10011330 <__aeabi_dadd>
10010604:	0004      	movs	r4, r0
10010606:	000d      	movs	r5, r1
10010608:	e7ea      	b.n	100105e0 <rint+0x7c>
1001060a:	4c26      	ldr	r4, [pc, #152]	; (100106a4 <rint+0x140>)
1001060c:	000d      	movs	r5, r1
1001060e:	46a4      	mov	ip, r4
10010610:	2401      	movs	r4, #1
10010612:	4463      	add	r3, ip
10010614:	4264      	negs	r4, r4
10010616:	40dc      	lsrs	r4, r3
10010618:	46a4      	mov	ip, r4
1001061a:	4661      	mov	r1, ip
1001061c:	0004      	movs	r4, r0
1001061e:	4201      	tst	r1, r0
10010620:	d0de      	beq.n	100105e0 <rint+0x7c>
10010622:	0849      	lsrs	r1, r1, #1
10010624:	4201      	tst	r1, r0
10010626:	d0c5      	beq.n	100105b4 <rint+0x50>
10010628:	2780      	movs	r7, #128	; 0x80
1001062a:	05ff      	lsls	r7, r7, #23
1001062c:	411f      	asrs	r7, r3
1001062e:	4388      	bics	r0, r1
10010630:	4307      	orrs	r7, r0
10010632:	e7bf      	b.n	100105b4 <rint+0x50>
10010634:	004b      	lsls	r3, r1, #1
10010636:	085b      	lsrs	r3, r3, #1
10010638:	4303      	orrs	r3, r0
1001063a:	0004      	movs	r4, r0
1001063c:	000d      	movs	r5, r1
1001063e:	2b00      	cmp	r3, #0
10010640:	d0ce      	beq.n	100105e0 <rint+0x7c>
10010642:	030b      	lsls	r3, r1, #12
10010644:	0b1b      	lsrs	r3, r3, #12
10010646:	4303      	orrs	r3, r0
10010648:	425a      	negs	r2, r3
1001064a:	4313      	orrs	r3, r2
1001064c:	2280      	movs	r2, #128	; 0x80
1001064e:	0b1b      	lsrs	r3, r3, #12
10010650:	0312      	lsls	r2, r2, #12
10010652:	4013      	ands	r3, r2
10010654:	0c4a      	lsrs	r2, r1, #17
10010656:	0452      	lsls	r2, r2, #17
10010658:	4313      	orrs	r3, r2
1001065a:	0019      	movs	r1, r3
1001065c:	4643      	mov	r3, r8
1001065e:	4a10      	ldr	r2, [pc, #64]	; (100106a0 <rint+0x13c>)
10010660:	00db      	lsls	r3, r3, #3
10010662:	18d3      	adds	r3, r2, r3
10010664:	681c      	ldr	r4, [r3, #0]
10010666:	685d      	ldr	r5, [r3, #4]
10010668:	0022      	movs	r2, r4
1001066a:	002b      	movs	r3, r5
1001066c:	f000 fe60 	bl	10011330 <__aeabi_dadd>
10010670:	9000      	str	r0, [sp, #0]
10010672:	9101      	str	r1, [sp, #4]
10010674:	9800      	ldr	r0, [sp, #0]
10010676:	9901      	ldr	r1, [sp, #4]
10010678:	0022      	movs	r2, r4
1001067a:	002b      	movs	r3, r5
1001067c:	f002 f822 	bl	100126c4 <__aeabi_dsub>
10010680:	4642      	mov	r2, r8
10010682:	004b      	lsls	r3, r1, #1
10010684:	085b      	lsrs	r3, r3, #1
10010686:	07d6      	lsls	r6, r2, #31
10010688:	4333      	orrs	r3, r6
1001068a:	0004      	movs	r4, r0
1001068c:	001d      	movs	r5, r3
1001068e:	e7a7      	b.n	100105e0 <rint+0x7c>
10010690:	2780      	movs	r7, #128	; 0x80
10010692:	063f      	lsls	r7, r7, #24
10010694:	e789      	b.n	100105aa <rint+0x46>
10010696:	46c0      	nop			; (mov r8, r8)
10010698:	fffffc01 	.word	0xfffffc01
1001069c:	000fffff 	.word	0x000fffff
100106a0:	10015130 	.word	0x10015130
100106a4:	fffffbed 	.word	0xfffffbed

100106a8 <scalbn>:
100106a8:	004b      	lsls	r3, r1, #1
100106aa:	b570      	push	{r4, r5, r6, lr}
100106ac:	0d5b      	lsrs	r3, r3, #21
100106ae:	0014      	movs	r4, r2
100106b0:	000a      	movs	r2, r1
100106b2:	2b00      	cmp	r3, #0
100106b4:	d11a      	bne.n	100106ec <scalbn+0x44>
100106b6:	004b      	lsls	r3, r1, #1
100106b8:	085b      	lsrs	r3, r3, #1
100106ba:	4303      	orrs	r3, r0
100106bc:	d015      	beq.n	100106ea <scalbn+0x42>
100106be:	2200      	movs	r2, #0
100106c0:	4b22      	ldr	r3, [pc, #136]	; (1001074c <scalbn+0xa4>)
100106c2:	f001 fd85 	bl	100121d0 <__aeabi_dmul>
100106c6:	4b22      	ldr	r3, [pc, #136]	; (10010750 <scalbn+0xa8>)
100106c8:	000a      	movs	r2, r1
100106ca:	429c      	cmp	r4, r3
100106cc:	db22      	blt.n	10010714 <scalbn+0x6c>
100106ce:	004b      	lsls	r3, r1, #1
100106d0:	0d5b      	lsrs	r3, r3, #21
100106d2:	3b36      	subs	r3, #54	; 0x36
100106d4:	4d1f      	ldr	r5, [pc, #124]	; (10010754 <scalbn+0xac>)
100106d6:	18e3      	adds	r3, r4, r3
100106d8:	42ab      	cmp	r3, r5
100106da:	dc20      	bgt.n	1001071e <scalbn+0x76>
100106dc:	2b00      	cmp	r3, #0
100106de:	dd0d      	ble.n	100106fc <scalbn+0x54>
100106e0:	4c1d      	ldr	r4, [pc, #116]	; (10010758 <scalbn+0xb0>)
100106e2:	051b      	lsls	r3, r3, #20
100106e4:	4022      	ands	r2, r4
100106e6:	431a      	orrs	r2, r3
100106e8:	0011      	movs	r1, r2
100106ea:	bd70      	pop	{r4, r5, r6, pc}
100106ec:	4d1b      	ldr	r5, [pc, #108]	; (1001075c <scalbn+0xb4>)
100106ee:	42ab      	cmp	r3, r5
100106f0:	d1f0      	bne.n	100106d4 <scalbn+0x2c>
100106f2:	0002      	movs	r2, r0
100106f4:	000b      	movs	r3, r1
100106f6:	f000 fe1b 	bl	10011330 <__aeabi_dadd>
100106fa:	e7f6      	b.n	100106ea <scalbn+0x42>
100106fc:	001d      	movs	r5, r3
100106fe:	3535      	adds	r5, #53	; 0x35
10010700:	da18      	bge.n	10010734 <scalbn+0x8c>
10010702:	4b17      	ldr	r3, [pc, #92]	; (10010760 <scalbn+0xb8>)
10010704:	0002      	movs	r2, r0
10010706:	429c      	cmp	r4, r3
10010708:	dc0a      	bgt.n	10010720 <scalbn+0x78>
1001070a:	000b      	movs	r3, r1
1001070c:	4815      	ldr	r0, [pc, #84]	; (10010764 <scalbn+0xbc>)
1001070e:	4916      	ldr	r1, [pc, #88]	; (10010768 <scalbn+0xc0>)
10010710:	f000 f832 	bl	10010778 <copysign>
10010714:	4a13      	ldr	r2, [pc, #76]	; (10010764 <scalbn+0xbc>)
10010716:	4b14      	ldr	r3, [pc, #80]	; (10010768 <scalbn+0xc0>)
10010718:	f001 fd5a 	bl	100121d0 <__aeabi_dmul>
1001071c:	e7e5      	b.n	100106ea <scalbn+0x42>
1001071e:	0002      	movs	r2, r0
10010720:	000b      	movs	r3, r1
10010722:	4812      	ldr	r0, [pc, #72]	; (1001076c <scalbn+0xc4>)
10010724:	4912      	ldr	r1, [pc, #72]	; (10010770 <scalbn+0xc8>)
10010726:	f000 f827 	bl	10010778 <copysign>
1001072a:	4a10      	ldr	r2, [pc, #64]	; (1001076c <scalbn+0xc4>)
1001072c:	4b10      	ldr	r3, [pc, #64]	; (10010770 <scalbn+0xc8>)
1001072e:	f001 fd4f 	bl	100121d0 <__aeabi_dmul>
10010732:	e7da      	b.n	100106ea <scalbn+0x42>
10010734:	4c08      	ldr	r4, [pc, #32]	; (10010758 <scalbn+0xb0>)
10010736:	3336      	adds	r3, #54	; 0x36
10010738:	4022      	ands	r2, r4
1001073a:	051b      	lsls	r3, r3, #20
1001073c:	4313      	orrs	r3, r2
1001073e:	0019      	movs	r1, r3
10010740:	2200      	movs	r2, #0
10010742:	4b0c      	ldr	r3, [pc, #48]	; (10010774 <scalbn+0xcc>)
10010744:	f001 fd44 	bl	100121d0 <__aeabi_dmul>
10010748:	e7cf      	b.n	100106ea <scalbn+0x42>
1001074a:	46c0      	nop			; (mov r8, r8)
1001074c:	43500000 	.word	0x43500000
10010750:	ffff3cb0 	.word	0xffff3cb0
10010754:	000007fe 	.word	0x000007fe
10010758:	800fffff 	.word	0x800fffff
1001075c:	000007ff 	.word	0x000007ff
10010760:	0000c350 	.word	0x0000c350
10010764:	c2f8f359 	.word	0xc2f8f359
10010768:	01a56e1f 	.word	0x01a56e1f
1001076c:	8800759c 	.word	0x8800759c
10010770:	7e37e43c 	.word	0x7e37e43c
10010774:	3c900000 	.word	0x3c900000

10010778 <copysign>:
10010778:	b530      	push	{r4, r5, lr}
1001077a:	004a      	lsls	r2, r1, #1
1001077c:	0fdb      	lsrs	r3, r3, #31
1001077e:	07db      	lsls	r3, r3, #31
10010780:	0852      	lsrs	r2, r2, #1
10010782:	431a      	orrs	r2, r3
10010784:	0011      	movs	r1, r2
10010786:	bd30      	pop	{r4, r5, pc}

10010788 <__gnu_thumb1_case_sqi>:
10010788:	b402      	push	{r1}
1001078a:	4671      	mov	r1, lr
1001078c:	0849      	lsrs	r1, r1, #1
1001078e:	0049      	lsls	r1, r1, #1
10010790:	5609      	ldrsb	r1, [r1, r0]
10010792:	0049      	lsls	r1, r1, #1
10010794:	448e      	add	lr, r1
10010796:	bc02      	pop	{r1}
10010798:	4770      	bx	lr
1001079a:	46c0      	nop			; (mov r8, r8)

1001079c <__gnu_thumb1_case_uqi>:
1001079c:	b402      	push	{r1}
1001079e:	4671      	mov	r1, lr
100107a0:	0849      	lsrs	r1, r1, #1
100107a2:	0049      	lsls	r1, r1, #1
100107a4:	5c09      	ldrb	r1, [r1, r0]
100107a6:	0049      	lsls	r1, r1, #1
100107a8:	448e      	add	lr, r1
100107aa:	bc02      	pop	{r1}
100107ac:	4770      	bx	lr
100107ae:	46c0      	nop			; (mov r8, r8)

100107b0 <__aeabi_uidiv>:
100107b0:	2200      	movs	r2, #0
100107b2:	0843      	lsrs	r3, r0, #1
100107b4:	428b      	cmp	r3, r1
100107b6:	d374      	bcc.n	100108a2 <__aeabi_uidiv+0xf2>
100107b8:	0903      	lsrs	r3, r0, #4
100107ba:	428b      	cmp	r3, r1
100107bc:	d35f      	bcc.n	1001087e <__aeabi_uidiv+0xce>
100107be:	0a03      	lsrs	r3, r0, #8
100107c0:	428b      	cmp	r3, r1
100107c2:	d344      	bcc.n	1001084e <__aeabi_uidiv+0x9e>
100107c4:	0b03      	lsrs	r3, r0, #12
100107c6:	428b      	cmp	r3, r1
100107c8:	d328      	bcc.n	1001081c <__aeabi_uidiv+0x6c>
100107ca:	0c03      	lsrs	r3, r0, #16
100107cc:	428b      	cmp	r3, r1
100107ce:	d30d      	bcc.n	100107ec <__aeabi_uidiv+0x3c>
100107d0:	22ff      	movs	r2, #255	; 0xff
100107d2:	0209      	lsls	r1, r1, #8
100107d4:	ba12      	rev	r2, r2
100107d6:	0c03      	lsrs	r3, r0, #16
100107d8:	428b      	cmp	r3, r1
100107da:	d302      	bcc.n	100107e2 <__aeabi_uidiv+0x32>
100107dc:	1212      	asrs	r2, r2, #8
100107de:	0209      	lsls	r1, r1, #8
100107e0:	d065      	beq.n	100108ae <__aeabi_uidiv+0xfe>
100107e2:	0b03      	lsrs	r3, r0, #12
100107e4:	428b      	cmp	r3, r1
100107e6:	d319      	bcc.n	1001081c <__aeabi_uidiv+0x6c>
100107e8:	e000      	b.n	100107ec <__aeabi_uidiv+0x3c>
100107ea:	0a09      	lsrs	r1, r1, #8
100107ec:	0bc3      	lsrs	r3, r0, #15
100107ee:	428b      	cmp	r3, r1
100107f0:	d301      	bcc.n	100107f6 <__aeabi_uidiv+0x46>
100107f2:	03cb      	lsls	r3, r1, #15
100107f4:	1ac0      	subs	r0, r0, r3
100107f6:	4152      	adcs	r2, r2
100107f8:	0b83      	lsrs	r3, r0, #14
100107fa:	428b      	cmp	r3, r1
100107fc:	d301      	bcc.n	10010802 <__aeabi_uidiv+0x52>
100107fe:	038b      	lsls	r3, r1, #14
10010800:	1ac0      	subs	r0, r0, r3
10010802:	4152      	adcs	r2, r2
10010804:	0b43      	lsrs	r3, r0, #13
10010806:	428b      	cmp	r3, r1
10010808:	d301      	bcc.n	1001080e <__aeabi_uidiv+0x5e>
1001080a:	034b      	lsls	r3, r1, #13
1001080c:	1ac0      	subs	r0, r0, r3
1001080e:	4152      	adcs	r2, r2
10010810:	0b03      	lsrs	r3, r0, #12
10010812:	428b      	cmp	r3, r1
10010814:	d301      	bcc.n	1001081a <__aeabi_uidiv+0x6a>
10010816:	030b      	lsls	r3, r1, #12
10010818:	1ac0      	subs	r0, r0, r3
1001081a:	4152      	adcs	r2, r2
1001081c:	0ac3      	lsrs	r3, r0, #11
1001081e:	428b      	cmp	r3, r1
10010820:	d301      	bcc.n	10010826 <__aeabi_uidiv+0x76>
10010822:	02cb      	lsls	r3, r1, #11
10010824:	1ac0      	subs	r0, r0, r3
10010826:	4152      	adcs	r2, r2
10010828:	0a83      	lsrs	r3, r0, #10
1001082a:	428b      	cmp	r3, r1
1001082c:	d301      	bcc.n	10010832 <__aeabi_uidiv+0x82>
1001082e:	028b      	lsls	r3, r1, #10
10010830:	1ac0      	subs	r0, r0, r3
10010832:	4152      	adcs	r2, r2
10010834:	0a43      	lsrs	r3, r0, #9
10010836:	428b      	cmp	r3, r1
10010838:	d301      	bcc.n	1001083e <__aeabi_uidiv+0x8e>
1001083a:	024b      	lsls	r3, r1, #9
1001083c:	1ac0      	subs	r0, r0, r3
1001083e:	4152      	adcs	r2, r2
10010840:	0a03      	lsrs	r3, r0, #8
10010842:	428b      	cmp	r3, r1
10010844:	d301      	bcc.n	1001084a <__aeabi_uidiv+0x9a>
10010846:	020b      	lsls	r3, r1, #8
10010848:	1ac0      	subs	r0, r0, r3
1001084a:	4152      	adcs	r2, r2
1001084c:	d2cd      	bcs.n	100107ea <__aeabi_uidiv+0x3a>
1001084e:	09c3      	lsrs	r3, r0, #7
10010850:	428b      	cmp	r3, r1
10010852:	d301      	bcc.n	10010858 <__aeabi_uidiv+0xa8>
10010854:	01cb      	lsls	r3, r1, #7
10010856:	1ac0      	subs	r0, r0, r3
10010858:	4152      	adcs	r2, r2
1001085a:	0983      	lsrs	r3, r0, #6
1001085c:	428b      	cmp	r3, r1
1001085e:	d301      	bcc.n	10010864 <__aeabi_uidiv+0xb4>
10010860:	018b      	lsls	r3, r1, #6
10010862:	1ac0      	subs	r0, r0, r3
10010864:	4152      	adcs	r2, r2
10010866:	0943      	lsrs	r3, r0, #5
10010868:	428b      	cmp	r3, r1
1001086a:	d301      	bcc.n	10010870 <__aeabi_uidiv+0xc0>
1001086c:	014b      	lsls	r3, r1, #5
1001086e:	1ac0      	subs	r0, r0, r3
10010870:	4152      	adcs	r2, r2
10010872:	0903      	lsrs	r3, r0, #4
10010874:	428b      	cmp	r3, r1
10010876:	d301      	bcc.n	1001087c <__aeabi_uidiv+0xcc>
10010878:	010b      	lsls	r3, r1, #4
1001087a:	1ac0      	subs	r0, r0, r3
1001087c:	4152      	adcs	r2, r2
1001087e:	08c3      	lsrs	r3, r0, #3
10010880:	428b      	cmp	r3, r1
10010882:	d301      	bcc.n	10010888 <__aeabi_uidiv+0xd8>
10010884:	00cb      	lsls	r3, r1, #3
10010886:	1ac0      	subs	r0, r0, r3
10010888:	4152      	adcs	r2, r2
1001088a:	0883      	lsrs	r3, r0, #2
1001088c:	428b      	cmp	r3, r1
1001088e:	d301      	bcc.n	10010894 <__aeabi_uidiv+0xe4>
10010890:	008b      	lsls	r3, r1, #2
10010892:	1ac0      	subs	r0, r0, r3
10010894:	4152      	adcs	r2, r2
10010896:	0843      	lsrs	r3, r0, #1
10010898:	428b      	cmp	r3, r1
1001089a:	d301      	bcc.n	100108a0 <__aeabi_uidiv+0xf0>
1001089c:	004b      	lsls	r3, r1, #1
1001089e:	1ac0      	subs	r0, r0, r3
100108a0:	4152      	adcs	r2, r2
100108a2:	1a41      	subs	r1, r0, r1
100108a4:	d200      	bcs.n	100108a8 <__aeabi_uidiv+0xf8>
100108a6:	4601      	mov	r1, r0
100108a8:	4152      	adcs	r2, r2
100108aa:	4610      	mov	r0, r2
100108ac:	4770      	bx	lr
100108ae:	e7ff      	b.n	100108b0 <__aeabi_uidiv+0x100>
100108b0:	b501      	push	{r0, lr}
100108b2:	2000      	movs	r0, #0
100108b4:	f000 f8f0 	bl	10010a98 <__aeabi_idiv0>
100108b8:	bd02      	pop	{r1, pc}
100108ba:	46c0      	nop			; (mov r8, r8)

100108bc <__aeabi_uidivmod>:
100108bc:	2900      	cmp	r1, #0
100108be:	d0f7      	beq.n	100108b0 <__aeabi_uidiv+0x100>
100108c0:	e776      	b.n	100107b0 <__aeabi_uidiv>
100108c2:	4770      	bx	lr

100108c4 <__aeabi_idiv>:
100108c4:	4603      	mov	r3, r0
100108c6:	430b      	orrs	r3, r1
100108c8:	d47f      	bmi.n	100109ca <__aeabi_idiv+0x106>
100108ca:	2200      	movs	r2, #0
100108cc:	0843      	lsrs	r3, r0, #1
100108ce:	428b      	cmp	r3, r1
100108d0:	d374      	bcc.n	100109bc <__aeabi_idiv+0xf8>
100108d2:	0903      	lsrs	r3, r0, #4
100108d4:	428b      	cmp	r3, r1
100108d6:	d35f      	bcc.n	10010998 <__aeabi_idiv+0xd4>
100108d8:	0a03      	lsrs	r3, r0, #8
100108da:	428b      	cmp	r3, r1
100108dc:	d344      	bcc.n	10010968 <__aeabi_idiv+0xa4>
100108de:	0b03      	lsrs	r3, r0, #12
100108e0:	428b      	cmp	r3, r1
100108e2:	d328      	bcc.n	10010936 <__aeabi_idiv+0x72>
100108e4:	0c03      	lsrs	r3, r0, #16
100108e6:	428b      	cmp	r3, r1
100108e8:	d30d      	bcc.n	10010906 <__aeabi_idiv+0x42>
100108ea:	22ff      	movs	r2, #255	; 0xff
100108ec:	0209      	lsls	r1, r1, #8
100108ee:	ba12      	rev	r2, r2
100108f0:	0c03      	lsrs	r3, r0, #16
100108f2:	428b      	cmp	r3, r1
100108f4:	d302      	bcc.n	100108fc <__aeabi_idiv+0x38>
100108f6:	1212      	asrs	r2, r2, #8
100108f8:	0209      	lsls	r1, r1, #8
100108fa:	d065      	beq.n	100109c8 <__aeabi_idiv+0x104>
100108fc:	0b03      	lsrs	r3, r0, #12
100108fe:	428b      	cmp	r3, r1
10010900:	d319      	bcc.n	10010936 <__aeabi_idiv+0x72>
10010902:	e000      	b.n	10010906 <__aeabi_idiv+0x42>
10010904:	0a09      	lsrs	r1, r1, #8
10010906:	0bc3      	lsrs	r3, r0, #15
10010908:	428b      	cmp	r3, r1
1001090a:	d301      	bcc.n	10010910 <__aeabi_idiv+0x4c>
1001090c:	03cb      	lsls	r3, r1, #15
1001090e:	1ac0      	subs	r0, r0, r3
10010910:	4152      	adcs	r2, r2
10010912:	0b83      	lsrs	r3, r0, #14
10010914:	428b      	cmp	r3, r1
10010916:	d301      	bcc.n	1001091c <__aeabi_idiv+0x58>
10010918:	038b      	lsls	r3, r1, #14
1001091a:	1ac0      	subs	r0, r0, r3
1001091c:	4152      	adcs	r2, r2
1001091e:	0b43      	lsrs	r3, r0, #13
10010920:	428b      	cmp	r3, r1
10010922:	d301      	bcc.n	10010928 <__aeabi_idiv+0x64>
10010924:	034b      	lsls	r3, r1, #13
10010926:	1ac0      	subs	r0, r0, r3
10010928:	4152      	adcs	r2, r2
1001092a:	0b03      	lsrs	r3, r0, #12
1001092c:	428b      	cmp	r3, r1
1001092e:	d301      	bcc.n	10010934 <__aeabi_idiv+0x70>
10010930:	030b      	lsls	r3, r1, #12
10010932:	1ac0      	subs	r0, r0, r3
10010934:	4152      	adcs	r2, r2
10010936:	0ac3      	lsrs	r3, r0, #11
10010938:	428b      	cmp	r3, r1
1001093a:	d301      	bcc.n	10010940 <__aeabi_idiv+0x7c>
1001093c:	02cb      	lsls	r3, r1, #11
1001093e:	1ac0      	subs	r0, r0, r3
10010940:	4152      	adcs	r2, r2
10010942:	0a83      	lsrs	r3, r0, #10
10010944:	428b      	cmp	r3, r1
10010946:	d301      	bcc.n	1001094c <__aeabi_idiv+0x88>
10010948:	028b      	lsls	r3, r1, #10
1001094a:	1ac0      	subs	r0, r0, r3
1001094c:	4152      	adcs	r2, r2
1001094e:	0a43      	lsrs	r3, r0, #9
10010950:	428b      	cmp	r3, r1
10010952:	d301      	bcc.n	10010958 <__aeabi_idiv+0x94>
10010954:	024b      	lsls	r3, r1, #9
10010956:	1ac0      	subs	r0, r0, r3
10010958:	4152      	adcs	r2, r2
1001095a:	0a03      	lsrs	r3, r0, #8
1001095c:	428b      	cmp	r3, r1
1001095e:	d301      	bcc.n	10010964 <__aeabi_idiv+0xa0>
10010960:	020b      	lsls	r3, r1, #8
10010962:	1ac0      	subs	r0, r0, r3
10010964:	4152      	adcs	r2, r2
10010966:	d2cd      	bcs.n	10010904 <__aeabi_idiv+0x40>
10010968:	09c3      	lsrs	r3, r0, #7
1001096a:	428b      	cmp	r3, r1
1001096c:	d301      	bcc.n	10010972 <__aeabi_idiv+0xae>
1001096e:	01cb      	lsls	r3, r1, #7
10010970:	1ac0      	subs	r0, r0, r3
10010972:	4152      	adcs	r2, r2
10010974:	0983      	lsrs	r3, r0, #6
10010976:	428b      	cmp	r3, r1
10010978:	d301      	bcc.n	1001097e <__aeabi_idiv+0xba>
1001097a:	018b      	lsls	r3, r1, #6
1001097c:	1ac0      	subs	r0, r0, r3
1001097e:	4152      	adcs	r2, r2
10010980:	0943      	lsrs	r3, r0, #5
10010982:	428b      	cmp	r3, r1
10010984:	d301      	bcc.n	1001098a <__aeabi_idiv+0xc6>
10010986:	014b      	lsls	r3, r1, #5
10010988:	1ac0      	subs	r0, r0, r3
1001098a:	4152      	adcs	r2, r2
1001098c:	0903      	lsrs	r3, r0, #4
1001098e:	428b      	cmp	r3, r1
10010990:	d301      	bcc.n	10010996 <__aeabi_idiv+0xd2>
10010992:	010b      	lsls	r3, r1, #4
10010994:	1ac0      	subs	r0, r0, r3
10010996:	4152      	adcs	r2, r2
10010998:	08c3      	lsrs	r3, r0, #3
1001099a:	428b      	cmp	r3, r1
1001099c:	d301      	bcc.n	100109a2 <__aeabi_idiv+0xde>
1001099e:	00cb      	lsls	r3, r1, #3
100109a0:	1ac0      	subs	r0, r0, r3
100109a2:	4152      	adcs	r2, r2
100109a4:	0883      	lsrs	r3, r0, #2
100109a6:	428b      	cmp	r3, r1
100109a8:	d301      	bcc.n	100109ae <__aeabi_idiv+0xea>
100109aa:	008b      	lsls	r3, r1, #2
100109ac:	1ac0      	subs	r0, r0, r3
100109ae:	4152      	adcs	r2, r2
100109b0:	0843      	lsrs	r3, r0, #1
100109b2:	428b      	cmp	r3, r1
100109b4:	d301      	bcc.n	100109ba <__aeabi_idiv+0xf6>
100109b6:	004b      	lsls	r3, r1, #1
100109b8:	1ac0      	subs	r0, r0, r3
100109ba:	4152      	adcs	r2, r2
100109bc:	1a41      	subs	r1, r0, r1
100109be:	d200      	bcs.n	100109c2 <__aeabi_idiv+0xfe>
100109c0:	4601      	mov	r1, r0
100109c2:	4152      	adcs	r2, r2
100109c4:	4610      	mov	r0, r2
100109c6:	4770      	bx	lr
100109c8:	e05d      	b.n	10010a86 <__aeabi_idiv+0x1c2>
100109ca:	0fca      	lsrs	r2, r1, #31
100109cc:	d000      	beq.n	100109d0 <__aeabi_idiv+0x10c>
100109ce:	4249      	negs	r1, r1
100109d0:	1003      	asrs	r3, r0, #32
100109d2:	d300      	bcc.n	100109d6 <__aeabi_idiv+0x112>
100109d4:	4240      	negs	r0, r0
100109d6:	4053      	eors	r3, r2
100109d8:	2200      	movs	r2, #0
100109da:	469c      	mov	ip, r3
100109dc:	0903      	lsrs	r3, r0, #4
100109de:	428b      	cmp	r3, r1
100109e0:	d32d      	bcc.n	10010a3e <__aeabi_idiv+0x17a>
100109e2:	0a03      	lsrs	r3, r0, #8
100109e4:	428b      	cmp	r3, r1
100109e6:	d312      	bcc.n	10010a0e <__aeabi_idiv+0x14a>
100109e8:	22fc      	movs	r2, #252	; 0xfc
100109ea:	0189      	lsls	r1, r1, #6
100109ec:	ba12      	rev	r2, r2
100109ee:	0a03      	lsrs	r3, r0, #8
100109f0:	428b      	cmp	r3, r1
100109f2:	d30c      	bcc.n	10010a0e <__aeabi_idiv+0x14a>
100109f4:	0189      	lsls	r1, r1, #6
100109f6:	1192      	asrs	r2, r2, #6
100109f8:	428b      	cmp	r3, r1
100109fa:	d308      	bcc.n	10010a0e <__aeabi_idiv+0x14a>
100109fc:	0189      	lsls	r1, r1, #6
100109fe:	1192      	asrs	r2, r2, #6
10010a00:	428b      	cmp	r3, r1
10010a02:	d304      	bcc.n	10010a0e <__aeabi_idiv+0x14a>
10010a04:	0189      	lsls	r1, r1, #6
10010a06:	d03a      	beq.n	10010a7e <__aeabi_idiv+0x1ba>
10010a08:	1192      	asrs	r2, r2, #6
10010a0a:	e000      	b.n	10010a0e <__aeabi_idiv+0x14a>
10010a0c:	0989      	lsrs	r1, r1, #6
10010a0e:	09c3      	lsrs	r3, r0, #7
10010a10:	428b      	cmp	r3, r1
10010a12:	d301      	bcc.n	10010a18 <__aeabi_idiv+0x154>
10010a14:	01cb      	lsls	r3, r1, #7
10010a16:	1ac0      	subs	r0, r0, r3
10010a18:	4152      	adcs	r2, r2
10010a1a:	0983      	lsrs	r3, r0, #6
10010a1c:	428b      	cmp	r3, r1
10010a1e:	d301      	bcc.n	10010a24 <__aeabi_idiv+0x160>
10010a20:	018b      	lsls	r3, r1, #6
10010a22:	1ac0      	subs	r0, r0, r3
10010a24:	4152      	adcs	r2, r2
10010a26:	0943      	lsrs	r3, r0, #5
10010a28:	428b      	cmp	r3, r1
10010a2a:	d301      	bcc.n	10010a30 <__aeabi_idiv+0x16c>
10010a2c:	014b      	lsls	r3, r1, #5
10010a2e:	1ac0      	subs	r0, r0, r3
10010a30:	4152      	adcs	r2, r2
10010a32:	0903      	lsrs	r3, r0, #4
10010a34:	428b      	cmp	r3, r1
10010a36:	d301      	bcc.n	10010a3c <__aeabi_idiv+0x178>
10010a38:	010b      	lsls	r3, r1, #4
10010a3a:	1ac0      	subs	r0, r0, r3
10010a3c:	4152      	adcs	r2, r2
10010a3e:	08c3      	lsrs	r3, r0, #3
10010a40:	428b      	cmp	r3, r1
10010a42:	d301      	bcc.n	10010a48 <__aeabi_idiv+0x184>
10010a44:	00cb      	lsls	r3, r1, #3
10010a46:	1ac0      	subs	r0, r0, r3
10010a48:	4152      	adcs	r2, r2
10010a4a:	0883      	lsrs	r3, r0, #2
10010a4c:	428b      	cmp	r3, r1
10010a4e:	d301      	bcc.n	10010a54 <__aeabi_idiv+0x190>
10010a50:	008b      	lsls	r3, r1, #2
10010a52:	1ac0      	subs	r0, r0, r3
10010a54:	4152      	adcs	r2, r2
10010a56:	d2d9      	bcs.n	10010a0c <__aeabi_idiv+0x148>
10010a58:	0843      	lsrs	r3, r0, #1
10010a5a:	428b      	cmp	r3, r1
10010a5c:	d301      	bcc.n	10010a62 <__aeabi_idiv+0x19e>
10010a5e:	004b      	lsls	r3, r1, #1
10010a60:	1ac0      	subs	r0, r0, r3
10010a62:	4152      	adcs	r2, r2
10010a64:	1a41      	subs	r1, r0, r1
10010a66:	d200      	bcs.n	10010a6a <__aeabi_idiv+0x1a6>
10010a68:	4601      	mov	r1, r0
10010a6a:	4663      	mov	r3, ip
10010a6c:	4152      	adcs	r2, r2
10010a6e:	105b      	asrs	r3, r3, #1
10010a70:	4610      	mov	r0, r2
10010a72:	d301      	bcc.n	10010a78 <__aeabi_idiv+0x1b4>
10010a74:	4240      	negs	r0, r0
10010a76:	2b00      	cmp	r3, #0
10010a78:	d500      	bpl.n	10010a7c <__aeabi_idiv+0x1b8>
10010a7a:	4249      	negs	r1, r1
10010a7c:	4770      	bx	lr
10010a7e:	4663      	mov	r3, ip
10010a80:	105b      	asrs	r3, r3, #1
10010a82:	d300      	bcc.n	10010a86 <__aeabi_idiv+0x1c2>
10010a84:	4240      	negs	r0, r0
10010a86:	b501      	push	{r0, lr}
10010a88:	2000      	movs	r0, #0
10010a8a:	f000 f805 	bl	10010a98 <__aeabi_idiv0>
10010a8e:	bd02      	pop	{r1, pc}

10010a90 <__aeabi_idivmod>:
10010a90:	2900      	cmp	r1, #0
10010a92:	d0f8      	beq.n	10010a86 <__aeabi_idiv+0x1c2>
10010a94:	e716      	b.n	100108c4 <__aeabi_idiv>
10010a96:	4770      	bx	lr

10010a98 <__aeabi_idiv0>:
10010a98:	4770      	bx	lr
10010a9a:	46c0      	nop			; (mov r8, r8)

10010a9c <__aeabi_cdrcmple>:
10010a9c:	4684      	mov	ip, r0
10010a9e:	1c10      	adds	r0, r2, #0
10010aa0:	4662      	mov	r2, ip
10010aa2:	468c      	mov	ip, r1
10010aa4:	1c19      	adds	r1, r3, #0
10010aa6:	4663      	mov	r3, ip
10010aa8:	e000      	b.n	10010aac <__aeabi_cdcmpeq>
10010aaa:	46c0      	nop			; (mov r8, r8)

10010aac <__aeabi_cdcmpeq>:
10010aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010aae:	f001 fb25 	bl	100120fc <__ledf2>
10010ab2:	2800      	cmp	r0, #0
10010ab4:	d401      	bmi.n	10010aba <__aeabi_cdcmpeq+0xe>
10010ab6:	2100      	movs	r1, #0
10010ab8:	42c8      	cmn	r0, r1
10010aba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010abc <__aeabi_dcmpeq>:
10010abc:	b510      	push	{r4, lr}
10010abe:	f001 fa79 	bl	10011fb4 <__eqdf2>
10010ac2:	4240      	negs	r0, r0
10010ac4:	3001      	adds	r0, #1
10010ac6:	bd10      	pop	{r4, pc}

10010ac8 <__aeabi_dcmplt>:
10010ac8:	b510      	push	{r4, lr}
10010aca:	f001 fb17 	bl	100120fc <__ledf2>
10010ace:	2800      	cmp	r0, #0
10010ad0:	db01      	blt.n	10010ad6 <__aeabi_dcmplt+0xe>
10010ad2:	2000      	movs	r0, #0
10010ad4:	bd10      	pop	{r4, pc}
10010ad6:	2001      	movs	r0, #1
10010ad8:	bd10      	pop	{r4, pc}
10010ada:	46c0      	nop			; (mov r8, r8)

10010adc <__aeabi_dcmple>:
10010adc:	b510      	push	{r4, lr}
10010ade:	f001 fb0d 	bl	100120fc <__ledf2>
10010ae2:	2800      	cmp	r0, #0
10010ae4:	dd01      	ble.n	10010aea <__aeabi_dcmple+0xe>
10010ae6:	2000      	movs	r0, #0
10010ae8:	bd10      	pop	{r4, pc}
10010aea:	2001      	movs	r0, #1
10010aec:	bd10      	pop	{r4, pc}
10010aee:	46c0      	nop			; (mov r8, r8)

10010af0 <__aeabi_dcmpgt>:
10010af0:	b510      	push	{r4, lr}
10010af2:	f001 fa9f 	bl	10012034 <__gedf2>
10010af6:	2800      	cmp	r0, #0
10010af8:	dc01      	bgt.n	10010afe <__aeabi_dcmpgt+0xe>
10010afa:	2000      	movs	r0, #0
10010afc:	bd10      	pop	{r4, pc}
10010afe:	2001      	movs	r0, #1
10010b00:	bd10      	pop	{r4, pc}
10010b02:	46c0      	nop			; (mov r8, r8)

10010b04 <__aeabi_dcmpge>:
10010b04:	b510      	push	{r4, lr}
10010b06:	f001 fa95 	bl	10012034 <__gedf2>
10010b0a:	2800      	cmp	r0, #0
10010b0c:	da01      	bge.n	10010b12 <__aeabi_dcmpge+0xe>
10010b0e:	2000      	movs	r0, #0
10010b10:	bd10      	pop	{r4, pc}
10010b12:	2001      	movs	r0, #1
10010b14:	bd10      	pop	{r4, pc}
10010b16:	46c0      	nop			; (mov r8, r8)

10010b18 <__aeabi_cfrcmple>:
10010b18:	4684      	mov	ip, r0
10010b1a:	1c08      	adds	r0, r1, #0
10010b1c:	4661      	mov	r1, ip
10010b1e:	e7ff      	b.n	10010b20 <__aeabi_cfcmpeq>

10010b20 <__aeabi_cfcmpeq>:
10010b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010b22:	f000 f8bd 	bl	10010ca0 <__lesf2>
10010b26:	2800      	cmp	r0, #0
10010b28:	d401      	bmi.n	10010b2e <__aeabi_cfcmpeq+0xe>
10010b2a:	2100      	movs	r1, #0
10010b2c:	42c8      	cmn	r0, r1
10010b2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010b30 <__aeabi_fcmpeq>:
10010b30:	b510      	push	{r4, lr}
10010b32:	f000 f849 	bl	10010bc8 <__eqsf2>
10010b36:	4240      	negs	r0, r0
10010b38:	3001      	adds	r0, #1
10010b3a:	bd10      	pop	{r4, pc}

10010b3c <__aeabi_fcmplt>:
10010b3c:	b510      	push	{r4, lr}
10010b3e:	f000 f8af 	bl	10010ca0 <__lesf2>
10010b42:	2800      	cmp	r0, #0
10010b44:	db01      	blt.n	10010b4a <__aeabi_fcmplt+0xe>
10010b46:	2000      	movs	r0, #0
10010b48:	bd10      	pop	{r4, pc}
10010b4a:	2001      	movs	r0, #1
10010b4c:	bd10      	pop	{r4, pc}
10010b4e:	46c0      	nop			; (mov r8, r8)

10010b50 <__aeabi_fcmple>:
10010b50:	b510      	push	{r4, lr}
10010b52:	f000 f8a5 	bl	10010ca0 <__lesf2>
10010b56:	2800      	cmp	r0, #0
10010b58:	dd01      	ble.n	10010b5e <__aeabi_fcmple+0xe>
10010b5a:	2000      	movs	r0, #0
10010b5c:	bd10      	pop	{r4, pc}
10010b5e:	2001      	movs	r0, #1
10010b60:	bd10      	pop	{r4, pc}
10010b62:	46c0      	nop			; (mov r8, r8)

10010b64 <__aeabi_fcmpgt>:
10010b64:	b510      	push	{r4, lr}
10010b66:	f000 f857 	bl	10010c18 <__gesf2>
10010b6a:	2800      	cmp	r0, #0
10010b6c:	dc01      	bgt.n	10010b72 <__aeabi_fcmpgt+0xe>
10010b6e:	2000      	movs	r0, #0
10010b70:	bd10      	pop	{r4, pc}
10010b72:	2001      	movs	r0, #1
10010b74:	bd10      	pop	{r4, pc}
10010b76:	46c0      	nop			; (mov r8, r8)

10010b78 <__aeabi_fcmpge>:
10010b78:	b510      	push	{r4, lr}
10010b7a:	f000 f84d 	bl	10010c18 <__gesf2>
10010b7e:	2800      	cmp	r0, #0
10010b80:	da01      	bge.n	10010b86 <__aeabi_fcmpge+0xe>
10010b82:	2000      	movs	r0, #0
10010b84:	bd10      	pop	{r4, pc}
10010b86:	2001      	movs	r0, #1
10010b88:	bd10      	pop	{r4, pc}
10010b8a:	46c0      	nop			; (mov r8, r8)

10010b8c <__aeabi_d2uiz>:
10010b8c:	b570      	push	{r4, r5, r6, lr}
10010b8e:	2200      	movs	r2, #0
10010b90:	4b0c      	ldr	r3, [pc, #48]	; (10010bc4 <__aeabi_d2uiz+0x38>)
10010b92:	0004      	movs	r4, r0
10010b94:	000d      	movs	r5, r1
10010b96:	f7ff ffb5 	bl	10010b04 <__aeabi_dcmpge>
10010b9a:	2800      	cmp	r0, #0
10010b9c:	d104      	bne.n	10010ba8 <__aeabi_d2uiz+0x1c>
10010b9e:	0020      	movs	r0, r4
10010ba0:	0029      	movs	r1, r5
10010ba2:	f002 f903 	bl	10012dac <__aeabi_d2iz>
10010ba6:	bd70      	pop	{r4, r5, r6, pc}
10010ba8:	4b06      	ldr	r3, [pc, #24]	; (10010bc4 <__aeabi_d2uiz+0x38>)
10010baa:	2200      	movs	r2, #0
10010bac:	0020      	movs	r0, r4
10010bae:	0029      	movs	r1, r5
10010bb0:	f001 fd88 	bl	100126c4 <__aeabi_dsub>
10010bb4:	f002 f8fa 	bl	10012dac <__aeabi_d2iz>
10010bb8:	2380      	movs	r3, #128	; 0x80
10010bba:	061b      	lsls	r3, r3, #24
10010bbc:	469c      	mov	ip, r3
10010bbe:	4460      	add	r0, ip
10010bc0:	e7f1      	b.n	10010ba6 <__aeabi_d2uiz+0x1a>
10010bc2:	46c0      	nop			; (mov r8, r8)
10010bc4:	41e00000 	.word	0x41e00000

10010bc8 <__eqsf2>:
10010bc8:	0243      	lsls	r3, r0, #9
10010bca:	b570      	push	{r4, r5, r6, lr}
10010bcc:	0042      	lsls	r2, r0, #1
10010bce:	004c      	lsls	r4, r1, #1
10010bd0:	0a5d      	lsrs	r5, r3, #9
10010bd2:	0fc3      	lsrs	r3, r0, #31
10010bd4:	0248      	lsls	r0, r1, #9
10010bd6:	0e12      	lsrs	r2, r2, #24
10010bd8:	0a46      	lsrs	r6, r0, #9
10010bda:	0e24      	lsrs	r4, r4, #24
10010bdc:	0fc9      	lsrs	r1, r1, #31
10010bde:	2aff      	cmp	r2, #255	; 0xff
10010be0:	d00f      	beq.n	10010c02 <__eqsf2+0x3a>
10010be2:	2cff      	cmp	r4, #255	; 0xff
10010be4:	d011      	beq.n	10010c0a <__eqsf2+0x42>
10010be6:	2001      	movs	r0, #1
10010be8:	42a2      	cmp	r2, r4
10010bea:	d000      	beq.n	10010bee <__eqsf2+0x26>
10010bec:	bd70      	pop	{r4, r5, r6, pc}
10010bee:	42b5      	cmp	r5, r6
10010bf0:	d1fc      	bne.n	10010bec <__eqsf2+0x24>
10010bf2:	428b      	cmp	r3, r1
10010bf4:	d00d      	beq.n	10010c12 <__eqsf2+0x4a>
10010bf6:	2a00      	cmp	r2, #0
10010bf8:	d1f8      	bne.n	10010bec <__eqsf2+0x24>
10010bfa:	0028      	movs	r0, r5
10010bfc:	1e43      	subs	r3, r0, #1
10010bfe:	4198      	sbcs	r0, r3
10010c00:	e7f4      	b.n	10010bec <__eqsf2+0x24>
10010c02:	2001      	movs	r0, #1
10010c04:	2d00      	cmp	r5, #0
10010c06:	d1f1      	bne.n	10010bec <__eqsf2+0x24>
10010c08:	e7eb      	b.n	10010be2 <__eqsf2+0x1a>
10010c0a:	2001      	movs	r0, #1
10010c0c:	2e00      	cmp	r6, #0
10010c0e:	d1ed      	bne.n	10010bec <__eqsf2+0x24>
10010c10:	e7e9      	b.n	10010be6 <__eqsf2+0x1e>
10010c12:	2000      	movs	r0, #0
10010c14:	e7ea      	b.n	10010bec <__eqsf2+0x24>
10010c16:	46c0      	nop			; (mov r8, r8)

10010c18 <__gesf2>:
10010c18:	0243      	lsls	r3, r0, #9
10010c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c1c:	0042      	lsls	r2, r0, #1
10010c1e:	0a5d      	lsrs	r5, r3, #9
10010c20:	0fc3      	lsrs	r3, r0, #31
10010c22:	0248      	lsls	r0, r1, #9
10010c24:	0a44      	lsrs	r4, r0, #9
10010c26:	0048      	lsls	r0, r1, #1
10010c28:	0e12      	lsrs	r2, r2, #24
10010c2a:	0e00      	lsrs	r0, r0, #24
10010c2c:	0fc9      	lsrs	r1, r1, #31
10010c2e:	2aff      	cmp	r2, #255	; 0xff
10010c30:	d01f      	beq.n	10010c72 <__gesf2+0x5a>
10010c32:	28ff      	cmp	r0, #255	; 0xff
10010c34:	d022      	beq.n	10010c7c <__gesf2+0x64>
10010c36:	2a00      	cmp	r2, #0
10010c38:	d109      	bne.n	10010c4e <__gesf2+0x36>
10010c3a:	426e      	negs	r6, r5
10010c3c:	416e      	adcs	r6, r5
10010c3e:	2800      	cmp	r0, #0
10010c40:	d10f      	bne.n	10010c62 <__gesf2+0x4a>
10010c42:	2c00      	cmp	r4, #0
10010c44:	d10d      	bne.n	10010c62 <__gesf2+0x4a>
10010c46:	2000      	movs	r0, #0
10010c48:	2d00      	cmp	r5, #0
10010c4a:	d009      	beq.n	10010c60 <__gesf2+0x48>
10010c4c:	e005      	b.n	10010c5a <__gesf2+0x42>
10010c4e:	2800      	cmp	r0, #0
10010c50:	d101      	bne.n	10010c56 <__gesf2+0x3e>
10010c52:	2c00      	cmp	r4, #0
10010c54:	d001      	beq.n	10010c5a <__gesf2+0x42>
10010c56:	428b      	cmp	r3, r1
10010c58:	d013      	beq.n	10010c82 <__gesf2+0x6a>
10010c5a:	4258      	negs	r0, r3
10010c5c:	2301      	movs	r3, #1
10010c5e:	4318      	orrs	r0, r3
10010c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c62:	2e00      	cmp	r6, #0
10010c64:	d0f7      	beq.n	10010c56 <__gesf2+0x3e>
10010c66:	4248      	negs	r0, r1
10010c68:	4141      	adcs	r1, r0
10010c6a:	2001      	movs	r0, #1
10010c6c:	4249      	negs	r1, r1
10010c6e:	4308      	orrs	r0, r1
10010c70:	e7f6      	b.n	10010c60 <__gesf2+0x48>
10010c72:	2d00      	cmp	r5, #0
10010c74:	d0dd      	beq.n	10010c32 <__gesf2+0x1a>
10010c76:	2002      	movs	r0, #2
10010c78:	4240      	negs	r0, r0
10010c7a:	e7f1      	b.n	10010c60 <__gesf2+0x48>
10010c7c:	2c00      	cmp	r4, #0
10010c7e:	d0da      	beq.n	10010c36 <__gesf2+0x1e>
10010c80:	e7f9      	b.n	10010c76 <__gesf2+0x5e>
10010c82:	4282      	cmp	r2, r0
10010c84:	dce9      	bgt.n	10010c5a <__gesf2+0x42>
10010c86:	db04      	blt.n	10010c92 <__gesf2+0x7a>
10010c88:	42a5      	cmp	r5, r4
10010c8a:	d8e6      	bhi.n	10010c5a <__gesf2+0x42>
10010c8c:	2000      	movs	r0, #0
10010c8e:	42a5      	cmp	r5, r4
10010c90:	d2e6      	bcs.n	10010c60 <__gesf2+0x48>
10010c92:	4258      	negs	r0, r3
10010c94:	4143      	adcs	r3, r0
10010c96:	2001      	movs	r0, #1
10010c98:	425b      	negs	r3, r3
10010c9a:	4318      	orrs	r0, r3
10010c9c:	e7e0      	b.n	10010c60 <__gesf2+0x48>
10010c9e:	46c0      	nop			; (mov r8, r8)

10010ca0 <__lesf2>:
10010ca0:	0243      	lsls	r3, r0, #9
10010ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ca4:	0042      	lsls	r2, r0, #1
10010ca6:	004c      	lsls	r4, r1, #1
10010ca8:	0a5e      	lsrs	r6, r3, #9
10010caa:	0fc3      	lsrs	r3, r0, #31
10010cac:	0248      	lsls	r0, r1, #9
10010cae:	0e12      	lsrs	r2, r2, #24
10010cb0:	0a45      	lsrs	r5, r0, #9
10010cb2:	0e24      	lsrs	r4, r4, #24
10010cb4:	0fc9      	lsrs	r1, r1, #31
10010cb6:	2aff      	cmp	r2, #255	; 0xff
10010cb8:	d017      	beq.n	10010cea <__lesf2+0x4a>
10010cba:	2cff      	cmp	r4, #255	; 0xff
10010cbc:	d019      	beq.n	10010cf2 <__lesf2+0x52>
10010cbe:	2a00      	cmp	r2, #0
10010cc0:	d10b      	bne.n	10010cda <__lesf2+0x3a>
10010cc2:	4270      	negs	r0, r6
10010cc4:	4170      	adcs	r0, r6
10010cc6:	2c00      	cmp	r4, #0
10010cc8:	d017      	beq.n	10010cfa <__lesf2+0x5a>
10010cca:	2800      	cmp	r0, #0
10010ccc:	d007      	beq.n	10010cde <__lesf2+0x3e>
10010cce:	4248      	negs	r0, r1
10010cd0:	4141      	adcs	r1, r0
10010cd2:	2001      	movs	r0, #1
10010cd4:	4249      	negs	r1, r1
10010cd6:	4308      	orrs	r0, r1
10010cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010cda:	2c00      	cmp	r4, #0
10010cdc:	d013      	beq.n	10010d06 <__lesf2+0x66>
10010cde:	428b      	cmp	r3, r1
10010ce0:	d014      	beq.n	10010d0c <__lesf2+0x6c>
10010ce2:	4258      	negs	r0, r3
10010ce4:	2301      	movs	r3, #1
10010ce6:	4318      	orrs	r0, r3
10010ce8:	e7f6      	b.n	10010cd8 <__lesf2+0x38>
10010cea:	2002      	movs	r0, #2
10010cec:	2e00      	cmp	r6, #0
10010cee:	d1f3      	bne.n	10010cd8 <__lesf2+0x38>
10010cf0:	e7e3      	b.n	10010cba <__lesf2+0x1a>
10010cf2:	2002      	movs	r0, #2
10010cf4:	2d00      	cmp	r5, #0
10010cf6:	d1ef      	bne.n	10010cd8 <__lesf2+0x38>
10010cf8:	e7e1      	b.n	10010cbe <__lesf2+0x1e>
10010cfa:	2d00      	cmp	r5, #0
10010cfc:	d1e5      	bne.n	10010cca <__lesf2+0x2a>
10010cfe:	2000      	movs	r0, #0
10010d00:	2e00      	cmp	r6, #0
10010d02:	d0e9      	beq.n	10010cd8 <__lesf2+0x38>
10010d04:	e7ed      	b.n	10010ce2 <__lesf2+0x42>
10010d06:	2d00      	cmp	r5, #0
10010d08:	d1e9      	bne.n	10010cde <__lesf2+0x3e>
10010d0a:	e7ea      	b.n	10010ce2 <__lesf2+0x42>
10010d0c:	42a2      	cmp	r2, r4
10010d0e:	dce8      	bgt.n	10010ce2 <__lesf2+0x42>
10010d10:	db04      	blt.n	10010d1c <__lesf2+0x7c>
10010d12:	42ae      	cmp	r6, r5
10010d14:	d8e5      	bhi.n	10010ce2 <__lesf2+0x42>
10010d16:	2000      	movs	r0, #0
10010d18:	42ae      	cmp	r6, r5
10010d1a:	d2dd      	bcs.n	10010cd8 <__lesf2+0x38>
10010d1c:	4258      	negs	r0, r3
10010d1e:	4143      	adcs	r3, r0
10010d20:	2001      	movs	r0, #1
10010d22:	425b      	negs	r3, r3
10010d24:	4318      	orrs	r0, r3
10010d26:	e7d7      	b.n	10010cd8 <__lesf2+0x38>

10010d28 <__aeabi_fmul>:
10010d28:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d2a:	4657      	mov	r7, sl
10010d2c:	464e      	mov	r6, r9
10010d2e:	4645      	mov	r5, r8
10010d30:	0043      	lsls	r3, r0, #1
10010d32:	b4e0      	push	{r5, r6, r7}
10010d34:	0246      	lsls	r6, r0, #9
10010d36:	4688      	mov	r8, r1
10010d38:	0a76      	lsrs	r6, r6, #9
10010d3a:	0e1f      	lsrs	r7, r3, #24
10010d3c:	0fc4      	lsrs	r4, r0, #31
10010d3e:	2f00      	cmp	r7, #0
10010d40:	d047      	beq.n	10010dd2 <__aeabi_fmul+0xaa>
10010d42:	2fff      	cmp	r7, #255	; 0xff
10010d44:	d025      	beq.n	10010d92 <__aeabi_fmul+0x6a>
10010d46:	2300      	movs	r3, #0
10010d48:	2580      	movs	r5, #128	; 0x80
10010d4a:	469a      	mov	sl, r3
10010d4c:	4699      	mov	r9, r3
10010d4e:	00f6      	lsls	r6, r6, #3
10010d50:	04ed      	lsls	r5, r5, #19
10010d52:	432e      	orrs	r6, r5
10010d54:	3f7f      	subs	r7, #127	; 0x7f
10010d56:	4643      	mov	r3, r8
10010d58:	4642      	mov	r2, r8
10010d5a:	025d      	lsls	r5, r3, #9
10010d5c:	0fd2      	lsrs	r2, r2, #31
10010d5e:	005b      	lsls	r3, r3, #1
10010d60:	0a6d      	lsrs	r5, r5, #9
10010d62:	0e1b      	lsrs	r3, r3, #24
10010d64:	4690      	mov	r8, r2
10010d66:	d040      	beq.n	10010dea <__aeabi_fmul+0xc2>
10010d68:	2bff      	cmp	r3, #255	; 0xff
10010d6a:	d039      	beq.n	10010de0 <__aeabi_fmul+0xb8>
10010d6c:	2280      	movs	r2, #128	; 0x80
10010d6e:	2000      	movs	r0, #0
10010d70:	00ed      	lsls	r5, r5, #3
10010d72:	04d2      	lsls	r2, r2, #19
10010d74:	4315      	orrs	r5, r2
10010d76:	3b7f      	subs	r3, #127	; 0x7f
10010d78:	18fb      	adds	r3, r7, r3
10010d7a:	4642      	mov	r2, r8
10010d7c:	4657      	mov	r7, sl
10010d7e:	1c59      	adds	r1, r3, #1
10010d80:	4062      	eors	r2, r4
10010d82:	468c      	mov	ip, r1
10010d84:	4307      	orrs	r7, r0
10010d86:	2f0f      	cmp	r7, #15
10010d88:	d85c      	bhi.n	10010e44 <__aeabi_fmul+0x11c>
10010d8a:	496f      	ldr	r1, [pc, #444]	; (10010f48 <__aeabi_fmul+0x220>)
10010d8c:	00bf      	lsls	r7, r7, #2
10010d8e:	59c9      	ldr	r1, [r1, r7]
10010d90:	468f      	mov	pc, r1
10010d92:	2e00      	cmp	r6, #0
10010d94:	d145      	bne.n	10010e22 <__aeabi_fmul+0xfa>
10010d96:	2308      	movs	r3, #8
10010d98:	469a      	mov	sl, r3
10010d9a:	3b06      	subs	r3, #6
10010d9c:	4699      	mov	r9, r3
10010d9e:	e7da      	b.n	10010d56 <__aeabi_fmul+0x2e>
10010da0:	4642      	mov	r2, r8
10010da2:	2802      	cmp	r0, #2
10010da4:	d02d      	beq.n	10010e02 <__aeabi_fmul+0xda>
10010da6:	2803      	cmp	r0, #3
10010da8:	d100      	bne.n	10010dac <__aeabi_fmul+0x84>
10010daa:	e0c3      	b.n	10010f34 <__aeabi_fmul+0x20c>
10010dac:	2801      	cmp	r0, #1
10010dae:	d000      	beq.n	10010db2 <__aeabi_fmul+0x8a>
10010db0:	e0a2      	b.n	10010ef8 <__aeabi_fmul+0x1d0>
10010db2:	2500      	movs	r5, #0
10010db4:	2600      	movs	r6, #0
10010db6:	4002      	ands	r2, r0
10010db8:	b2d4      	uxtb	r4, r2
10010dba:	0276      	lsls	r6, r6, #9
10010dbc:	05ed      	lsls	r5, r5, #23
10010dbe:	0a76      	lsrs	r6, r6, #9
10010dc0:	432e      	orrs	r6, r5
10010dc2:	07e4      	lsls	r4, r4, #31
10010dc4:	4326      	orrs	r6, r4
10010dc6:	0030      	movs	r0, r6
10010dc8:	bc1c      	pop	{r2, r3, r4}
10010dca:	4690      	mov	r8, r2
10010dcc:	4699      	mov	r9, r3
10010dce:	46a2      	mov	sl, r4
10010dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010dd2:	2e00      	cmp	r6, #0
10010dd4:	d11a      	bne.n	10010e0c <__aeabi_fmul+0xe4>
10010dd6:	2304      	movs	r3, #4
10010dd8:	469a      	mov	sl, r3
10010dda:	3b03      	subs	r3, #3
10010ddc:	4699      	mov	r9, r3
10010dde:	e7ba      	b.n	10010d56 <__aeabi_fmul+0x2e>
10010de0:	002a      	movs	r2, r5
10010de2:	1e51      	subs	r1, r2, #1
10010de4:	418a      	sbcs	r2, r1
10010de6:	1c90      	adds	r0, r2, #2
10010de8:	e7c6      	b.n	10010d78 <__aeabi_fmul+0x50>
10010dea:	2001      	movs	r0, #1
10010dec:	2d00      	cmp	r5, #0
10010dee:	d0c3      	beq.n	10010d78 <__aeabi_fmul+0x50>
10010df0:	0028      	movs	r0, r5
10010df2:	f002 f917 	bl	10013024 <__clzsi2>
10010df6:	1f43      	subs	r3, r0, #5
10010df8:	3076      	adds	r0, #118	; 0x76
10010dfa:	409d      	lsls	r5, r3
10010dfc:	4243      	negs	r3, r0
10010dfe:	2000      	movs	r0, #0
10010e00:	e7ba      	b.n	10010d78 <__aeabi_fmul+0x50>
10010e02:	2401      	movs	r4, #1
10010e04:	25ff      	movs	r5, #255	; 0xff
10010e06:	4014      	ands	r4, r2
10010e08:	2600      	movs	r6, #0
10010e0a:	e7d6      	b.n	10010dba <__aeabi_fmul+0x92>
10010e0c:	0030      	movs	r0, r6
10010e0e:	f002 f909 	bl	10013024 <__clzsi2>
10010e12:	1f43      	subs	r3, r0, #5
10010e14:	409e      	lsls	r6, r3
10010e16:	2300      	movs	r3, #0
10010e18:	3076      	adds	r0, #118	; 0x76
10010e1a:	4247      	negs	r7, r0
10010e1c:	469a      	mov	sl, r3
10010e1e:	4699      	mov	r9, r3
10010e20:	e799      	b.n	10010d56 <__aeabi_fmul+0x2e>
10010e22:	230c      	movs	r3, #12
10010e24:	469a      	mov	sl, r3
10010e26:	3b09      	subs	r3, #9
10010e28:	4699      	mov	r9, r3
10010e2a:	e794      	b.n	10010d56 <__aeabi_fmul+0x2e>
10010e2c:	2680      	movs	r6, #128	; 0x80
10010e2e:	2400      	movs	r4, #0
10010e30:	03f6      	lsls	r6, r6, #15
10010e32:	25ff      	movs	r5, #255	; 0xff
10010e34:	e7c1      	b.n	10010dba <__aeabi_fmul+0x92>
10010e36:	0035      	movs	r5, r6
10010e38:	4648      	mov	r0, r9
10010e3a:	e7b2      	b.n	10010da2 <__aeabi_fmul+0x7a>
10010e3c:	0035      	movs	r5, r6
10010e3e:	0022      	movs	r2, r4
10010e40:	4648      	mov	r0, r9
10010e42:	e7ae      	b.n	10010da2 <__aeabi_fmul+0x7a>
10010e44:	0429      	lsls	r1, r5, #16
10010e46:	0c09      	lsrs	r1, r1, #16
10010e48:	0008      	movs	r0, r1
10010e4a:	0c37      	lsrs	r7, r6, #16
10010e4c:	0436      	lsls	r6, r6, #16
10010e4e:	0c36      	lsrs	r6, r6, #16
10010e50:	0c2c      	lsrs	r4, r5, #16
10010e52:	4379      	muls	r1, r7
10010e54:	4370      	muls	r0, r6
10010e56:	4367      	muls	r7, r4
10010e58:	4374      	muls	r4, r6
10010e5a:	0c06      	lsrs	r6, r0, #16
10010e5c:	1864      	adds	r4, r4, r1
10010e5e:	1936      	adds	r6, r6, r4
10010e60:	42b1      	cmp	r1, r6
10010e62:	d903      	bls.n	10010e6c <__aeabi_fmul+0x144>
10010e64:	2180      	movs	r1, #128	; 0x80
10010e66:	0249      	lsls	r1, r1, #9
10010e68:	4688      	mov	r8, r1
10010e6a:	4447      	add	r7, r8
10010e6c:	0400      	lsls	r0, r0, #16
10010e6e:	0c00      	lsrs	r0, r0, #16
10010e70:	0431      	lsls	r1, r6, #16
10010e72:	1809      	adds	r1, r1, r0
10010e74:	018d      	lsls	r5, r1, #6
10010e76:	1e68      	subs	r0, r5, #1
10010e78:	4185      	sbcs	r5, r0
10010e7a:	0e89      	lsrs	r1, r1, #26
10010e7c:	4329      	orrs	r1, r5
10010e7e:	0c35      	lsrs	r5, r6, #16
10010e80:	19ed      	adds	r5, r5, r7
10010e82:	01ad      	lsls	r5, r5, #6
10010e84:	430d      	orrs	r5, r1
10010e86:	0129      	lsls	r1, r5, #4
10010e88:	d504      	bpl.n	10010e94 <__aeabi_fmul+0x16c>
10010e8a:	2301      	movs	r3, #1
10010e8c:	0869      	lsrs	r1, r5, #1
10010e8e:	401d      	ands	r5, r3
10010e90:	4663      	mov	r3, ip
10010e92:	430d      	orrs	r5, r1
10010e94:	0019      	movs	r1, r3
10010e96:	317f      	adds	r1, #127	; 0x7f
10010e98:	2900      	cmp	r1, #0
10010e9a:	dd25      	ble.n	10010ee8 <__aeabi_fmul+0x1c0>
10010e9c:	0768      	lsls	r0, r5, #29
10010e9e:	d004      	beq.n	10010eaa <__aeabi_fmul+0x182>
10010ea0:	200f      	movs	r0, #15
10010ea2:	4028      	ands	r0, r5
10010ea4:	2804      	cmp	r0, #4
10010ea6:	d000      	beq.n	10010eaa <__aeabi_fmul+0x182>
10010ea8:	3504      	adds	r5, #4
10010eaa:	0128      	lsls	r0, r5, #4
10010eac:	d503      	bpl.n	10010eb6 <__aeabi_fmul+0x18e>
10010eae:	4927      	ldr	r1, [pc, #156]	; (10010f4c <__aeabi_fmul+0x224>)
10010eb0:	3380      	adds	r3, #128	; 0x80
10010eb2:	400d      	ands	r5, r1
10010eb4:	0019      	movs	r1, r3
10010eb6:	29fe      	cmp	r1, #254	; 0xfe
10010eb8:	dca3      	bgt.n	10010e02 <__aeabi_fmul+0xda>
10010eba:	2401      	movs	r4, #1
10010ebc:	01ad      	lsls	r5, r5, #6
10010ebe:	0a6e      	lsrs	r6, r5, #9
10010ec0:	4014      	ands	r4, r2
10010ec2:	b2cd      	uxtb	r5, r1
10010ec4:	e779      	b.n	10010dba <__aeabi_fmul+0x92>
10010ec6:	2080      	movs	r0, #128	; 0x80
10010ec8:	03c0      	lsls	r0, r0, #15
10010eca:	4206      	tst	r6, r0
10010ecc:	d007      	beq.n	10010ede <__aeabi_fmul+0x1b6>
10010ece:	4205      	tst	r5, r0
10010ed0:	d105      	bne.n	10010ede <__aeabi_fmul+0x1b6>
10010ed2:	4328      	orrs	r0, r5
10010ed4:	0246      	lsls	r6, r0, #9
10010ed6:	0a76      	lsrs	r6, r6, #9
10010ed8:	4644      	mov	r4, r8
10010eda:	25ff      	movs	r5, #255	; 0xff
10010edc:	e76d      	b.n	10010dba <__aeabi_fmul+0x92>
10010ede:	4306      	orrs	r6, r0
10010ee0:	0276      	lsls	r6, r6, #9
10010ee2:	0a76      	lsrs	r6, r6, #9
10010ee4:	25ff      	movs	r5, #255	; 0xff
10010ee6:	e768      	b.n	10010dba <__aeabi_fmul+0x92>
10010ee8:	2401      	movs	r4, #1
10010eea:	1a61      	subs	r1, r4, r1
10010eec:	291b      	cmp	r1, #27
10010eee:	dd05      	ble.n	10010efc <__aeabi_fmul+0x1d4>
10010ef0:	4014      	ands	r4, r2
10010ef2:	2500      	movs	r5, #0
10010ef4:	2600      	movs	r6, #0
10010ef6:	e760      	b.n	10010dba <__aeabi_fmul+0x92>
10010ef8:	4663      	mov	r3, ip
10010efa:	e7cb      	b.n	10010e94 <__aeabi_fmul+0x16c>
10010efc:	002e      	movs	r6, r5
10010efe:	2320      	movs	r3, #32
10010f00:	40ce      	lsrs	r6, r1
10010f02:	1a59      	subs	r1, r3, r1
10010f04:	408d      	lsls	r5, r1
10010f06:	1e6b      	subs	r3, r5, #1
10010f08:	419d      	sbcs	r5, r3
10010f0a:	432e      	orrs	r6, r5
10010f0c:	0773      	lsls	r3, r6, #29
10010f0e:	d004      	beq.n	10010f1a <__aeabi_fmul+0x1f2>
10010f10:	230f      	movs	r3, #15
10010f12:	4033      	ands	r3, r6
10010f14:	2b04      	cmp	r3, #4
10010f16:	d000      	beq.n	10010f1a <__aeabi_fmul+0x1f2>
10010f18:	3604      	adds	r6, #4
10010f1a:	0173      	lsls	r3, r6, #5
10010f1c:	d504      	bpl.n	10010f28 <__aeabi_fmul+0x200>
10010f1e:	2401      	movs	r4, #1
10010f20:	2501      	movs	r5, #1
10010f22:	4014      	ands	r4, r2
10010f24:	2600      	movs	r6, #0
10010f26:	e748      	b.n	10010dba <__aeabi_fmul+0x92>
10010f28:	2401      	movs	r4, #1
10010f2a:	01b6      	lsls	r6, r6, #6
10010f2c:	0a76      	lsrs	r6, r6, #9
10010f2e:	4014      	ands	r4, r2
10010f30:	2500      	movs	r5, #0
10010f32:	e742      	b.n	10010dba <__aeabi_fmul+0x92>
10010f34:	2680      	movs	r6, #128	; 0x80
10010f36:	2401      	movs	r4, #1
10010f38:	03f6      	lsls	r6, r6, #15
10010f3a:	432e      	orrs	r6, r5
10010f3c:	0276      	lsls	r6, r6, #9
10010f3e:	0a76      	lsrs	r6, r6, #9
10010f40:	4014      	ands	r4, r2
10010f42:	25ff      	movs	r5, #255	; 0xff
10010f44:	e739      	b.n	10010dba <__aeabi_fmul+0x92>
10010f46:	46c0      	nop			; (mov r8, r8)
10010f48:	10015140 	.word	0x10015140
10010f4c:	f7ffffff 	.word	0xf7ffffff

10010f50 <__aeabi_fsub>:
10010f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f52:	024a      	lsls	r2, r1, #9
10010f54:	004e      	lsls	r6, r1, #1
10010f56:	0243      	lsls	r3, r0, #9
10010f58:	0044      	lsls	r4, r0, #1
10010f5a:	0e24      	lsrs	r4, r4, #24
10010f5c:	0fc5      	lsrs	r5, r0, #31
10010f5e:	099b      	lsrs	r3, r3, #6
10010f60:	0e36      	lsrs	r6, r6, #24
10010f62:	0fc9      	lsrs	r1, r1, #31
10010f64:	0992      	lsrs	r2, r2, #6
10010f66:	2eff      	cmp	r6, #255	; 0xff
10010f68:	d100      	bne.n	10010f6c <__aeabi_fsub+0x1c>
10010f6a:	e083      	b.n	10011074 <__aeabi_fsub+0x124>
10010f6c:	2001      	movs	r0, #1
10010f6e:	4041      	eors	r1, r0
10010f70:	1ba0      	subs	r0, r4, r6
10010f72:	42a9      	cmp	r1, r5
10010f74:	d05c      	beq.n	10011030 <__aeabi_fsub+0xe0>
10010f76:	2800      	cmp	r0, #0
10010f78:	dc00      	bgt.n	10010f7c <__aeabi_fsub+0x2c>
10010f7a:	e095      	b.n	100110a8 <__aeabi_fsub+0x158>
10010f7c:	2e00      	cmp	r6, #0
10010f7e:	d11c      	bne.n	10010fba <__aeabi_fsub+0x6a>
10010f80:	2a00      	cmp	r2, #0
10010f82:	d000      	beq.n	10010f86 <__aeabi_fsub+0x36>
10010f84:	e081      	b.n	1001108a <__aeabi_fsub+0x13a>
10010f86:	075a      	lsls	r2, r3, #29
10010f88:	d004      	beq.n	10010f94 <__aeabi_fsub+0x44>
10010f8a:	220f      	movs	r2, #15
10010f8c:	401a      	ands	r2, r3
10010f8e:	2a04      	cmp	r2, #4
10010f90:	d000      	beq.n	10010f94 <__aeabi_fsub+0x44>
10010f92:	3304      	adds	r3, #4
10010f94:	015a      	lsls	r2, r3, #5
10010f96:	d53b      	bpl.n	10011010 <__aeabi_fsub+0xc0>
10010f98:	3401      	adds	r4, #1
10010f9a:	2cff      	cmp	r4, #255	; 0xff
10010f9c:	d100      	bne.n	10010fa0 <__aeabi_fsub+0x50>
10010f9e:	e091      	b.n	100110c4 <__aeabi_fsub+0x174>
10010fa0:	2001      	movs	r0, #1
10010fa2:	019b      	lsls	r3, r3, #6
10010fa4:	0a5b      	lsrs	r3, r3, #9
10010fa6:	b2e4      	uxtb	r4, r4
10010fa8:	4005      	ands	r5, r0
10010faa:	025b      	lsls	r3, r3, #9
10010fac:	05e4      	lsls	r4, r4, #23
10010fae:	0a5b      	lsrs	r3, r3, #9
10010fb0:	07ed      	lsls	r5, r5, #31
10010fb2:	4323      	orrs	r3, r4
10010fb4:	432b      	orrs	r3, r5
10010fb6:	0018      	movs	r0, r3
10010fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010fba:	2cff      	cmp	r4, #255	; 0xff
10010fbc:	d0e3      	beq.n	10010f86 <__aeabi_fsub+0x36>
10010fbe:	2180      	movs	r1, #128	; 0x80
10010fc0:	04c9      	lsls	r1, r1, #19
10010fc2:	430a      	orrs	r2, r1
10010fc4:	281b      	cmp	r0, #27
10010fc6:	dd00      	ble.n	10010fca <__aeabi_fsub+0x7a>
10010fc8:	e090      	b.n	100110ec <__aeabi_fsub+0x19c>
10010fca:	0016      	movs	r6, r2
10010fcc:	2120      	movs	r1, #32
10010fce:	40c6      	lsrs	r6, r0
10010fd0:	1a08      	subs	r0, r1, r0
10010fd2:	4082      	lsls	r2, r0
10010fd4:	1e51      	subs	r1, r2, #1
10010fd6:	418a      	sbcs	r2, r1
10010fd8:	4332      	orrs	r2, r6
10010fda:	1a9b      	subs	r3, r3, r2
10010fdc:	015a      	lsls	r2, r3, #5
10010fde:	d515      	bpl.n	1001100c <__aeabi_fsub+0xbc>
10010fe0:	019b      	lsls	r3, r3, #6
10010fe2:	099e      	lsrs	r6, r3, #6
10010fe4:	0030      	movs	r0, r6
10010fe6:	f002 f81d 	bl	10013024 <__clzsi2>
10010fea:	3805      	subs	r0, #5
10010fec:	4086      	lsls	r6, r0
10010fee:	4284      	cmp	r4, r0
10010ff0:	dc6c      	bgt.n	100110cc <__aeabi_fsub+0x17c>
10010ff2:	1b04      	subs	r4, r0, r4
10010ff4:	0033      	movs	r3, r6
10010ff6:	2020      	movs	r0, #32
10010ff8:	3401      	adds	r4, #1
10010ffa:	40e3      	lsrs	r3, r4
10010ffc:	1b04      	subs	r4, r0, r4
10010ffe:	40a6      	lsls	r6, r4
10011000:	1e72      	subs	r2, r6, #1
10011002:	4196      	sbcs	r6, r2
10011004:	2400      	movs	r4, #0
10011006:	4333      	orrs	r3, r6
10011008:	e7bd      	b.n	10010f86 <__aeabi_fsub+0x36>
1001100a:	000d      	movs	r5, r1
1001100c:	075a      	lsls	r2, r3, #29
1001100e:	d1bc      	bne.n	10010f8a <__aeabi_fsub+0x3a>
10011010:	08df      	lsrs	r7, r3, #3
10011012:	2301      	movs	r3, #1
10011014:	401d      	ands	r5, r3
10011016:	2cff      	cmp	r4, #255	; 0xff
10011018:	d133      	bne.n	10011082 <__aeabi_fsub+0x132>
1001101a:	2f00      	cmp	r7, #0
1001101c:	d100      	bne.n	10011020 <__aeabi_fsub+0xd0>
1001101e:	e090      	b.n	10011142 <__aeabi_fsub+0x1f2>
10011020:	2280      	movs	r2, #128	; 0x80
10011022:	03d2      	lsls	r2, r2, #15
10011024:	0013      	movs	r3, r2
10011026:	433b      	orrs	r3, r7
10011028:	025b      	lsls	r3, r3, #9
1001102a:	0a5b      	lsrs	r3, r3, #9
1001102c:	24ff      	movs	r4, #255	; 0xff
1001102e:	e7bc      	b.n	10010faa <__aeabi_fsub+0x5a>
10011030:	2800      	cmp	r0, #0
10011032:	dd4f      	ble.n	100110d4 <__aeabi_fsub+0x184>
10011034:	2e00      	cmp	r6, #0
10011036:	d02e      	beq.n	10011096 <__aeabi_fsub+0x146>
10011038:	2cff      	cmp	r4, #255	; 0xff
1001103a:	d0a4      	beq.n	10010f86 <__aeabi_fsub+0x36>
1001103c:	2580      	movs	r5, #128	; 0x80
1001103e:	04ed      	lsls	r5, r5, #19
10011040:	432a      	orrs	r2, r5
10011042:	281b      	cmp	r0, #27
10011044:	dd00      	ble.n	10011048 <__aeabi_fsub+0xf8>
10011046:	e097      	b.n	10011178 <__aeabi_fsub+0x228>
10011048:	0016      	movs	r6, r2
1001104a:	2520      	movs	r5, #32
1001104c:	40c6      	lsrs	r6, r0
1001104e:	1a28      	subs	r0, r5, r0
10011050:	4082      	lsls	r2, r0
10011052:	1e50      	subs	r0, r2, #1
10011054:	4182      	sbcs	r2, r0
10011056:	4332      	orrs	r2, r6
10011058:	189b      	adds	r3, r3, r2
1001105a:	015a      	lsls	r2, r3, #5
1001105c:	d5d5      	bpl.n	1001100a <__aeabi_fsub+0xba>
1001105e:	3401      	adds	r4, #1
10011060:	2cff      	cmp	r4, #255	; 0xff
10011062:	d06d      	beq.n	10011140 <__aeabi_fsub+0x1f0>
10011064:	2201      	movs	r2, #1
10011066:	487b      	ldr	r0, [pc, #492]	; (10011254 <__aeabi_fsub+0x304>)
10011068:	401a      	ands	r2, r3
1001106a:	085b      	lsrs	r3, r3, #1
1001106c:	4003      	ands	r3, r0
1001106e:	4313      	orrs	r3, r2
10011070:	000d      	movs	r5, r1
10011072:	e788      	b.n	10010f86 <__aeabi_fsub+0x36>
10011074:	2a00      	cmp	r2, #0
10011076:	d000      	beq.n	1001107a <__aeabi_fsub+0x12a>
10011078:	e77a      	b.n	10010f70 <__aeabi_fsub+0x20>
1001107a:	e777      	b.n	10010f6c <__aeabi_fsub+0x1c>
1001107c:	1e03      	subs	r3, r0, #0
1001107e:	d1c5      	bne.n	1001100c <__aeabi_fsub+0xbc>
10011080:	2500      	movs	r5, #0
10011082:	027b      	lsls	r3, r7, #9
10011084:	0a5b      	lsrs	r3, r3, #9
10011086:	b2e4      	uxtb	r4, r4
10011088:	e78f      	b.n	10010faa <__aeabi_fsub+0x5a>
1001108a:	3801      	subs	r0, #1
1001108c:	2800      	cmp	r0, #0
1001108e:	d0a4      	beq.n	10010fda <__aeabi_fsub+0x8a>
10011090:	2cff      	cmp	r4, #255	; 0xff
10011092:	d197      	bne.n	10010fc4 <__aeabi_fsub+0x74>
10011094:	e777      	b.n	10010f86 <__aeabi_fsub+0x36>
10011096:	2a00      	cmp	r2, #0
10011098:	d100      	bne.n	1001109c <__aeabi_fsub+0x14c>
1001109a:	e774      	b.n	10010f86 <__aeabi_fsub+0x36>
1001109c:	3801      	subs	r0, #1
1001109e:	2800      	cmp	r0, #0
100110a0:	d0da      	beq.n	10011058 <__aeabi_fsub+0x108>
100110a2:	2cff      	cmp	r4, #255	; 0xff
100110a4:	d1cd      	bne.n	10011042 <__aeabi_fsub+0xf2>
100110a6:	e76e      	b.n	10010f86 <__aeabi_fsub+0x36>
100110a8:	2800      	cmp	r0, #0
100110aa:	d121      	bne.n	100110f0 <__aeabi_fsub+0x1a0>
100110ac:	1c60      	adds	r0, r4, #1
100110ae:	b2c0      	uxtb	r0, r0
100110b0:	2801      	cmp	r0, #1
100110b2:	dd58      	ble.n	10011166 <__aeabi_fsub+0x216>
100110b4:	2780      	movs	r7, #128	; 0x80
100110b6:	1a9e      	subs	r6, r3, r2
100110b8:	04ff      	lsls	r7, r7, #19
100110ba:	4037      	ands	r7, r6
100110bc:	d02f      	beq.n	1001111e <__aeabi_fsub+0x1ce>
100110be:	1ad6      	subs	r6, r2, r3
100110c0:	000d      	movs	r5, r1
100110c2:	e78f      	b.n	10010fe4 <__aeabi_fsub+0x94>
100110c4:	2301      	movs	r3, #1
100110c6:	401d      	ands	r5, r3
100110c8:	2300      	movs	r3, #0
100110ca:	e76e      	b.n	10010faa <__aeabi_fsub+0x5a>
100110cc:	4b62      	ldr	r3, [pc, #392]	; (10011258 <__aeabi_fsub+0x308>)
100110ce:	1a24      	subs	r4, r4, r0
100110d0:	4033      	ands	r3, r6
100110d2:	e758      	b.n	10010f86 <__aeabi_fsub+0x36>
100110d4:	2800      	cmp	r0, #0
100110d6:	d151      	bne.n	1001117c <__aeabi_fsub+0x22c>
100110d8:	1c60      	adds	r0, r4, #1
100110da:	b2c6      	uxtb	r6, r0
100110dc:	2e01      	cmp	r6, #1
100110de:	dd33      	ble.n	10011148 <__aeabi_fsub+0x1f8>
100110e0:	28ff      	cmp	r0, #255	; 0xff
100110e2:	d02d      	beq.n	10011140 <__aeabi_fsub+0x1f0>
100110e4:	189b      	adds	r3, r3, r2
100110e6:	085b      	lsrs	r3, r3, #1
100110e8:	0004      	movs	r4, r0
100110ea:	e74c      	b.n	10010f86 <__aeabi_fsub+0x36>
100110ec:	2201      	movs	r2, #1
100110ee:	e774      	b.n	10010fda <__aeabi_fsub+0x8a>
100110f0:	2c00      	cmp	r4, #0
100110f2:	d01a      	beq.n	1001112a <__aeabi_fsub+0x1da>
100110f4:	2eff      	cmp	r6, #255	; 0xff
100110f6:	d01f      	beq.n	10011138 <__aeabi_fsub+0x1e8>
100110f8:	2480      	movs	r4, #128	; 0x80
100110fa:	04e4      	lsls	r4, r4, #19
100110fc:	4240      	negs	r0, r0
100110fe:	4323      	orrs	r3, r4
10011100:	281b      	cmp	r0, #27
10011102:	dd00      	ble.n	10011106 <__aeabi_fsub+0x1b6>
10011104:	e096      	b.n	10011234 <__aeabi_fsub+0x2e4>
10011106:	001d      	movs	r5, r3
10011108:	2420      	movs	r4, #32
1001110a:	40c5      	lsrs	r5, r0
1001110c:	1a20      	subs	r0, r4, r0
1001110e:	4083      	lsls	r3, r0
10011110:	1e58      	subs	r0, r3, #1
10011112:	4183      	sbcs	r3, r0
10011114:	432b      	orrs	r3, r5
10011116:	1ad3      	subs	r3, r2, r3
10011118:	0034      	movs	r4, r6
1001111a:	000d      	movs	r5, r1
1001111c:	e75e      	b.n	10010fdc <__aeabi_fsub+0x8c>
1001111e:	2e00      	cmp	r6, #0
10011120:	d000      	beq.n	10011124 <__aeabi_fsub+0x1d4>
10011122:	e75f      	b.n	10010fe4 <__aeabi_fsub+0x94>
10011124:	2500      	movs	r5, #0
10011126:	2400      	movs	r4, #0
10011128:	e7ab      	b.n	10011082 <__aeabi_fsub+0x132>
1001112a:	2b00      	cmp	r3, #0
1001112c:	d044      	beq.n	100111b8 <__aeabi_fsub+0x268>
1001112e:	43c0      	mvns	r0, r0
10011130:	2800      	cmp	r0, #0
10011132:	d0f0      	beq.n	10011116 <__aeabi_fsub+0x1c6>
10011134:	2eff      	cmp	r6, #255	; 0xff
10011136:	d1e3      	bne.n	10011100 <__aeabi_fsub+0x1b0>
10011138:	0013      	movs	r3, r2
1001113a:	24ff      	movs	r4, #255	; 0xff
1001113c:	000d      	movs	r5, r1
1001113e:	e722      	b.n	10010f86 <__aeabi_fsub+0x36>
10011140:	000d      	movs	r5, r1
10011142:	24ff      	movs	r4, #255	; 0xff
10011144:	2300      	movs	r3, #0
10011146:	e730      	b.n	10010faa <__aeabi_fsub+0x5a>
10011148:	2c00      	cmp	r4, #0
1001114a:	d15d      	bne.n	10011208 <__aeabi_fsub+0x2b8>
1001114c:	2b00      	cmp	r3, #0
1001114e:	d07d      	beq.n	1001124c <__aeabi_fsub+0x2fc>
10011150:	2a00      	cmp	r2, #0
10011152:	d100      	bne.n	10011156 <__aeabi_fsub+0x206>
10011154:	e717      	b.n	10010f86 <__aeabi_fsub+0x36>
10011156:	189b      	adds	r3, r3, r2
10011158:	015a      	lsls	r2, r3, #5
1001115a:	d400      	bmi.n	1001115e <__aeabi_fsub+0x20e>
1001115c:	e756      	b.n	1001100c <__aeabi_fsub+0xbc>
1001115e:	4a3e      	ldr	r2, [pc, #248]	; (10011258 <__aeabi_fsub+0x308>)
10011160:	0004      	movs	r4, r0
10011162:	4013      	ands	r3, r2
10011164:	e70f      	b.n	10010f86 <__aeabi_fsub+0x36>
10011166:	2c00      	cmp	r4, #0
10011168:	d11e      	bne.n	100111a8 <__aeabi_fsub+0x258>
1001116a:	2b00      	cmp	r3, #0
1001116c:	d12f      	bne.n	100111ce <__aeabi_fsub+0x27e>
1001116e:	2a00      	cmp	r2, #0
10011170:	d065      	beq.n	1001123e <__aeabi_fsub+0x2ee>
10011172:	0013      	movs	r3, r2
10011174:	000d      	movs	r5, r1
10011176:	e706      	b.n	10010f86 <__aeabi_fsub+0x36>
10011178:	2201      	movs	r2, #1
1001117a:	e76d      	b.n	10011058 <__aeabi_fsub+0x108>
1001117c:	2c00      	cmp	r4, #0
1001117e:	d11f      	bne.n	100111c0 <__aeabi_fsub+0x270>
10011180:	2b00      	cmp	r3, #0
10011182:	d059      	beq.n	10011238 <__aeabi_fsub+0x2e8>
10011184:	43c0      	mvns	r0, r0
10011186:	2800      	cmp	r0, #0
10011188:	d00b      	beq.n	100111a2 <__aeabi_fsub+0x252>
1001118a:	2eff      	cmp	r6, #255	; 0xff
1001118c:	d04f      	beq.n	1001122e <__aeabi_fsub+0x2de>
1001118e:	281b      	cmp	r0, #27
10011190:	dc5e      	bgt.n	10011250 <__aeabi_fsub+0x300>
10011192:	001d      	movs	r5, r3
10011194:	2420      	movs	r4, #32
10011196:	40c5      	lsrs	r5, r0
10011198:	1a20      	subs	r0, r4, r0
1001119a:	4083      	lsls	r3, r0
1001119c:	1e58      	subs	r0, r3, #1
1001119e:	4183      	sbcs	r3, r0
100111a0:	432b      	orrs	r3, r5
100111a2:	189b      	adds	r3, r3, r2
100111a4:	0034      	movs	r4, r6
100111a6:	e758      	b.n	1001105a <__aeabi_fsub+0x10a>
100111a8:	2b00      	cmp	r3, #0
100111aa:	d11c      	bne.n	100111e6 <__aeabi_fsub+0x296>
100111ac:	2a00      	cmp	r2, #0
100111ae:	d049      	beq.n	10011244 <__aeabi_fsub+0x2f4>
100111b0:	0013      	movs	r3, r2
100111b2:	000d      	movs	r5, r1
100111b4:	24ff      	movs	r4, #255	; 0xff
100111b6:	e6e6      	b.n	10010f86 <__aeabi_fsub+0x36>
100111b8:	0013      	movs	r3, r2
100111ba:	0034      	movs	r4, r6
100111bc:	000d      	movs	r5, r1
100111be:	e6e2      	b.n	10010f86 <__aeabi_fsub+0x36>
100111c0:	2eff      	cmp	r6, #255	; 0xff
100111c2:	d034      	beq.n	1001122e <__aeabi_fsub+0x2de>
100111c4:	2480      	movs	r4, #128	; 0x80
100111c6:	04e4      	lsls	r4, r4, #19
100111c8:	4240      	negs	r0, r0
100111ca:	4323      	orrs	r3, r4
100111cc:	e7df      	b.n	1001118e <__aeabi_fsub+0x23e>
100111ce:	2a00      	cmp	r2, #0
100111d0:	d100      	bne.n	100111d4 <__aeabi_fsub+0x284>
100111d2:	e6d8      	b.n	10010f86 <__aeabi_fsub+0x36>
100111d4:	2780      	movs	r7, #128	; 0x80
100111d6:	1a98      	subs	r0, r3, r2
100111d8:	04ff      	lsls	r7, r7, #19
100111da:	4007      	ands	r7, r0
100111dc:	d100      	bne.n	100111e0 <__aeabi_fsub+0x290>
100111de:	e74d      	b.n	1001107c <__aeabi_fsub+0x12c>
100111e0:	1ad3      	subs	r3, r2, r3
100111e2:	000d      	movs	r5, r1
100111e4:	e6cf      	b.n	10010f86 <__aeabi_fsub+0x36>
100111e6:	24ff      	movs	r4, #255	; 0xff
100111e8:	2a00      	cmp	r2, #0
100111ea:	d100      	bne.n	100111ee <__aeabi_fsub+0x29e>
100111ec:	e6cb      	b.n	10010f86 <__aeabi_fsub+0x36>
100111ee:	2080      	movs	r0, #128	; 0x80
100111f0:	08db      	lsrs	r3, r3, #3
100111f2:	03c0      	lsls	r0, r0, #15
100111f4:	4203      	tst	r3, r0
100111f6:	d004      	beq.n	10011202 <__aeabi_fsub+0x2b2>
100111f8:	08d2      	lsrs	r2, r2, #3
100111fa:	4202      	tst	r2, r0
100111fc:	d101      	bne.n	10011202 <__aeabi_fsub+0x2b2>
100111fe:	0013      	movs	r3, r2
10011200:	000d      	movs	r5, r1
10011202:	00db      	lsls	r3, r3, #3
10011204:	24ff      	movs	r4, #255	; 0xff
10011206:	e6be      	b.n	10010f86 <__aeabi_fsub+0x36>
10011208:	2b00      	cmp	r3, #0
1001120a:	d010      	beq.n	1001122e <__aeabi_fsub+0x2de>
1001120c:	24ff      	movs	r4, #255	; 0xff
1001120e:	2a00      	cmp	r2, #0
10011210:	d100      	bne.n	10011214 <__aeabi_fsub+0x2c4>
10011212:	e6b8      	b.n	10010f86 <__aeabi_fsub+0x36>
10011214:	2080      	movs	r0, #128	; 0x80
10011216:	08db      	lsrs	r3, r3, #3
10011218:	03c0      	lsls	r0, r0, #15
1001121a:	4203      	tst	r3, r0
1001121c:	d003      	beq.n	10011226 <__aeabi_fsub+0x2d6>
1001121e:	08d2      	lsrs	r2, r2, #3
10011220:	4202      	tst	r2, r0
10011222:	d100      	bne.n	10011226 <__aeabi_fsub+0x2d6>
10011224:	0013      	movs	r3, r2
10011226:	00db      	lsls	r3, r3, #3
10011228:	000d      	movs	r5, r1
1001122a:	24ff      	movs	r4, #255	; 0xff
1001122c:	e6ab      	b.n	10010f86 <__aeabi_fsub+0x36>
1001122e:	0013      	movs	r3, r2
10011230:	24ff      	movs	r4, #255	; 0xff
10011232:	e6a8      	b.n	10010f86 <__aeabi_fsub+0x36>
10011234:	2301      	movs	r3, #1
10011236:	e76e      	b.n	10011116 <__aeabi_fsub+0x1c6>
10011238:	0013      	movs	r3, r2
1001123a:	0034      	movs	r4, r6
1001123c:	e6a3      	b.n	10010f86 <__aeabi_fsub+0x36>
1001123e:	2700      	movs	r7, #0
10011240:	2500      	movs	r5, #0
10011242:	e71e      	b.n	10011082 <__aeabi_fsub+0x132>
10011244:	2780      	movs	r7, #128	; 0x80
10011246:	2500      	movs	r5, #0
10011248:	03ff      	lsls	r7, r7, #15
1001124a:	e6e9      	b.n	10011020 <__aeabi_fsub+0xd0>
1001124c:	0013      	movs	r3, r2
1001124e:	e69a      	b.n	10010f86 <__aeabi_fsub+0x36>
10011250:	2301      	movs	r3, #1
10011252:	e7a6      	b.n	100111a2 <__aeabi_fsub+0x252>
10011254:	7dffffff 	.word	0x7dffffff
10011258:	fbffffff 	.word	0xfbffffff

1001125c <__aeabi_f2iz>:
1001125c:	0243      	lsls	r3, r0, #9
1001125e:	0a59      	lsrs	r1, r3, #9
10011260:	0043      	lsls	r3, r0, #1
10011262:	0fc2      	lsrs	r2, r0, #31
10011264:	0e1b      	lsrs	r3, r3, #24
10011266:	2000      	movs	r0, #0
10011268:	2b7e      	cmp	r3, #126	; 0x7e
1001126a:	dd0e      	ble.n	1001128a <__aeabi_f2iz+0x2e>
1001126c:	2b9d      	cmp	r3, #157	; 0x9d
1001126e:	dc0d      	bgt.n	1001128c <__aeabi_f2iz+0x30>
10011270:	2080      	movs	r0, #128	; 0x80
10011272:	0400      	lsls	r0, r0, #16
10011274:	4301      	orrs	r1, r0
10011276:	2b95      	cmp	r3, #149	; 0x95
10011278:	dc0b      	bgt.n	10011292 <__aeabi_f2iz+0x36>
1001127a:	2096      	movs	r0, #150	; 0x96
1001127c:	1ac3      	subs	r3, r0, r3
1001127e:	40d9      	lsrs	r1, r3
10011280:	000b      	movs	r3, r1
10011282:	4258      	negs	r0, r3
10011284:	2a00      	cmp	r2, #0
10011286:	d100      	bne.n	1001128a <__aeabi_f2iz+0x2e>
10011288:	0018      	movs	r0, r3
1001128a:	4770      	bx	lr
1001128c:	4b03      	ldr	r3, [pc, #12]	; (1001129c <__aeabi_f2iz+0x40>)
1001128e:	18d0      	adds	r0, r2, r3
10011290:	e7fb      	b.n	1001128a <__aeabi_f2iz+0x2e>
10011292:	3b96      	subs	r3, #150	; 0x96
10011294:	4099      	lsls	r1, r3
10011296:	000b      	movs	r3, r1
10011298:	e7f3      	b.n	10011282 <__aeabi_f2iz+0x26>
1001129a:	46c0      	nop			; (mov r8, r8)
1001129c:	7fffffff 	.word	0x7fffffff

100112a0 <__aeabi_i2f>:
100112a0:	b570      	push	{r4, r5, r6, lr}
100112a2:	2800      	cmp	r0, #0
100112a4:	d030      	beq.n	10011308 <__aeabi_i2f+0x68>
100112a6:	17c3      	asrs	r3, r0, #31
100112a8:	18c5      	adds	r5, r0, r3
100112aa:	405d      	eors	r5, r3
100112ac:	0fc4      	lsrs	r4, r0, #31
100112ae:	0028      	movs	r0, r5
100112b0:	f001 feb8 	bl	10013024 <__clzsi2>
100112b4:	239e      	movs	r3, #158	; 0x9e
100112b6:	1a1b      	subs	r3, r3, r0
100112b8:	2b96      	cmp	r3, #150	; 0x96
100112ba:	dc0d      	bgt.n	100112d8 <__aeabi_i2f+0x38>
100112bc:	2296      	movs	r2, #150	; 0x96
100112be:	1ad2      	subs	r2, r2, r3
100112c0:	4095      	lsls	r5, r2
100112c2:	026a      	lsls	r2, r5, #9
100112c4:	0a52      	lsrs	r2, r2, #9
100112c6:	b2d8      	uxtb	r0, r3
100112c8:	0252      	lsls	r2, r2, #9
100112ca:	05c0      	lsls	r0, r0, #23
100112cc:	0a52      	lsrs	r2, r2, #9
100112ce:	07e4      	lsls	r4, r4, #31
100112d0:	4302      	orrs	r2, r0
100112d2:	4322      	orrs	r2, r4
100112d4:	0010      	movs	r0, r2
100112d6:	bd70      	pop	{r4, r5, r6, pc}
100112d8:	2b99      	cmp	r3, #153	; 0x99
100112da:	dc19      	bgt.n	10011310 <__aeabi_i2f+0x70>
100112dc:	2299      	movs	r2, #153	; 0x99
100112de:	1ad2      	subs	r2, r2, r3
100112e0:	4095      	lsls	r5, r2
100112e2:	4a12      	ldr	r2, [pc, #72]	; (1001132c <__aeabi_i2f+0x8c>)
100112e4:	402a      	ands	r2, r5
100112e6:	0769      	lsls	r1, r5, #29
100112e8:	d004      	beq.n	100112f4 <__aeabi_i2f+0x54>
100112ea:	210f      	movs	r1, #15
100112ec:	400d      	ands	r5, r1
100112ee:	2d04      	cmp	r5, #4
100112f0:	d000      	beq.n	100112f4 <__aeabi_i2f+0x54>
100112f2:	3204      	adds	r2, #4
100112f4:	0151      	lsls	r1, r2, #5
100112f6:	d503      	bpl.n	10011300 <__aeabi_i2f+0x60>
100112f8:	4b0c      	ldr	r3, [pc, #48]	; (1001132c <__aeabi_i2f+0x8c>)
100112fa:	401a      	ands	r2, r3
100112fc:	239f      	movs	r3, #159	; 0x9f
100112fe:	1a1b      	subs	r3, r3, r0
10011300:	0192      	lsls	r2, r2, #6
10011302:	0a52      	lsrs	r2, r2, #9
10011304:	b2d8      	uxtb	r0, r3
10011306:	e7df      	b.n	100112c8 <__aeabi_i2f+0x28>
10011308:	2400      	movs	r4, #0
1001130a:	2000      	movs	r0, #0
1001130c:	2200      	movs	r2, #0
1001130e:	e7db      	b.n	100112c8 <__aeabi_i2f+0x28>
10011310:	2205      	movs	r2, #5
10011312:	002e      	movs	r6, r5
10011314:	1a12      	subs	r2, r2, r0
10011316:	21b9      	movs	r1, #185	; 0xb9
10011318:	40d6      	lsrs	r6, r2
1001131a:	002a      	movs	r2, r5
1001131c:	1ac9      	subs	r1, r1, r3
1001131e:	408a      	lsls	r2, r1
10011320:	1e55      	subs	r5, r2, #1
10011322:	41aa      	sbcs	r2, r5
10011324:	0035      	movs	r5, r6
10011326:	4315      	orrs	r5, r2
10011328:	e7db      	b.n	100112e2 <__aeabi_i2f+0x42>
1001132a:	46c0      	nop			; (mov r8, r8)
1001132c:	fbffffff 	.word	0xfbffffff

10011330 <__aeabi_dadd>:
10011330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011332:	4656      	mov	r6, sl
10011334:	465f      	mov	r7, fp
10011336:	464d      	mov	r5, r9
10011338:	4644      	mov	r4, r8
1001133a:	b4f0      	push	{r4, r5, r6, r7}
1001133c:	000f      	movs	r7, r1
1001133e:	0ffd      	lsrs	r5, r7, #31
10011340:	46aa      	mov	sl, r5
10011342:	0309      	lsls	r1, r1, #12
10011344:	007c      	lsls	r4, r7, #1
10011346:	002e      	movs	r6, r5
10011348:	005f      	lsls	r7, r3, #1
1001134a:	0f45      	lsrs	r5, r0, #29
1001134c:	0a49      	lsrs	r1, r1, #9
1001134e:	0d7f      	lsrs	r7, r7, #21
10011350:	4329      	orrs	r1, r5
10011352:	00c5      	lsls	r5, r0, #3
10011354:	0318      	lsls	r0, r3, #12
10011356:	46bc      	mov	ip, r7
10011358:	0a40      	lsrs	r0, r0, #9
1001135a:	0f57      	lsrs	r7, r2, #29
1001135c:	0d64      	lsrs	r4, r4, #21
1001135e:	0fdb      	lsrs	r3, r3, #31
10011360:	4338      	orrs	r0, r7
10011362:	00d2      	lsls	r2, r2, #3
10011364:	459a      	cmp	sl, r3
10011366:	d100      	bne.n	1001136a <__aeabi_dadd+0x3a>
10011368:	e0aa      	b.n	100114c0 <__aeabi_dadd+0x190>
1001136a:	4666      	mov	r6, ip
1001136c:	1ba6      	subs	r6, r4, r6
1001136e:	2e00      	cmp	r6, #0
10011370:	dc00      	bgt.n	10011374 <__aeabi_dadd+0x44>
10011372:	e0ff      	b.n	10011574 <__aeabi_dadd+0x244>
10011374:	4663      	mov	r3, ip
10011376:	2b00      	cmp	r3, #0
10011378:	d139      	bne.n	100113ee <__aeabi_dadd+0xbe>
1001137a:	0003      	movs	r3, r0
1001137c:	4313      	orrs	r3, r2
1001137e:	d000      	beq.n	10011382 <__aeabi_dadd+0x52>
10011380:	e0d9      	b.n	10011536 <__aeabi_dadd+0x206>
10011382:	076b      	lsls	r3, r5, #29
10011384:	d009      	beq.n	1001139a <__aeabi_dadd+0x6a>
10011386:	230f      	movs	r3, #15
10011388:	402b      	ands	r3, r5
1001138a:	2b04      	cmp	r3, #4
1001138c:	d005      	beq.n	1001139a <__aeabi_dadd+0x6a>
1001138e:	1d2b      	adds	r3, r5, #4
10011390:	42ab      	cmp	r3, r5
10011392:	41ad      	sbcs	r5, r5
10011394:	426d      	negs	r5, r5
10011396:	1949      	adds	r1, r1, r5
10011398:	001d      	movs	r5, r3
1001139a:	020b      	lsls	r3, r1, #8
1001139c:	d400      	bmi.n	100113a0 <__aeabi_dadd+0x70>
1001139e:	e082      	b.n	100114a6 <__aeabi_dadd+0x176>
100113a0:	4bca      	ldr	r3, [pc, #808]	; (100116cc <__aeabi_dadd+0x39c>)
100113a2:	3401      	adds	r4, #1
100113a4:	429c      	cmp	r4, r3
100113a6:	d100      	bne.n	100113aa <__aeabi_dadd+0x7a>
100113a8:	e0fe      	b.n	100115a8 <__aeabi_dadd+0x278>
100113aa:	000a      	movs	r2, r1
100113ac:	4656      	mov	r6, sl
100113ae:	4bc8      	ldr	r3, [pc, #800]	; (100116d0 <__aeabi_dadd+0x3a0>)
100113b0:	08ed      	lsrs	r5, r5, #3
100113b2:	401a      	ands	r2, r3
100113b4:	0750      	lsls	r0, r2, #29
100113b6:	0564      	lsls	r4, r4, #21
100113b8:	0252      	lsls	r2, r2, #9
100113ba:	4305      	orrs	r5, r0
100113bc:	0b12      	lsrs	r2, r2, #12
100113be:	0d64      	lsrs	r4, r4, #21
100113c0:	2100      	movs	r1, #0
100113c2:	0312      	lsls	r2, r2, #12
100113c4:	0d0b      	lsrs	r3, r1, #20
100113c6:	051b      	lsls	r3, r3, #20
100113c8:	0564      	lsls	r4, r4, #21
100113ca:	0b12      	lsrs	r2, r2, #12
100113cc:	431a      	orrs	r2, r3
100113ce:	0863      	lsrs	r3, r4, #1
100113d0:	4cc0      	ldr	r4, [pc, #768]	; (100116d4 <__aeabi_dadd+0x3a4>)
100113d2:	07f6      	lsls	r6, r6, #31
100113d4:	4014      	ands	r4, r2
100113d6:	431c      	orrs	r4, r3
100113d8:	0064      	lsls	r4, r4, #1
100113da:	0864      	lsrs	r4, r4, #1
100113dc:	4334      	orrs	r4, r6
100113de:	0028      	movs	r0, r5
100113e0:	0021      	movs	r1, r4
100113e2:	bc3c      	pop	{r2, r3, r4, r5}
100113e4:	4690      	mov	r8, r2
100113e6:	4699      	mov	r9, r3
100113e8:	46a2      	mov	sl, r4
100113ea:	46ab      	mov	fp, r5
100113ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100113ee:	4bb7      	ldr	r3, [pc, #732]	; (100116cc <__aeabi_dadd+0x39c>)
100113f0:	429c      	cmp	r4, r3
100113f2:	d0c6      	beq.n	10011382 <__aeabi_dadd+0x52>
100113f4:	2380      	movs	r3, #128	; 0x80
100113f6:	041b      	lsls	r3, r3, #16
100113f8:	4318      	orrs	r0, r3
100113fa:	2e38      	cmp	r6, #56	; 0x38
100113fc:	dd00      	ble.n	10011400 <__aeabi_dadd+0xd0>
100113fe:	e0eb      	b.n	100115d8 <__aeabi_dadd+0x2a8>
10011400:	2e1f      	cmp	r6, #31
10011402:	dd00      	ble.n	10011406 <__aeabi_dadd+0xd6>
10011404:	e11e      	b.n	10011644 <__aeabi_dadd+0x314>
10011406:	2320      	movs	r3, #32
10011408:	1b9b      	subs	r3, r3, r6
1001140a:	469c      	mov	ip, r3
1001140c:	0003      	movs	r3, r0
1001140e:	4667      	mov	r7, ip
10011410:	40bb      	lsls	r3, r7
10011412:	4698      	mov	r8, r3
10011414:	0013      	movs	r3, r2
10011416:	4647      	mov	r7, r8
10011418:	40f3      	lsrs	r3, r6
1001141a:	433b      	orrs	r3, r7
1001141c:	4667      	mov	r7, ip
1001141e:	40ba      	lsls	r2, r7
10011420:	1e57      	subs	r7, r2, #1
10011422:	41ba      	sbcs	r2, r7
10011424:	4313      	orrs	r3, r2
10011426:	0002      	movs	r2, r0
10011428:	40f2      	lsrs	r2, r6
1001142a:	1aeb      	subs	r3, r5, r3
1001142c:	429d      	cmp	r5, r3
1001142e:	41b6      	sbcs	r6, r6
10011430:	001d      	movs	r5, r3
10011432:	1a8a      	subs	r2, r1, r2
10011434:	4276      	negs	r6, r6
10011436:	1b91      	subs	r1, r2, r6
10011438:	020b      	lsls	r3, r1, #8
1001143a:	d531      	bpl.n	100114a0 <__aeabi_dadd+0x170>
1001143c:	024a      	lsls	r2, r1, #9
1001143e:	0a56      	lsrs	r6, r2, #9
10011440:	2e00      	cmp	r6, #0
10011442:	d100      	bne.n	10011446 <__aeabi_dadd+0x116>
10011444:	e0b4      	b.n	100115b0 <__aeabi_dadd+0x280>
10011446:	0030      	movs	r0, r6
10011448:	f001 fdec 	bl	10013024 <__clzsi2>
1001144c:	0003      	movs	r3, r0
1001144e:	3b08      	subs	r3, #8
10011450:	2b1f      	cmp	r3, #31
10011452:	dd00      	ble.n	10011456 <__aeabi_dadd+0x126>
10011454:	e0b5      	b.n	100115c2 <__aeabi_dadd+0x292>
10011456:	2220      	movs	r2, #32
10011458:	0029      	movs	r1, r5
1001145a:	1ad2      	subs	r2, r2, r3
1001145c:	40d1      	lsrs	r1, r2
1001145e:	409e      	lsls	r6, r3
10011460:	000a      	movs	r2, r1
10011462:	409d      	lsls	r5, r3
10011464:	4332      	orrs	r2, r6
10011466:	429c      	cmp	r4, r3
10011468:	dd00      	ble.n	1001146c <__aeabi_dadd+0x13c>
1001146a:	e0b1      	b.n	100115d0 <__aeabi_dadd+0x2a0>
1001146c:	1b1c      	subs	r4, r3, r4
1001146e:	1c63      	adds	r3, r4, #1
10011470:	2b1f      	cmp	r3, #31
10011472:	dd00      	ble.n	10011476 <__aeabi_dadd+0x146>
10011474:	e0d5      	b.n	10011622 <__aeabi_dadd+0x2f2>
10011476:	2120      	movs	r1, #32
10011478:	0014      	movs	r4, r2
1001147a:	0028      	movs	r0, r5
1001147c:	1ac9      	subs	r1, r1, r3
1001147e:	408c      	lsls	r4, r1
10011480:	40d8      	lsrs	r0, r3
10011482:	408d      	lsls	r5, r1
10011484:	4304      	orrs	r4, r0
10011486:	40da      	lsrs	r2, r3
10011488:	1e68      	subs	r0, r5, #1
1001148a:	4185      	sbcs	r5, r0
1001148c:	0011      	movs	r1, r2
1001148e:	4325      	orrs	r5, r4
10011490:	2400      	movs	r4, #0
10011492:	e776      	b.n	10011382 <__aeabi_dadd+0x52>
10011494:	4641      	mov	r1, r8
10011496:	4331      	orrs	r1, r6
10011498:	d100      	bne.n	1001149c <__aeabi_dadd+0x16c>
1001149a:	e234      	b.n	10011906 <__aeabi_dadd+0x5d6>
1001149c:	0031      	movs	r1, r6
1001149e:	4645      	mov	r5, r8
100114a0:	076b      	lsls	r3, r5, #29
100114a2:	d000      	beq.n	100114a6 <__aeabi_dadd+0x176>
100114a4:	e76f      	b.n	10011386 <__aeabi_dadd+0x56>
100114a6:	4656      	mov	r6, sl
100114a8:	0748      	lsls	r0, r1, #29
100114aa:	08ed      	lsrs	r5, r5, #3
100114ac:	08c9      	lsrs	r1, r1, #3
100114ae:	4305      	orrs	r5, r0
100114b0:	4b86      	ldr	r3, [pc, #536]	; (100116cc <__aeabi_dadd+0x39c>)
100114b2:	429c      	cmp	r4, r3
100114b4:	d035      	beq.n	10011522 <__aeabi_dadd+0x1f2>
100114b6:	030a      	lsls	r2, r1, #12
100114b8:	0564      	lsls	r4, r4, #21
100114ba:	0b12      	lsrs	r2, r2, #12
100114bc:	0d64      	lsrs	r4, r4, #21
100114be:	e77f      	b.n	100113c0 <__aeabi_dadd+0x90>
100114c0:	4663      	mov	r3, ip
100114c2:	1ae3      	subs	r3, r4, r3
100114c4:	469b      	mov	fp, r3
100114c6:	2b00      	cmp	r3, #0
100114c8:	dc00      	bgt.n	100114cc <__aeabi_dadd+0x19c>
100114ca:	e08b      	b.n	100115e4 <__aeabi_dadd+0x2b4>
100114cc:	4667      	mov	r7, ip
100114ce:	2f00      	cmp	r7, #0
100114d0:	d03c      	beq.n	1001154c <__aeabi_dadd+0x21c>
100114d2:	4f7e      	ldr	r7, [pc, #504]	; (100116cc <__aeabi_dadd+0x39c>)
100114d4:	42bc      	cmp	r4, r7
100114d6:	d100      	bne.n	100114da <__aeabi_dadd+0x1aa>
100114d8:	e753      	b.n	10011382 <__aeabi_dadd+0x52>
100114da:	2780      	movs	r7, #128	; 0x80
100114dc:	043f      	lsls	r7, r7, #16
100114de:	4338      	orrs	r0, r7
100114e0:	465b      	mov	r3, fp
100114e2:	2b38      	cmp	r3, #56	; 0x38
100114e4:	dc00      	bgt.n	100114e8 <__aeabi_dadd+0x1b8>
100114e6:	e0f7      	b.n	100116d8 <__aeabi_dadd+0x3a8>
100114e8:	4302      	orrs	r2, r0
100114ea:	1e50      	subs	r0, r2, #1
100114ec:	4182      	sbcs	r2, r0
100114ee:	2000      	movs	r0, #0
100114f0:	b2d2      	uxtb	r2, r2
100114f2:	1953      	adds	r3, r2, r5
100114f4:	1842      	adds	r2, r0, r1
100114f6:	42ab      	cmp	r3, r5
100114f8:	4189      	sbcs	r1, r1
100114fa:	001d      	movs	r5, r3
100114fc:	4249      	negs	r1, r1
100114fe:	1889      	adds	r1, r1, r2
10011500:	020b      	lsls	r3, r1, #8
10011502:	d5cd      	bpl.n	100114a0 <__aeabi_dadd+0x170>
10011504:	4b71      	ldr	r3, [pc, #452]	; (100116cc <__aeabi_dadd+0x39c>)
10011506:	3401      	adds	r4, #1
10011508:	429c      	cmp	r4, r3
1001150a:	d100      	bne.n	1001150e <__aeabi_dadd+0x1de>
1001150c:	e13d      	b.n	1001178a <__aeabi_dadd+0x45a>
1001150e:	2001      	movs	r0, #1
10011510:	4a6f      	ldr	r2, [pc, #444]	; (100116d0 <__aeabi_dadd+0x3a0>)
10011512:	086b      	lsrs	r3, r5, #1
10011514:	400a      	ands	r2, r1
10011516:	4028      	ands	r0, r5
10011518:	4318      	orrs	r0, r3
1001151a:	07d5      	lsls	r5, r2, #31
1001151c:	4305      	orrs	r5, r0
1001151e:	0851      	lsrs	r1, r2, #1
10011520:	e72f      	b.n	10011382 <__aeabi_dadd+0x52>
10011522:	002b      	movs	r3, r5
10011524:	430b      	orrs	r3, r1
10011526:	d100      	bne.n	1001152a <__aeabi_dadd+0x1fa>
10011528:	e1cb      	b.n	100118c2 <__aeabi_dadd+0x592>
1001152a:	2380      	movs	r3, #128	; 0x80
1001152c:	031b      	lsls	r3, r3, #12
1001152e:	430b      	orrs	r3, r1
10011530:	031a      	lsls	r2, r3, #12
10011532:	0b12      	lsrs	r2, r2, #12
10011534:	e744      	b.n	100113c0 <__aeabi_dadd+0x90>
10011536:	3e01      	subs	r6, #1
10011538:	2e00      	cmp	r6, #0
1001153a:	d16d      	bne.n	10011618 <__aeabi_dadd+0x2e8>
1001153c:	1aae      	subs	r6, r5, r2
1001153e:	42b5      	cmp	r5, r6
10011540:	419b      	sbcs	r3, r3
10011542:	1a09      	subs	r1, r1, r0
10011544:	425b      	negs	r3, r3
10011546:	1ac9      	subs	r1, r1, r3
10011548:	0035      	movs	r5, r6
1001154a:	e775      	b.n	10011438 <__aeabi_dadd+0x108>
1001154c:	0007      	movs	r7, r0
1001154e:	4317      	orrs	r7, r2
10011550:	d100      	bne.n	10011554 <__aeabi_dadd+0x224>
10011552:	e716      	b.n	10011382 <__aeabi_dadd+0x52>
10011554:	2301      	movs	r3, #1
10011556:	425b      	negs	r3, r3
10011558:	469c      	mov	ip, r3
1001155a:	44e3      	add	fp, ip
1001155c:	465b      	mov	r3, fp
1001155e:	2b00      	cmp	r3, #0
10011560:	d000      	beq.n	10011564 <__aeabi_dadd+0x234>
10011562:	e0e0      	b.n	10011726 <__aeabi_dadd+0x3f6>
10011564:	18aa      	adds	r2, r5, r2
10011566:	42aa      	cmp	r2, r5
10011568:	419b      	sbcs	r3, r3
1001156a:	1809      	adds	r1, r1, r0
1001156c:	425b      	negs	r3, r3
1001156e:	1859      	adds	r1, r3, r1
10011570:	0015      	movs	r5, r2
10011572:	e7c5      	b.n	10011500 <__aeabi_dadd+0x1d0>
10011574:	2e00      	cmp	r6, #0
10011576:	d175      	bne.n	10011664 <__aeabi_dadd+0x334>
10011578:	1c66      	adds	r6, r4, #1
1001157a:	0576      	lsls	r6, r6, #21
1001157c:	0d76      	lsrs	r6, r6, #21
1001157e:	2e01      	cmp	r6, #1
10011580:	dc00      	bgt.n	10011584 <__aeabi_dadd+0x254>
10011582:	e0f3      	b.n	1001176c <__aeabi_dadd+0x43c>
10011584:	1aae      	subs	r6, r5, r2
10011586:	46b0      	mov	r8, r6
10011588:	4545      	cmp	r5, r8
1001158a:	41bf      	sbcs	r7, r7
1001158c:	1a0e      	subs	r6, r1, r0
1001158e:	427f      	negs	r7, r7
10011590:	1bf6      	subs	r6, r6, r7
10011592:	0237      	lsls	r7, r6, #8
10011594:	d400      	bmi.n	10011598 <__aeabi_dadd+0x268>
10011596:	e08f      	b.n	100116b8 <__aeabi_dadd+0x388>
10011598:	1b55      	subs	r5, r2, r5
1001159a:	42aa      	cmp	r2, r5
1001159c:	41b6      	sbcs	r6, r6
1001159e:	1a41      	subs	r1, r0, r1
100115a0:	4276      	negs	r6, r6
100115a2:	1b8e      	subs	r6, r1, r6
100115a4:	469a      	mov	sl, r3
100115a6:	e74b      	b.n	10011440 <__aeabi_dadd+0x110>
100115a8:	4656      	mov	r6, sl
100115aa:	2200      	movs	r2, #0
100115ac:	2500      	movs	r5, #0
100115ae:	e707      	b.n	100113c0 <__aeabi_dadd+0x90>
100115b0:	0028      	movs	r0, r5
100115b2:	f001 fd37 	bl	10013024 <__clzsi2>
100115b6:	3020      	adds	r0, #32
100115b8:	0003      	movs	r3, r0
100115ba:	3b08      	subs	r3, #8
100115bc:	2b1f      	cmp	r3, #31
100115be:	dc00      	bgt.n	100115c2 <__aeabi_dadd+0x292>
100115c0:	e749      	b.n	10011456 <__aeabi_dadd+0x126>
100115c2:	002a      	movs	r2, r5
100115c4:	3828      	subs	r0, #40	; 0x28
100115c6:	4082      	lsls	r2, r0
100115c8:	2500      	movs	r5, #0
100115ca:	429c      	cmp	r4, r3
100115cc:	dc00      	bgt.n	100115d0 <__aeabi_dadd+0x2a0>
100115ce:	e74d      	b.n	1001146c <__aeabi_dadd+0x13c>
100115d0:	493f      	ldr	r1, [pc, #252]	; (100116d0 <__aeabi_dadd+0x3a0>)
100115d2:	1ae4      	subs	r4, r4, r3
100115d4:	4011      	ands	r1, r2
100115d6:	e6d4      	b.n	10011382 <__aeabi_dadd+0x52>
100115d8:	4302      	orrs	r2, r0
100115da:	1e50      	subs	r0, r2, #1
100115dc:	4182      	sbcs	r2, r0
100115de:	b2d3      	uxtb	r3, r2
100115e0:	2200      	movs	r2, #0
100115e2:	e722      	b.n	1001142a <__aeabi_dadd+0xfa>
100115e4:	2b00      	cmp	r3, #0
100115e6:	d000      	beq.n	100115ea <__aeabi_dadd+0x2ba>
100115e8:	e0f3      	b.n	100117d2 <__aeabi_dadd+0x4a2>
100115ea:	1c63      	adds	r3, r4, #1
100115ec:	469c      	mov	ip, r3
100115ee:	055b      	lsls	r3, r3, #21
100115f0:	0d5b      	lsrs	r3, r3, #21
100115f2:	2b01      	cmp	r3, #1
100115f4:	dc00      	bgt.n	100115f8 <__aeabi_dadd+0x2c8>
100115f6:	e09f      	b.n	10011738 <__aeabi_dadd+0x408>
100115f8:	4b34      	ldr	r3, [pc, #208]	; (100116cc <__aeabi_dadd+0x39c>)
100115fa:	459c      	cmp	ip, r3
100115fc:	d100      	bne.n	10011600 <__aeabi_dadd+0x2d0>
100115fe:	e0c3      	b.n	10011788 <__aeabi_dadd+0x458>
10011600:	18aa      	adds	r2, r5, r2
10011602:	1809      	adds	r1, r1, r0
10011604:	42aa      	cmp	r2, r5
10011606:	4180      	sbcs	r0, r0
10011608:	4240      	negs	r0, r0
1001160a:	1841      	adds	r1, r0, r1
1001160c:	07cd      	lsls	r5, r1, #31
1001160e:	0852      	lsrs	r2, r2, #1
10011610:	4315      	orrs	r5, r2
10011612:	0849      	lsrs	r1, r1, #1
10011614:	4664      	mov	r4, ip
10011616:	e6b4      	b.n	10011382 <__aeabi_dadd+0x52>
10011618:	4b2c      	ldr	r3, [pc, #176]	; (100116cc <__aeabi_dadd+0x39c>)
1001161a:	429c      	cmp	r4, r3
1001161c:	d000      	beq.n	10011620 <__aeabi_dadd+0x2f0>
1001161e:	e6ec      	b.n	100113fa <__aeabi_dadd+0xca>
10011620:	e6af      	b.n	10011382 <__aeabi_dadd+0x52>
10011622:	0011      	movs	r1, r2
10011624:	3c1f      	subs	r4, #31
10011626:	40e1      	lsrs	r1, r4
10011628:	000c      	movs	r4, r1
1001162a:	2b20      	cmp	r3, #32
1001162c:	d100      	bne.n	10011630 <__aeabi_dadd+0x300>
1001162e:	e07f      	b.n	10011730 <__aeabi_dadd+0x400>
10011630:	2140      	movs	r1, #64	; 0x40
10011632:	1acb      	subs	r3, r1, r3
10011634:	409a      	lsls	r2, r3
10011636:	4315      	orrs	r5, r2
10011638:	1e6a      	subs	r2, r5, #1
1001163a:	4195      	sbcs	r5, r2
1001163c:	2100      	movs	r1, #0
1001163e:	4325      	orrs	r5, r4
10011640:	2400      	movs	r4, #0
10011642:	e72d      	b.n	100114a0 <__aeabi_dadd+0x170>
10011644:	0033      	movs	r3, r6
10011646:	0007      	movs	r7, r0
10011648:	3b20      	subs	r3, #32
1001164a:	40df      	lsrs	r7, r3
1001164c:	003b      	movs	r3, r7
1001164e:	2e20      	cmp	r6, #32
10011650:	d070      	beq.n	10011734 <__aeabi_dadd+0x404>
10011652:	2740      	movs	r7, #64	; 0x40
10011654:	1bbe      	subs	r6, r7, r6
10011656:	40b0      	lsls	r0, r6
10011658:	4302      	orrs	r2, r0
1001165a:	1e50      	subs	r0, r2, #1
1001165c:	4182      	sbcs	r2, r0
1001165e:	4313      	orrs	r3, r2
10011660:	2200      	movs	r2, #0
10011662:	e6e2      	b.n	1001142a <__aeabi_dadd+0xfa>
10011664:	2c00      	cmp	r4, #0
10011666:	d04f      	beq.n	10011708 <__aeabi_dadd+0x3d8>
10011668:	4c18      	ldr	r4, [pc, #96]	; (100116cc <__aeabi_dadd+0x39c>)
1001166a:	45a4      	cmp	ip, r4
1001166c:	d100      	bne.n	10011670 <__aeabi_dadd+0x340>
1001166e:	e0ab      	b.n	100117c8 <__aeabi_dadd+0x498>
10011670:	2480      	movs	r4, #128	; 0x80
10011672:	0424      	lsls	r4, r4, #16
10011674:	4276      	negs	r6, r6
10011676:	4321      	orrs	r1, r4
10011678:	2e38      	cmp	r6, #56	; 0x38
1001167a:	dd00      	ble.n	1001167e <__aeabi_dadd+0x34e>
1001167c:	e0df      	b.n	1001183e <__aeabi_dadd+0x50e>
1001167e:	2e1f      	cmp	r6, #31
10011680:	dd00      	ble.n	10011684 <__aeabi_dadd+0x354>
10011682:	e143      	b.n	1001190c <__aeabi_dadd+0x5dc>
10011684:	2720      	movs	r7, #32
10011686:	1bbc      	subs	r4, r7, r6
10011688:	46a1      	mov	r9, r4
1001168a:	000c      	movs	r4, r1
1001168c:	464f      	mov	r7, r9
1001168e:	40bc      	lsls	r4, r7
10011690:	46a0      	mov	r8, r4
10011692:	002c      	movs	r4, r5
10011694:	4647      	mov	r7, r8
10011696:	40f4      	lsrs	r4, r6
10011698:	433c      	orrs	r4, r7
1001169a:	464f      	mov	r7, r9
1001169c:	40bd      	lsls	r5, r7
1001169e:	1e6f      	subs	r7, r5, #1
100116a0:	41bd      	sbcs	r5, r7
100116a2:	40f1      	lsrs	r1, r6
100116a4:	432c      	orrs	r4, r5
100116a6:	1b15      	subs	r5, r2, r4
100116a8:	42aa      	cmp	r2, r5
100116aa:	4192      	sbcs	r2, r2
100116ac:	1a41      	subs	r1, r0, r1
100116ae:	4252      	negs	r2, r2
100116b0:	1a89      	subs	r1, r1, r2
100116b2:	4664      	mov	r4, ip
100116b4:	469a      	mov	sl, r3
100116b6:	e6bf      	b.n	10011438 <__aeabi_dadd+0x108>
100116b8:	4641      	mov	r1, r8
100116ba:	4645      	mov	r5, r8
100116bc:	4331      	orrs	r1, r6
100116be:	d000      	beq.n	100116c2 <__aeabi_dadd+0x392>
100116c0:	e6be      	b.n	10011440 <__aeabi_dadd+0x110>
100116c2:	2600      	movs	r6, #0
100116c4:	2400      	movs	r4, #0
100116c6:	2500      	movs	r5, #0
100116c8:	e6f2      	b.n	100114b0 <__aeabi_dadd+0x180>
100116ca:	46c0      	nop			; (mov r8, r8)
100116cc:	000007ff 	.word	0x000007ff
100116d0:	ff7fffff 	.word	0xff7fffff
100116d4:	800fffff 	.word	0x800fffff
100116d8:	2b1f      	cmp	r3, #31
100116da:	dc59      	bgt.n	10011790 <__aeabi_dadd+0x460>
100116dc:	2720      	movs	r7, #32
100116de:	1aff      	subs	r7, r7, r3
100116e0:	46bc      	mov	ip, r7
100116e2:	0007      	movs	r7, r0
100116e4:	4663      	mov	r3, ip
100116e6:	409f      	lsls	r7, r3
100116e8:	465b      	mov	r3, fp
100116ea:	46b9      	mov	r9, r7
100116ec:	0017      	movs	r7, r2
100116ee:	40df      	lsrs	r7, r3
100116f0:	46b8      	mov	r8, r7
100116f2:	464f      	mov	r7, r9
100116f4:	4643      	mov	r3, r8
100116f6:	431f      	orrs	r7, r3
100116f8:	4663      	mov	r3, ip
100116fa:	409a      	lsls	r2, r3
100116fc:	1e53      	subs	r3, r2, #1
100116fe:	419a      	sbcs	r2, r3
10011700:	465b      	mov	r3, fp
10011702:	433a      	orrs	r2, r7
10011704:	40d8      	lsrs	r0, r3
10011706:	e6f4      	b.n	100114f2 <__aeabi_dadd+0x1c2>
10011708:	000c      	movs	r4, r1
1001170a:	432c      	orrs	r4, r5
1001170c:	d05c      	beq.n	100117c8 <__aeabi_dadd+0x498>
1001170e:	43f6      	mvns	r6, r6
10011710:	2e00      	cmp	r6, #0
10011712:	d155      	bne.n	100117c0 <__aeabi_dadd+0x490>
10011714:	1b55      	subs	r5, r2, r5
10011716:	42aa      	cmp	r2, r5
10011718:	41a4      	sbcs	r4, r4
1001171a:	1a41      	subs	r1, r0, r1
1001171c:	4264      	negs	r4, r4
1001171e:	1b09      	subs	r1, r1, r4
10011720:	469a      	mov	sl, r3
10011722:	4664      	mov	r4, ip
10011724:	e688      	b.n	10011438 <__aeabi_dadd+0x108>
10011726:	4f96      	ldr	r7, [pc, #600]	; (10011980 <__aeabi_dadd+0x650>)
10011728:	42bc      	cmp	r4, r7
1001172a:	d000      	beq.n	1001172e <__aeabi_dadd+0x3fe>
1001172c:	e6d8      	b.n	100114e0 <__aeabi_dadd+0x1b0>
1001172e:	e628      	b.n	10011382 <__aeabi_dadd+0x52>
10011730:	2200      	movs	r2, #0
10011732:	e780      	b.n	10011636 <__aeabi_dadd+0x306>
10011734:	2000      	movs	r0, #0
10011736:	e78f      	b.n	10011658 <__aeabi_dadd+0x328>
10011738:	000b      	movs	r3, r1
1001173a:	432b      	orrs	r3, r5
1001173c:	2c00      	cmp	r4, #0
1001173e:	d000      	beq.n	10011742 <__aeabi_dadd+0x412>
10011740:	e0c2      	b.n	100118c8 <__aeabi_dadd+0x598>
10011742:	2b00      	cmp	r3, #0
10011744:	d100      	bne.n	10011748 <__aeabi_dadd+0x418>
10011746:	e101      	b.n	1001194c <__aeabi_dadd+0x61c>
10011748:	0003      	movs	r3, r0
1001174a:	4313      	orrs	r3, r2
1001174c:	d100      	bne.n	10011750 <__aeabi_dadd+0x420>
1001174e:	e618      	b.n	10011382 <__aeabi_dadd+0x52>
10011750:	18ab      	adds	r3, r5, r2
10011752:	42ab      	cmp	r3, r5
10011754:	41b6      	sbcs	r6, r6
10011756:	1809      	adds	r1, r1, r0
10011758:	4276      	negs	r6, r6
1001175a:	1871      	adds	r1, r6, r1
1001175c:	020a      	lsls	r2, r1, #8
1001175e:	d400      	bmi.n	10011762 <__aeabi_dadd+0x432>
10011760:	e109      	b.n	10011976 <__aeabi_dadd+0x646>
10011762:	4a88      	ldr	r2, [pc, #544]	; (10011984 <__aeabi_dadd+0x654>)
10011764:	001d      	movs	r5, r3
10011766:	4011      	ands	r1, r2
10011768:	4664      	mov	r4, ip
1001176a:	e60a      	b.n	10011382 <__aeabi_dadd+0x52>
1001176c:	2c00      	cmp	r4, #0
1001176e:	d15b      	bne.n	10011828 <__aeabi_dadd+0x4f8>
10011770:	000e      	movs	r6, r1
10011772:	432e      	orrs	r6, r5
10011774:	d000      	beq.n	10011778 <__aeabi_dadd+0x448>
10011776:	e08a      	b.n	1001188e <__aeabi_dadd+0x55e>
10011778:	0001      	movs	r1, r0
1001177a:	4311      	orrs	r1, r2
1001177c:	d100      	bne.n	10011780 <__aeabi_dadd+0x450>
1001177e:	e0c2      	b.n	10011906 <__aeabi_dadd+0x5d6>
10011780:	0001      	movs	r1, r0
10011782:	0015      	movs	r5, r2
10011784:	469a      	mov	sl, r3
10011786:	e5fc      	b.n	10011382 <__aeabi_dadd+0x52>
10011788:	4664      	mov	r4, ip
1001178a:	2100      	movs	r1, #0
1001178c:	2500      	movs	r5, #0
1001178e:	e68f      	b.n	100114b0 <__aeabi_dadd+0x180>
10011790:	2320      	movs	r3, #32
10011792:	425b      	negs	r3, r3
10011794:	469c      	mov	ip, r3
10011796:	44dc      	add	ip, fp
10011798:	4663      	mov	r3, ip
1001179a:	0007      	movs	r7, r0
1001179c:	40df      	lsrs	r7, r3
1001179e:	465b      	mov	r3, fp
100117a0:	46bc      	mov	ip, r7
100117a2:	2b20      	cmp	r3, #32
100117a4:	d100      	bne.n	100117a8 <__aeabi_dadd+0x478>
100117a6:	e0ac      	b.n	10011902 <__aeabi_dadd+0x5d2>
100117a8:	2340      	movs	r3, #64	; 0x40
100117aa:	465f      	mov	r7, fp
100117ac:	1bdb      	subs	r3, r3, r7
100117ae:	4098      	lsls	r0, r3
100117b0:	4302      	orrs	r2, r0
100117b2:	1e50      	subs	r0, r2, #1
100117b4:	4182      	sbcs	r2, r0
100117b6:	4663      	mov	r3, ip
100117b8:	4313      	orrs	r3, r2
100117ba:	001a      	movs	r2, r3
100117bc:	2000      	movs	r0, #0
100117be:	e698      	b.n	100114f2 <__aeabi_dadd+0x1c2>
100117c0:	4c6f      	ldr	r4, [pc, #444]	; (10011980 <__aeabi_dadd+0x650>)
100117c2:	45a4      	cmp	ip, r4
100117c4:	d000      	beq.n	100117c8 <__aeabi_dadd+0x498>
100117c6:	e757      	b.n	10011678 <__aeabi_dadd+0x348>
100117c8:	0001      	movs	r1, r0
100117ca:	0015      	movs	r5, r2
100117cc:	4664      	mov	r4, ip
100117ce:	469a      	mov	sl, r3
100117d0:	e5d7      	b.n	10011382 <__aeabi_dadd+0x52>
100117d2:	2c00      	cmp	r4, #0
100117d4:	d139      	bne.n	1001184a <__aeabi_dadd+0x51a>
100117d6:	000c      	movs	r4, r1
100117d8:	432c      	orrs	r4, r5
100117da:	d06e      	beq.n	100118ba <__aeabi_dadd+0x58a>
100117dc:	43db      	mvns	r3, r3
100117de:	2b00      	cmp	r3, #0
100117e0:	d01a      	beq.n	10011818 <__aeabi_dadd+0x4e8>
100117e2:	4c67      	ldr	r4, [pc, #412]	; (10011980 <__aeabi_dadd+0x650>)
100117e4:	45a4      	cmp	ip, r4
100117e6:	d068      	beq.n	100118ba <__aeabi_dadd+0x58a>
100117e8:	2b38      	cmp	r3, #56	; 0x38
100117ea:	dd00      	ble.n	100117ee <__aeabi_dadd+0x4be>
100117ec:	e0a4      	b.n	10011938 <__aeabi_dadd+0x608>
100117ee:	2b1f      	cmp	r3, #31
100117f0:	dd00      	ble.n	100117f4 <__aeabi_dadd+0x4c4>
100117f2:	e0ae      	b.n	10011952 <__aeabi_dadd+0x622>
100117f4:	2420      	movs	r4, #32
100117f6:	000f      	movs	r7, r1
100117f8:	1ae4      	subs	r4, r4, r3
100117fa:	40a7      	lsls	r7, r4
100117fc:	46b9      	mov	r9, r7
100117fe:	002f      	movs	r7, r5
10011800:	40df      	lsrs	r7, r3
10011802:	46b8      	mov	r8, r7
10011804:	46a3      	mov	fp, r4
10011806:	464f      	mov	r7, r9
10011808:	4644      	mov	r4, r8
1001180a:	4327      	orrs	r7, r4
1001180c:	465c      	mov	r4, fp
1001180e:	40a5      	lsls	r5, r4
10011810:	1e6c      	subs	r4, r5, #1
10011812:	41a5      	sbcs	r5, r4
10011814:	40d9      	lsrs	r1, r3
10011816:	433d      	orrs	r5, r7
10011818:	18ad      	adds	r5, r5, r2
1001181a:	4295      	cmp	r5, r2
1001181c:	419b      	sbcs	r3, r3
1001181e:	1809      	adds	r1, r1, r0
10011820:	425b      	negs	r3, r3
10011822:	1859      	adds	r1, r3, r1
10011824:	4664      	mov	r4, ip
10011826:	e66b      	b.n	10011500 <__aeabi_dadd+0x1d0>
10011828:	000c      	movs	r4, r1
1001182a:	432c      	orrs	r4, r5
1001182c:	d115      	bne.n	1001185a <__aeabi_dadd+0x52a>
1001182e:	0001      	movs	r1, r0
10011830:	4311      	orrs	r1, r2
10011832:	d07b      	beq.n	1001192c <__aeabi_dadd+0x5fc>
10011834:	0001      	movs	r1, r0
10011836:	0015      	movs	r5, r2
10011838:	469a      	mov	sl, r3
1001183a:	4c51      	ldr	r4, [pc, #324]	; (10011980 <__aeabi_dadd+0x650>)
1001183c:	e5a1      	b.n	10011382 <__aeabi_dadd+0x52>
1001183e:	430d      	orrs	r5, r1
10011840:	1e69      	subs	r1, r5, #1
10011842:	418d      	sbcs	r5, r1
10011844:	2100      	movs	r1, #0
10011846:	b2ec      	uxtb	r4, r5
10011848:	e72d      	b.n	100116a6 <__aeabi_dadd+0x376>
1001184a:	4c4d      	ldr	r4, [pc, #308]	; (10011980 <__aeabi_dadd+0x650>)
1001184c:	45a4      	cmp	ip, r4
1001184e:	d034      	beq.n	100118ba <__aeabi_dadd+0x58a>
10011850:	2480      	movs	r4, #128	; 0x80
10011852:	0424      	lsls	r4, r4, #16
10011854:	425b      	negs	r3, r3
10011856:	4321      	orrs	r1, r4
10011858:	e7c6      	b.n	100117e8 <__aeabi_dadd+0x4b8>
1001185a:	0004      	movs	r4, r0
1001185c:	4314      	orrs	r4, r2
1001185e:	d04e      	beq.n	100118fe <__aeabi_dadd+0x5ce>
10011860:	08ed      	lsrs	r5, r5, #3
10011862:	074c      	lsls	r4, r1, #29
10011864:	432c      	orrs	r4, r5
10011866:	2580      	movs	r5, #128	; 0x80
10011868:	08c9      	lsrs	r1, r1, #3
1001186a:	032d      	lsls	r5, r5, #12
1001186c:	4229      	tst	r1, r5
1001186e:	d008      	beq.n	10011882 <__aeabi_dadd+0x552>
10011870:	08c6      	lsrs	r6, r0, #3
10011872:	422e      	tst	r6, r5
10011874:	d105      	bne.n	10011882 <__aeabi_dadd+0x552>
10011876:	08d2      	lsrs	r2, r2, #3
10011878:	0741      	lsls	r1, r0, #29
1001187a:	4311      	orrs	r1, r2
1001187c:	000c      	movs	r4, r1
1001187e:	469a      	mov	sl, r3
10011880:	0031      	movs	r1, r6
10011882:	0f62      	lsrs	r2, r4, #29
10011884:	00c9      	lsls	r1, r1, #3
10011886:	00e5      	lsls	r5, r4, #3
10011888:	4311      	orrs	r1, r2
1001188a:	4c3d      	ldr	r4, [pc, #244]	; (10011980 <__aeabi_dadd+0x650>)
1001188c:	e579      	b.n	10011382 <__aeabi_dadd+0x52>
1001188e:	0006      	movs	r6, r0
10011890:	4316      	orrs	r6, r2
10011892:	d100      	bne.n	10011896 <__aeabi_dadd+0x566>
10011894:	e575      	b.n	10011382 <__aeabi_dadd+0x52>
10011896:	1aae      	subs	r6, r5, r2
10011898:	46b0      	mov	r8, r6
1001189a:	4545      	cmp	r5, r8
1001189c:	41bf      	sbcs	r7, r7
1001189e:	1a0e      	subs	r6, r1, r0
100118a0:	427f      	negs	r7, r7
100118a2:	1bf6      	subs	r6, r6, r7
100118a4:	0237      	lsls	r7, r6, #8
100118a6:	d400      	bmi.n	100118aa <__aeabi_dadd+0x57a>
100118a8:	e5f4      	b.n	10011494 <__aeabi_dadd+0x164>
100118aa:	1b55      	subs	r5, r2, r5
100118ac:	42aa      	cmp	r2, r5
100118ae:	41b6      	sbcs	r6, r6
100118b0:	1a41      	subs	r1, r0, r1
100118b2:	4276      	negs	r6, r6
100118b4:	1b89      	subs	r1, r1, r6
100118b6:	469a      	mov	sl, r3
100118b8:	e563      	b.n	10011382 <__aeabi_dadd+0x52>
100118ba:	0001      	movs	r1, r0
100118bc:	0015      	movs	r5, r2
100118be:	4664      	mov	r4, ip
100118c0:	e55f      	b.n	10011382 <__aeabi_dadd+0x52>
100118c2:	2200      	movs	r2, #0
100118c4:	2500      	movs	r5, #0
100118c6:	e57b      	b.n	100113c0 <__aeabi_dadd+0x90>
100118c8:	2b00      	cmp	r3, #0
100118ca:	d03b      	beq.n	10011944 <__aeabi_dadd+0x614>
100118cc:	0003      	movs	r3, r0
100118ce:	4313      	orrs	r3, r2
100118d0:	d015      	beq.n	100118fe <__aeabi_dadd+0x5ce>
100118d2:	08ed      	lsrs	r5, r5, #3
100118d4:	074b      	lsls	r3, r1, #29
100118d6:	432b      	orrs	r3, r5
100118d8:	2580      	movs	r5, #128	; 0x80
100118da:	08c9      	lsrs	r1, r1, #3
100118dc:	032d      	lsls	r5, r5, #12
100118de:	4229      	tst	r1, r5
100118e0:	d007      	beq.n	100118f2 <__aeabi_dadd+0x5c2>
100118e2:	08c4      	lsrs	r4, r0, #3
100118e4:	422c      	tst	r4, r5
100118e6:	d104      	bne.n	100118f2 <__aeabi_dadd+0x5c2>
100118e8:	0741      	lsls	r1, r0, #29
100118ea:	000b      	movs	r3, r1
100118ec:	0021      	movs	r1, r4
100118ee:	08d2      	lsrs	r2, r2, #3
100118f0:	4313      	orrs	r3, r2
100118f2:	00c9      	lsls	r1, r1, #3
100118f4:	0f5a      	lsrs	r2, r3, #29
100118f6:	4311      	orrs	r1, r2
100118f8:	00dd      	lsls	r5, r3, #3
100118fa:	4c21      	ldr	r4, [pc, #132]	; (10011980 <__aeabi_dadd+0x650>)
100118fc:	e541      	b.n	10011382 <__aeabi_dadd+0x52>
100118fe:	4c20      	ldr	r4, [pc, #128]	; (10011980 <__aeabi_dadd+0x650>)
10011900:	e53f      	b.n	10011382 <__aeabi_dadd+0x52>
10011902:	2000      	movs	r0, #0
10011904:	e754      	b.n	100117b0 <__aeabi_dadd+0x480>
10011906:	2600      	movs	r6, #0
10011908:	2500      	movs	r5, #0
1001190a:	e5d1      	b.n	100114b0 <__aeabi_dadd+0x180>
1001190c:	0034      	movs	r4, r6
1001190e:	000f      	movs	r7, r1
10011910:	3c20      	subs	r4, #32
10011912:	40e7      	lsrs	r7, r4
10011914:	003c      	movs	r4, r7
10011916:	2e20      	cmp	r6, #32
10011918:	d02b      	beq.n	10011972 <__aeabi_dadd+0x642>
1001191a:	2740      	movs	r7, #64	; 0x40
1001191c:	1bbe      	subs	r6, r7, r6
1001191e:	40b1      	lsls	r1, r6
10011920:	430d      	orrs	r5, r1
10011922:	1e69      	subs	r1, r5, #1
10011924:	418d      	sbcs	r5, r1
10011926:	2100      	movs	r1, #0
10011928:	432c      	orrs	r4, r5
1001192a:	e6bc      	b.n	100116a6 <__aeabi_dadd+0x376>
1001192c:	2180      	movs	r1, #128	; 0x80
1001192e:	2600      	movs	r6, #0
10011930:	0309      	lsls	r1, r1, #12
10011932:	4c13      	ldr	r4, [pc, #76]	; (10011980 <__aeabi_dadd+0x650>)
10011934:	2500      	movs	r5, #0
10011936:	e5bb      	b.n	100114b0 <__aeabi_dadd+0x180>
10011938:	430d      	orrs	r5, r1
1001193a:	1e69      	subs	r1, r5, #1
1001193c:	418d      	sbcs	r5, r1
1001193e:	2100      	movs	r1, #0
10011940:	b2ed      	uxtb	r5, r5
10011942:	e769      	b.n	10011818 <__aeabi_dadd+0x4e8>
10011944:	0001      	movs	r1, r0
10011946:	0015      	movs	r5, r2
10011948:	4c0d      	ldr	r4, [pc, #52]	; (10011980 <__aeabi_dadd+0x650>)
1001194a:	e51a      	b.n	10011382 <__aeabi_dadd+0x52>
1001194c:	0001      	movs	r1, r0
1001194e:	0015      	movs	r5, r2
10011950:	e517      	b.n	10011382 <__aeabi_dadd+0x52>
10011952:	001c      	movs	r4, r3
10011954:	000f      	movs	r7, r1
10011956:	3c20      	subs	r4, #32
10011958:	40e7      	lsrs	r7, r4
1001195a:	003c      	movs	r4, r7
1001195c:	2b20      	cmp	r3, #32
1001195e:	d00c      	beq.n	1001197a <__aeabi_dadd+0x64a>
10011960:	2740      	movs	r7, #64	; 0x40
10011962:	1afb      	subs	r3, r7, r3
10011964:	4099      	lsls	r1, r3
10011966:	430d      	orrs	r5, r1
10011968:	1e69      	subs	r1, r5, #1
1001196a:	418d      	sbcs	r5, r1
1001196c:	2100      	movs	r1, #0
1001196e:	4325      	orrs	r5, r4
10011970:	e752      	b.n	10011818 <__aeabi_dadd+0x4e8>
10011972:	2100      	movs	r1, #0
10011974:	e7d4      	b.n	10011920 <__aeabi_dadd+0x5f0>
10011976:	001d      	movs	r5, r3
10011978:	e592      	b.n	100114a0 <__aeabi_dadd+0x170>
1001197a:	2100      	movs	r1, #0
1001197c:	e7f3      	b.n	10011966 <__aeabi_dadd+0x636>
1001197e:	46c0      	nop			; (mov r8, r8)
10011980:	000007ff 	.word	0x000007ff
10011984:	ff7fffff 	.word	0xff7fffff

10011988 <__aeabi_ddiv>:
10011988:	b5f0      	push	{r4, r5, r6, r7, lr}
1001198a:	4656      	mov	r6, sl
1001198c:	464d      	mov	r5, r9
1001198e:	4644      	mov	r4, r8
10011990:	465f      	mov	r7, fp
10011992:	b4f0      	push	{r4, r5, r6, r7}
10011994:	001d      	movs	r5, r3
10011996:	030e      	lsls	r6, r1, #12
10011998:	004c      	lsls	r4, r1, #1
1001199a:	0fcb      	lsrs	r3, r1, #31
1001199c:	b087      	sub	sp, #28
1001199e:	0007      	movs	r7, r0
100119a0:	4692      	mov	sl, r2
100119a2:	4681      	mov	r9, r0
100119a4:	0b36      	lsrs	r6, r6, #12
100119a6:	0d64      	lsrs	r4, r4, #21
100119a8:	4698      	mov	r8, r3
100119aa:	d06a      	beq.n	10011a82 <__aeabi_ddiv+0xfa>
100119ac:	4b6d      	ldr	r3, [pc, #436]	; (10011b64 <__aeabi_ddiv+0x1dc>)
100119ae:	429c      	cmp	r4, r3
100119b0:	d035      	beq.n	10011a1e <__aeabi_ddiv+0x96>
100119b2:	2280      	movs	r2, #128	; 0x80
100119b4:	0f43      	lsrs	r3, r0, #29
100119b6:	0412      	lsls	r2, r2, #16
100119b8:	4313      	orrs	r3, r2
100119ba:	00f6      	lsls	r6, r6, #3
100119bc:	431e      	orrs	r6, r3
100119be:	00c3      	lsls	r3, r0, #3
100119c0:	4699      	mov	r9, r3
100119c2:	4b69      	ldr	r3, [pc, #420]	; (10011b68 <__aeabi_ddiv+0x1e0>)
100119c4:	2700      	movs	r7, #0
100119c6:	469c      	mov	ip, r3
100119c8:	2300      	movs	r3, #0
100119ca:	4464      	add	r4, ip
100119cc:	9302      	str	r3, [sp, #8]
100119ce:	032b      	lsls	r3, r5, #12
100119d0:	0068      	lsls	r0, r5, #1
100119d2:	0b1b      	lsrs	r3, r3, #12
100119d4:	0fed      	lsrs	r5, r5, #31
100119d6:	4651      	mov	r1, sl
100119d8:	469b      	mov	fp, r3
100119da:	0d40      	lsrs	r0, r0, #21
100119dc:	9500      	str	r5, [sp, #0]
100119de:	d100      	bne.n	100119e2 <__aeabi_ddiv+0x5a>
100119e0:	e078      	b.n	10011ad4 <__aeabi_ddiv+0x14c>
100119e2:	4b60      	ldr	r3, [pc, #384]	; (10011b64 <__aeabi_ddiv+0x1dc>)
100119e4:	4298      	cmp	r0, r3
100119e6:	d06c      	beq.n	10011ac2 <__aeabi_ddiv+0x13a>
100119e8:	465b      	mov	r3, fp
100119ea:	00da      	lsls	r2, r3, #3
100119ec:	0f4b      	lsrs	r3, r1, #29
100119ee:	2180      	movs	r1, #128	; 0x80
100119f0:	0409      	lsls	r1, r1, #16
100119f2:	430b      	orrs	r3, r1
100119f4:	4313      	orrs	r3, r2
100119f6:	469b      	mov	fp, r3
100119f8:	4653      	mov	r3, sl
100119fa:	00d9      	lsls	r1, r3, #3
100119fc:	4b5a      	ldr	r3, [pc, #360]	; (10011b68 <__aeabi_ddiv+0x1e0>)
100119fe:	469c      	mov	ip, r3
10011a00:	2300      	movs	r3, #0
10011a02:	4460      	add	r0, ip
10011a04:	4642      	mov	r2, r8
10011a06:	1a20      	subs	r0, r4, r0
10011a08:	406a      	eors	r2, r5
10011a0a:	4692      	mov	sl, r2
10011a0c:	9001      	str	r0, [sp, #4]
10011a0e:	431f      	orrs	r7, r3
10011a10:	2f0f      	cmp	r7, #15
10011a12:	d900      	bls.n	10011a16 <__aeabi_ddiv+0x8e>
10011a14:	e0b0      	b.n	10011b78 <__aeabi_ddiv+0x1f0>
10011a16:	4855      	ldr	r0, [pc, #340]	; (10011b6c <__aeabi_ddiv+0x1e4>)
10011a18:	00bf      	lsls	r7, r7, #2
10011a1a:	59c0      	ldr	r0, [r0, r7]
10011a1c:	4687      	mov	pc, r0
10011a1e:	4337      	orrs	r7, r6
10011a20:	d000      	beq.n	10011a24 <__aeabi_ddiv+0x9c>
10011a22:	e088      	b.n	10011b36 <__aeabi_ddiv+0x1ae>
10011a24:	2300      	movs	r3, #0
10011a26:	4699      	mov	r9, r3
10011a28:	3302      	adds	r3, #2
10011a2a:	2708      	movs	r7, #8
10011a2c:	2600      	movs	r6, #0
10011a2e:	9302      	str	r3, [sp, #8]
10011a30:	e7cd      	b.n	100119ce <__aeabi_ddiv+0x46>
10011a32:	4643      	mov	r3, r8
10011a34:	46b3      	mov	fp, r6
10011a36:	4649      	mov	r1, r9
10011a38:	9300      	str	r3, [sp, #0]
10011a3a:	9b02      	ldr	r3, [sp, #8]
10011a3c:	9a00      	ldr	r2, [sp, #0]
10011a3e:	4692      	mov	sl, r2
10011a40:	2b02      	cmp	r3, #2
10011a42:	d000      	beq.n	10011a46 <__aeabi_ddiv+0xbe>
10011a44:	e1bf      	b.n	10011dc6 <__aeabi_ddiv+0x43e>
10011a46:	2100      	movs	r1, #0
10011a48:	4653      	mov	r3, sl
10011a4a:	2201      	movs	r2, #1
10011a4c:	2600      	movs	r6, #0
10011a4e:	4689      	mov	r9, r1
10011a50:	401a      	ands	r2, r3
10011a52:	4b44      	ldr	r3, [pc, #272]	; (10011b64 <__aeabi_ddiv+0x1dc>)
10011a54:	2100      	movs	r1, #0
10011a56:	0336      	lsls	r6, r6, #12
10011a58:	0d0c      	lsrs	r4, r1, #20
10011a5a:	0524      	lsls	r4, r4, #20
10011a5c:	0b36      	lsrs	r6, r6, #12
10011a5e:	4326      	orrs	r6, r4
10011a60:	4c43      	ldr	r4, [pc, #268]	; (10011b70 <__aeabi_ddiv+0x1e8>)
10011a62:	051b      	lsls	r3, r3, #20
10011a64:	4026      	ands	r6, r4
10011a66:	431e      	orrs	r6, r3
10011a68:	0076      	lsls	r6, r6, #1
10011a6a:	07d2      	lsls	r2, r2, #31
10011a6c:	0876      	lsrs	r6, r6, #1
10011a6e:	4316      	orrs	r6, r2
10011a70:	4648      	mov	r0, r9
10011a72:	0031      	movs	r1, r6
10011a74:	b007      	add	sp, #28
10011a76:	bc3c      	pop	{r2, r3, r4, r5}
10011a78:	4690      	mov	r8, r2
10011a7a:	4699      	mov	r9, r3
10011a7c:	46a2      	mov	sl, r4
10011a7e:	46ab      	mov	fp, r5
10011a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a82:	0033      	movs	r3, r6
10011a84:	4303      	orrs	r3, r0
10011a86:	d04f      	beq.n	10011b28 <__aeabi_ddiv+0x1a0>
10011a88:	2e00      	cmp	r6, #0
10011a8a:	d100      	bne.n	10011a8e <__aeabi_ddiv+0x106>
10011a8c:	e1bc      	b.n	10011e08 <__aeabi_ddiv+0x480>
10011a8e:	0030      	movs	r0, r6
10011a90:	f001 fac8 	bl	10013024 <__clzsi2>
10011a94:	0003      	movs	r3, r0
10011a96:	3b0b      	subs	r3, #11
10011a98:	2b1c      	cmp	r3, #28
10011a9a:	dd00      	ble.n	10011a9e <__aeabi_ddiv+0x116>
10011a9c:	e1ad      	b.n	10011dfa <__aeabi_ddiv+0x472>
10011a9e:	221d      	movs	r2, #29
10011aa0:	0001      	movs	r1, r0
10011aa2:	1ad3      	subs	r3, r2, r3
10011aa4:	3908      	subs	r1, #8
10011aa6:	003a      	movs	r2, r7
10011aa8:	408f      	lsls	r7, r1
10011aaa:	408e      	lsls	r6, r1
10011aac:	40da      	lsrs	r2, r3
10011aae:	46b9      	mov	r9, r7
10011ab0:	4316      	orrs	r6, r2
10011ab2:	4b30      	ldr	r3, [pc, #192]	; (10011b74 <__aeabi_ddiv+0x1ec>)
10011ab4:	2700      	movs	r7, #0
10011ab6:	469c      	mov	ip, r3
10011ab8:	2300      	movs	r3, #0
10011aba:	4460      	add	r0, ip
10011abc:	4244      	negs	r4, r0
10011abe:	9302      	str	r3, [sp, #8]
10011ac0:	e785      	b.n	100119ce <__aeabi_ddiv+0x46>
10011ac2:	4653      	mov	r3, sl
10011ac4:	465a      	mov	r2, fp
10011ac6:	4313      	orrs	r3, r2
10011ac8:	d12c      	bne.n	10011b24 <__aeabi_ddiv+0x19c>
10011aca:	2300      	movs	r3, #0
10011acc:	2100      	movs	r1, #0
10011ace:	469b      	mov	fp, r3
10011ad0:	3302      	adds	r3, #2
10011ad2:	e797      	b.n	10011a04 <__aeabi_ddiv+0x7c>
10011ad4:	430b      	orrs	r3, r1
10011ad6:	d020      	beq.n	10011b1a <__aeabi_ddiv+0x192>
10011ad8:	465b      	mov	r3, fp
10011ada:	2b00      	cmp	r3, #0
10011adc:	d100      	bne.n	10011ae0 <__aeabi_ddiv+0x158>
10011ade:	e19e      	b.n	10011e1e <__aeabi_ddiv+0x496>
10011ae0:	4658      	mov	r0, fp
10011ae2:	f001 fa9f 	bl	10013024 <__clzsi2>
10011ae6:	0003      	movs	r3, r0
10011ae8:	3b0b      	subs	r3, #11
10011aea:	2b1c      	cmp	r3, #28
10011aec:	dd00      	ble.n	10011af0 <__aeabi_ddiv+0x168>
10011aee:	e18f      	b.n	10011e10 <__aeabi_ddiv+0x488>
10011af0:	0002      	movs	r2, r0
10011af2:	4659      	mov	r1, fp
10011af4:	3a08      	subs	r2, #8
10011af6:	4091      	lsls	r1, r2
10011af8:	468b      	mov	fp, r1
10011afa:	211d      	movs	r1, #29
10011afc:	1acb      	subs	r3, r1, r3
10011afe:	4651      	mov	r1, sl
10011b00:	40d9      	lsrs	r1, r3
10011b02:	000b      	movs	r3, r1
10011b04:	4659      	mov	r1, fp
10011b06:	430b      	orrs	r3, r1
10011b08:	4651      	mov	r1, sl
10011b0a:	469b      	mov	fp, r3
10011b0c:	4091      	lsls	r1, r2
10011b0e:	4b19      	ldr	r3, [pc, #100]	; (10011b74 <__aeabi_ddiv+0x1ec>)
10011b10:	469c      	mov	ip, r3
10011b12:	4460      	add	r0, ip
10011b14:	4240      	negs	r0, r0
10011b16:	2300      	movs	r3, #0
10011b18:	e774      	b.n	10011a04 <__aeabi_ddiv+0x7c>
10011b1a:	2300      	movs	r3, #0
10011b1c:	2100      	movs	r1, #0
10011b1e:	469b      	mov	fp, r3
10011b20:	3301      	adds	r3, #1
10011b22:	e76f      	b.n	10011a04 <__aeabi_ddiv+0x7c>
10011b24:	2303      	movs	r3, #3
10011b26:	e76d      	b.n	10011a04 <__aeabi_ddiv+0x7c>
10011b28:	2300      	movs	r3, #0
10011b2a:	4699      	mov	r9, r3
10011b2c:	3301      	adds	r3, #1
10011b2e:	2704      	movs	r7, #4
10011b30:	2600      	movs	r6, #0
10011b32:	9302      	str	r3, [sp, #8]
10011b34:	e74b      	b.n	100119ce <__aeabi_ddiv+0x46>
10011b36:	2303      	movs	r3, #3
10011b38:	270c      	movs	r7, #12
10011b3a:	9302      	str	r3, [sp, #8]
10011b3c:	e747      	b.n	100119ce <__aeabi_ddiv+0x46>
10011b3e:	2201      	movs	r2, #1
10011b40:	1ad5      	subs	r5, r2, r3
10011b42:	2d38      	cmp	r5, #56	; 0x38
10011b44:	dc00      	bgt.n	10011b48 <__aeabi_ddiv+0x1c0>
10011b46:	e1b0      	b.n	10011eaa <__aeabi_ddiv+0x522>
10011b48:	4653      	mov	r3, sl
10011b4a:	401a      	ands	r2, r3
10011b4c:	2100      	movs	r1, #0
10011b4e:	2300      	movs	r3, #0
10011b50:	2600      	movs	r6, #0
10011b52:	4689      	mov	r9, r1
10011b54:	e77e      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011b56:	2300      	movs	r3, #0
10011b58:	2680      	movs	r6, #128	; 0x80
10011b5a:	4699      	mov	r9, r3
10011b5c:	2200      	movs	r2, #0
10011b5e:	0336      	lsls	r6, r6, #12
10011b60:	4b00      	ldr	r3, [pc, #0]	; (10011b64 <__aeabi_ddiv+0x1dc>)
10011b62:	e777      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011b64:	000007ff 	.word	0x000007ff
10011b68:	fffffc01 	.word	0xfffffc01
10011b6c:	10015180 	.word	0x10015180
10011b70:	800fffff 	.word	0x800fffff
10011b74:	000003f3 	.word	0x000003f3
10011b78:	455e      	cmp	r6, fp
10011b7a:	d900      	bls.n	10011b7e <__aeabi_ddiv+0x1f6>
10011b7c:	e172      	b.n	10011e64 <__aeabi_ddiv+0x4dc>
10011b7e:	d100      	bne.n	10011b82 <__aeabi_ddiv+0x1fa>
10011b80:	e16d      	b.n	10011e5e <__aeabi_ddiv+0x4d6>
10011b82:	9b01      	ldr	r3, [sp, #4]
10011b84:	464d      	mov	r5, r9
10011b86:	3b01      	subs	r3, #1
10011b88:	9301      	str	r3, [sp, #4]
10011b8a:	2300      	movs	r3, #0
10011b8c:	0034      	movs	r4, r6
10011b8e:	9302      	str	r3, [sp, #8]
10011b90:	465b      	mov	r3, fp
10011b92:	021e      	lsls	r6, r3, #8
10011b94:	0e0b      	lsrs	r3, r1, #24
10011b96:	431e      	orrs	r6, r3
10011b98:	020b      	lsls	r3, r1, #8
10011b9a:	9303      	str	r3, [sp, #12]
10011b9c:	0c33      	lsrs	r3, r6, #16
10011b9e:	4699      	mov	r9, r3
10011ba0:	0433      	lsls	r3, r6, #16
10011ba2:	0c1b      	lsrs	r3, r3, #16
10011ba4:	4649      	mov	r1, r9
10011ba6:	0020      	movs	r0, r4
10011ba8:	9300      	str	r3, [sp, #0]
10011baa:	f7fe fe01 	bl	100107b0 <__aeabi_uidiv>
10011bae:	9b00      	ldr	r3, [sp, #0]
10011bb0:	0037      	movs	r7, r6
10011bb2:	4343      	muls	r3, r0
10011bb4:	0006      	movs	r6, r0
10011bb6:	4649      	mov	r1, r9
10011bb8:	0020      	movs	r0, r4
10011bba:	4698      	mov	r8, r3
10011bbc:	f7fe fe7e 	bl	100108bc <__aeabi_uidivmod>
10011bc0:	0c2c      	lsrs	r4, r5, #16
10011bc2:	0409      	lsls	r1, r1, #16
10011bc4:	430c      	orrs	r4, r1
10011bc6:	45a0      	cmp	r8, r4
10011bc8:	d909      	bls.n	10011bde <__aeabi_ddiv+0x256>
10011bca:	19e4      	adds	r4, r4, r7
10011bcc:	1e73      	subs	r3, r6, #1
10011bce:	42a7      	cmp	r7, r4
10011bd0:	d900      	bls.n	10011bd4 <__aeabi_ddiv+0x24c>
10011bd2:	e15c      	b.n	10011e8e <__aeabi_ddiv+0x506>
10011bd4:	45a0      	cmp	r8, r4
10011bd6:	d800      	bhi.n	10011bda <__aeabi_ddiv+0x252>
10011bd8:	e159      	b.n	10011e8e <__aeabi_ddiv+0x506>
10011bda:	3e02      	subs	r6, #2
10011bdc:	19e4      	adds	r4, r4, r7
10011bde:	4643      	mov	r3, r8
10011be0:	1ae4      	subs	r4, r4, r3
10011be2:	4649      	mov	r1, r9
10011be4:	0020      	movs	r0, r4
10011be6:	f7fe fde3 	bl	100107b0 <__aeabi_uidiv>
10011bea:	0003      	movs	r3, r0
10011bec:	9a00      	ldr	r2, [sp, #0]
10011bee:	4680      	mov	r8, r0
10011bf0:	4353      	muls	r3, r2
10011bf2:	4649      	mov	r1, r9
10011bf4:	0020      	movs	r0, r4
10011bf6:	469b      	mov	fp, r3
10011bf8:	f7fe fe60 	bl	100108bc <__aeabi_uidivmod>
10011bfc:	042a      	lsls	r2, r5, #16
10011bfe:	0409      	lsls	r1, r1, #16
10011c00:	0c12      	lsrs	r2, r2, #16
10011c02:	430a      	orrs	r2, r1
10011c04:	4593      	cmp	fp, r2
10011c06:	d90d      	bls.n	10011c24 <__aeabi_ddiv+0x29c>
10011c08:	4643      	mov	r3, r8
10011c0a:	19d2      	adds	r2, r2, r7
10011c0c:	3b01      	subs	r3, #1
10011c0e:	4297      	cmp	r7, r2
10011c10:	d900      	bls.n	10011c14 <__aeabi_ddiv+0x28c>
10011c12:	e13a      	b.n	10011e8a <__aeabi_ddiv+0x502>
10011c14:	4593      	cmp	fp, r2
10011c16:	d800      	bhi.n	10011c1a <__aeabi_ddiv+0x292>
10011c18:	e137      	b.n	10011e8a <__aeabi_ddiv+0x502>
10011c1a:	2302      	movs	r3, #2
10011c1c:	425b      	negs	r3, r3
10011c1e:	469c      	mov	ip, r3
10011c20:	19d2      	adds	r2, r2, r7
10011c22:	44e0      	add	r8, ip
10011c24:	465b      	mov	r3, fp
10011c26:	1ad2      	subs	r2, r2, r3
10011c28:	4643      	mov	r3, r8
10011c2a:	0436      	lsls	r6, r6, #16
10011c2c:	4333      	orrs	r3, r6
10011c2e:	469b      	mov	fp, r3
10011c30:	9903      	ldr	r1, [sp, #12]
10011c32:	0c18      	lsrs	r0, r3, #16
10011c34:	0c0b      	lsrs	r3, r1, #16
10011c36:	001d      	movs	r5, r3
10011c38:	9305      	str	r3, [sp, #20]
10011c3a:	0409      	lsls	r1, r1, #16
10011c3c:	465b      	mov	r3, fp
10011c3e:	0c09      	lsrs	r1, r1, #16
10011c40:	000c      	movs	r4, r1
10011c42:	041b      	lsls	r3, r3, #16
10011c44:	0c1b      	lsrs	r3, r3, #16
10011c46:	4344      	muls	r4, r0
10011c48:	9104      	str	r1, [sp, #16]
10011c4a:	4359      	muls	r1, r3
10011c4c:	436b      	muls	r3, r5
10011c4e:	4368      	muls	r0, r5
10011c50:	191b      	adds	r3, r3, r4
10011c52:	0c0d      	lsrs	r5, r1, #16
10011c54:	18eb      	adds	r3, r5, r3
10011c56:	429c      	cmp	r4, r3
10011c58:	d903      	bls.n	10011c62 <__aeabi_ddiv+0x2da>
10011c5a:	2480      	movs	r4, #128	; 0x80
10011c5c:	0264      	lsls	r4, r4, #9
10011c5e:	46a4      	mov	ip, r4
10011c60:	4460      	add	r0, ip
10011c62:	0c1c      	lsrs	r4, r3, #16
10011c64:	0409      	lsls	r1, r1, #16
10011c66:	041b      	lsls	r3, r3, #16
10011c68:	0c09      	lsrs	r1, r1, #16
10011c6a:	1820      	adds	r0, r4, r0
10011c6c:	185d      	adds	r5, r3, r1
10011c6e:	4282      	cmp	r2, r0
10011c70:	d200      	bcs.n	10011c74 <__aeabi_ddiv+0x2ec>
10011c72:	e0de      	b.n	10011e32 <__aeabi_ddiv+0x4aa>
10011c74:	d100      	bne.n	10011c78 <__aeabi_ddiv+0x2f0>
10011c76:	e0d7      	b.n	10011e28 <__aeabi_ddiv+0x4a0>
10011c78:	1a16      	subs	r6, r2, r0
10011c7a:	9b02      	ldr	r3, [sp, #8]
10011c7c:	469c      	mov	ip, r3
10011c7e:	1b5d      	subs	r5, r3, r5
10011c80:	45ac      	cmp	ip, r5
10011c82:	419b      	sbcs	r3, r3
10011c84:	425b      	negs	r3, r3
10011c86:	1af6      	subs	r6, r6, r3
10011c88:	42b7      	cmp	r7, r6
10011c8a:	d100      	bne.n	10011c8e <__aeabi_ddiv+0x306>
10011c8c:	e106      	b.n	10011e9c <__aeabi_ddiv+0x514>
10011c8e:	4649      	mov	r1, r9
10011c90:	0030      	movs	r0, r6
10011c92:	f7fe fd8d 	bl	100107b0 <__aeabi_uidiv>
10011c96:	9b00      	ldr	r3, [sp, #0]
10011c98:	0004      	movs	r4, r0
10011c9a:	4343      	muls	r3, r0
10011c9c:	4649      	mov	r1, r9
10011c9e:	0030      	movs	r0, r6
10011ca0:	4698      	mov	r8, r3
10011ca2:	f7fe fe0b 	bl	100108bc <__aeabi_uidivmod>
10011ca6:	0c2e      	lsrs	r6, r5, #16
10011ca8:	0409      	lsls	r1, r1, #16
10011caa:	430e      	orrs	r6, r1
10011cac:	45b0      	cmp	r8, r6
10011cae:	d909      	bls.n	10011cc4 <__aeabi_ddiv+0x33c>
10011cb0:	19f6      	adds	r6, r6, r7
10011cb2:	1e63      	subs	r3, r4, #1
10011cb4:	42b7      	cmp	r7, r6
10011cb6:	d900      	bls.n	10011cba <__aeabi_ddiv+0x332>
10011cb8:	e0f3      	b.n	10011ea2 <__aeabi_ddiv+0x51a>
10011cba:	45b0      	cmp	r8, r6
10011cbc:	d800      	bhi.n	10011cc0 <__aeabi_ddiv+0x338>
10011cbe:	e0f0      	b.n	10011ea2 <__aeabi_ddiv+0x51a>
10011cc0:	3c02      	subs	r4, #2
10011cc2:	19f6      	adds	r6, r6, r7
10011cc4:	4643      	mov	r3, r8
10011cc6:	1af3      	subs	r3, r6, r3
10011cc8:	4649      	mov	r1, r9
10011cca:	0018      	movs	r0, r3
10011ccc:	9302      	str	r3, [sp, #8]
10011cce:	f7fe fd6f 	bl	100107b0 <__aeabi_uidiv>
10011cd2:	9b00      	ldr	r3, [sp, #0]
10011cd4:	0006      	movs	r6, r0
10011cd6:	4343      	muls	r3, r0
10011cd8:	4649      	mov	r1, r9
10011cda:	9802      	ldr	r0, [sp, #8]
10011cdc:	4698      	mov	r8, r3
10011cde:	f7fe fded 	bl	100108bc <__aeabi_uidivmod>
10011ce2:	042d      	lsls	r5, r5, #16
10011ce4:	0409      	lsls	r1, r1, #16
10011ce6:	0c2d      	lsrs	r5, r5, #16
10011ce8:	430d      	orrs	r5, r1
10011cea:	45a8      	cmp	r8, r5
10011cec:	d909      	bls.n	10011d02 <__aeabi_ddiv+0x37a>
10011cee:	19ed      	adds	r5, r5, r7
10011cf0:	1e73      	subs	r3, r6, #1
10011cf2:	42af      	cmp	r7, r5
10011cf4:	d900      	bls.n	10011cf8 <__aeabi_ddiv+0x370>
10011cf6:	e0d6      	b.n	10011ea6 <__aeabi_ddiv+0x51e>
10011cf8:	45a8      	cmp	r8, r5
10011cfa:	d800      	bhi.n	10011cfe <__aeabi_ddiv+0x376>
10011cfc:	e0d3      	b.n	10011ea6 <__aeabi_ddiv+0x51e>
10011cfe:	3e02      	subs	r6, #2
10011d00:	19ed      	adds	r5, r5, r7
10011d02:	0424      	lsls	r4, r4, #16
10011d04:	0021      	movs	r1, r4
10011d06:	4643      	mov	r3, r8
10011d08:	4331      	orrs	r1, r6
10011d0a:	9e04      	ldr	r6, [sp, #16]
10011d0c:	9a05      	ldr	r2, [sp, #20]
10011d0e:	0030      	movs	r0, r6
10011d10:	1aed      	subs	r5, r5, r3
10011d12:	040b      	lsls	r3, r1, #16
10011d14:	0c0c      	lsrs	r4, r1, #16
10011d16:	0c1b      	lsrs	r3, r3, #16
10011d18:	4358      	muls	r0, r3
10011d1a:	4366      	muls	r6, r4
10011d1c:	4353      	muls	r3, r2
10011d1e:	4354      	muls	r4, r2
10011d20:	199a      	adds	r2, r3, r6
10011d22:	0c03      	lsrs	r3, r0, #16
10011d24:	189b      	adds	r3, r3, r2
10011d26:	429e      	cmp	r6, r3
10011d28:	d903      	bls.n	10011d32 <__aeabi_ddiv+0x3aa>
10011d2a:	2280      	movs	r2, #128	; 0x80
10011d2c:	0252      	lsls	r2, r2, #9
10011d2e:	4694      	mov	ip, r2
10011d30:	4464      	add	r4, ip
10011d32:	0c1a      	lsrs	r2, r3, #16
10011d34:	0400      	lsls	r0, r0, #16
10011d36:	041b      	lsls	r3, r3, #16
10011d38:	0c00      	lsrs	r0, r0, #16
10011d3a:	1914      	adds	r4, r2, r4
10011d3c:	181b      	adds	r3, r3, r0
10011d3e:	42a5      	cmp	r5, r4
10011d40:	d350      	bcc.n	10011de4 <__aeabi_ddiv+0x45c>
10011d42:	d04d      	beq.n	10011de0 <__aeabi_ddiv+0x458>
10011d44:	2301      	movs	r3, #1
10011d46:	4319      	orrs	r1, r3
10011d48:	4a96      	ldr	r2, [pc, #600]	; (10011fa4 <__aeabi_ddiv+0x61c>)
10011d4a:	9b01      	ldr	r3, [sp, #4]
10011d4c:	4694      	mov	ip, r2
10011d4e:	4463      	add	r3, ip
10011d50:	2b00      	cmp	r3, #0
10011d52:	dc00      	bgt.n	10011d56 <__aeabi_ddiv+0x3ce>
10011d54:	e6f3      	b.n	10011b3e <__aeabi_ddiv+0x1b6>
10011d56:	074a      	lsls	r2, r1, #29
10011d58:	d009      	beq.n	10011d6e <__aeabi_ddiv+0x3e6>
10011d5a:	220f      	movs	r2, #15
10011d5c:	400a      	ands	r2, r1
10011d5e:	2a04      	cmp	r2, #4
10011d60:	d005      	beq.n	10011d6e <__aeabi_ddiv+0x3e6>
10011d62:	1d0a      	adds	r2, r1, #4
10011d64:	428a      	cmp	r2, r1
10011d66:	4189      	sbcs	r1, r1
10011d68:	4249      	negs	r1, r1
10011d6a:	448b      	add	fp, r1
10011d6c:	0011      	movs	r1, r2
10011d6e:	465a      	mov	r2, fp
10011d70:	01d2      	lsls	r2, r2, #7
10011d72:	d508      	bpl.n	10011d86 <__aeabi_ddiv+0x3fe>
10011d74:	465a      	mov	r2, fp
10011d76:	4b8c      	ldr	r3, [pc, #560]	; (10011fa8 <__aeabi_ddiv+0x620>)
10011d78:	401a      	ands	r2, r3
10011d7a:	4693      	mov	fp, r2
10011d7c:	2280      	movs	r2, #128	; 0x80
10011d7e:	00d2      	lsls	r2, r2, #3
10011d80:	4694      	mov	ip, r2
10011d82:	9b01      	ldr	r3, [sp, #4]
10011d84:	4463      	add	r3, ip
10011d86:	4a89      	ldr	r2, [pc, #548]	; (10011fac <__aeabi_ddiv+0x624>)
10011d88:	4293      	cmp	r3, r2
10011d8a:	dd00      	ble.n	10011d8e <__aeabi_ddiv+0x406>
10011d8c:	e65b      	b.n	10011a46 <__aeabi_ddiv+0xbe>
10011d8e:	465a      	mov	r2, fp
10011d90:	08c9      	lsrs	r1, r1, #3
10011d92:	0750      	lsls	r0, r2, #29
10011d94:	4308      	orrs	r0, r1
10011d96:	0256      	lsls	r6, r2, #9
10011d98:	4651      	mov	r1, sl
10011d9a:	2201      	movs	r2, #1
10011d9c:	055b      	lsls	r3, r3, #21
10011d9e:	4681      	mov	r9, r0
10011da0:	0b36      	lsrs	r6, r6, #12
10011da2:	0d5b      	lsrs	r3, r3, #21
10011da4:	400a      	ands	r2, r1
10011da6:	e655      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011da8:	2380      	movs	r3, #128	; 0x80
10011daa:	031b      	lsls	r3, r3, #12
10011dac:	421e      	tst	r6, r3
10011dae:	d011      	beq.n	10011dd4 <__aeabi_ddiv+0x44c>
10011db0:	465a      	mov	r2, fp
10011db2:	421a      	tst	r2, r3
10011db4:	d10e      	bne.n	10011dd4 <__aeabi_ddiv+0x44c>
10011db6:	465e      	mov	r6, fp
10011db8:	431e      	orrs	r6, r3
10011dba:	0336      	lsls	r6, r6, #12
10011dbc:	0b36      	lsrs	r6, r6, #12
10011dbe:	002a      	movs	r2, r5
10011dc0:	4689      	mov	r9, r1
10011dc2:	4b7b      	ldr	r3, [pc, #492]	; (10011fb0 <__aeabi_ddiv+0x628>)
10011dc4:	e646      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011dc6:	2b03      	cmp	r3, #3
10011dc8:	d100      	bne.n	10011dcc <__aeabi_ddiv+0x444>
10011dca:	e0e1      	b.n	10011f90 <__aeabi_ddiv+0x608>
10011dcc:	2b01      	cmp	r3, #1
10011dce:	d1bb      	bne.n	10011d48 <__aeabi_ddiv+0x3c0>
10011dd0:	401a      	ands	r2, r3
10011dd2:	e6bb      	b.n	10011b4c <__aeabi_ddiv+0x1c4>
10011dd4:	431e      	orrs	r6, r3
10011dd6:	0336      	lsls	r6, r6, #12
10011dd8:	0b36      	lsrs	r6, r6, #12
10011dda:	4642      	mov	r2, r8
10011ddc:	4b74      	ldr	r3, [pc, #464]	; (10011fb0 <__aeabi_ddiv+0x628>)
10011dde:	e639      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011de0:	2b00      	cmp	r3, #0
10011de2:	d0b1      	beq.n	10011d48 <__aeabi_ddiv+0x3c0>
10011de4:	197d      	adds	r5, r7, r5
10011de6:	1e4a      	subs	r2, r1, #1
10011de8:	42af      	cmp	r7, r5
10011dea:	d952      	bls.n	10011e92 <__aeabi_ddiv+0x50a>
10011dec:	0011      	movs	r1, r2
10011dee:	42a5      	cmp	r5, r4
10011df0:	d1a8      	bne.n	10011d44 <__aeabi_ddiv+0x3bc>
10011df2:	9a03      	ldr	r2, [sp, #12]
10011df4:	429a      	cmp	r2, r3
10011df6:	d1a5      	bne.n	10011d44 <__aeabi_ddiv+0x3bc>
10011df8:	e7a6      	b.n	10011d48 <__aeabi_ddiv+0x3c0>
10011dfa:	0003      	movs	r3, r0
10011dfc:	003e      	movs	r6, r7
10011dfe:	3b28      	subs	r3, #40	; 0x28
10011e00:	409e      	lsls	r6, r3
10011e02:	2300      	movs	r3, #0
10011e04:	4699      	mov	r9, r3
10011e06:	e654      	b.n	10011ab2 <__aeabi_ddiv+0x12a>
10011e08:	f001 f90c 	bl	10013024 <__clzsi2>
10011e0c:	3020      	adds	r0, #32
10011e0e:	e641      	b.n	10011a94 <__aeabi_ddiv+0x10c>
10011e10:	0003      	movs	r3, r0
10011e12:	4652      	mov	r2, sl
10011e14:	3b28      	subs	r3, #40	; 0x28
10011e16:	409a      	lsls	r2, r3
10011e18:	2100      	movs	r1, #0
10011e1a:	4693      	mov	fp, r2
10011e1c:	e677      	b.n	10011b0e <__aeabi_ddiv+0x186>
10011e1e:	4650      	mov	r0, sl
10011e20:	f001 f900 	bl	10013024 <__clzsi2>
10011e24:	3020      	adds	r0, #32
10011e26:	e65e      	b.n	10011ae6 <__aeabi_ddiv+0x15e>
10011e28:	9b02      	ldr	r3, [sp, #8]
10011e2a:	2600      	movs	r6, #0
10011e2c:	42ab      	cmp	r3, r5
10011e2e:	d300      	bcc.n	10011e32 <__aeabi_ddiv+0x4aa>
10011e30:	e723      	b.n	10011c7a <__aeabi_ddiv+0x2f2>
10011e32:	9e03      	ldr	r6, [sp, #12]
10011e34:	9902      	ldr	r1, [sp, #8]
10011e36:	46b4      	mov	ip, r6
10011e38:	4461      	add	r1, ip
10011e3a:	4688      	mov	r8, r1
10011e3c:	45b0      	cmp	r8, r6
10011e3e:	41b6      	sbcs	r6, r6
10011e40:	465b      	mov	r3, fp
10011e42:	4276      	negs	r6, r6
10011e44:	19f6      	adds	r6, r6, r7
10011e46:	18b2      	adds	r2, r6, r2
10011e48:	3b01      	subs	r3, #1
10011e4a:	9102      	str	r1, [sp, #8]
10011e4c:	4297      	cmp	r7, r2
10011e4e:	d213      	bcs.n	10011e78 <__aeabi_ddiv+0x4f0>
10011e50:	4290      	cmp	r0, r2
10011e52:	d84f      	bhi.n	10011ef4 <__aeabi_ddiv+0x56c>
10011e54:	d100      	bne.n	10011e58 <__aeabi_ddiv+0x4d0>
10011e56:	e08e      	b.n	10011f76 <__aeabi_ddiv+0x5ee>
10011e58:	1a16      	subs	r6, r2, r0
10011e5a:	469b      	mov	fp, r3
10011e5c:	e70d      	b.n	10011c7a <__aeabi_ddiv+0x2f2>
10011e5e:	4589      	cmp	r9, r1
10011e60:	d200      	bcs.n	10011e64 <__aeabi_ddiv+0x4dc>
10011e62:	e68e      	b.n	10011b82 <__aeabi_ddiv+0x1fa>
10011e64:	0874      	lsrs	r4, r6, #1
10011e66:	464b      	mov	r3, r9
10011e68:	07f6      	lsls	r6, r6, #31
10011e6a:	0035      	movs	r5, r6
10011e6c:	085b      	lsrs	r3, r3, #1
10011e6e:	431d      	orrs	r5, r3
10011e70:	464b      	mov	r3, r9
10011e72:	07db      	lsls	r3, r3, #31
10011e74:	9302      	str	r3, [sp, #8]
10011e76:	e68b      	b.n	10011b90 <__aeabi_ddiv+0x208>
10011e78:	4297      	cmp	r7, r2
10011e7a:	d1ed      	bne.n	10011e58 <__aeabi_ddiv+0x4d0>
10011e7c:	9903      	ldr	r1, [sp, #12]
10011e7e:	9c02      	ldr	r4, [sp, #8]
10011e80:	42a1      	cmp	r1, r4
10011e82:	d9e5      	bls.n	10011e50 <__aeabi_ddiv+0x4c8>
10011e84:	1a3e      	subs	r6, r7, r0
10011e86:	469b      	mov	fp, r3
10011e88:	e6f7      	b.n	10011c7a <__aeabi_ddiv+0x2f2>
10011e8a:	4698      	mov	r8, r3
10011e8c:	e6ca      	b.n	10011c24 <__aeabi_ddiv+0x29c>
10011e8e:	001e      	movs	r6, r3
10011e90:	e6a5      	b.n	10011bde <__aeabi_ddiv+0x256>
10011e92:	42ac      	cmp	r4, r5
10011e94:	d83e      	bhi.n	10011f14 <__aeabi_ddiv+0x58c>
10011e96:	d074      	beq.n	10011f82 <__aeabi_ddiv+0x5fa>
10011e98:	0011      	movs	r1, r2
10011e9a:	e753      	b.n	10011d44 <__aeabi_ddiv+0x3bc>
10011e9c:	2101      	movs	r1, #1
10011e9e:	4249      	negs	r1, r1
10011ea0:	e752      	b.n	10011d48 <__aeabi_ddiv+0x3c0>
10011ea2:	001c      	movs	r4, r3
10011ea4:	e70e      	b.n	10011cc4 <__aeabi_ddiv+0x33c>
10011ea6:	001e      	movs	r6, r3
10011ea8:	e72b      	b.n	10011d02 <__aeabi_ddiv+0x37a>
10011eaa:	2d1f      	cmp	r5, #31
10011eac:	dc3c      	bgt.n	10011f28 <__aeabi_ddiv+0x5a0>
10011eae:	2320      	movs	r3, #32
10011eb0:	000a      	movs	r2, r1
10011eb2:	4658      	mov	r0, fp
10011eb4:	1b5b      	subs	r3, r3, r5
10011eb6:	4098      	lsls	r0, r3
10011eb8:	40ea      	lsrs	r2, r5
10011eba:	4099      	lsls	r1, r3
10011ebc:	4302      	orrs	r2, r0
10011ebe:	1e48      	subs	r0, r1, #1
10011ec0:	4181      	sbcs	r1, r0
10011ec2:	465e      	mov	r6, fp
10011ec4:	4311      	orrs	r1, r2
10011ec6:	40ee      	lsrs	r6, r5
10011ec8:	074b      	lsls	r3, r1, #29
10011eca:	d009      	beq.n	10011ee0 <__aeabi_ddiv+0x558>
10011ecc:	230f      	movs	r3, #15
10011ece:	400b      	ands	r3, r1
10011ed0:	2b04      	cmp	r3, #4
10011ed2:	d005      	beq.n	10011ee0 <__aeabi_ddiv+0x558>
10011ed4:	000b      	movs	r3, r1
10011ed6:	1d19      	adds	r1, r3, #4
10011ed8:	4299      	cmp	r1, r3
10011eda:	419b      	sbcs	r3, r3
10011edc:	425b      	negs	r3, r3
10011ede:	18f6      	adds	r6, r6, r3
10011ee0:	0233      	lsls	r3, r6, #8
10011ee2:	d53c      	bpl.n	10011f5e <__aeabi_ddiv+0x5d6>
10011ee4:	4653      	mov	r3, sl
10011ee6:	2201      	movs	r2, #1
10011ee8:	2100      	movs	r1, #0
10011eea:	401a      	ands	r2, r3
10011eec:	2600      	movs	r6, #0
10011eee:	2301      	movs	r3, #1
10011ef0:	4689      	mov	r9, r1
10011ef2:	e5af      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011ef4:	2302      	movs	r3, #2
10011ef6:	425b      	negs	r3, r3
10011ef8:	469c      	mov	ip, r3
10011efa:	9c03      	ldr	r4, [sp, #12]
10011efc:	44e3      	add	fp, ip
10011efe:	46a4      	mov	ip, r4
10011f00:	9b02      	ldr	r3, [sp, #8]
10011f02:	4463      	add	r3, ip
10011f04:	4698      	mov	r8, r3
10011f06:	45a0      	cmp	r8, r4
10011f08:	41b6      	sbcs	r6, r6
10011f0a:	4276      	negs	r6, r6
10011f0c:	19f6      	adds	r6, r6, r7
10011f0e:	9302      	str	r3, [sp, #8]
10011f10:	18b2      	adds	r2, r6, r2
10011f12:	e6b1      	b.n	10011c78 <__aeabi_ddiv+0x2f0>
10011f14:	9803      	ldr	r0, [sp, #12]
10011f16:	1e8a      	subs	r2, r1, #2
10011f18:	0041      	lsls	r1, r0, #1
10011f1a:	4281      	cmp	r1, r0
10011f1c:	41b6      	sbcs	r6, r6
10011f1e:	4276      	negs	r6, r6
10011f20:	19f6      	adds	r6, r6, r7
10011f22:	19ad      	adds	r5, r5, r6
10011f24:	9103      	str	r1, [sp, #12]
10011f26:	e761      	b.n	10011dec <__aeabi_ddiv+0x464>
10011f28:	221f      	movs	r2, #31
10011f2a:	4252      	negs	r2, r2
10011f2c:	1ad3      	subs	r3, r2, r3
10011f2e:	465a      	mov	r2, fp
10011f30:	40da      	lsrs	r2, r3
10011f32:	0013      	movs	r3, r2
10011f34:	2d20      	cmp	r5, #32
10011f36:	d029      	beq.n	10011f8c <__aeabi_ddiv+0x604>
10011f38:	2240      	movs	r2, #64	; 0x40
10011f3a:	4658      	mov	r0, fp
10011f3c:	1b55      	subs	r5, r2, r5
10011f3e:	40a8      	lsls	r0, r5
10011f40:	4301      	orrs	r1, r0
10011f42:	1e48      	subs	r0, r1, #1
10011f44:	4181      	sbcs	r1, r0
10011f46:	2007      	movs	r0, #7
10011f48:	430b      	orrs	r3, r1
10011f4a:	4018      	ands	r0, r3
10011f4c:	2600      	movs	r6, #0
10011f4e:	2800      	cmp	r0, #0
10011f50:	d009      	beq.n	10011f66 <__aeabi_ddiv+0x5de>
10011f52:	220f      	movs	r2, #15
10011f54:	2600      	movs	r6, #0
10011f56:	401a      	ands	r2, r3
10011f58:	0019      	movs	r1, r3
10011f5a:	2a04      	cmp	r2, #4
10011f5c:	d1bb      	bne.n	10011ed6 <__aeabi_ddiv+0x54e>
10011f5e:	000b      	movs	r3, r1
10011f60:	0770      	lsls	r0, r6, #29
10011f62:	0276      	lsls	r6, r6, #9
10011f64:	0b36      	lsrs	r6, r6, #12
10011f66:	08db      	lsrs	r3, r3, #3
10011f68:	4303      	orrs	r3, r0
10011f6a:	4699      	mov	r9, r3
10011f6c:	2201      	movs	r2, #1
10011f6e:	4653      	mov	r3, sl
10011f70:	401a      	ands	r2, r3
10011f72:	2300      	movs	r3, #0
10011f74:	e56e      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011f76:	9902      	ldr	r1, [sp, #8]
10011f78:	428d      	cmp	r5, r1
10011f7a:	d8bb      	bhi.n	10011ef4 <__aeabi_ddiv+0x56c>
10011f7c:	469b      	mov	fp, r3
10011f7e:	2600      	movs	r6, #0
10011f80:	e67b      	b.n	10011c7a <__aeabi_ddiv+0x2f2>
10011f82:	9803      	ldr	r0, [sp, #12]
10011f84:	4298      	cmp	r0, r3
10011f86:	d3c5      	bcc.n	10011f14 <__aeabi_ddiv+0x58c>
10011f88:	0011      	movs	r1, r2
10011f8a:	e732      	b.n	10011df2 <__aeabi_ddiv+0x46a>
10011f8c:	2000      	movs	r0, #0
10011f8e:	e7d7      	b.n	10011f40 <__aeabi_ddiv+0x5b8>
10011f90:	2680      	movs	r6, #128	; 0x80
10011f92:	465b      	mov	r3, fp
10011f94:	0336      	lsls	r6, r6, #12
10011f96:	431e      	orrs	r6, r3
10011f98:	0336      	lsls	r6, r6, #12
10011f9a:	0b36      	lsrs	r6, r6, #12
10011f9c:	9a00      	ldr	r2, [sp, #0]
10011f9e:	4689      	mov	r9, r1
10011fa0:	4b03      	ldr	r3, [pc, #12]	; (10011fb0 <__aeabi_ddiv+0x628>)
10011fa2:	e557      	b.n	10011a54 <__aeabi_ddiv+0xcc>
10011fa4:	000003ff 	.word	0x000003ff
10011fa8:	feffffff 	.word	0xfeffffff
10011fac:	000007fe 	.word	0x000007fe
10011fb0:	000007ff 	.word	0x000007ff

10011fb4 <__eqdf2>:
10011fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011fb6:	465f      	mov	r7, fp
10011fb8:	4656      	mov	r6, sl
10011fba:	464d      	mov	r5, r9
10011fbc:	4644      	mov	r4, r8
10011fbe:	b4f0      	push	{r4, r5, r6, r7}
10011fc0:	031f      	lsls	r7, r3, #12
10011fc2:	005c      	lsls	r4, r3, #1
10011fc4:	0fdb      	lsrs	r3, r3, #31
10011fc6:	469a      	mov	sl, r3
10011fc8:	4b19      	ldr	r3, [pc, #100]	; (10012030 <__eqdf2+0x7c>)
10011fca:	030e      	lsls	r6, r1, #12
10011fcc:	004d      	lsls	r5, r1, #1
10011fce:	0fc9      	lsrs	r1, r1, #31
10011fd0:	4680      	mov	r8, r0
10011fd2:	0b36      	lsrs	r6, r6, #12
10011fd4:	0d6d      	lsrs	r5, r5, #21
10011fd6:	468b      	mov	fp, r1
10011fd8:	4691      	mov	r9, r2
10011fda:	0b3f      	lsrs	r7, r7, #12
10011fdc:	0d64      	lsrs	r4, r4, #21
10011fde:	429d      	cmp	r5, r3
10011fe0:	d019      	beq.n	10012016 <__eqdf2+0x62>
10011fe2:	4b13      	ldr	r3, [pc, #76]	; (10012030 <__eqdf2+0x7c>)
10011fe4:	429c      	cmp	r4, r3
10011fe6:	d01b      	beq.n	10012020 <__eqdf2+0x6c>
10011fe8:	2301      	movs	r3, #1
10011fea:	42a5      	cmp	r5, r4
10011fec:	d006      	beq.n	10011ffc <__eqdf2+0x48>
10011fee:	0018      	movs	r0, r3
10011ff0:	bc3c      	pop	{r2, r3, r4, r5}
10011ff2:	4690      	mov	r8, r2
10011ff4:	4699      	mov	r9, r3
10011ff6:	46a2      	mov	sl, r4
10011ff8:	46ab      	mov	fp, r5
10011ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ffc:	42be      	cmp	r6, r7
10011ffe:	d1f6      	bne.n	10011fee <__eqdf2+0x3a>
10012000:	45c8      	cmp	r8, r9
10012002:	d1f4      	bne.n	10011fee <__eqdf2+0x3a>
10012004:	45d3      	cmp	fp, sl
10012006:	d010      	beq.n	1001202a <__eqdf2+0x76>
10012008:	2d00      	cmp	r5, #0
1001200a:	d1f0      	bne.n	10011fee <__eqdf2+0x3a>
1001200c:	4330      	orrs	r0, r6
1001200e:	0003      	movs	r3, r0
10012010:	1e5a      	subs	r2, r3, #1
10012012:	4193      	sbcs	r3, r2
10012014:	e7eb      	b.n	10011fee <__eqdf2+0x3a>
10012016:	0031      	movs	r1, r6
10012018:	2301      	movs	r3, #1
1001201a:	4301      	orrs	r1, r0
1001201c:	d1e7      	bne.n	10011fee <__eqdf2+0x3a>
1001201e:	e7e0      	b.n	10011fe2 <__eqdf2+0x2e>
10012020:	433a      	orrs	r2, r7
10012022:	2301      	movs	r3, #1
10012024:	2a00      	cmp	r2, #0
10012026:	d1e2      	bne.n	10011fee <__eqdf2+0x3a>
10012028:	e7de      	b.n	10011fe8 <__eqdf2+0x34>
1001202a:	2300      	movs	r3, #0
1001202c:	e7df      	b.n	10011fee <__eqdf2+0x3a>
1001202e:	46c0      	nop			; (mov r8, r8)
10012030:	000007ff 	.word	0x000007ff

10012034 <__gedf2>:
10012034:	b5f0      	push	{r4, r5, r6, r7, lr}
10012036:	465f      	mov	r7, fp
10012038:	4644      	mov	r4, r8
1001203a:	4656      	mov	r6, sl
1001203c:	464d      	mov	r5, r9
1001203e:	b4f0      	push	{r4, r5, r6, r7}
10012040:	031f      	lsls	r7, r3, #12
10012042:	0b3c      	lsrs	r4, r7, #12
10012044:	4f2c      	ldr	r7, [pc, #176]	; (100120f8 <__gedf2+0xc4>)
10012046:	030e      	lsls	r6, r1, #12
10012048:	004d      	lsls	r5, r1, #1
1001204a:	46a3      	mov	fp, r4
1001204c:	005c      	lsls	r4, r3, #1
1001204e:	4684      	mov	ip, r0
10012050:	0b36      	lsrs	r6, r6, #12
10012052:	0d6d      	lsrs	r5, r5, #21
10012054:	0fc9      	lsrs	r1, r1, #31
10012056:	4690      	mov	r8, r2
10012058:	0d64      	lsrs	r4, r4, #21
1001205a:	0fdb      	lsrs	r3, r3, #31
1001205c:	42bd      	cmp	r5, r7
1001205e:	d02b      	beq.n	100120b8 <__gedf2+0x84>
10012060:	4f25      	ldr	r7, [pc, #148]	; (100120f8 <__gedf2+0xc4>)
10012062:	42bc      	cmp	r4, r7
10012064:	d02e      	beq.n	100120c4 <__gedf2+0x90>
10012066:	2d00      	cmp	r5, #0
10012068:	d10e      	bne.n	10012088 <__gedf2+0x54>
1001206a:	4330      	orrs	r0, r6
1001206c:	0007      	movs	r7, r0
1001206e:	4681      	mov	r9, r0
10012070:	4278      	negs	r0, r7
10012072:	4178      	adcs	r0, r7
10012074:	2c00      	cmp	r4, #0
10012076:	d117      	bne.n	100120a8 <__gedf2+0x74>
10012078:	465f      	mov	r7, fp
1001207a:	433a      	orrs	r2, r7
1001207c:	d114      	bne.n	100120a8 <__gedf2+0x74>
1001207e:	464b      	mov	r3, r9
10012080:	2000      	movs	r0, #0
10012082:	2b00      	cmp	r3, #0
10012084:	d00a      	beq.n	1001209c <__gedf2+0x68>
10012086:	e006      	b.n	10012096 <__gedf2+0x62>
10012088:	2c00      	cmp	r4, #0
1001208a:	d102      	bne.n	10012092 <__gedf2+0x5e>
1001208c:	4658      	mov	r0, fp
1001208e:	4302      	orrs	r2, r0
10012090:	d001      	beq.n	10012096 <__gedf2+0x62>
10012092:	4299      	cmp	r1, r3
10012094:	d01a      	beq.n	100120cc <__gedf2+0x98>
10012096:	2301      	movs	r3, #1
10012098:	4248      	negs	r0, r1
1001209a:	4318      	orrs	r0, r3
1001209c:	bc3c      	pop	{r2, r3, r4, r5}
1001209e:	4690      	mov	r8, r2
100120a0:	4699      	mov	r9, r3
100120a2:	46a2      	mov	sl, r4
100120a4:	46ab      	mov	fp, r5
100120a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120a8:	2800      	cmp	r0, #0
100120aa:	d0f2      	beq.n	10012092 <__gedf2+0x5e>
100120ac:	4258      	negs	r0, r3
100120ae:	4158      	adcs	r0, r3
100120b0:	2201      	movs	r2, #1
100120b2:	4240      	negs	r0, r0
100120b4:	4310      	orrs	r0, r2
100120b6:	e7f1      	b.n	1001209c <__gedf2+0x68>
100120b8:	0037      	movs	r7, r6
100120ba:	4307      	orrs	r7, r0
100120bc:	d0d0      	beq.n	10012060 <__gedf2+0x2c>
100120be:	2002      	movs	r0, #2
100120c0:	4240      	negs	r0, r0
100120c2:	e7eb      	b.n	1001209c <__gedf2+0x68>
100120c4:	465f      	mov	r7, fp
100120c6:	4317      	orrs	r7, r2
100120c8:	d0cd      	beq.n	10012066 <__gedf2+0x32>
100120ca:	e7f8      	b.n	100120be <__gedf2+0x8a>
100120cc:	42a5      	cmp	r5, r4
100120ce:	dce2      	bgt.n	10012096 <__gedf2+0x62>
100120d0:	db05      	blt.n	100120de <__gedf2+0xaa>
100120d2:	455e      	cmp	r6, fp
100120d4:	d8df      	bhi.n	10012096 <__gedf2+0x62>
100120d6:	d008      	beq.n	100120ea <__gedf2+0xb6>
100120d8:	2000      	movs	r0, #0
100120da:	455e      	cmp	r6, fp
100120dc:	d2de      	bcs.n	1001209c <__gedf2+0x68>
100120de:	4248      	negs	r0, r1
100120e0:	4148      	adcs	r0, r1
100120e2:	2301      	movs	r3, #1
100120e4:	4240      	negs	r0, r0
100120e6:	4318      	orrs	r0, r3
100120e8:	e7d8      	b.n	1001209c <__gedf2+0x68>
100120ea:	45c4      	cmp	ip, r8
100120ec:	d8d3      	bhi.n	10012096 <__gedf2+0x62>
100120ee:	2000      	movs	r0, #0
100120f0:	45c4      	cmp	ip, r8
100120f2:	d3f4      	bcc.n	100120de <__gedf2+0xaa>
100120f4:	e7d2      	b.n	1001209c <__gedf2+0x68>
100120f6:	46c0      	nop			; (mov r8, r8)
100120f8:	000007ff 	.word	0x000007ff

100120fc <__ledf2>:
100120fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100120fe:	465f      	mov	r7, fp
10012100:	464d      	mov	r5, r9
10012102:	4644      	mov	r4, r8
10012104:	4656      	mov	r6, sl
10012106:	b4f0      	push	{r4, r5, r6, r7}
10012108:	031c      	lsls	r4, r3, #12
1001210a:	0b24      	lsrs	r4, r4, #12
1001210c:	46a4      	mov	ip, r4
1001210e:	4c2f      	ldr	r4, [pc, #188]	; (100121cc <__ledf2+0xd0>)
10012110:	030f      	lsls	r7, r1, #12
10012112:	004d      	lsls	r5, r1, #1
10012114:	005e      	lsls	r6, r3, #1
10012116:	0fc9      	lsrs	r1, r1, #31
10012118:	4680      	mov	r8, r0
1001211a:	0b3f      	lsrs	r7, r7, #12
1001211c:	0d6d      	lsrs	r5, r5, #21
1001211e:	468b      	mov	fp, r1
10012120:	4691      	mov	r9, r2
10012122:	0d76      	lsrs	r6, r6, #21
10012124:	0fdb      	lsrs	r3, r3, #31
10012126:	42a5      	cmp	r5, r4
10012128:	d020      	beq.n	1001216c <__ledf2+0x70>
1001212a:	4c28      	ldr	r4, [pc, #160]	; (100121cc <__ledf2+0xd0>)
1001212c:	42a6      	cmp	r6, r4
1001212e:	d022      	beq.n	10012176 <__ledf2+0x7a>
10012130:	2d00      	cmp	r5, #0
10012132:	d112      	bne.n	1001215a <__ledf2+0x5e>
10012134:	4338      	orrs	r0, r7
10012136:	4244      	negs	r4, r0
10012138:	4144      	adcs	r4, r0
1001213a:	2e00      	cmp	r6, #0
1001213c:	d020      	beq.n	10012180 <__ledf2+0x84>
1001213e:	2c00      	cmp	r4, #0
10012140:	d00d      	beq.n	1001215e <__ledf2+0x62>
10012142:	425c      	negs	r4, r3
10012144:	4163      	adcs	r3, r4
10012146:	2401      	movs	r4, #1
10012148:	425b      	negs	r3, r3
1001214a:	431c      	orrs	r4, r3
1001214c:	0020      	movs	r0, r4
1001214e:	bc3c      	pop	{r2, r3, r4, r5}
10012150:	4690      	mov	r8, r2
10012152:	4699      	mov	r9, r3
10012154:	46a2      	mov	sl, r4
10012156:	46ab      	mov	fp, r5
10012158:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001215a:	2e00      	cmp	r6, #0
1001215c:	d017      	beq.n	1001218e <__ledf2+0x92>
1001215e:	455b      	cmp	r3, fp
10012160:	d019      	beq.n	10012196 <__ledf2+0x9a>
10012162:	465b      	mov	r3, fp
10012164:	425c      	negs	r4, r3
10012166:	2301      	movs	r3, #1
10012168:	431c      	orrs	r4, r3
1001216a:	e7ef      	b.n	1001214c <__ledf2+0x50>
1001216c:	0039      	movs	r1, r7
1001216e:	2402      	movs	r4, #2
10012170:	4301      	orrs	r1, r0
10012172:	d1eb      	bne.n	1001214c <__ledf2+0x50>
10012174:	e7d9      	b.n	1001212a <__ledf2+0x2e>
10012176:	4661      	mov	r1, ip
10012178:	2402      	movs	r4, #2
1001217a:	4311      	orrs	r1, r2
1001217c:	d1e6      	bne.n	1001214c <__ledf2+0x50>
1001217e:	e7d7      	b.n	10012130 <__ledf2+0x34>
10012180:	4661      	mov	r1, ip
10012182:	430a      	orrs	r2, r1
10012184:	d1db      	bne.n	1001213e <__ledf2+0x42>
10012186:	2400      	movs	r4, #0
10012188:	2800      	cmp	r0, #0
1001218a:	d0df      	beq.n	1001214c <__ledf2+0x50>
1001218c:	e7e9      	b.n	10012162 <__ledf2+0x66>
1001218e:	4661      	mov	r1, ip
10012190:	430a      	orrs	r2, r1
10012192:	d1e4      	bne.n	1001215e <__ledf2+0x62>
10012194:	e7e5      	b.n	10012162 <__ledf2+0x66>
10012196:	42b5      	cmp	r5, r6
10012198:	dd03      	ble.n	100121a2 <__ledf2+0xa6>
1001219a:	2201      	movs	r2, #1
1001219c:	425c      	negs	r4, r3
1001219e:	4314      	orrs	r4, r2
100121a0:	e7d4      	b.n	1001214c <__ledf2+0x50>
100121a2:	42b5      	cmp	r5, r6
100121a4:	dbcd      	blt.n	10012142 <__ledf2+0x46>
100121a6:	4567      	cmp	r7, ip
100121a8:	d8db      	bhi.n	10012162 <__ledf2+0x66>
100121aa:	d009      	beq.n	100121c0 <__ledf2+0xc4>
100121ac:	2400      	movs	r4, #0
100121ae:	4567      	cmp	r7, ip
100121b0:	d2cc      	bcs.n	1001214c <__ledf2+0x50>
100121b2:	4659      	mov	r1, fp
100121b4:	424c      	negs	r4, r1
100121b6:	4161      	adcs	r1, r4
100121b8:	2401      	movs	r4, #1
100121ba:	4249      	negs	r1, r1
100121bc:	430c      	orrs	r4, r1
100121be:	e7c5      	b.n	1001214c <__ledf2+0x50>
100121c0:	45c8      	cmp	r8, r9
100121c2:	d8ce      	bhi.n	10012162 <__ledf2+0x66>
100121c4:	2400      	movs	r4, #0
100121c6:	45c8      	cmp	r8, r9
100121c8:	d3f3      	bcc.n	100121b2 <__ledf2+0xb6>
100121ca:	e7bf      	b.n	1001214c <__ledf2+0x50>
100121cc:	000007ff 	.word	0x000007ff

100121d0 <__aeabi_dmul>:
100121d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100121d2:	465f      	mov	r7, fp
100121d4:	4656      	mov	r6, sl
100121d6:	464d      	mov	r5, r9
100121d8:	4644      	mov	r4, r8
100121da:	b4f0      	push	{r4, r5, r6, r7}
100121dc:	030d      	lsls	r5, r1, #12
100121de:	4699      	mov	r9, r3
100121e0:	004e      	lsls	r6, r1, #1
100121e2:	0b2b      	lsrs	r3, r5, #12
100121e4:	b087      	sub	sp, #28
100121e6:	0007      	movs	r7, r0
100121e8:	4692      	mov	sl, r2
100121ea:	4680      	mov	r8, r0
100121ec:	469b      	mov	fp, r3
100121ee:	0d76      	lsrs	r6, r6, #21
100121f0:	0fcc      	lsrs	r4, r1, #31
100121f2:	2e00      	cmp	r6, #0
100121f4:	d069      	beq.n	100122ca <__aeabi_dmul+0xfa>
100121f6:	4b6d      	ldr	r3, [pc, #436]	; (100123ac <__aeabi_dmul+0x1dc>)
100121f8:	429e      	cmp	r6, r3
100121fa:	d035      	beq.n	10012268 <__aeabi_dmul+0x98>
100121fc:	465b      	mov	r3, fp
100121fe:	2280      	movs	r2, #128	; 0x80
10012200:	00dd      	lsls	r5, r3, #3
10012202:	0412      	lsls	r2, r2, #16
10012204:	0f43      	lsrs	r3, r0, #29
10012206:	4313      	orrs	r3, r2
10012208:	432b      	orrs	r3, r5
1001220a:	469b      	mov	fp, r3
1001220c:	00c3      	lsls	r3, r0, #3
1001220e:	4698      	mov	r8, r3
10012210:	4b67      	ldr	r3, [pc, #412]	; (100123b0 <__aeabi_dmul+0x1e0>)
10012212:	2700      	movs	r7, #0
10012214:	469c      	mov	ip, r3
10012216:	2300      	movs	r3, #0
10012218:	4466      	add	r6, ip
1001221a:	9301      	str	r3, [sp, #4]
1001221c:	464a      	mov	r2, r9
1001221e:	0315      	lsls	r5, r2, #12
10012220:	0050      	lsls	r0, r2, #1
10012222:	0fd2      	lsrs	r2, r2, #31
10012224:	4653      	mov	r3, sl
10012226:	0b2d      	lsrs	r5, r5, #12
10012228:	0d40      	lsrs	r0, r0, #21
1001222a:	4691      	mov	r9, r2
1001222c:	d100      	bne.n	10012230 <__aeabi_dmul+0x60>
1001222e:	e076      	b.n	1001231e <__aeabi_dmul+0x14e>
10012230:	4a5e      	ldr	r2, [pc, #376]	; (100123ac <__aeabi_dmul+0x1dc>)
10012232:	4290      	cmp	r0, r2
10012234:	d06c      	beq.n	10012310 <__aeabi_dmul+0x140>
10012236:	2280      	movs	r2, #128	; 0x80
10012238:	0f5b      	lsrs	r3, r3, #29
1001223a:	0412      	lsls	r2, r2, #16
1001223c:	4313      	orrs	r3, r2
1001223e:	4a5c      	ldr	r2, [pc, #368]	; (100123b0 <__aeabi_dmul+0x1e0>)
10012240:	00ed      	lsls	r5, r5, #3
10012242:	4694      	mov	ip, r2
10012244:	431d      	orrs	r5, r3
10012246:	4653      	mov	r3, sl
10012248:	2200      	movs	r2, #0
1001224a:	00db      	lsls	r3, r3, #3
1001224c:	4460      	add	r0, ip
1001224e:	4649      	mov	r1, r9
10012250:	1836      	adds	r6, r6, r0
10012252:	1c70      	adds	r0, r6, #1
10012254:	4061      	eors	r1, r4
10012256:	9002      	str	r0, [sp, #8]
10012258:	4317      	orrs	r7, r2
1001225a:	2f0f      	cmp	r7, #15
1001225c:	d900      	bls.n	10012260 <__aeabi_dmul+0x90>
1001225e:	e0af      	b.n	100123c0 <__aeabi_dmul+0x1f0>
10012260:	4854      	ldr	r0, [pc, #336]	; (100123b4 <__aeabi_dmul+0x1e4>)
10012262:	00bf      	lsls	r7, r7, #2
10012264:	59c7      	ldr	r7, [r0, r7]
10012266:	46bf      	mov	pc, r7
10012268:	465b      	mov	r3, fp
1001226a:	431f      	orrs	r7, r3
1001226c:	d000      	beq.n	10012270 <__aeabi_dmul+0xa0>
1001226e:	e088      	b.n	10012382 <__aeabi_dmul+0x1b2>
10012270:	2300      	movs	r3, #0
10012272:	469b      	mov	fp, r3
10012274:	4698      	mov	r8, r3
10012276:	3302      	adds	r3, #2
10012278:	2708      	movs	r7, #8
1001227a:	9301      	str	r3, [sp, #4]
1001227c:	e7ce      	b.n	1001221c <__aeabi_dmul+0x4c>
1001227e:	4649      	mov	r1, r9
10012280:	2a02      	cmp	r2, #2
10012282:	d06a      	beq.n	1001235a <__aeabi_dmul+0x18a>
10012284:	2a03      	cmp	r2, #3
10012286:	d100      	bne.n	1001228a <__aeabi_dmul+0xba>
10012288:	e209      	b.n	1001269e <__aeabi_dmul+0x4ce>
1001228a:	2a01      	cmp	r2, #1
1001228c:	d000      	beq.n	10012290 <__aeabi_dmul+0xc0>
1001228e:	e1bb      	b.n	10012608 <__aeabi_dmul+0x438>
10012290:	4011      	ands	r1, r2
10012292:	2200      	movs	r2, #0
10012294:	2300      	movs	r3, #0
10012296:	2500      	movs	r5, #0
10012298:	4690      	mov	r8, r2
1001229a:	b2cc      	uxtb	r4, r1
1001229c:	2100      	movs	r1, #0
1001229e:	032d      	lsls	r5, r5, #12
100122a0:	0d0a      	lsrs	r2, r1, #20
100122a2:	0512      	lsls	r2, r2, #20
100122a4:	0b2d      	lsrs	r5, r5, #12
100122a6:	4315      	orrs	r5, r2
100122a8:	4a43      	ldr	r2, [pc, #268]	; (100123b8 <__aeabi_dmul+0x1e8>)
100122aa:	051b      	lsls	r3, r3, #20
100122ac:	4015      	ands	r5, r2
100122ae:	431d      	orrs	r5, r3
100122b0:	006d      	lsls	r5, r5, #1
100122b2:	07e4      	lsls	r4, r4, #31
100122b4:	086d      	lsrs	r5, r5, #1
100122b6:	4325      	orrs	r5, r4
100122b8:	4640      	mov	r0, r8
100122ba:	0029      	movs	r1, r5
100122bc:	b007      	add	sp, #28
100122be:	bc3c      	pop	{r2, r3, r4, r5}
100122c0:	4690      	mov	r8, r2
100122c2:	4699      	mov	r9, r3
100122c4:	46a2      	mov	sl, r4
100122c6:	46ab      	mov	fp, r5
100122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122ca:	4303      	orrs	r3, r0
100122cc:	d052      	beq.n	10012374 <__aeabi_dmul+0x1a4>
100122ce:	465b      	mov	r3, fp
100122d0:	2b00      	cmp	r3, #0
100122d2:	d100      	bne.n	100122d6 <__aeabi_dmul+0x106>
100122d4:	e18a      	b.n	100125ec <__aeabi_dmul+0x41c>
100122d6:	4658      	mov	r0, fp
100122d8:	f000 fea4 	bl	10013024 <__clzsi2>
100122dc:	0003      	movs	r3, r0
100122de:	3b0b      	subs	r3, #11
100122e0:	2b1c      	cmp	r3, #28
100122e2:	dd00      	ble.n	100122e6 <__aeabi_dmul+0x116>
100122e4:	e17b      	b.n	100125de <__aeabi_dmul+0x40e>
100122e6:	221d      	movs	r2, #29
100122e8:	1ad3      	subs	r3, r2, r3
100122ea:	003a      	movs	r2, r7
100122ec:	0001      	movs	r1, r0
100122ee:	465d      	mov	r5, fp
100122f0:	40da      	lsrs	r2, r3
100122f2:	3908      	subs	r1, #8
100122f4:	408d      	lsls	r5, r1
100122f6:	0013      	movs	r3, r2
100122f8:	408f      	lsls	r7, r1
100122fa:	432b      	orrs	r3, r5
100122fc:	469b      	mov	fp, r3
100122fe:	46b8      	mov	r8, r7
10012300:	4b2e      	ldr	r3, [pc, #184]	; (100123bc <__aeabi_dmul+0x1ec>)
10012302:	2700      	movs	r7, #0
10012304:	469c      	mov	ip, r3
10012306:	2300      	movs	r3, #0
10012308:	4460      	add	r0, ip
1001230a:	4246      	negs	r6, r0
1001230c:	9301      	str	r3, [sp, #4]
1001230e:	e785      	b.n	1001221c <__aeabi_dmul+0x4c>
10012310:	4652      	mov	r2, sl
10012312:	432a      	orrs	r2, r5
10012314:	d12c      	bne.n	10012370 <__aeabi_dmul+0x1a0>
10012316:	2500      	movs	r5, #0
10012318:	2300      	movs	r3, #0
1001231a:	2202      	movs	r2, #2
1001231c:	e797      	b.n	1001224e <__aeabi_dmul+0x7e>
1001231e:	4652      	mov	r2, sl
10012320:	432a      	orrs	r2, r5
10012322:	d021      	beq.n	10012368 <__aeabi_dmul+0x198>
10012324:	2d00      	cmp	r5, #0
10012326:	d100      	bne.n	1001232a <__aeabi_dmul+0x15a>
10012328:	e154      	b.n	100125d4 <__aeabi_dmul+0x404>
1001232a:	0028      	movs	r0, r5
1001232c:	f000 fe7a 	bl	10013024 <__clzsi2>
10012330:	0003      	movs	r3, r0
10012332:	3b0b      	subs	r3, #11
10012334:	2b1c      	cmp	r3, #28
10012336:	dd00      	ble.n	1001233a <__aeabi_dmul+0x16a>
10012338:	e146      	b.n	100125c8 <__aeabi_dmul+0x3f8>
1001233a:	211d      	movs	r1, #29
1001233c:	1acb      	subs	r3, r1, r3
1001233e:	4651      	mov	r1, sl
10012340:	0002      	movs	r2, r0
10012342:	40d9      	lsrs	r1, r3
10012344:	4653      	mov	r3, sl
10012346:	3a08      	subs	r2, #8
10012348:	4095      	lsls	r5, r2
1001234a:	4093      	lsls	r3, r2
1001234c:	430d      	orrs	r5, r1
1001234e:	4a1b      	ldr	r2, [pc, #108]	; (100123bc <__aeabi_dmul+0x1ec>)
10012350:	4694      	mov	ip, r2
10012352:	4460      	add	r0, ip
10012354:	4240      	negs	r0, r0
10012356:	2200      	movs	r2, #0
10012358:	e779      	b.n	1001224e <__aeabi_dmul+0x7e>
1001235a:	2401      	movs	r4, #1
1001235c:	2200      	movs	r2, #0
1001235e:	400c      	ands	r4, r1
10012360:	4b12      	ldr	r3, [pc, #72]	; (100123ac <__aeabi_dmul+0x1dc>)
10012362:	2500      	movs	r5, #0
10012364:	4690      	mov	r8, r2
10012366:	e799      	b.n	1001229c <__aeabi_dmul+0xcc>
10012368:	2500      	movs	r5, #0
1001236a:	2300      	movs	r3, #0
1001236c:	2201      	movs	r2, #1
1001236e:	e76e      	b.n	1001224e <__aeabi_dmul+0x7e>
10012370:	2203      	movs	r2, #3
10012372:	e76c      	b.n	1001224e <__aeabi_dmul+0x7e>
10012374:	2300      	movs	r3, #0
10012376:	469b      	mov	fp, r3
10012378:	4698      	mov	r8, r3
1001237a:	3301      	adds	r3, #1
1001237c:	2704      	movs	r7, #4
1001237e:	9301      	str	r3, [sp, #4]
10012380:	e74c      	b.n	1001221c <__aeabi_dmul+0x4c>
10012382:	2303      	movs	r3, #3
10012384:	270c      	movs	r7, #12
10012386:	9301      	str	r3, [sp, #4]
10012388:	e748      	b.n	1001221c <__aeabi_dmul+0x4c>
1001238a:	2300      	movs	r3, #0
1001238c:	2580      	movs	r5, #128	; 0x80
1001238e:	4698      	mov	r8, r3
10012390:	2400      	movs	r4, #0
10012392:	032d      	lsls	r5, r5, #12
10012394:	4b05      	ldr	r3, [pc, #20]	; (100123ac <__aeabi_dmul+0x1dc>)
10012396:	e781      	b.n	1001229c <__aeabi_dmul+0xcc>
10012398:	465d      	mov	r5, fp
1001239a:	4643      	mov	r3, r8
1001239c:	9a01      	ldr	r2, [sp, #4]
1001239e:	e76f      	b.n	10012280 <__aeabi_dmul+0xb0>
100123a0:	465d      	mov	r5, fp
100123a2:	4643      	mov	r3, r8
100123a4:	0021      	movs	r1, r4
100123a6:	9a01      	ldr	r2, [sp, #4]
100123a8:	e76a      	b.n	10012280 <__aeabi_dmul+0xb0>
100123aa:	46c0      	nop			; (mov r8, r8)
100123ac:	000007ff 	.word	0x000007ff
100123b0:	fffffc01 	.word	0xfffffc01
100123b4:	100151c0 	.word	0x100151c0
100123b8:	800fffff 	.word	0x800fffff
100123bc:	000003f3 	.word	0x000003f3
100123c0:	4642      	mov	r2, r8
100123c2:	0c12      	lsrs	r2, r2, #16
100123c4:	4691      	mov	r9, r2
100123c6:	0c1a      	lsrs	r2, r3, #16
100123c8:	4694      	mov	ip, r2
100123ca:	4642      	mov	r2, r8
100123cc:	0417      	lsls	r7, r2, #16
100123ce:	464a      	mov	r2, r9
100123d0:	041b      	lsls	r3, r3, #16
100123d2:	0c1b      	lsrs	r3, r3, #16
100123d4:	435a      	muls	r2, r3
100123d6:	4660      	mov	r0, ip
100123d8:	4690      	mov	r8, r2
100123da:	464a      	mov	r2, r9
100123dc:	4342      	muls	r2, r0
100123de:	0010      	movs	r0, r2
100123e0:	9203      	str	r2, [sp, #12]
100123e2:	4662      	mov	r2, ip
100123e4:	001c      	movs	r4, r3
100123e6:	0c3f      	lsrs	r7, r7, #16
100123e8:	437a      	muls	r2, r7
100123ea:	437c      	muls	r4, r7
100123ec:	4442      	add	r2, r8
100123ee:	9201      	str	r2, [sp, #4]
100123f0:	0c22      	lsrs	r2, r4, #16
100123f2:	4692      	mov	sl, r2
100123f4:	9a01      	ldr	r2, [sp, #4]
100123f6:	4452      	add	r2, sl
100123f8:	4590      	cmp	r8, r2
100123fa:	d906      	bls.n	1001240a <__aeabi_dmul+0x23a>
100123fc:	4682      	mov	sl, r0
100123fe:	2080      	movs	r0, #128	; 0x80
10012400:	0240      	lsls	r0, r0, #9
10012402:	4680      	mov	r8, r0
10012404:	44c2      	add	sl, r8
10012406:	4650      	mov	r0, sl
10012408:	9003      	str	r0, [sp, #12]
1001240a:	0c10      	lsrs	r0, r2, #16
1001240c:	9004      	str	r0, [sp, #16]
1001240e:	4648      	mov	r0, r9
10012410:	0424      	lsls	r4, r4, #16
10012412:	0c24      	lsrs	r4, r4, #16
10012414:	0412      	lsls	r2, r2, #16
10012416:	1912      	adds	r2, r2, r4
10012418:	9205      	str	r2, [sp, #20]
1001241a:	0c2a      	lsrs	r2, r5, #16
1001241c:	042d      	lsls	r5, r5, #16
1001241e:	0c2d      	lsrs	r5, r5, #16
10012420:	4368      	muls	r0, r5
10012422:	002c      	movs	r4, r5
10012424:	4682      	mov	sl, r0
10012426:	4648      	mov	r0, r9
10012428:	437c      	muls	r4, r7
1001242a:	4350      	muls	r0, r2
1001242c:	4681      	mov	r9, r0
1001242e:	0c20      	lsrs	r0, r4, #16
10012430:	4680      	mov	r8, r0
10012432:	4357      	muls	r7, r2
10012434:	4457      	add	r7, sl
10012436:	4447      	add	r7, r8
10012438:	45ba      	cmp	sl, r7
1001243a:	d903      	bls.n	10012444 <__aeabi_dmul+0x274>
1001243c:	2080      	movs	r0, #128	; 0x80
1001243e:	0240      	lsls	r0, r0, #9
10012440:	4680      	mov	r8, r0
10012442:	44c1      	add	r9, r8
10012444:	0c38      	lsrs	r0, r7, #16
10012446:	043f      	lsls	r7, r7, #16
10012448:	46b8      	mov	r8, r7
1001244a:	4448      	add	r0, r9
1001244c:	0424      	lsls	r4, r4, #16
1001244e:	0c24      	lsrs	r4, r4, #16
10012450:	9001      	str	r0, [sp, #4]
10012452:	9804      	ldr	r0, [sp, #16]
10012454:	44a0      	add	r8, r4
10012456:	4440      	add	r0, r8
10012458:	9004      	str	r0, [sp, #16]
1001245a:	4658      	mov	r0, fp
1001245c:	0c00      	lsrs	r0, r0, #16
1001245e:	4681      	mov	r9, r0
10012460:	4658      	mov	r0, fp
10012462:	0404      	lsls	r4, r0, #16
10012464:	0c20      	lsrs	r0, r4, #16
10012466:	4682      	mov	sl, r0
10012468:	0007      	movs	r7, r0
1001246a:	4648      	mov	r0, r9
1001246c:	435f      	muls	r7, r3
1001246e:	464c      	mov	r4, r9
10012470:	4343      	muls	r3, r0
10012472:	4660      	mov	r0, ip
10012474:	4360      	muls	r0, r4
10012476:	4664      	mov	r4, ip
10012478:	4683      	mov	fp, r0
1001247a:	4650      	mov	r0, sl
1001247c:	4344      	muls	r4, r0
1001247e:	0c38      	lsrs	r0, r7, #16
10012480:	4684      	mov	ip, r0
10012482:	18e4      	adds	r4, r4, r3
10012484:	4464      	add	r4, ip
10012486:	42a3      	cmp	r3, r4
10012488:	d903      	bls.n	10012492 <__aeabi_dmul+0x2c2>
1001248a:	2380      	movs	r3, #128	; 0x80
1001248c:	025b      	lsls	r3, r3, #9
1001248e:	469c      	mov	ip, r3
10012490:	44e3      	add	fp, ip
10012492:	4648      	mov	r0, r9
10012494:	043f      	lsls	r7, r7, #16
10012496:	0c23      	lsrs	r3, r4, #16
10012498:	0c3f      	lsrs	r7, r7, #16
1001249a:	0424      	lsls	r4, r4, #16
1001249c:	19e4      	adds	r4, r4, r7
1001249e:	4657      	mov	r7, sl
100124a0:	4368      	muls	r0, r5
100124a2:	436f      	muls	r7, r5
100124a4:	4684      	mov	ip, r0
100124a6:	464d      	mov	r5, r9
100124a8:	4650      	mov	r0, sl
100124aa:	4355      	muls	r5, r2
100124ac:	4342      	muls	r2, r0
100124ae:	0c38      	lsrs	r0, r7, #16
100124b0:	4681      	mov	r9, r0
100124b2:	4462      	add	r2, ip
100124b4:	444a      	add	r2, r9
100124b6:	445b      	add	r3, fp
100124b8:	4594      	cmp	ip, r2
100124ba:	d903      	bls.n	100124c4 <__aeabi_dmul+0x2f4>
100124bc:	2080      	movs	r0, #128	; 0x80
100124be:	0240      	lsls	r0, r0, #9
100124c0:	4684      	mov	ip, r0
100124c2:	4465      	add	r5, ip
100124c4:	9803      	ldr	r0, [sp, #12]
100124c6:	043f      	lsls	r7, r7, #16
100124c8:	4683      	mov	fp, r0
100124ca:	9804      	ldr	r0, [sp, #16]
100124cc:	0c3f      	lsrs	r7, r7, #16
100124ce:	4684      	mov	ip, r0
100124d0:	44e3      	add	fp, ip
100124d2:	45c3      	cmp	fp, r8
100124d4:	4180      	sbcs	r0, r0
100124d6:	4240      	negs	r0, r0
100124d8:	4682      	mov	sl, r0
100124da:	0410      	lsls	r0, r2, #16
100124dc:	4684      	mov	ip, r0
100124de:	9801      	ldr	r0, [sp, #4]
100124e0:	4467      	add	r7, ip
100124e2:	4684      	mov	ip, r0
100124e4:	4467      	add	r7, ip
100124e6:	44a3      	add	fp, r4
100124e8:	46bc      	mov	ip, r7
100124ea:	45a3      	cmp	fp, r4
100124ec:	41a4      	sbcs	r4, r4
100124ee:	4699      	mov	r9, r3
100124f0:	44d4      	add	ip, sl
100124f2:	4264      	negs	r4, r4
100124f4:	4287      	cmp	r7, r0
100124f6:	41bf      	sbcs	r7, r7
100124f8:	45d4      	cmp	ip, sl
100124fa:	4180      	sbcs	r0, r0
100124fc:	44e1      	add	r9, ip
100124fe:	46a0      	mov	r8, r4
10012500:	4599      	cmp	r9, r3
10012502:	419b      	sbcs	r3, r3
10012504:	427f      	negs	r7, r7
10012506:	4240      	negs	r0, r0
10012508:	44c8      	add	r8, r9
1001250a:	4307      	orrs	r7, r0
1001250c:	0c12      	lsrs	r2, r2, #16
1001250e:	18ba      	adds	r2, r7, r2
10012510:	45a0      	cmp	r8, r4
10012512:	41a4      	sbcs	r4, r4
10012514:	425f      	negs	r7, r3
10012516:	003b      	movs	r3, r7
10012518:	4264      	negs	r4, r4
1001251a:	4323      	orrs	r3, r4
1001251c:	18d7      	adds	r7, r2, r3
1001251e:	4643      	mov	r3, r8
10012520:	197d      	adds	r5, r7, r5
10012522:	0ddb      	lsrs	r3, r3, #23
10012524:	026d      	lsls	r5, r5, #9
10012526:	431d      	orrs	r5, r3
10012528:	465b      	mov	r3, fp
1001252a:	025a      	lsls	r2, r3, #9
1001252c:	9b05      	ldr	r3, [sp, #20]
1001252e:	431a      	orrs	r2, r3
10012530:	1e53      	subs	r3, r2, #1
10012532:	419a      	sbcs	r2, r3
10012534:	465b      	mov	r3, fp
10012536:	0ddb      	lsrs	r3, r3, #23
10012538:	431a      	orrs	r2, r3
1001253a:	4643      	mov	r3, r8
1001253c:	025b      	lsls	r3, r3, #9
1001253e:	4313      	orrs	r3, r2
10012540:	01ea      	lsls	r2, r5, #7
10012542:	d507      	bpl.n	10012554 <__aeabi_dmul+0x384>
10012544:	2201      	movs	r2, #1
10012546:	085c      	lsrs	r4, r3, #1
10012548:	4013      	ands	r3, r2
1001254a:	4323      	orrs	r3, r4
1001254c:	07ea      	lsls	r2, r5, #31
1001254e:	9e02      	ldr	r6, [sp, #8]
10012550:	4313      	orrs	r3, r2
10012552:	086d      	lsrs	r5, r5, #1
10012554:	4a57      	ldr	r2, [pc, #348]	; (100126b4 <__aeabi_dmul+0x4e4>)
10012556:	18b2      	adds	r2, r6, r2
10012558:	2a00      	cmp	r2, #0
1001255a:	dd4b      	ble.n	100125f4 <__aeabi_dmul+0x424>
1001255c:	0758      	lsls	r0, r3, #29
1001255e:	d009      	beq.n	10012574 <__aeabi_dmul+0x3a4>
10012560:	200f      	movs	r0, #15
10012562:	4018      	ands	r0, r3
10012564:	2804      	cmp	r0, #4
10012566:	d005      	beq.n	10012574 <__aeabi_dmul+0x3a4>
10012568:	1d18      	adds	r0, r3, #4
1001256a:	4298      	cmp	r0, r3
1001256c:	419b      	sbcs	r3, r3
1001256e:	425b      	negs	r3, r3
10012570:	18ed      	adds	r5, r5, r3
10012572:	0003      	movs	r3, r0
10012574:	01e8      	lsls	r0, r5, #7
10012576:	d504      	bpl.n	10012582 <__aeabi_dmul+0x3b2>
10012578:	4a4f      	ldr	r2, [pc, #316]	; (100126b8 <__aeabi_dmul+0x4e8>)
1001257a:	4015      	ands	r5, r2
1001257c:	2280      	movs	r2, #128	; 0x80
1001257e:	00d2      	lsls	r2, r2, #3
10012580:	18b2      	adds	r2, r6, r2
10012582:	484e      	ldr	r0, [pc, #312]	; (100126bc <__aeabi_dmul+0x4ec>)
10012584:	4282      	cmp	r2, r0
10012586:	dd00      	ble.n	1001258a <__aeabi_dmul+0x3ba>
10012588:	e6e7      	b.n	1001235a <__aeabi_dmul+0x18a>
1001258a:	2401      	movs	r4, #1
1001258c:	08db      	lsrs	r3, r3, #3
1001258e:	0768      	lsls	r0, r5, #29
10012590:	4318      	orrs	r0, r3
10012592:	026d      	lsls	r5, r5, #9
10012594:	0553      	lsls	r3, r2, #21
10012596:	4680      	mov	r8, r0
10012598:	0b2d      	lsrs	r5, r5, #12
1001259a:	0d5b      	lsrs	r3, r3, #21
1001259c:	400c      	ands	r4, r1
1001259e:	e67d      	b.n	1001229c <__aeabi_dmul+0xcc>
100125a0:	2280      	movs	r2, #128	; 0x80
100125a2:	4659      	mov	r1, fp
100125a4:	0312      	lsls	r2, r2, #12
100125a6:	4211      	tst	r1, r2
100125a8:	d008      	beq.n	100125bc <__aeabi_dmul+0x3ec>
100125aa:	4215      	tst	r5, r2
100125ac:	d106      	bne.n	100125bc <__aeabi_dmul+0x3ec>
100125ae:	4315      	orrs	r5, r2
100125b0:	032d      	lsls	r5, r5, #12
100125b2:	4698      	mov	r8, r3
100125b4:	0b2d      	lsrs	r5, r5, #12
100125b6:	464c      	mov	r4, r9
100125b8:	4b41      	ldr	r3, [pc, #260]	; (100126c0 <__aeabi_dmul+0x4f0>)
100125ba:	e66f      	b.n	1001229c <__aeabi_dmul+0xcc>
100125bc:	465d      	mov	r5, fp
100125be:	4315      	orrs	r5, r2
100125c0:	032d      	lsls	r5, r5, #12
100125c2:	0b2d      	lsrs	r5, r5, #12
100125c4:	4b3e      	ldr	r3, [pc, #248]	; (100126c0 <__aeabi_dmul+0x4f0>)
100125c6:	e669      	b.n	1001229c <__aeabi_dmul+0xcc>
100125c8:	0003      	movs	r3, r0
100125ca:	4655      	mov	r5, sl
100125cc:	3b28      	subs	r3, #40	; 0x28
100125ce:	409d      	lsls	r5, r3
100125d0:	2300      	movs	r3, #0
100125d2:	e6bc      	b.n	1001234e <__aeabi_dmul+0x17e>
100125d4:	4650      	mov	r0, sl
100125d6:	f000 fd25 	bl	10013024 <__clzsi2>
100125da:	3020      	adds	r0, #32
100125dc:	e6a8      	b.n	10012330 <__aeabi_dmul+0x160>
100125de:	0003      	movs	r3, r0
100125e0:	3b28      	subs	r3, #40	; 0x28
100125e2:	409f      	lsls	r7, r3
100125e4:	2300      	movs	r3, #0
100125e6:	46bb      	mov	fp, r7
100125e8:	4698      	mov	r8, r3
100125ea:	e689      	b.n	10012300 <__aeabi_dmul+0x130>
100125ec:	f000 fd1a 	bl	10013024 <__clzsi2>
100125f0:	3020      	adds	r0, #32
100125f2:	e673      	b.n	100122dc <__aeabi_dmul+0x10c>
100125f4:	2401      	movs	r4, #1
100125f6:	1aa6      	subs	r6, r4, r2
100125f8:	2e38      	cmp	r6, #56	; 0x38
100125fa:	dd07      	ble.n	1001260c <__aeabi_dmul+0x43c>
100125fc:	2200      	movs	r2, #0
100125fe:	400c      	ands	r4, r1
10012600:	2300      	movs	r3, #0
10012602:	2500      	movs	r5, #0
10012604:	4690      	mov	r8, r2
10012606:	e649      	b.n	1001229c <__aeabi_dmul+0xcc>
10012608:	9e02      	ldr	r6, [sp, #8]
1001260a:	e7a3      	b.n	10012554 <__aeabi_dmul+0x384>
1001260c:	2e1f      	cmp	r6, #31
1001260e:	dc20      	bgt.n	10012652 <__aeabi_dmul+0x482>
10012610:	2220      	movs	r2, #32
10012612:	002c      	movs	r4, r5
10012614:	0018      	movs	r0, r3
10012616:	1b92      	subs	r2, r2, r6
10012618:	40f0      	lsrs	r0, r6
1001261a:	4094      	lsls	r4, r2
1001261c:	4093      	lsls	r3, r2
1001261e:	4304      	orrs	r4, r0
10012620:	1e58      	subs	r0, r3, #1
10012622:	4183      	sbcs	r3, r0
10012624:	431c      	orrs	r4, r3
10012626:	40f5      	lsrs	r5, r6
10012628:	0763      	lsls	r3, r4, #29
1001262a:	d009      	beq.n	10012640 <__aeabi_dmul+0x470>
1001262c:	230f      	movs	r3, #15
1001262e:	4023      	ands	r3, r4
10012630:	2b04      	cmp	r3, #4
10012632:	d005      	beq.n	10012640 <__aeabi_dmul+0x470>
10012634:	0023      	movs	r3, r4
10012636:	1d1c      	adds	r4, r3, #4
10012638:	429c      	cmp	r4, r3
1001263a:	4192      	sbcs	r2, r2
1001263c:	4252      	negs	r2, r2
1001263e:	18ad      	adds	r5, r5, r2
10012640:	022b      	lsls	r3, r5, #8
10012642:	d51f      	bpl.n	10012684 <__aeabi_dmul+0x4b4>
10012644:	2401      	movs	r4, #1
10012646:	2200      	movs	r2, #0
10012648:	400c      	ands	r4, r1
1001264a:	2301      	movs	r3, #1
1001264c:	2500      	movs	r5, #0
1001264e:	4690      	mov	r8, r2
10012650:	e624      	b.n	1001229c <__aeabi_dmul+0xcc>
10012652:	201f      	movs	r0, #31
10012654:	002c      	movs	r4, r5
10012656:	4240      	negs	r0, r0
10012658:	1a82      	subs	r2, r0, r2
1001265a:	40d4      	lsrs	r4, r2
1001265c:	2e20      	cmp	r6, #32
1001265e:	d01c      	beq.n	1001269a <__aeabi_dmul+0x4ca>
10012660:	2240      	movs	r2, #64	; 0x40
10012662:	1b96      	subs	r6, r2, r6
10012664:	40b5      	lsls	r5, r6
10012666:	432b      	orrs	r3, r5
10012668:	1e58      	subs	r0, r3, #1
1001266a:	4183      	sbcs	r3, r0
1001266c:	2007      	movs	r0, #7
1001266e:	4323      	orrs	r3, r4
10012670:	4018      	ands	r0, r3
10012672:	2500      	movs	r5, #0
10012674:	2800      	cmp	r0, #0
10012676:	d009      	beq.n	1001268c <__aeabi_dmul+0x4bc>
10012678:	220f      	movs	r2, #15
1001267a:	2500      	movs	r5, #0
1001267c:	401a      	ands	r2, r3
1001267e:	001c      	movs	r4, r3
10012680:	2a04      	cmp	r2, #4
10012682:	d1d8      	bne.n	10012636 <__aeabi_dmul+0x466>
10012684:	0023      	movs	r3, r4
10012686:	0768      	lsls	r0, r5, #29
10012688:	026d      	lsls	r5, r5, #9
1001268a:	0b2d      	lsrs	r5, r5, #12
1001268c:	2401      	movs	r4, #1
1001268e:	08db      	lsrs	r3, r3, #3
10012690:	4303      	orrs	r3, r0
10012692:	4698      	mov	r8, r3
10012694:	400c      	ands	r4, r1
10012696:	2300      	movs	r3, #0
10012698:	e600      	b.n	1001229c <__aeabi_dmul+0xcc>
1001269a:	2500      	movs	r5, #0
1001269c:	e7e3      	b.n	10012666 <__aeabi_dmul+0x496>
1001269e:	2280      	movs	r2, #128	; 0x80
100126a0:	2401      	movs	r4, #1
100126a2:	0312      	lsls	r2, r2, #12
100126a4:	4315      	orrs	r5, r2
100126a6:	032d      	lsls	r5, r5, #12
100126a8:	4698      	mov	r8, r3
100126aa:	0b2d      	lsrs	r5, r5, #12
100126ac:	400c      	ands	r4, r1
100126ae:	4b04      	ldr	r3, [pc, #16]	; (100126c0 <__aeabi_dmul+0x4f0>)
100126b0:	e5f4      	b.n	1001229c <__aeabi_dmul+0xcc>
100126b2:	46c0      	nop			; (mov r8, r8)
100126b4:	000003ff 	.word	0x000003ff
100126b8:	feffffff 	.word	0xfeffffff
100126bc:	000007fe 	.word	0x000007fe
100126c0:	000007ff 	.word	0x000007ff

100126c4 <__aeabi_dsub>:
100126c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100126c6:	4657      	mov	r7, sl
100126c8:	464e      	mov	r6, r9
100126ca:	4645      	mov	r5, r8
100126cc:	b4e0      	push	{r5, r6, r7}
100126ce:	000e      	movs	r6, r1
100126d0:	0011      	movs	r1, r2
100126d2:	0ff2      	lsrs	r2, r6, #31
100126d4:	4692      	mov	sl, r2
100126d6:	00c5      	lsls	r5, r0, #3
100126d8:	0f42      	lsrs	r2, r0, #29
100126da:	0318      	lsls	r0, r3, #12
100126dc:	0337      	lsls	r7, r6, #12
100126de:	0074      	lsls	r4, r6, #1
100126e0:	0a40      	lsrs	r0, r0, #9
100126e2:	0f4e      	lsrs	r6, r1, #29
100126e4:	0a7f      	lsrs	r7, r7, #9
100126e6:	4330      	orrs	r0, r6
100126e8:	4ecf      	ldr	r6, [pc, #828]	; (10012a28 <__aeabi_dsub+0x364>)
100126ea:	4317      	orrs	r7, r2
100126ec:	005a      	lsls	r2, r3, #1
100126ee:	0d64      	lsrs	r4, r4, #21
100126f0:	0d52      	lsrs	r2, r2, #21
100126f2:	0fdb      	lsrs	r3, r3, #31
100126f4:	00c9      	lsls	r1, r1, #3
100126f6:	42b2      	cmp	r2, r6
100126f8:	d100      	bne.n	100126fc <__aeabi_dsub+0x38>
100126fa:	e0e5      	b.n	100128c8 <__aeabi_dsub+0x204>
100126fc:	2601      	movs	r6, #1
100126fe:	4073      	eors	r3, r6
10012700:	1aa6      	subs	r6, r4, r2
10012702:	46b4      	mov	ip, r6
10012704:	4553      	cmp	r3, sl
10012706:	d100      	bne.n	1001270a <__aeabi_dsub+0x46>
10012708:	e0af      	b.n	1001286a <__aeabi_dsub+0x1a6>
1001270a:	2e00      	cmp	r6, #0
1001270c:	dc00      	bgt.n	10012710 <__aeabi_dsub+0x4c>
1001270e:	e10d      	b.n	1001292c <__aeabi_dsub+0x268>
10012710:	2a00      	cmp	r2, #0
10012712:	d13a      	bne.n	1001278a <__aeabi_dsub+0xc6>
10012714:	0003      	movs	r3, r0
10012716:	430b      	orrs	r3, r1
10012718:	d000      	beq.n	1001271c <__aeabi_dsub+0x58>
1001271a:	e0e4      	b.n	100128e6 <__aeabi_dsub+0x222>
1001271c:	076b      	lsls	r3, r5, #29
1001271e:	d009      	beq.n	10012734 <__aeabi_dsub+0x70>
10012720:	230f      	movs	r3, #15
10012722:	402b      	ands	r3, r5
10012724:	2b04      	cmp	r3, #4
10012726:	d005      	beq.n	10012734 <__aeabi_dsub+0x70>
10012728:	1d2b      	adds	r3, r5, #4
1001272a:	42ab      	cmp	r3, r5
1001272c:	41ad      	sbcs	r5, r5
1001272e:	426d      	negs	r5, r5
10012730:	197f      	adds	r7, r7, r5
10012732:	001d      	movs	r5, r3
10012734:	023b      	lsls	r3, r7, #8
10012736:	d400      	bmi.n	1001273a <__aeabi_dsub+0x76>
10012738:	e088      	b.n	1001284c <__aeabi_dsub+0x188>
1001273a:	4bbb      	ldr	r3, [pc, #748]	; (10012a28 <__aeabi_dsub+0x364>)
1001273c:	3401      	adds	r4, #1
1001273e:	429c      	cmp	r4, r3
10012740:	d100      	bne.n	10012744 <__aeabi_dsub+0x80>
10012742:	e110      	b.n	10012966 <__aeabi_dsub+0x2a2>
10012744:	003a      	movs	r2, r7
10012746:	4bb9      	ldr	r3, [pc, #740]	; (10012a2c <__aeabi_dsub+0x368>)
10012748:	4651      	mov	r1, sl
1001274a:	401a      	ands	r2, r3
1001274c:	2301      	movs	r3, #1
1001274e:	0750      	lsls	r0, r2, #29
10012750:	08ed      	lsrs	r5, r5, #3
10012752:	0252      	lsls	r2, r2, #9
10012754:	0564      	lsls	r4, r4, #21
10012756:	4305      	orrs	r5, r0
10012758:	0b12      	lsrs	r2, r2, #12
1001275a:	0d64      	lsrs	r4, r4, #21
1001275c:	400b      	ands	r3, r1
1001275e:	2100      	movs	r1, #0
10012760:	0028      	movs	r0, r5
10012762:	0312      	lsls	r2, r2, #12
10012764:	0d0d      	lsrs	r5, r1, #20
10012766:	0b12      	lsrs	r2, r2, #12
10012768:	0564      	lsls	r4, r4, #21
1001276a:	052d      	lsls	r5, r5, #20
1001276c:	4315      	orrs	r5, r2
1001276e:	0862      	lsrs	r2, r4, #1
10012770:	4caf      	ldr	r4, [pc, #700]	; (10012a30 <__aeabi_dsub+0x36c>)
10012772:	07db      	lsls	r3, r3, #31
10012774:	402c      	ands	r4, r5
10012776:	4314      	orrs	r4, r2
10012778:	0064      	lsls	r4, r4, #1
1001277a:	0864      	lsrs	r4, r4, #1
1001277c:	431c      	orrs	r4, r3
1001277e:	0021      	movs	r1, r4
10012780:	bc1c      	pop	{r2, r3, r4}
10012782:	4690      	mov	r8, r2
10012784:	4699      	mov	r9, r3
10012786:	46a2      	mov	sl, r4
10012788:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001278a:	4ba7      	ldr	r3, [pc, #668]	; (10012a28 <__aeabi_dsub+0x364>)
1001278c:	429c      	cmp	r4, r3
1001278e:	d0c5      	beq.n	1001271c <__aeabi_dsub+0x58>
10012790:	2380      	movs	r3, #128	; 0x80
10012792:	041b      	lsls	r3, r3, #16
10012794:	4318      	orrs	r0, r3
10012796:	4663      	mov	r3, ip
10012798:	2b38      	cmp	r3, #56	; 0x38
1001279a:	dd00      	ble.n	1001279e <__aeabi_dsub+0xda>
1001279c:	e0fd      	b.n	1001299a <__aeabi_dsub+0x2d6>
1001279e:	2b1f      	cmp	r3, #31
100127a0:	dd00      	ble.n	100127a4 <__aeabi_dsub+0xe0>
100127a2:	e130      	b.n	10012a06 <__aeabi_dsub+0x342>
100127a4:	4662      	mov	r2, ip
100127a6:	2320      	movs	r3, #32
100127a8:	1a9b      	subs	r3, r3, r2
100127aa:	0002      	movs	r2, r0
100127ac:	409a      	lsls	r2, r3
100127ae:	4666      	mov	r6, ip
100127b0:	4690      	mov	r8, r2
100127b2:	000a      	movs	r2, r1
100127b4:	4099      	lsls	r1, r3
100127b6:	40f2      	lsrs	r2, r6
100127b8:	4646      	mov	r6, r8
100127ba:	1e4b      	subs	r3, r1, #1
100127bc:	4199      	sbcs	r1, r3
100127be:	4332      	orrs	r2, r6
100127c0:	4311      	orrs	r1, r2
100127c2:	4663      	mov	r3, ip
100127c4:	0002      	movs	r2, r0
100127c6:	40da      	lsrs	r2, r3
100127c8:	1a69      	subs	r1, r5, r1
100127ca:	428d      	cmp	r5, r1
100127cc:	419b      	sbcs	r3, r3
100127ce:	000d      	movs	r5, r1
100127d0:	1aba      	subs	r2, r7, r2
100127d2:	425b      	negs	r3, r3
100127d4:	1ad7      	subs	r7, r2, r3
100127d6:	023b      	lsls	r3, r7, #8
100127d8:	d535      	bpl.n	10012846 <__aeabi_dsub+0x182>
100127da:	027a      	lsls	r2, r7, #9
100127dc:	0a53      	lsrs	r3, r2, #9
100127de:	4698      	mov	r8, r3
100127e0:	4643      	mov	r3, r8
100127e2:	2b00      	cmp	r3, #0
100127e4:	d100      	bne.n	100127e8 <__aeabi_dsub+0x124>
100127e6:	e0c4      	b.n	10012972 <__aeabi_dsub+0x2ae>
100127e8:	4640      	mov	r0, r8
100127ea:	f000 fc1b 	bl	10013024 <__clzsi2>
100127ee:	0003      	movs	r3, r0
100127f0:	3b08      	subs	r3, #8
100127f2:	2b1f      	cmp	r3, #31
100127f4:	dd00      	ble.n	100127f8 <__aeabi_dsub+0x134>
100127f6:	e0c5      	b.n	10012984 <__aeabi_dsub+0x2c0>
100127f8:	2220      	movs	r2, #32
100127fa:	0029      	movs	r1, r5
100127fc:	1ad2      	subs	r2, r2, r3
100127fe:	4647      	mov	r7, r8
10012800:	40d1      	lsrs	r1, r2
10012802:	409f      	lsls	r7, r3
10012804:	000a      	movs	r2, r1
10012806:	409d      	lsls	r5, r3
10012808:	433a      	orrs	r2, r7
1001280a:	429c      	cmp	r4, r3
1001280c:	dd00      	ble.n	10012810 <__aeabi_dsub+0x14c>
1001280e:	e0c0      	b.n	10012992 <__aeabi_dsub+0x2ce>
10012810:	1b1c      	subs	r4, r3, r4
10012812:	1c63      	adds	r3, r4, #1
10012814:	2b1f      	cmp	r3, #31
10012816:	dd00      	ble.n	1001281a <__aeabi_dsub+0x156>
10012818:	e0e4      	b.n	100129e4 <__aeabi_dsub+0x320>
1001281a:	2120      	movs	r1, #32
1001281c:	0014      	movs	r4, r2
1001281e:	0028      	movs	r0, r5
10012820:	1ac9      	subs	r1, r1, r3
10012822:	40d8      	lsrs	r0, r3
10012824:	408c      	lsls	r4, r1
10012826:	408d      	lsls	r5, r1
10012828:	4304      	orrs	r4, r0
1001282a:	40da      	lsrs	r2, r3
1001282c:	1e68      	subs	r0, r5, #1
1001282e:	4185      	sbcs	r5, r0
10012830:	0017      	movs	r7, r2
10012832:	4325      	orrs	r5, r4
10012834:	2400      	movs	r4, #0
10012836:	e771      	b.n	1001271c <__aeabi_dsub+0x58>
10012838:	4642      	mov	r2, r8
1001283a:	4663      	mov	r3, ip
1001283c:	431a      	orrs	r2, r3
1001283e:	d100      	bne.n	10012842 <__aeabi_dsub+0x17e>
10012840:	e24c      	b.n	10012cdc <__aeabi_dsub+0x618>
10012842:	4667      	mov	r7, ip
10012844:	4645      	mov	r5, r8
10012846:	076b      	lsls	r3, r5, #29
10012848:	d000      	beq.n	1001284c <__aeabi_dsub+0x188>
1001284a:	e769      	b.n	10012720 <__aeabi_dsub+0x5c>
1001284c:	2301      	movs	r3, #1
1001284e:	4651      	mov	r1, sl
10012850:	0778      	lsls	r0, r7, #29
10012852:	08ed      	lsrs	r5, r5, #3
10012854:	08fa      	lsrs	r2, r7, #3
10012856:	400b      	ands	r3, r1
10012858:	4305      	orrs	r5, r0
1001285a:	4973      	ldr	r1, [pc, #460]	; (10012a28 <__aeabi_dsub+0x364>)
1001285c:	428c      	cmp	r4, r1
1001285e:	d038      	beq.n	100128d2 <__aeabi_dsub+0x20e>
10012860:	0312      	lsls	r2, r2, #12
10012862:	0564      	lsls	r4, r4, #21
10012864:	0b12      	lsrs	r2, r2, #12
10012866:	0d64      	lsrs	r4, r4, #21
10012868:	e779      	b.n	1001275e <__aeabi_dsub+0x9a>
1001286a:	2e00      	cmp	r6, #0
1001286c:	dc00      	bgt.n	10012870 <__aeabi_dsub+0x1ac>
1001286e:	e09a      	b.n	100129a6 <__aeabi_dsub+0x2e2>
10012870:	2a00      	cmp	r2, #0
10012872:	d047      	beq.n	10012904 <__aeabi_dsub+0x240>
10012874:	4a6c      	ldr	r2, [pc, #432]	; (10012a28 <__aeabi_dsub+0x364>)
10012876:	4294      	cmp	r4, r2
10012878:	d100      	bne.n	1001287c <__aeabi_dsub+0x1b8>
1001287a:	e74f      	b.n	1001271c <__aeabi_dsub+0x58>
1001287c:	2280      	movs	r2, #128	; 0x80
1001287e:	0412      	lsls	r2, r2, #16
10012880:	4310      	orrs	r0, r2
10012882:	4662      	mov	r2, ip
10012884:	2a38      	cmp	r2, #56	; 0x38
10012886:	dc00      	bgt.n	1001288a <__aeabi_dsub+0x1c6>
10012888:	e108      	b.n	10012a9c <__aeabi_dsub+0x3d8>
1001288a:	4301      	orrs	r1, r0
1001288c:	1e48      	subs	r0, r1, #1
1001288e:	4181      	sbcs	r1, r0
10012890:	2200      	movs	r2, #0
10012892:	b2c9      	uxtb	r1, r1
10012894:	1949      	adds	r1, r1, r5
10012896:	19d2      	adds	r2, r2, r7
10012898:	42a9      	cmp	r1, r5
1001289a:	41bf      	sbcs	r7, r7
1001289c:	000d      	movs	r5, r1
1001289e:	427f      	negs	r7, r7
100128a0:	18bf      	adds	r7, r7, r2
100128a2:	023a      	lsls	r2, r7, #8
100128a4:	d400      	bmi.n	100128a8 <__aeabi_dsub+0x1e4>
100128a6:	e142      	b.n	10012b2e <__aeabi_dsub+0x46a>
100128a8:	4a5f      	ldr	r2, [pc, #380]	; (10012a28 <__aeabi_dsub+0x364>)
100128aa:	3401      	adds	r4, #1
100128ac:	4294      	cmp	r4, r2
100128ae:	d100      	bne.n	100128b2 <__aeabi_dsub+0x1ee>
100128b0:	e14e      	b.n	10012b50 <__aeabi_dsub+0x48c>
100128b2:	2001      	movs	r0, #1
100128b4:	4a5d      	ldr	r2, [pc, #372]	; (10012a2c <__aeabi_dsub+0x368>)
100128b6:	0869      	lsrs	r1, r5, #1
100128b8:	403a      	ands	r2, r7
100128ba:	4028      	ands	r0, r5
100128bc:	4308      	orrs	r0, r1
100128be:	07d5      	lsls	r5, r2, #31
100128c0:	4305      	orrs	r5, r0
100128c2:	0857      	lsrs	r7, r2, #1
100128c4:	469a      	mov	sl, r3
100128c6:	e729      	b.n	1001271c <__aeabi_dsub+0x58>
100128c8:	0006      	movs	r6, r0
100128ca:	430e      	orrs	r6, r1
100128cc:	d000      	beq.n	100128d0 <__aeabi_dsub+0x20c>
100128ce:	e717      	b.n	10012700 <__aeabi_dsub+0x3c>
100128d0:	e714      	b.n	100126fc <__aeabi_dsub+0x38>
100128d2:	0029      	movs	r1, r5
100128d4:	4311      	orrs	r1, r2
100128d6:	d100      	bne.n	100128da <__aeabi_dsub+0x216>
100128d8:	e1f9      	b.n	10012cce <__aeabi_dsub+0x60a>
100128da:	2180      	movs	r1, #128	; 0x80
100128dc:	0309      	lsls	r1, r1, #12
100128de:	430a      	orrs	r2, r1
100128e0:	0312      	lsls	r2, r2, #12
100128e2:	0b12      	lsrs	r2, r2, #12
100128e4:	e73b      	b.n	1001275e <__aeabi_dsub+0x9a>
100128e6:	2301      	movs	r3, #1
100128e8:	425b      	negs	r3, r3
100128ea:	4698      	mov	r8, r3
100128ec:	44c4      	add	ip, r8
100128ee:	4663      	mov	r3, ip
100128f0:	2b00      	cmp	r3, #0
100128f2:	d172      	bne.n	100129da <__aeabi_dsub+0x316>
100128f4:	1a69      	subs	r1, r5, r1
100128f6:	428d      	cmp	r5, r1
100128f8:	419b      	sbcs	r3, r3
100128fa:	1a3f      	subs	r7, r7, r0
100128fc:	425b      	negs	r3, r3
100128fe:	1aff      	subs	r7, r7, r3
10012900:	000d      	movs	r5, r1
10012902:	e768      	b.n	100127d6 <__aeabi_dsub+0x112>
10012904:	0002      	movs	r2, r0
10012906:	430a      	orrs	r2, r1
10012908:	d100      	bne.n	1001290c <__aeabi_dsub+0x248>
1001290a:	e707      	b.n	1001271c <__aeabi_dsub+0x58>
1001290c:	2201      	movs	r2, #1
1001290e:	4252      	negs	r2, r2
10012910:	4690      	mov	r8, r2
10012912:	44c4      	add	ip, r8
10012914:	4662      	mov	r2, ip
10012916:	2a00      	cmp	r2, #0
10012918:	d000      	beq.n	1001291c <__aeabi_dsub+0x258>
1001291a:	e0e6      	b.n	10012aea <__aeabi_dsub+0x426>
1001291c:	1869      	adds	r1, r5, r1
1001291e:	42a9      	cmp	r1, r5
10012920:	41b6      	sbcs	r6, r6
10012922:	183f      	adds	r7, r7, r0
10012924:	4276      	negs	r6, r6
10012926:	19f7      	adds	r7, r6, r7
10012928:	000d      	movs	r5, r1
1001292a:	e7ba      	b.n	100128a2 <__aeabi_dsub+0x1de>
1001292c:	2e00      	cmp	r6, #0
1001292e:	d000      	beq.n	10012932 <__aeabi_dsub+0x26e>
10012930:	e080      	b.n	10012a34 <__aeabi_dsub+0x370>
10012932:	1c62      	adds	r2, r4, #1
10012934:	0552      	lsls	r2, r2, #21
10012936:	0d52      	lsrs	r2, r2, #21
10012938:	2a01      	cmp	r2, #1
1001293a:	dc00      	bgt.n	1001293e <__aeabi_dsub+0x27a>
1001293c:	e0f9      	b.n	10012b32 <__aeabi_dsub+0x46e>
1001293e:	1a6a      	subs	r2, r5, r1
10012940:	4691      	mov	r9, r2
10012942:	454d      	cmp	r5, r9
10012944:	41b6      	sbcs	r6, r6
10012946:	1a3a      	subs	r2, r7, r0
10012948:	4276      	negs	r6, r6
1001294a:	1b92      	subs	r2, r2, r6
1001294c:	4690      	mov	r8, r2
1001294e:	0212      	lsls	r2, r2, #8
10012950:	d400      	bmi.n	10012954 <__aeabi_dsub+0x290>
10012952:	e099      	b.n	10012a88 <__aeabi_dsub+0x3c4>
10012954:	1b4d      	subs	r5, r1, r5
10012956:	42a9      	cmp	r1, r5
10012958:	4189      	sbcs	r1, r1
1001295a:	1bc7      	subs	r7, r0, r7
1001295c:	4249      	negs	r1, r1
1001295e:	1a7a      	subs	r2, r7, r1
10012960:	4690      	mov	r8, r2
10012962:	469a      	mov	sl, r3
10012964:	e73c      	b.n	100127e0 <__aeabi_dsub+0x11c>
10012966:	4652      	mov	r2, sl
10012968:	2301      	movs	r3, #1
1001296a:	2500      	movs	r5, #0
1001296c:	4013      	ands	r3, r2
1001296e:	2200      	movs	r2, #0
10012970:	e6f5      	b.n	1001275e <__aeabi_dsub+0x9a>
10012972:	0028      	movs	r0, r5
10012974:	f000 fb56 	bl	10013024 <__clzsi2>
10012978:	3020      	adds	r0, #32
1001297a:	0003      	movs	r3, r0
1001297c:	3b08      	subs	r3, #8
1001297e:	2b1f      	cmp	r3, #31
10012980:	dc00      	bgt.n	10012984 <__aeabi_dsub+0x2c0>
10012982:	e739      	b.n	100127f8 <__aeabi_dsub+0x134>
10012984:	002a      	movs	r2, r5
10012986:	3828      	subs	r0, #40	; 0x28
10012988:	4082      	lsls	r2, r0
1001298a:	2500      	movs	r5, #0
1001298c:	429c      	cmp	r4, r3
1001298e:	dc00      	bgt.n	10012992 <__aeabi_dsub+0x2ce>
10012990:	e73e      	b.n	10012810 <__aeabi_dsub+0x14c>
10012992:	4f26      	ldr	r7, [pc, #152]	; (10012a2c <__aeabi_dsub+0x368>)
10012994:	1ae4      	subs	r4, r4, r3
10012996:	4017      	ands	r7, r2
10012998:	e6c0      	b.n	1001271c <__aeabi_dsub+0x58>
1001299a:	4301      	orrs	r1, r0
1001299c:	1e48      	subs	r0, r1, #1
1001299e:	4181      	sbcs	r1, r0
100129a0:	2200      	movs	r2, #0
100129a2:	b2c9      	uxtb	r1, r1
100129a4:	e710      	b.n	100127c8 <__aeabi_dsub+0x104>
100129a6:	2e00      	cmp	r6, #0
100129a8:	d000      	beq.n	100129ac <__aeabi_dsub+0x2e8>
100129aa:	e0f1      	b.n	10012b90 <__aeabi_dsub+0x4cc>
100129ac:	1c62      	adds	r2, r4, #1
100129ae:	4694      	mov	ip, r2
100129b0:	0552      	lsls	r2, r2, #21
100129b2:	0d52      	lsrs	r2, r2, #21
100129b4:	2a01      	cmp	r2, #1
100129b6:	dc00      	bgt.n	100129ba <__aeabi_dsub+0x2f6>
100129b8:	e0a0      	b.n	10012afc <__aeabi_dsub+0x438>
100129ba:	4a1b      	ldr	r2, [pc, #108]	; (10012a28 <__aeabi_dsub+0x364>)
100129bc:	4594      	cmp	ip, r2
100129be:	d100      	bne.n	100129c2 <__aeabi_dsub+0x2fe>
100129c0:	e0c5      	b.n	10012b4e <__aeabi_dsub+0x48a>
100129c2:	1869      	adds	r1, r5, r1
100129c4:	42a9      	cmp	r1, r5
100129c6:	4192      	sbcs	r2, r2
100129c8:	183f      	adds	r7, r7, r0
100129ca:	4252      	negs	r2, r2
100129cc:	19d2      	adds	r2, r2, r7
100129ce:	0849      	lsrs	r1, r1, #1
100129d0:	07d5      	lsls	r5, r2, #31
100129d2:	430d      	orrs	r5, r1
100129d4:	0857      	lsrs	r7, r2, #1
100129d6:	4664      	mov	r4, ip
100129d8:	e6a0      	b.n	1001271c <__aeabi_dsub+0x58>
100129da:	4b13      	ldr	r3, [pc, #76]	; (10012a28 <__aeabi_dsub+0x364>)
100129dc:	429c      	cmp	r4, r3
100129de:	d000      	beq.n	100129e2 <__aeabi_dsub+0x31e>
100129e0:	e6d9      	b.n	10012796 <__aeabi_dsub+0xd2>
100129e2:	e69b      	b.n	1001271c <__aeabi_dsub+0x58>
100129e4:	0011      	movs	r1, r2
100129e6:	3c1f      	subs	r4, #31
100129e8:	40e1      	lsrs	r1, r4
100129ea:	000c      	movs	r4, r1
100129ec:	2b20      	cmp	r3, #32
100129ee:	d100      	bne.n	100129f2 <__aeabi_dsub+0x32e>
100129f0:	e080      	b.n	10012af4 <__aeabi_dsub+0x430>
100129f2:	2140      	movs	r1, #64	; 0x40
100129f4:	1acb      	subs	r3, r1, r3
100129f6:	409a      	lsls	r2, r3
100129f8:	4315      	orrs	r5, r2
100129fa:	1e6a      	subs	r2, r5, #1
100129fc:	4195      	sbcs	r5, r2
100129fe:	2700      	movs	r7, #0
10012a00:	4325      	orrs	r5, r4
10012a02:	2400      	movs	r4, #0
10012a04:	e71f      	b.n	10012846 <__aeabi_dsub+0x182>
10012a06:	4663      	mov	r3, ip
10012a08:	0002      	movs	r2, r0
10012a0a:	3b20      	subs	r3, #32
10012a0c:	40da      	lsrs	r2, r3
10012a0e:	4663      	mov	r3, ip
10012a10:	2b20      	cmp	r3, #32
10012a12:	d071      	beq.n	10012af8 <__aeabi_dsub+0x434>
10012a14:	2340      	movs	r3, #64	; 0x40
10012a16:	4666      	mov	r6, ip
10012a18:	1b9b      	subs	r3, r3, r6
10012a1a:	4098      	lsls	r0, r3
10012a1c:	4301      	orrs	r1, r0
10012a1e:	1e48      	subs	r0, r1, #1
10012a20:	4181      	sbcs	r1, r0
10012a22:	4311      	orrs	r1, r2
10012a24:	2200      	movs	r2, #0
10012a26:	e6cf      	b.n	100127c8 <__aeabi_dsub+0x104>
10012a28:	000007ff 	.word	0x000007ff
10012a2c:	ff7fffff 	.word	0xff7fffff
10012a30:	800fffff 	.word	0x800fffff
10012a34:	2c00      	cmp	r4, #0
10012a36:	d048      	beq.n	10012aca <__aeabi_dsub+0x406>
10012a38:	4cca      	ldr	r4, [pc, #808]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012a3a:	42a2      	cmp	r2, r4
10012a3c:	d100      	bne.n	10012a40 <__aeabi_dsub+0x37c>
10012a3e:	e0a2      	b.n	10012b86 <__aeabi_dsub+0x4c2>
10012a40:	4274      	negs	r4, r6
10012a42:	46a1      	mov	r9, r4
10012a44:	2480      	movs	r4, #128	; 0x80
10012a46:	0424      	lsls	r4, r4, #16
10012a48:	4327      	orrs	r7, r4
10012a4a:	464c      	mov	r4, r9
10012a4c:	2c38      	cmp	r4, #56	; 0x38
10012a4e:	dd00      	ble.n	10012a52 <__aeabi_dsub+0x38e>
10012a50:	e0db      	b.n	10012c0a <__aeabi_dsub+0x546>
10012a52:	2c1f      	cmp	r4, #31
10012a54:	dd00      	ble.n	10012a58 <__aeabi_dsub+0x394>
10012a56:	e144      	b.n	10012ce2 <__aeabi_dsub+0x61e>
10012a58:	464e      	mov	r6, r9
10012a5a:	2420      	movs	r4, #32
10012a5c:	1ba4      	subs	r4, r4, r6
10012a5e:	003e      	movs	r6, r7
10012a60:	40a6      	lsls	r6, r4
10012a62:	46a2      	mov	sl, r4
10012a64:	46b0      	mov	r8, r6
10012a66:	464c      	mov	r4, r9
10012a68:	002e      	movs	r6, r5
10012a6a:	40e6      	lsrs	r6, r4
10012a6c:	46b4      	mov	ip, r6
10012a6e:	4646      	mov	r6, r8
10012a70:	4664      	mov	r4, ip
10012a72:	4326      	orrs	r6, r4
10012a74:	4654      	mov	r4, sl
10012a76:	40a5      	lsls	r5, r4
10012a78:	1e6c      	subs	r4, r5, #1
10012a7a:	41a5      	sbcs	r5, r4
10012a7c:	0034      	movs	r4, r6
10012a7e:	432c      	orrs	r4, r5
10012a80:	464d      	mov	r5, r9
10012a82:	40ef      	lsrs	r7, r5
10012a84:	1b0d      	subs	r5, r1, r4
10012a86:	e028      	b.n	10012ada <__aeabi_dsub+0x416>
10012a88:	464a      	mov	r2, r9
10012a8a:	4643      	mov	r3, r8
10012a8c:	464d      	mov	r5, r9
10012a8e:	431a      	orrs	r2, r3
10012a90:	d000      	beq.n	10012a94 <__aeabi_dsub+0x3d0>
10012a92:	e6a5      	b.n	100127e0 <__aeabi_dsub+0x11c>
10012a94:	2300      	movs	r3, #0
10012a96:	2400      	movs	r4, #0
10012a98:	2500      	movs	r5, #0
10012a9a:	e6de      	b.n	1001285a <__aeabi_dsub+0x196>
10012a9c:	2a1f      	cmp	r2, #31
10012a9e:	dc5a      	bgt.n	10012b56 <__aeabi_dsub+0x492>
10012aa0:	4666      	mov	r6, ip
10012aa2:	2220      	movs	r2, #32
10012aa4:	1b92      	subs	r2, r2, r6
10012aa6:	0006      	movs	r6, r0
10012aa8:	4096      	lsls	r6, r2
10012aaa:	4691      	mov	r9, r2
10012aac:	46b0      	mov	r8, r6
10012aae:	4662      	mov	r2, ip
10012ab0:	000e      	movs	r6, r1
10012ab2:	40d6      	lsrs	r6, r2
10012ab4:	4642      	mov	r2, r8
10012ab6:	4316      	orrs	r6, r2
10012ab8:	464a      	mov	r2, r9
10012aba:	4091      	lsls	r1, r2
10012abc:	1e4a      	subs	r2, r1, #1
10012abe:	4191      	sbcs	r1, r2
10012ac0:	0002      	movs	r2, r0
10012ac2:	4660      	mov	r0, ip
10012ac4:	4331      	orrs	r1, r6
10012ac6:	40c2      	lsrs	r2, r0
10012ac8:	e6e4      	b.n	10012894 <__aeabi_dsub+0x1d0>
10012aca:	003c      	movs	r4, r7
10012acc:	432c      	orrs	r4, r5
10012ace:	d05a      	beq.n	10012b86 <__aeabi_dsub+0x4c2>
10012ad0:	43f4      	mvns	r4, r6
10012ad2:	46a1      	mov	r9, r4
10012ad4:	2c00      	cmp	r4, #0
10012ad6:	d152      	bne.n	10012b7e <__aeabi_dsub+0x4ba>
10012ad8:	1b4d      	subs	r5, r1, r5
10012ada:	42a9      	cmp	r1, r5
10012adc:	4189      	sbcs	r1, r1
10012ade:	1bc7      	subs	r7, r0, r7
10012ae0:	4249      	negs	r1, r1
10012ae2:	1a7f      	subs	r7, r7, r1
10012ae4:	0014      	movs	r4, r2
10012ae6:	469a      	mov	sl, r3
10012ae8:	e675      	b.n	100127d6 <__aeabi_dsub+0x112>
10012aea:	4a9e      	ldr	r2, [pc, #632]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012aec:	4294      	cmp	r4, r2
10012aee:	d000      	beq.n	10012af2 <__aeabi_dsub+0x42e>
10012af0:	e6c7      	b.n	10012882 <__aeabi_dsub+0x1be>
10012af2:	e613      	b.n	1001271c <__aeabi_dsub+0x58>
10012af4:	2200      	movs	r2, #0
10012af6:	e77f      	b.n	100129f8 <__aeabi_dsub+0x334>
10012af8:	2000      	movs	r0, #0
10012afa:	e78f      	b.n	10012a1c <__aeabi_dsub+0x358>
10012afc:	2c00      	cmp	r4, #0
10012afe:	d000      	beq.n	10012b02 <__aeabi_dsub+0x43e>
10012b00:	e0c8      	b.n	10012c94 <__aeabi_dsub+0x5d0>
10012b02:	003b      	movs	r3, r7
10012b04:	432b      	orrs	r3, r5
10012b06:	d100      	bne.n	10012b0a <__aeabi_dsub+0x446>
10012b08:	e10f      	b.n	10012d2a <__aeabi_dsub+0x666>
10012b0a:	0003      	movs	r3, r0
10012b0c:	430b      	orrs	r3, r1
10012b0e:	d100      	bne.n	10012b12 <__aeabi_dsub+0x44e>
10012b10:	e604      	b.n	1001271c <__aeabi_dsub+0x58>
10012b12:	1869      	adds	r1, r5, r1
10012b14:	42a9      	cmp	r1, r5
10012b16:	419b      	sbcs	r3, r3
10012b18:	183f      	adds	r7, r7, r0
10012b1a:	425b      	negs	r3, r3
10012b1c:	19df      	adds	r7, r3, r7
10012b1e:	023b      	lsls	r3, r7, #8
10012b20:	d400      	bmi.n	10012b24 <__aeabi_dsub+0x460>
10012b22:	e11a      	b.n	10012d5a <__aeabi_dsub+0x696>
10012b24:	4b90      	ldr	r3, [pc, #576]	; (10012d68 <__aeabi_dsub+0x6a4>)
10012b26:	000d      	movs	r5, r1
10012b28:	401f      	ands	r7, r3
10012b2a:	4664      	mov	r4, ip
10012b2c:	e5f6      	b.n	1001271c <__aeabi_dsub+0x58>
10012b2e:	469a      	mov	sl, r3
10012b30:	e689      	b.n	10012846 <__aeabi_dsub+0x182>
10012b32:	003a      	movs	r2, r7
10012b34:	432a      	orrs	r2, r5
10012b36:	2c00      	cmp	r4, #0
10012b38:	d15c      	bne.n	10012bf4 <__aeabi_dsub+0x530>
10012b3a:	2a00      	cmp	r2, #0
10012b3c:	d175      	bne.n	10012c2a <__aeabi_dsub+0x566>
10012b3e:	0002      	movs	r2, r0
10012b40:	430a      	orrs	r2, r1
10012b42:	d100      	bne.n	10012b46 <__aeabi_dsub+0x482>
10012b44:	e0ca      	b.n	10012cdc <__aeabi_dsub+0x618>
10012b46:	0007      	movs	r7, r0
10012b48:	000d      	movs	r5, r1
10012b4a:	469a      	mov	sl, r3
10012b4c:	e5e6      	b.n	1001271c <__aeabi_dsub+0x58>
10012b4e:	4664      	mov	r4, ip
10012b50:	2200      	movs	r2, #0
10012b52:	2500      	movs	r5, #0
10012b54:	e681      	b.n	1001285a <__aeabi_dsub+0x196>
10012b56:	4662      	mov	r2, ip
10012b58:	0006      	movs	r6, r0
10012b5a:	3a20      	subs	r2, #32
10012b5c:	40d6      	lsrs	r6, r2
10012b5e:	4662      	mov	r2, ip
10012b60:	46b0      	mov	r8, r6
10012b62:	2a20      	cmp	r2, #32
10012b64:	d100      	bne.n	10012b68 <__aeabi_dsub+0x4a4>
10012b66:	e0b7      	b.n	10012cd8 <__aeabi_dsub+0x614>
10012b68:	2240      	movs	r2, #64	; 0x40
10012b6a:	4666      	mov	r6, ip
10012b6c:	1b92      	subs	r2, r2, r6
10012b6e:	4090      	lsls	r0, r2
10012b70:	4301      	orrs	r1, r0
10012b72:	4642      	mov	r2, r8
10012b74:	1e48      	subs	r0, r1, #1
10012b76:	4181      	sbcs	r1, r0
10012b78:	4311      	orrs	r1, r2
10012b7a:	2200      	movs	r2, #0
10012b7c:	e68a      	b.n	10012894 <__aeabi_dsub+0x1d0>
10012b7e:	4c79      	ldr	r4, [pc, #484]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012b80:	42a2      	cmp	r2, r4
10012b82:	d000      	beq.n	10012b86 <__aeabi_dsub+0x4c2>
10012b84:	e761      	b.n	10012a4a <__aeabi_dsub+0x386>
10012b86:	0007      	movs	r7, r0
10012b88:	000d      	movs	r5, r1
10012b8a:	0014      	movs	r4, r2
10012b8c:	469a      	mov	sl, r3
10012b8e:	e5c5      	b.n	1001271c <__aeabi_dsub+0x58>
10012b90:	2c00      	cmp	r4, #0
10012b92:	d141      	bne.n	10012c18 <__aeabi_dsub+0x554>
10012b94:	003c      	movs	r4, r7
10012b96:	432c      	orrs	r4, r5
10012b98:	d078      	beq.n	10012c8c <__aeabi_dsub+0x5c8>
10012b9a:	43f4      	mvns	r4, r6
10012b9c:	46a1      	mov	r9, r4
10012b9e:	2c00      	cmp	r4, #0
10012ba0:	d020      	beq.n	10012be4 <__aeabi_dsub+0x520>
10012ba2:	4c70      	ldr	r4, [pc, #448]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012ba4:	42a2      	cmp	r2, r4
10012ba6:	d071      	beq.n	10012c8c <__aeabi_dsub+0x5c8>
10012ba8:	464c      	mov	r4, r9
10012baa:	2c38      	cmp	r4, #56	; 0x38
10012bac:	dd00      	ble.n	10012bb0 <__aeabi_dsub+0x4ec>
10012bae:	e0b2      	b.n	10012d16 <__aeabi_dsub+0x652>
10012bb0:	2c1f      	cmp	r4, #31
10012bb2:	dd00      	ble.n	10012bb6 <__aeabi_dsub+0x4f2>
10012bb4:	e0bc      	b.n	10012d30 <__aeabi_dsub+0x66c>
10012bb6:	2620      	movs	r6, #32
10012bb8:	1b34      	subs	r4, r6, r4
10012bba:	46a2      	mov	sl, r4
10012bbc:	003c      	movs	r4, r7
10012bbe:	4656      	mov	r6, sl
10012bc0:	40b4      	lsls	r4, r6
10012bc2:	464e      	mov	r6, r9
10012bc4:	46a0      	mov	r8, r4
10012bc6:	002c      	movs	r4, r5
10012bc8:	40f4      	lsrs	r4, r6
10012bca:	46a4      	mov	ip, r4
10012bcc:	4644      	mov	r4, r8
10012bce:	4666      	mov	r6, ip
10012bd0:	4334      	orrs	r4, r6
10012bd2:	46a4      	mov	ip, r4
10012bd4:	4654      	mov	r4, sl
10012bd6:	40a5      	lsls	r5, r4
10012bd8:	4664      	mov	r4, ip
10012bda:	1e6e      	subs	r6, r5, #1
10012bdc:	41b5      	sbcs	r5, r6
10012bde:	4325      	orrs	r5, r4
10012be0:	464c      	mov	r4, r9
10012be2:	40e7      	lsrs	r7, r4
10012be4:	186d      	adds	r5, r5, r1
10012be6:	428d      	cmp	r5, r1
10012be8:	4189      	sbcs	r1, r1
10012bea:	183f      	adds	r7, r7, r0
10012bec:	4249      	negs	r1, r1
10012bee:	19cf      	adds	r7, r1, r7
10012bf0:	0014      	movs	r4, r2
10012bf2:	e656      	b.n	100128a2 <__aeabi_dsub+0x1de>
10012bf4:	2a00      	cmp	r2, #0
10012bf6:	d12f      	bne.n	10012c58 <__aeabi_dsub+0x594>
10012bf8:	0002      	movs	r2, r0
10012bfa:	430a      	orrs	r2, r1
10012bfc:	d100      	bne.n	10012c00 <__aeabi_dsub+0x53c>
10012bfe:	e084      	b.n	10012d0a <__aeabi_dsub+0x646>
10012c00:	0007      	movs	r7, r0
10012c02:	000d      	movs	r5, r1
10012c04:	469a      	mov	sl, r3
10012c06:	4c57      	ldr	r4, [pc, #348]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012c08:	e588      	b.n	1001271c <__aeabi_dsub+0x58>
10012c0a:	433d      	orrs	r5, r7
10012c0c:	1e6f      	subs	r7, r5, #1
10012c0e:	41bd      	sbcs	r5, r7
10012c10:	b2ec      	uxtb	r4, r5
10012c12:	2700      	movs	r7, #0
10012c14:	1b0d      	subs	r5, r1, r4
10012c16:	e760      	b.n	10012ada <__aeabi_dsub+0x416>
10012c18:	4c52      	ldr	r4, [pc, #328]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012c1a:	42a2      	cmp	r2, r4
10012c1c:	d036      	beq.n	10012c8c <__aeabi_dsub+0x5c8>
10012c1e:	4274      	negs	r4, r6
10012c20:	2680      	movs	r6, #128	; 0x80
10012c22:	0436      	lsls	r6, r6, #16
10012c24:	46a1      	mov	r9, r4
10012c26:	4337      	orrs	r7, r6
10012c28:	e7be      	b.n	10012ba8 <__aeabi_dsub+0x4e4>
10012c2a:	0002      	movs	r2, r0
10012c2c:	430a      	orrs	r2, r1
10012c2e:	d100      	bne.n	10012c32 <__aeabi_dsub+0x56e>
10012c30:	e574      	b.n	1001271c <__aeabi_dsub+0x58>
10012c32:	1a6a      	subs	r2, r5, r1
10012c34:	4690      	mov	r8, r2
10012c36:	4545      	cmp	r5, r8
10012c38:	41b6      	sbcs	r6, r6
10012c3a:	1a3a      	subs	r2, r7, r0
10012c3c:	4276      	negs	r6, r6
10012c3e:	1b92      	subs	r2, r2, r6
10012c40:	4694      	mov	ip, r2
10012c42:	0212      	lsls	r2, r2, #8
10012c44:	d400      	bmi.n	10012c48 <__aeabi_dsub+0x584>
10012c46:	e5f7      	b.n	10012838 <__aeabi_dsub+0x174>
10012c48:	1b4d      	subs	r5, r1, r5
10012c4a:	42a9      	cmp	r1, r5
10012c4c:	4189      	sbcs	r1, r1
10012c4e:	1bc7      	subs	r7, r0, r7
10012c50:	4249      	negs	r1, r1
10012c52:	1a7f      	subs	r7, r7, r1
10012c54:	469a      	mov	sl, r3
10012c56:	e561      	b.n	1001271c <__aeabi_dsub+0x58>
10012c58:	0002      	movs	r2, r0
10012c5a:	430a      	orrs	r2, r1
10012c5c:	d03a      	beq.n	10012cd4 <__aeabi_dsub+0x610>
10012c5e:	08ed      	lsrs	r5, r5, #3
10012c60:	077c      	lsls	r4, r7, #29
10012c62:	432c      	orrs	r4, r5
10012c64:	2580      	movs	r5, #128	; 0x80
10012c66:	08fa      	lsrs	r2, r7, #3
10012c68:	032d      	lsls	r5, r5, #12
10012c6a:	422a      	tst	r2, r5
10012c6c:	d008      	beq.n	10012c80 <__aeabi_dsub+0x5bc>
10012c6e:	08c7      	lsrs	r7, r0, #3
10012c70:	422f      	tst	r7, r5
10012c72:	d105      	bne.n	10012c80 <__aeabi_dsub+0x5bc>
10012c74:	0745      	lsls	r5, r0, #29
10012c76:	002c      	movs	r4, r5
10012c78:	003a      	movs	r2, r7
10012c7a:	469a      	mov	sl, r3
10012c7c:	08c9      	lsrs	r1, r1, #3
10012c7e:	430c      	orrs	r4, r1
10012c80:	0f67      	lsrs	r7, r4, #29
10012c82:	00d2      	lsls	r2, r2, #3
10012c84:	00e5      	lsls	r5, r4, #3
10012c86:	4317      	orrs	r7, r2
10012c88:	4c36      	ldr	r4, [pc, #216]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012c8a:	e547      	b.n	1001271c <__aeabi_dsub+0x58>
10012c8c:	0007      	movs	r7, r0
10012c8e:	000d      	movs	r5, r1
10012c90:	0014      	movs	r4, r2
10012c92:	e543      	b.n	1001271c <__aeabi_dsub+0x58>
10012c94:	003a      	movs	r2, r7
10012c96:	432a      	orrs	r2, r5
10012c98:	d043      	beq.n	10012d22 <__aeabi_dsub+0x65e>
10012c9a:	0002      	movs	r2, r0
10012c9c:	430a      	orrs	r2, r1
10012c9e:	d019      	beq.n	10012cd4 <__aeabi_dsub+0x610>
10012ca0:	08ed      	lsrs	r5, r5, #3
10012ca2:	077c      	lsls	r4, r7, #29
10012ca4:	432c      	orrs	r4, r5
10012ca6:	2580      	movs	r5, #128	; 0x80
10012ca8:	08fa      	lsrs	r2, r7, #3
10012caa:	032d      	lsls	r5, r5, #12
10012cac:	422a      	tst	r2, r5
10012cae:	d007      	beq.n	10012cc0 <__aeabi_dsub+0x5fc>
10012cb0:	08c6      	lsrs	r6, r0, #3
10012cb2:	422e      	tst	r6, r5
10012cb4:	d104      	bne.n	10012cc0 <__aeabi_dsub+0x5fc>
10012cb6:	0747      	lsls	r7, r0, #29
10012cb8:	003c      	movs	r4, r7
10012cba:	0032      	movs	r2, r6
10012cbc:	08c9      	lsrs	r1, r1, #3
10012cbe:	430c      	orrs	r4, r1
10012cc0:	00d7      	lsls	r7, r2, #3
10012cc2:	0f62      	lsrs	r2, r4, #29
10012cc4:	00e5      	lsls	r5, r4, #3
10012cc6:	4317      	orrs	r7, r2
10012cc8:	469a      	mov	sl, r3
10012cca:	4c26      	ldr	r4, [pc, #152]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012ccc:	e526      	b.n	1001271c <__aeabi_dsub+0x58>
10012cce:	2200      	movs	r2, #0
10012cd0:	2500      	movs	r5, #0
10012cd2:	e544      	b.n	1001275e <__aeabi_dsub+0x9a>
10012cd4:	4c23      	ldr	r4, [pc, #140]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012cd6:	e521      	b.n	1001271c <__aeabi_dsub+0x58>
10012cd8:	2000      	movs	r0, #0
10012cda:	e749      	b.n	10012b70 <__aeabi_dsub+0x4ac>
10012cdc:	2300      	movs	r3, #0
10012cde:	2500      	movs	r5, #0
10012ce0:	e5bb      	b.n	1001285a <__aeabi_dsub+0x196>
10012ce2:	464c      	mov	r4, r9
10012ce4:	003e      	movs	r6, r7
10012ce6:	3c20      	subs	r4, #32
10012ce8:	40e6      	lsrs	r6, r4
10012cea:	464c      	mov	r4, r9
10012cec:	46b4      	mov	ip, r6
10012cee:	2c20      	cmp	r4, #32
10012cf0:	d031      	beq.n	10012d56 <__aeabi_dsub+0x692>
10012cf2:	2440      	movs	r4, #64	; 0x40
10012cf4:	464e      	mov	r6, r9
10012cf6:	1ba6      	subs	r6, r4, r6
10012cf8:	40b7      	lsls	r7, r6
10012cfa:	433d      	orrs	r5, r7
10012cfc:	1e6c      	subs	r4, r5, #1
10012cfe:	41a5      	sbcs	r5, r4
10012d00:	4664      	mov	r4, ip
10012d02:	432c      	orrs	r4, r5
10012d04:	2700      	movs	r7, #0
10012d06:	1b0d      	subs	r5, r1, r4
10012d08:	e6e7      	b.n	10012ada <__aeabi_dsub+0x416>
10012d0a:	2280      	movs	r2, #128	; 0x80
10012d0c:	2300      	movs	r3, #0
10012d0e:	0312      	lsls	r2, r2, #12
10012d10:	4c14      	ldr	r4, [pc, #80]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012d12:	2500      	movs	r5, #0
10012d14:	e5a1      	b.n	1001285a <__aeabi_dsub+0x196>
10012d16:	433d      	orrs	r5, r7
10012d18:	1e6f      	subs	r7, r5, #1
10012d1a:	41bd      	sbcs	r5, r7
10012d1c:	2700      	movs	r7, #0
10012d1e:	b2ed      	uxtb	r5, r5
10012d20:	e760      	b.n	10012be4 <__aeabi_dsub+0x520>
10012d22:	0007      	movs	r7, r0
10012d24:	000d      	movs	r5, r1
10012d26:	4c0f      	ldr	r4, [pc, #60]	; (10012d64 <__aeabi_dsub+0x6a0>)
10012d28:	e4f8      	b.n	1001271c <__aeabi_dsub+0x58>
10012d2a:	0007      	movs	r7, r0
10012d2c:	000d      	movs	r5, r1
10012d2e:	e4f5      	b.n	1001271c <__aeabi_dsub+0x58>
10012d30:	464e      	mov	r6, r9
10012d32:	003c      	movs	r4, r7
10012d34:	3e20      	subs	r6, #32
10012d36:	40f4      	lsrs	r4, r6
10012d38:	46a0      	mov	r8, r4
10012d3a:	464c      	mov	r4, r9
10012d3c:	2c20      	cmp	r4, #32
10012d3e:	d00e      	beq.n	10012d5e <__aeabi_dsub+0x69a>
10012d40:	2440      	movs	r4, #64	; 0x40
10012d42:	464e      	mov	r6, r9
10012d44:	1ba4      	subs	r4, r4, r6
10012d46:	40a7      	lsls	r7, r4
10012d48:	433d      	orrs	r5, r7
10012d4a:	1e6f      	subs	r7, r5, #1
10012d4c:	41bd      	sbcs	r5, r7
10012d4e:	4644      	mov	r4, r8
10012d50:	2700      	movs	r7, #0
10012d52:	4325      	orrs	r5, r4
10012d54:	e746      	b.n	10012be4 <__aeabi_dsub+0x520>
10012d56:	2700      	movs	r7, #0
10012d58:	e7cf      	b.n	10012cfa <__aeabi_dsub+0x636>
10012d5a:	000d      	movs	r5, r1
10012d5c:	e573      	b.n	10012846 <__aeabi_dsub+0x182>
10012d5e:	2700      	movs	r7, #0
10012d60:	e7f2      	b.n	10012d48 <__aeabi_dsub+0x684>
10012d62:	46c0      	nop			; (mov r8, r8)
10012d64:	000007ff 	.word	0x000007ff
10012d68:	ff7fffff 	.word	0xff7fffff

10012d6c <__aeabi_dcmpun>:
10012d6c:	b570      	push	{r4, r5, r6, lr}
10012d6e:	4e0e      	ldr	r6, [pc, #56]	; (10012da8 <__aeabi_dcmpun+0x3c>)
10012d70:	030c      	lsls	r4, r1, #12
10012d72:	031d      	lsls	r5, r3, #12
10012d74:	0049      	lsls	r1, r1, #1
10012d76:	005b      	lsls	r3, r3, #1
10012d78:	0b24      	lsrs	r4, r4, #12
10012d7a:	0d49      	lsrs	r1, r1, #21
10012d7c:	0b2d      	lsrs	r5, r5, #12
10012d7e:	0d5b      	lsrs	r3, r3, #21
10012d80:	42b1      	cmp	r1, r6
10012d82:	d004      	beq.n	10012d8e <__aeabi_dcmpun+0x22>
10012d84:	4908      	ldr	r1, [pc, #32]	; (10012da8 <__aeabi_dcmpun+0x3c>)
10012d86:	2000      	movs	r0, #0
10012d88:	428b      	cmp	r3, r1
10012d8a:	d008      	beq.n	10012d9e <__aeabi_dcmpun+0x32>
10012d8c:	bd70      	pop	{r4, r5, r6, pc}
10012d8e:	4304      	orrs	r4, r0
10012d90:	2001      	movs	r0, #1
10012d92:	2c00      	cmp	r4, #0
10012d94:	d1fa      	bne.n	10012d8c <__aeabi_dcmpun+0x20>
10012d96:	4904      	ldr	r1, [pc, #16]	; (10012da8 <__aeabi_dcmpun+0x3c>)
10012d98:	2000      	movs	r0, #0
10012d9a:	428b      	cmp	r3, r1
10012d9c:	d1f6      	bne.n	10012d8c <__aeabi_dcmpun+0x20>
10012d9e:	4315      	orrs	r5, r2
10012da0:	0028      	movs	r0, r5
10012da2:	1e45      	subs	r5, r0, #1
10012da4:	41a8      	sbcs	r0, r5
10012da6:	e7f1      	b.n	10012d8c <__aeabi_dcmpun+0x20>
10012da8:	000007ff 	.word	0x000007ff

10012dac <__aeabi_d2iz>:
10012dac:	030b      	lsls	r3, r1, #12
10012dae:	b530      	push	{r4, r5, lr}
10012db0:	4d13      	ldr	r5, [pc, #76]	; (10012e00 <__aeabi_d2iz+0x54>)
10012db2:	0b1a      	lsrs	r2, r3, #12
10012db4:	004b      	lsls	r3, r1, #1
10012db6:	0d5b      	lsrs	r3, r3, #21
10012db8:	0fc9      	lsrs	r1, r1, #31
10012dba:	2400      	movs	r4, #0
10012dbc:	42ab      	cmp	r3, r5
10012dbe:	dd11      	ble.n	10012de4 <__aeabi_d2iz+0x38>
10012dc0:	4c10      	ldr	r4, [pc, #64]	; (10012e04 <__aeabi_d2iz+0x58>)
10012dc2:	42a3      	cmp	r3, r4
10012dc4:	dc10      	bgt.n	10012de8 <__aeabi_d2iz+0x3c>
10012dc6:	2480      	movs	r4, #128	; 0x80
10012dc8:	0364      	lsls	r4, r4, #13
10012dca:	4322      	orrs	r2, r4
10012dcc:	4c0e      	ldr	r4, [pc, #56]	; (10012e08 <__aeabi_d2iz+0x5c>)
10012dce:	1ae4      	subs	r4, r4, r3
10012dd0:	2c1f      	cmp	r4, #31
10012dd2:	dd0c      	ble.n	10012dee <__aeabi_d2iz+0x42>
10012dd4:	480d      	ldr	r0, [pc, #52]	; (10012e0c <__aeabi_d2iz+0x60>)
10012dd6:	1ac3      	subs	r3, r0, r3
10012dd8:	40da      	lsrs	r2, r3
10012dda:	0013      	movs	r3, r2
10012ddc:	425c      	negs	r4, r3
10012dde:	2900      	cmp	r1, #0
10012de0:	d100      	bne.n	10012de4 <__aeabi_d2iz+0x38>
10012de2:	001c      	movs	r4, r3
10012de4:	0020      	movs	r0, r4
10012de6:	bd30      	pop	{r4, r5, pc}
10012de8:	4b09      	ldr	r3, [pc, #36]	; (10012e10 <__aeabi_d2iz+0x64>)
10012dea:	18cc      	adds	r4, r1, r3
10012dec:	e7fa      	b.n	10012de4 <__aeabi_d2iz+0x38>
10012dee:	40e0      	lsrs	r0, r4
10012df0:	4c08      	ldr	r4, [pc, #32]	; (10012e14 <__aeabi_d2iz+0x68>)
10012df2:	46a4      	mov	ip, r4
10012df4:	4463      	add	r3, ip
10012df6:	409a      	lsls	r2, r3
10012df8:	0013      	movs	r3, r2
10012dfa:	4303      	orrs	r3, r0
10012dfc:	e7ee      	b.n	10012ddc <__aeabi_d2iz+0x30>
10012dfe:	46c0      	nop			; (mov r8, r8)
10012e00:	000003fe 	.word	0x000003fe
10012e04:	0000041d 	.word	0x0000041d
10012e08:	00000433 	.word	0x00000433
10012e0c:	00000413 	.word	0x00000413
10012e10:	7fffffff 	.word	0x7fffffff
10012e14:	fffffbed 	.word	0xfffffbed

10012e18 <__aeabi_i2d>:
10012e18:	b570      	push	{r4, r5, r6, lr}
10012e1a:	2800      	cmp	r0, #0
10012e1c:	d030      	beq.n	10012e80 <__aeabi_i2d+0x68>
10012e1e:	17c3      	asrs	r3, r0, #31
10012e20:	18c4      	adds	r4, r0, r3
10012e22:	405c      	eors	r4, r3
10012e24:	0fc5      	lsrs	r5, r0, #31
10012e26:	0020      	movs	r0, r4
10012e28:	f000 f8fc 	bl	10013024 <__clzsi2>
10012e2c:	4b17      	ldr	r3, [pc, #92]	; (10012e8c <__aeabi_i2d+0x74>)
10012e2e:	4a18      	ldr	r2, [pc, #96]	; (10012e90 <__aeabi_i2d+0x78>)
10012e30:	1a1b      	subs	r3, r3, r0
10012e32:	1ad2      	subs	r2, r2, r3
10012e34:	2a1f      	cmp	r2, #31
10012e36:	dd18      	ble.n	10012e6a <__aeabi_i2d+0x52>
10012e38:	4a16      	ldr	r2, [pc, #88]	; (10012e94 <__aeabi_i2d+0x7c>)
10012e3a:	1ad2      	subs	r2, r2, r3
10012e3c:	4094      	lsls	r4, r2
10012e3e:	2200      	movs	r2, #0
10012e40:	0324      	lsls	r4, r4, #12
10012e42:	055b      	lsls	r3, r3, #21
10012e44:	0b24      	lsrs	r4, r4, #12
10012e46:	0d5b      	lsrs	r3, r3, #21
10012e48:	2100      	movs	r1, #0
10012e4a:	0010      	movs	r0, r2
10012e4c:	0324      	lsls	r4, r4, #12
10012e4e:	0d0a      	lsrs	r2, r1, #20
10012e50:	0512      	lsls	r2, r2, #20
10012e52:	0b24      	lsrs	r4, r4, #12
10012e54:	4314      	orrs	r4, r2
10012e56:	4a10      	ldr	r2, [pc, #64]	; (10012e98 <__aeabi_i2d+0x80>)
10012e58:	051b      	lsls	r3, r3, #20
10012e5a:	4014      	ands	r4, r2
10012e5c:	431c      	orrs	r4, r3
10012e5e:	0064      	lsls	r4, r4, #1
10012e60:	07ed      	lsls	r5, r5, #31
10012e62:	0864      	lsrs	r4, r4, #1
10012e64:	432c      	orrs	r4, r5
10012e66:	0021      	movs	r1, r4
10012e68:	bd70      	pop	{r4, r5, r6, pc}
10012e6a:	0021      	movs	r1, r4
10012e6c:	4091      	lsls	r1, r2
10012e6e:	000a      	movs	r2, r1
10012e70:	210b      	movs	r1, #11
10012e72:	1a08      	subs	r0, r1, r0
10012e74:	40c4      	lsrs	r4, r0
10012e76:	055b      	lsls	r3, r3, #21
10012e78:	0324      	lsls	r4, r4, #12
10012e7a:	0b24      	lsrs	r4, r4, #12
10012e7c:	0d5b      	lsrs	r3, r3, #21
10012e7e:	e7e3      	b.n	10012e48 <__aeabi_i2d+0x30>
10012e80:	2500      	movs	r5, #0
10012e82:	2300      	movs	r3, #0
10012e84:	2400      	movs	r4, #0
10012e86:	2200      	movs	r2, #0
10012e88:	e7de      	b.n	10012e48 <__aeabi_i2d+0x30>
10012e8a:	46c0      	nop			; (mov r8, r8)
10012e8c:	0000041e 	.word	0x0000041e
10012e90:	00000433 	.word	0x00000433
10012e94:	00000413 	.word	0x00000413
10012e98:	800fffff 	.word	0x800fffff

10012e9c <__aeabi_ui2d>:
10012e9c:	b570      	push	{r4, r5, r6, lr}
10012e9e:	1e05      	subs	r5, r0, #0
10012ea0:	d028      	beq.n	10012ef4 <__aeabi_ui2d+0x58>
10012ea2:	f000 f8bf 	bl	10013024 <__clzsi2>
10012ea6:	4b15      	ldr	r3, [pc, #84]	; (10012efc <__aeabi_ui2d+0x60>)
10012ea8:	4a15      	ldr	r2, [pc, #84]	; (10012f00 <__aeabi_ui2d+0x64>)
10012eaa:	1a1b      	subs	r3, r3, r0
10012eac:	1ad2      	subs	r2, r2, r3
10012eae:	2a1f      	cmp	r2, #31
10012eb0:	dd16      	ble.n	10012ee0 <__aeabi_ui2d+0x44>
10012eb2:	002c      	movs	r4, r5
10012eb4:	4a13      	ldr	r2, [pc, #76]	; (10012f04 <__aeabi_ui2d+0x68>)
10012eb6:	2500      	movs	r5, #0
10012eb8:	1ad2      	subs	r2, r2, r3
10012eba:	4094      	lsls	r4, r2
10012ebc:	055a      	lsls	r2, r3, #21
10012ebe:	0324      	lsls	r4, r4, #12
10012ec0:	0b24      	lsrs	r4, r4, #12
10012ec2:	0d52      	lsrs	r2, r2, #21
10012ec4:	2100      	movs	r1, #0
10012ec6:	0324      	lsls	r4, r4, #12
10012ec8:	0d0b      	lsrs	r3, r1, #20
10012eca:	0b24      	lsrs	r4, r4, #12
10012ecc:	051b      	lsls	r3, r3, #20
10012ece:	4323      	orrs	r3, r4
10012ed0:	4c0d      	ldr	r4, [pc, #52]	; (10012f08 <__aeabi_ui2d+0x6c>)
10012ed2:	0512      	lsls	r2, r2, #20
10012ed4:	4023      	ands	r3, r4
10012ed6:	4313      	orrs	r3, r2
10012ed8:	005b      	lsls	r3, r3, #1
10012eda:	0028      	movs	r0, r5
10012edc:	0859      	lsrs	r1, r3, #1
10012ede:	bd70      	pop	{r4, r5, r6, pc}
10012ee0:	210b      	movs	r1, #11
10012ee2:	002c      	movs	r4, r5
10012ee4:	1a08      	subs	r0, r1, r0
10012ee6:	40c4      	lsrs	r4, r0
10012ee8:	4095      	lsls	r5, r2
10012eea:	0324      	lsls	r4, r4, #12
10012eec:	055a      	lsls	r2, r3, #21
10012eee:	0b24      	lsrs	r4, r4, #12
10012ef0:	0d52      	lsrs	r2, r2, #21
10012ef2:	e7e7      	b.n	10012ec4 <__aeabi_ui2d+0x28>
10012ef4:	2200      	movs	r2, #0
10012ef6:	2400      	movs	r4, #0
10012ef8:	e7e4      	b.n	10012ec4 <__aeabi_ui2d+0x28>
10012efa:	46c0      	nop			; (mov r8, r8)
10012efc:	0000041e 	.word	0x0000041e
10012f00:	00000433 	.word	0x00000433
10012f04:	00000413 	.word	0x00000413
10012f08:	800fffff 	.word	0x800fffff

10012f0c <__aeabi_d2f>:
10012f0c:	004b      	lsls	r3, r1, #1
10012f0e:	b570      	push	{r4, r5, r6, lr}
10012f10:	0d5e      	lsrs	r6, r3, #21
10012f12:	030c      	lsls	r4, r1, #12
10012f14:	1c75      	adds	r5, r6, #1
10012f16:	0a64      	lsrs	r4, r4, #9
10012f18:	0f42      	lsrs	r2, r0, #29
10012f1a:	056d      	lsls	r5, r5, #21
10012f1c:	4322      	orrs	r2, r4
10012f1e:	0fc9      	lsrs	r1, r1, #31
10012f20:	00c4      	lsls	r4, r0, #3
10012f22:	0d6d      	lsrs	r5, r5, #21
10012f24:	2d01      	cmp	r5, #1
10012f26:	dd2a      	ble.n	10012f7e <__aeabi_d2f+0x72>
10012f28:	4b3b      	ldr	r3, [pc, #236]	; (10013018 <__aeabi_d2f+0x10c>)
10012f2a:	18f3      	adds	r3, r6, r3
10012f2c:	2bfe      	cmp	r3, #254	; 0xfe
10012f2e:	dc1a      	bgt.n	10012f66 <__aeabi_d2f+0x5a>
10012f30:	2b00      	cmp	r3, #0
10012f32:	dd42      	ble.n	10012fba <__aeabi_d2f+0xae>
10012f34:	0180      	lsls	r0, r0, #6
10012f36:	1e45      	subs	r5, r0, #1
10012f38:	41a8      	sbcs	r0, r5
10012f3a:	00d2      	lsls	r2, r2, #3
10012f3c:	4310      	orrs	r0, r2
10012f3e:	0f62      	lsrs	r2, r4, #29
10012f40:	4302      	orrs	r2, r0
10012f42:	0750      	lsls	r0, r2, #29
10012f44:	d004      	beq.n	10012f50 <__aeabi_d2f+0x44>
10012f46:	200f      	movs	r0, #15
10012f48:	4010      	ands	r0, r2
10012f4a:	2804      	cmp	r0, #4
10012f4c:	d000      	beq.n	10012f50 <__aeabi_d2f+0x44>
10012f4e:	3204      	adds	r2, #4
10012f50:	2080      	movs	r0, #128	; 0x80
10012f52:	04c0      	lsls	r0, r0, #19
10012f54:	4010      	ands	r0, r2
10012f56:	d021      	beq.n	10012f9c <__aeabi_d2f+0x90>
10012f58:	3301      	adds	r3, #1
10012f5a:	2bff      	cmp	r3, #255	; 0xff
10012f5c:	d003      	beq.n	10012f66 <__aeabi_d2f+0x5a>
10012f5e:	0192      	lsls	r2, r2, #6
10012f60:	0a52      	lsrs	r2, r2, #9
10012f62:	b2db      	uxtb	r3, r3
10012f64:	e001      	b.n	10012f6a <__aeabi_d2f+0x5e>
10012f66:	23ff      	movs	r3, #255	; 0xff
10012f68:	2200      	movs	r2, #0
10012f6a:	0252      	lsls	r2, r2, #9
10012f6c:	0a52      	lsrs	r2, r2, #9
10012f6e:	05db      	lsls	r3, r3, #23
10012f70:	4313      	orrs	r3, r2
10012f72:	005b      	lsls	r3, r3, #1
10012f74:	07c9      	lsls	r1, r1, #31
10012f76:	085b      	lsrs	r3, r3, #1
10012f78:	430b      	orrs	r3, r1
10012f7a:	0018      	movs	r0, r3
10012f7c:	bd70      	pop	{r4, r5, r6, pc}
10012f7e:	2e00      	cmp	r6, #0
10012f80:	d007      	beq.n	10012f92 <__aeabi_d2f+0x86>
10012f82:	4314      	orrs	r4, r2
10012f84:	d0ef      	beq.n	10012f66 <__aeabi_d2f+0x5a>
10012f86:	2080      	movs	r0, #128	; 0x80
10012f88:	00d2      	lsls	r2, r2, #3
10012f8a:	0480      	lsls	r0, r0, #18
10012f8c:	4302      	orrs	r2, r0
10012f8e:	23ff      	movs	r3, #255	; 0xff
10012f90:	e7d7      	b.n	10012f42 <__aeabi_d2f+0x36>
10012f92:	4322      	orrs	r2, r4
10012f94:	2300      	movs	r3, #0
10012f96:	2a00      	cmp	r2, #0
10012f98:	d003      	beq.n	10012fa2 <__aeabi_d2f+0x96>
10012f9a:	2205      	movs	r2, #5
10012f9c:	08d2      	lsrs	r2, r2, #3
10012f9e:	2bff      	cmp	r3, #255	; 0xff
10012fa0:	d003      	beq.n	10012faa <__aeabi_d2f+0x9e>
10012fa2:	0252      	lsls	r2, r2, #9
10012fa4:	0a52      	lsrs	r2, r2, #9
10012fa6:	b2db      	uxtb	r3, r3
10012fa8:	e7df      	b.n	10012f6a <__aeabi_d2f+0x5e>
10012faa:	2a00      	cmp	r2, #0
10012fac:	d032      	beq.n	10013014 <__aeabi_d2f+0x108>
10012fae:	2080      	movs	r0, #128	; 0x80
10012fb0:	03c0      	lsls	r0, r0, #15
10012fb2:	4302      	orrs	r2, r0
10012fb4:	0252      	lsls	r2, r2, #9
10012fb6:	0a52      	lsrs	r2, r2, #9
10012fb8:	e7d7      	b.n	10012f6a <__aeabi_d2f+0x5e>
10012fba:	0018      	movs	r0, r3
10012fbc:	3017      	adds	r0, #23
10012fbe:	db14      	blt.n	10012fea <__aeabi_d2f+0xde>
10012fc0:	2080      	movs	r0, #128	; 0x80
10012fc2:	0400      	lsls	r0, r0, #16
10012fc4:	4302      	orrs	r2, r0
10012fc6:	201e      	movs	r0, #30
10012fc8:	1ac0      	subs	r0, r0, r3
10012fca:	281f      	cmp	r0, #31
10012fcc:	dc0f      	bgt.n	10012fee <__aeabi_d2f+0xe2>
10012fce:	0025      	movs	r5, r4
10012fd0:	4b12      	ldr	r3, [pc, #72]	; (1001301c <__aeabi_d2f+0x110>)
10012fd2:	18f3      	adds	r3, r6, r3
10012fd4:	409d      	lsls	r5, r3
10012fd6:	1e6e      	subs	r6, r5, #1
10012fd8:	41b5      	sbcs	r5, r6
10012fda:	409a      	lsls	r2, r3
10012fdc:	002b      	movs	r3, r5
10012fde:	4313      	orrs	r3, r2
10012fe0:	0022      	movs	r2, r4
10012fe2:	40c2      	lsrs	r2, r0
10012fe4:	431a      	orrs	r2, r3
10012fe6:	2300      	movs	r3, #0
10012fe8:	e7ab      	b.n	10012f42 <__aeabi_d2f+0x36>
10012fea:	2300      	movs	r3, #0
10012fec:	e7d5      	b.n	10012f9a <__aeabi_d2f+0x8e>
10012fee:	2502      	movs	r5, #2
10012ff0:	426d      	negs	r5, r5
10012ff2:	1aeb      	subs	r3, r5, r3
10012ff4:	0015      	movs	r5, r2
10012ff6:	40dd      	lsrs	r5, r3
10012ff8:	2820      	cmp	r0, #32
10012ffa:	d009      	beq.n	10013010 <__aeabi_d2f+0x104>
10012ffc:	4b08      	ldr	r3, [pc, #32]	; (10013020 <__aeabi_d2f+0x114>)
10012ffe:	18f3      	adds	r3, r6, r3
10013000:	409a      	lsls	r2, r3
10013002:	4314      	orrs	r4, r2
10013004:	1e62      	subs	r2, r4, #1
10013006:	4194      	sbcs	r4, r2
10013008:	0022      	movs	r2, r4
1001300a:	2300      	movs	r3, #0
1001300c:	432a      	orrs	r2, r5
1001300e:	e798      	b.n	10012f42 <__aeabi_d2f+0x36>
10013010:	2200      	movs	r2, #0
10013012:	e7f6      	b.n	10013002 <__aeabi_d2f+0xf6>
10013014:	2200      	movs	r2, #0
10013016:	e7a8      	b.n	10012f6a <__aeabi_d2f+0x5e>
10013018:	fffffc80 	.word	0xfffffc80
1001301c:	fffffc82 	.word	0xfffffc82
10013020:	fffffca2 	.word	0xfffffca2

10013024 <__clzsi2>:
10013024:	211c      	movs	r1, #28
10013026:	2301      	movs	r3, #1
10013028:	041b      	lsls	r3, r3, #16
1001302a:	4298      	cmp	r0, r3
1001302c:	d301      	bcc.n	10013032 <__clzsi2+0xe>
1001302e:	0c00      	lsrs	r0, r0, #16
10013030:	3910      	subs	r1, #16
10013032:	0a1b      	lsrs	r3, r3, #8
10013034:	4298      	cmp	r0, r3
10013036:	d301      	bcc.n	1001303c <__clzsi2+0x18>
10013038:	0a00      	lsrs	r0, r0, #8
1001303a:	3908      	subs	r1, #8
1001303c:	091b      	lsrs	r3, r3, #4
1001303e:	4298      	cmp	r0, r3
10013040:	d301      	bcc.n	10013046 <__clzsi2+0x22>
10013042:	0900      	lsrs	r0, r0, #4
10013044:	3904      	subs	r1, #4
10013046:	a202      	add	r2, pc, #8	; (adr r2, 10013050 <__clzsi2+0x2c>)
10013048:	5c10      	ldrb	r0, [r2, r0]
1001304a:	1840      	adds	r0, r0, r1
1001304c:	4770      	bx	lr
1001304e:	46c0      	nop			; (mov r8, r8)
10013050:	02020304 	.word	0x02020304
10013054:	01010101 	.word	0x01010101
	...

10013060 <__errno>:
10013060:	4b01      	ldr	r3, [pc, #4]	; (10013068 <__errno+0x8>)
10013062:	6818      	ldr	r0, [r3, #0]
10013064:	4770      	bx	lr
10013066:	46c0      	nop			; (mov r8, r8)
10013068:	10015360 	.word	0x10015360

1001306c <__libc_init_array>:
1001306c:	4b0e      	ldr	r3, [pc, #56]	; (100130a8 <__libc_init_array+0x3c>)
1001306e:	b570      	push	{r4, r5, r6, lr}
10013070:	2500      	movs	r5, #0
10013072:	001e      	movs	r6, r3
10013074:	4c0d      	ldr	r4, [pc, #52]	; (100130ac <__libc_init_array+0x40>)
10013076:	1ae4      	subs	r4, r4, r3
10013078:	10a4      	asrs	r4, r4, #2
1001307a:	42a5      	cmp	r5, r4
1001307c:	d004      	beq.n	10013088 <__libc_init_array+0x1c>
1001307e:	00ab      	lsls	r3, r5, #2
10013080:	58f3      	ldr	r3, [r6, r3]
10013082:	4798      	blx	r3
10013084:	3501      	adds	r5, #1
10013086:	e7f8      	b.n	1001307a <__libc_init_array+0xe>
10013088:	f002 f91c 	bl	100152c4 <_init>
1001308c:	4b08      	ldr	r3, [pc, #32]	; (100130b0 <__libc_init_array+0x44>)
1001308e:	2500      	movs	r5, #0
10013090:	001e      	movs	r6, r3
10013092:	4c08      	ldr	r4, [pc, #32]	; (100130b4 <__libc_init_array+0x48>)
10013094:	1ae4      	subs	r4, r4, r3
10013096:	10a4      	asrs	r4, r4, #2
10013098:	42a5      	cmp	r5, r4
1001309a:	d004      	beq.n	100130a6 <__libc_init_array+0x3a>
1001309c:	00ab      	lsls	r3, r5, #2
1001309e:	58f3      	ldr	r3, [r6, r3]
100130a0:	4798      	blx	r3
100130a2:	3501      	adds	r5, #1
100130a4:	e7f8      	b.n	10013098 <__libc_init_array+0x2c>
100130a6:	bd70      	pop	{r4, r5, r6, pc}
100130a8:	100152d0 	.word	0x100152d0
100130ac:	100152d0 	.word	0x100152d0
100130b0:	100152d0 	.word	0x100152d0
100130b4:	100152d4 	.word	0x100152d4

100130b8 <__itoa>:
100130b8:	1e93      	subs	r3, r2, #2
100130ba:	b510      	push	{r4, lr}
100130bc:	000c      	movs	r4, r1
100130be:	2b22      	cmp	r3, #34	; 0x22
100130c0:	d902      	bls.n	100130c8 <__itoa+0x10>
100130c2:	2000      	movs	r0, #0
100130c4:	7008      	strb	r0, [r1, #0]
100130c6:	e00d      	b.n	100130e4 <__itoa+0x2c>
100130c8:	2a0a      	cmp	r2, #10
100130ca:	d106      	bne.n	100130da <__itoa+0x22>
100130cc:	2800      	cmp	r0, #0
100130ce:	da04      	bge.n	100130da <__itoa+0x22>
100130d0:	232d      	movs	r3, #45	; 0x2d
100130d2:	4240      	negs	r0, r0
100130d4:	700b      	strb	r3, [r1, #0]
100130d6:	2101      	movs	r1, #1
100130d8:	e000      	b.n	100130dc <__itoa+0x24>
100130da:	2100      	movs	r1, #0
100130dc:	1861      	adds	r1, r4, r1
100130de:	f000 f9e5 	bl	100134ac <__utoa>
100130e2:	0020      	movs	r0, r4
100130e4:	bd10      	pop	{r4, pc}

100130e6 <itoa>:
100130e6:	b510      	push	{r4, lr}
100130e8:	f7ff ffe6 	bl	100130b8 <__itoa>
100130ec:	bd10      	pop	{r4, pc}

100130ee <memcmp>:
100130ee:	b530      	push	{r4, r5, lr}
100130f0:	2400      	movs	r4, #0
100130f2:	42a2      	cmp	r2, r4
100130f4:	d008      	beq.n	10013108 <memcmp+0x1a>
100130f6:	5d03      	ldrb	r3, [r0, r4]
100130f8:	1c65      	adds	r5, r4, #1
100130fa:	5d0c      	ldrb	r4, [r1, r4]
100130fc:	42a3      	cmp	r3, r4
100130fe:	d001      	beq.n	10013104 <memcmp+0x16>
10013100:	1b18      	subs	r0, r3, r4
10013102:	e002      	b.n	1001310a <memcmp+0x1c>
10013104:	002c      	movs	r4, r5
10013106:	e7f4      	b.n	100130f2 <memcmp+0x4>
10013108:	2000      	movs	r0, #0
1001310a:	bd30      	pop	{r4, r5, pc}

1001310c <memcpy>:
1001310c:	2300      	movs	r3, #0
1001310e:	b510      	push	{r4, lr}
10013110:	429a      	cmp	r2, r3
10013112:	d003      	beq.n	1001311c <memcpy+0x10>
10013114:	5ccc      	ldrb	r4, [r1, r3]
10013116:	54c4      	strb	r4, [r0, r3]
10013118:	3301      	adds	r3, #1
1001311a:	e7f9      	b.n	10013110 <memcpy+0x4>
1001311c:	bd10      	pop	{r4, pc}

1001311e <memset>:
1001311e:	0003      	movs	r3, r0
10013120:	1882      	adds	r2, r0, r2
10013122:	4293      	cmp	r3, r2
10013124:	d002      	beq.n	1001312c <memset+0xe>
10013126:	7019      	strb	r1, [r3, #0]
10013128:	3301      	adds	r3, #1
1001312a:	e7fa      	b.n	10013122 <memset+0x4>
1001312c:	4770      	bx	lr
	...

10013130 <iprintf>:
10013130:	b40f      	push	{r0, r1, r2, r3}
10013132:	4b0b      	ldr	r3, [pc, #44]	; (10013160 <iprintf+0x30>)
10013134:	b513      	push	{r0, r1, r4, lr}
10013136:	681c      	ldr	r4, [r3, #0]
10013138:	2c00      	cmp	r4, #0
1001313a:	d005      	beq.n	10013148 <iprintf+0x18>
1001313c:	69a3      	ldr	r3, [r4, #24]
1001313e:	2b00      	cmp	r3, #0
10013140:	d102      	bne.n	10013148 <iprintf+0x18>
10013142:	0020      	movs	r0, r4
10013144:	f000 fbae 	bl	100138a4 <__sinit>
10013148:	ab05      	add	r3, sp, #20
1001314a:	9a04      	ldr	r2, [sp, #16]
1001314c:	68a1      	ldr	r1, [r4, #8]
1001314e:	0020      	movs	r0, r4
10013150:	9301      	str	r3, [sp, #4]
10013152:	f000 fd6d 	bl	10013c30 <_vfiprintf_r>
10013156:	bc16      	pop	{r1, r2, r4}
10013158:	bc08      	pop	{r3}
1001315a:	b004      	add	sp, #16
1001315c:	4718      	bx	r3
1001315e:	46c0      	nop			; (mov r8, r8)
10013160:	10015360 	.word	0x10015360

10013164 <putchar>:
10013164:	4b08      	ldr	r3, [pc, #32]	; (10013188 <putchar+0x24>)
10013166:	b570      	push	{r4, r5, r6, lr}
10013168:	681c      	ldr	r4, [r3, #0]
1001316a:	0005      	movs	r5, r0
1001316c:	2c00      	cmp	r4, #0
1001316e:	d005      	beq.n	1001317c <putchar+0x18>
10013170:	69a3      	ldr	r3, [r4, #24]
10013172:	2b00      	cmp	r3, #0
10013174:	d102      	bne.n	1001317c <putchar+0x18>
10013176:	0020      	movs	r0, r4
10013178:	f000 fb94 	bl	100138a4 <__sinit>
1001317c:	0029      	movs	r1, r5
1001317e:	68a2      	ldr	r2, [r4, #8]
10013180:	0020      	movs	r0, r4
10013182:	f001 f801 	bl	10014188 <_putc_r>
10013186:	bd70      	pop	{r4, r5, r6, pc}
10013188:	10015360 	.word	0x10015360

1001318c <_puts_r>:
1001318c:	b570      	push	{r4, r5, r6, lr}
1001318e:	0005      	movs	r5, r0
10013190:	000e      	movs	r6, r1
10013192:	2800      	cmp	r0, #0
10013194:	d004      	beq.n	100131a0 <_puts_r+0x14>
10013196:	6983      	ldr	r3, [r0, #24]
10013198:	2b00      	cmp	r3, #0
1001319a:	d101      	bne.n	100131a0 <_puts_r+0x14>
1001319c:	f000 fb82 	bl	100138a4 <__sinit>
100131a0:	69ab      	ldr	r3, [r5, #24]
100131a2:	68ac      	ldr	r4, [r5, #8]
100131a4:	2b00      	cmp	r3, #0
100131a6:	d102      	bne.n	100131ae <_puts_r+0x22>
100131a8:	0028      	movs	r0, r5
100131aa:	f000 fb7b 	bl	100138a4 <__sinit>
100131ae:	4b25      	ldr	r3, [pc, #148]	; (10013244 <_puts_r+0xb8>)
100131b0:	429c      	cmp	r4, r3
100131b2:	d101      	bne.n	100131b8 <_puts_r+0x2c>
100131b4:	686c      	ldr	r4, [r5, #4]
100131b6:	e008      	b.n	100131ca <_puts_r+0x3e>
100131b8:	4b23      	ldr	r3, [pc, #140]	; (10013248 <_puts_r+0xbc>)
100131ba:	429c      	cmp	r4, r3
100131bc:	d101      	bne.n	100131c2 <_puts_r+0x36>
100131be:	68ac      	ldr	r4, [r5, #8]
100131c0:	e003      	b.n	100131ca <_puts_r+0x3e>
100131c2:	4b22      	ldr	r3, [pc, #136]	; (1001324c <_puts_r+0xc0>)
100131c4:	429c      	cmp	r4, r3
100131c6:	d100      	bne.n	100131ca <_puts_r+0x3e>
100131c8:	68ec      	ldr	r4, [r5, #12]
100131ca:	89a3      	ldrh	r3, [r4, #12]
100131cc:	071b      	lsls	r3, r3, #28
100131ce:	d502      	bpl.n	100131d6 <_puts_r+0x4a>
100131d0:	6923      	ldr	r3, [r4, #16]
100131d2:	2b00      	cmp	r3, #0
100131d4:	d111      	bne.n	100131fa <_puts_r+0x6e>
100131d6:	0021      	movs	r1, r4
100131d8:	0028      	movs	r0, r5
100131da:	f000 f9f9 	bl	100135d0 <__swsetup_r>
100131de:	2800      	cmp	r0, #0
100131e0:	d00b      	beq.n	100131fa <_puts_r+0x6e>
100131e2:	2001      	movs	r0, #1
100131e4:	4240      	negs	r0, r0
100131e6:	e02b      	b.n	10013240 <_puts_r+0xb4>
100131e8:	3b01      	subs	r3, #1
100131ea:	3601      	adds	r6, #1
100131ec:	60a3      	str	r3, [r4, #8]
100131ee:	2b00      	cmp	r3, #0
100131f0:	db08      	blt.n	10013204 <_puts_r+0x78>
100131f2:	6823      	ldr	r3, [r4, #0]
100131f4:	1c5a      	adds	r2, r3, #1
100131f6:	6022      	str	r2, [r4, #0]
100131f8:	7019      	strb	r1, [r3, #0]
100131fa:	7831      	ldrb	r1, [r6, #0]
100131fc:	68a3      	ldr	r3, [r4, #8]
100131fe:	2900      	cmp	r1, #0
10013200:	d1f2      	bne.n	100131e8 <_puts_r+0x5c>
10013202:	e00b      	b.n	1001321c <_puts_r+0x90>
10013204:	69a2      	ldr	r2, [r4, #24]
10013206:	4293      	cmp	r3, r2
10013208:	db01      	blt.n	1001320e <_puts_r+0x82>
1001320a:	290a      	cmp	r1, #10
1001320c:	d1f1      	bne.n	100131f2 <_puts_r+0x66>
1001320e:	0022      	movs	r2, r4
10013210:	0028      	movs	r0, r5
10013212:	f000 f985 	bl	10013520 <__swbuf_r>
10013216:	1c43      	adds	r3, r0, #1
10013218:	d1ef      	bne.n	100131fa <_puts_r+0x6e>
1001321a:	e7e2      	b.n	100131e2 <_puts_r+0x56>
1001321c:	3b01      	subs	r3, #1
1001321e:	60a3      	str	r3, [r4, #8]
10013220:	2b00      	cmp	r3, #0
10013222:	da08      	bge.n	10013236 <_puts_r+0xaa>
10013224:	0022      	movs	r2, r4
10013226:	310a      	adds	r1, #10
10013228:	0028      	movs	r0, r5
1001322a:	f000 f979 	bl	10013520 <__swbuf_r>
1001322e:	1c43      	adds	r3, r0, #1
10013230:	d0d7      	beq.n	100131e2 <_puts_r+0x56>
10013232:	200a      	movs	r0, #10
10013234:	e004      	b.n	10013240 <_puts_r+0xb4>
10013236:	200a      	movs	r0, #10
10013238:	6823      	ldr	r3, [r4, #0]
1001323a:	1c5a      	adds	r2, r3, #1
1001323c:	6022      	str	r2, [r4, #0]
1001323e:	7018      	strb	r0, [r3, #0]
10013240:	bd70      	pop	{r4, r5, r6, pc}
10013242:	46c0      	nop			; (mov r8, r8)
10013244:	10015230 	.word	0x10015230
10013248:	10015250 	.word	0x10015250
1001324c:	10015270 	.word	0x10015270

10013250 <puts>:
10013250:	b510      	push	{r4, lr}
10013252:	4b03      	ldr	r3, [pc, #12]	; (10013260 <puts+0x10>)
10013254:	0001      	movs	r1, r0
10013256:	6818      	ldr	r0, [r3, #0]
10013258:	f7ff ff98 	bl	1001318c <_puts_r>
1001325c:	bd10      	pop	{r4, pc}
1001325e:	46c0      	nop			; (mov r8, r8)
10013260:	10015360 	.word	0x10015360

10013264 <rand>:
10013264:	4b15      	ldr	r3, [pc, #84]	; (100132bc <rand+0x58>)
10013266:	b510      	push	{r4, lr}
10013268:	681c      	ldr	r4, [r3, #0]
1001326a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1001326c:	2b00      	cmp	r3, #0
1001326e:	d115      	bne.n	1001329c <rand+0x38>
10013270:	2018      	movs	r0, #24
10013272:	f000 fc0f 	bl	10013a94 <malloc>
10013276:	4b12      	ldr	r3, [pc, #72]	; (100132c0 <rand+0x5c>)
10013278:	63a0      	str	r0, [r4, #56]	; 0x38
1001327a:	8003      	strh	r3, [r0, #0]
1001327c:	4b11      	ldr	r3, [pc, #68]	; (100132c4 <rand+0x60>)
1001327e:	2201      	movs	r2, #1
10013280:	8043      	strh	r3, [r0, #2]
10013282:	4b11      	ldr	r3, [pc, #68]	; (100132c8 <rand+0x64>)
10013284:	8083      	strh	r3, [r0, #4]
10013286:	4b11      	ldr	r3, [pc, #68]	; (100132cc <rand+0x68>)
10013288:	80c3      	strh	r3, [r0, #6]
1001328a:	4b11      	ldr	r3, [pc, #68]	; (100132d0 <rand+0x6c>)
1001328c:	8103      	strh	r3, [r0, #8]
1001328e:	2305      	movs	r3, #5
10013290:	8143      	strh	r3, [r0, #10]
10013292:	3306      	adds	r3, #6
10013294:	8183      	strh	r3, [r0, #12]
10013296:	2300      	movs	r3, #0
10013298:	6102      	str	r2, [r0, #16]
1001329a:	6143      	str	r3, [r0, #20]
1001329c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001329e:	4a0d      	ldr	r2, [pc, #52]	; (100132d4 <rand+0x70>)
100132a0:	6920      	ldr	r0, [r4, #16]
100132a2:	6961      	ldr	r1, [r4, #20]
100132a4:	4b0c      	ldr	r3, [pc, #48]	; (100132d8 <rand+0x74>)
100132a6:	f001 f881 	bl	100143ac <__aeabi_lmul>
100132aa:	2201      	movs	r2, #1
100132ac:	2300      	movs	r3, #0
100132ae:	1880      	adds	r0, r0, r2
100132b0:	4159      	adcs	r1, r3
100132b2:	6120      	str	r0, [r4, #16]
100132b4:	6161      	str	r1, [r4, #20]
100132b6:	0048      	lsls	r0, r1, #1
100132b8:	0840      	lsrs	r0, r0, #1
100132ba:	bd10      	pop	{r4, pc}
100132bc:	10015360 	.word	0x10015360
100132c0:	0000330e 	.word	0x0000330e
100132c4:	ffffabcd 	.word	0xffffabcd
100132c8:	00001234 	.word	0x00001234
100132cc:	ffffe66d 	.word	0xffffe66d
100132d0:	ffffdeec 	.word	0xffffdeec
100132d4:	4c957f2d 	.word	0x4c957f2d
100132d8:	5851f42d 	.word	0x5851f42d

100132dc <setbuf>:
100132dc:	424a      	negs	r2, r1
100132de:	414a      	adcs	r2, r1
100132e0:	2380      	movs	r3, #128	; 0x80
100132e2:	b510      	push	{r4, lr}
100132e4:	0052      	lsls	r2, r2, #1
100132e6:	00db      	lsls	r3, r3, #3
100132e8:	f000 f802 	bl	100132f0 <setvbuf>
100132ec:	bd10      	pop	{r4, pc}
	...

100132f0 <setvbuf>:
100132f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100132f2:	001d      	movs	r5, r3
100132f4:	4b51      	ldr	r3, [pc, #324]	; (1001343c <setvbuf+0x14c>)
100132f6:	b085      	sub	sp, #20
100132f8:	681e      	ldr	r6, [r3, #0]
100132fa:	0004      	movs	r4, r0
100132fc:	000f      	movs	r7, r1
100132fe:	9200      	str	r2, [sp, #0]
10013300:	2e00      	cmp	r6, #0
10013302:	d005      	beq.n	10013310 <setvbuf+0x20>
10013304:	69b3      	ldr	r3, [r6, #24]
10013306:	2b00      	cmp	r3, #0
10013308:	d102      	bne.n	10013310 <setvbuf+0x20>
1001330a:	0030      	movs	r0, r6
1001330c:	f000 faca 	bl	100138a4 <__sinit>
10013310:	4b4b      	ldr	r3, [pc, #300]	; (10013440 <setvbuf+0x150>)
10013312:	429c      	cmp	r4, r3
10013314:	d101      	bne.n	1001331a <setvbuf+0x2a>
10013316:	6874      	ldr	r4, [r6, #4]
10013318:	e008      	b.n	1001332c <setvbuf+0x3c>
1001331a:	4b4a      	ldr	r3, [pc, #296]	; (10013444 <setvbuf+0x154>)
1001331c:	429c      	cmp	r4, r3
1001331e:	d101      	bne.n	10013324 <setvbuf+0x34>
10013320:	68b4      	ldr	r4, [r6, #8]
10013322:	e003      	b.n	1001332c <setvbuf+0x3c>
10013324:	4b48      	ldr	r3, [pc, #288]	; (10013448 <setvbuf+0x158>)
10013326:	429c      	cmp	r4, r3
10013328:	d100      	bne.n	1001332c <setvbuf+0x3c>
1001332a:	68f4      	ldr	r4, [r6, #12]
1001332c:	9b00      	ldr	r3, [sp, #0]
1001332e:	2b02      	cmp	r3, #2
10013330:	d005      	beq.n	1001333e <setvbuf+0x4e>
10013332:	2b01      	cmp	r3, #1
10013334:	d900      	bls.n	10013338 <setvbuf+0x48>
10013336:	e07c      	b.n	10013432 <setvbuf+0x142>
10013338:	2d00      	cmp	r5, #0
1001333a:	da00      	bge.n	1001333e <setvbuf+0x4e>
1001333c:	e079      	b.n	10013432 <setvbuf+0x142>
1001333e:	0021      	movs	r1, r4
10013340:	0030      	movs	r0, r6
10013342:	f000 fa41 	bl	100137c8 <_fflush_r>
10013346:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013348:	2900      	cmp	r1, #0
1001334a:	d008      	beq.n	1001335e <setvbuf+0x6e>
1001334c:	0023      	movs	r3, r4
1001334e:	3344      	adds	r3, #68	; 0x44
10013350:	4299      	cmp	r1, r3
10013352:	d002      	beq.n	1001335a <setvbuf+0x6a>
10013354:	0030      	movs	r0, r6
10013356:	f000 fba7 	bl	10013aa8 <_free_r>
1001335a:	2300      	movs	r3, #0
1001335c:	6363      	str	r3, [r4, #52]	; 0x34
1001335e:	2300      	movs	r3, #0
10013360:	61a3      	str	r3, [r4, #24]
10013362:	6063      	str	r3, [r4, #4]
10013364:	89a3      	ldrh	r3, [r4, #12]
10013366:	061b      	lsls	r3, r3, #24
10013368:	d503      	bpl.n	10013372 <setvbuf+0x82>
1001336a:	6921      	ldr	r1, [r4, #16]
1001336c:	0030      	movs	r0, r6
1001336e:	f000 fb9b 	bl	10013aa8 <_free_r>
10013372:	89a2      	ldrh	r2, [r4, #12]
10013374:	4b35      	ldr	r3, [pc, #212]	; (1001344c <setvbuf+0x15c>)
10013376:	4013      	ands	r3, r2
10013378:	81a3      	strh	r3, [r4, #12]
1001337a:	9b00      	ldr	r3, [sp, #0]
1001337c:	2b02      	cmp	r3, #2
1001337e:	d021      	beq.n	100133c4 <setvbuf+0xd4>
10013380:	ab03      	add	r3, sp, #12
10013382:	aa02      	add	r2, sp, #8
10013384:	0021      	movs	r1, r4
10013386:	0030      	movs	r0, r6
10013388:	f000 fb20 	bl	100139cc <__swhatbuf_r>
1001338c:	89a3      	ldrh	r3, [r4, #12]
1001338e:	4318      	orrs	r0, r3
10013390:	81a0      	strh	r0, [r4, #12]
10013392:	2d00      	cmp	r5, #0
10013394:	d101      	bne.n	1001339a <setvbuf+0xaa>
10013396:	9d02      	ldr	r5, [sp, #8]
10013398:	e001      	b.n	1001339e <setvbuf+0xae>
1001339a:	2f00      	cmp	r7, #0
1001339c:	d125      	bne.n	100133ea <setvbuf+0xfa>
1001339e:	0028      	movs	r0, r5
100133a0:	f000 fb78 	bl	10013a94 <malloc>
100133a4:	9501      	str	r5, [sp, #4]
100133a6:	1e07      	subs	r7, r0, #0
100133a8:	d11a      	bne.n	100133e0 <setvbuf+0xf0>
100133aa:	9b02      	ldr	r3, [sp, #8]
100133ac:	9301      	str	r3, [sp, #4]
100133ae:	42ab      	cmp	r3, r5
100133b0:	d102      	bne.n	100133b8 <setvbuf+0xc8>
100133b2:	2001      	movs	r0, #1
100133b4:	4240      	negs	r0, r0
100133b6:	e006      	b.n	100133c6 <setvbuf+0xd6>
100133b8:	9801      	ldr	r0, [sp, #4]
100133ba:	f000 fb6b 	bl	10013a94 <malloc>
100133be:	1e07      	subs	r7, r0, #0
100133c0:	d10e      	bne.n	100133e0 <setvbuf+0xf0>
100133c2:	e7f6      	b.n	100133b2 <setvbuf+0xc2>
100133c4:	2000      	movs	r0, #0
100133c6:	2202      	movs	r2, #2
100133c8:	89a3      	ldrh	r3, [r4, #12]
100133ca:	4313      	orrs	r3, r2
100133cc:	81a3      	strh	r3, [r4, #12]
100133ce:	2300      	movs	r3, #0
100133d0:	60a3      	str	r3, [r4, #8]
100133d2:	0023      	movs	r3, r4
100133d4:	3347      	adds	r3, #71	; 0x47
100133d6:	6023      	str	r3, [r4, #0]
100133d8:	6123      	str	r3, [r4, #16]
100133da:	2301      	movs	r3, #1
100133dc:	6163      	str	r3, [r4, #20]
100133de:	e02a      	b.n	10013436 <setvbuf+0x146>
100133e0:	2280      	movs	r2, #128	; 0x80
100133e2:	89a3      	ldrh	r3, [r4, #12]
100133e4:	9d01      	ldr	r5, [sp, #4]
100133e6:	4313      	orrs	r3, r2
100133e8:	81a3      	strh	r3, [r4, #12]
100133ea:	69b3      	ldr	r3, [r6, #24]
100133ec:	2b00      	cmp	r3, #0
100133ee:	d102      	bne.n	100133f6 <setvbuf+0x106>
100133f0:	0030      	movs	r0, r6
100133f2:	f000 fa57 	bl	100138a4 <__sinit>
100133f6:	9b00      	ldr	r3, [sp, #0]
100133f8:	2b01      	cmp	r3, #1
100133fa:	d103      	bne.n	10013404 <setvbuf+0x114>
100133fc:	89a3      	ldrh	r3, [r4, #12]
100133fe:	9a00      	ldr	r2, [sp, #0]
10013400:	431a      	orrs	r2, r3
10013402:	81a2      	strh	r2, [r4, #12]
10013404:	2308      	movs	r3, #8
10013406:	89a2      	ldrh	r2, [r4, #12]
10013408:	6027      	str	r7, [r4, #0]
1001340a:	4013      	ands	r3, r2
1001340c:	6127      	str	r7, [r4, #16]
1001340e:	6165      	str	r5, [r4, #20]
10013410:	1e18      	subs	r0, r3, #0
10013412:	d00c      	beq.n	1001342e <setvbuf+0x13e>
10013414:	2301      	movs	r3, #1
10013416:	401a      	ands	r2, r3
10013418:	2300      	movs	r3, #0
1001341a:	1e10      	subs	r0, r2, #0
1001341c:	4298      	cmp	r0, r3
1001341e:	d004      	beq.n	1001342a <setvbuf+0x13a>
10013420:	426d      	negs	r5, r5
10013422:	60a3      	str	r3, [r4, #8]
10013424:	61a5      	str	r5, [r4, #24]
10013426:	0018      	movs	r0, r3
10013428:	e005      	b.n	10013436 <setvbuf+0x146>
1001342a:	60a5      	str	r5, [r4, #8]
1001342c:	e003      	b.n	10013436 <setvbuf+0x146>
1001342e:	60a3      	str	r3, [r4, #8]
10013430:	e001      	b.n	10013436 <setvbuf+0x146>
10013432:	2001      	movs	r0, #1
10013434:	4240      	negs	r0, r0
10013436:	b005      	add	sp, #20
10013438:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001343a:	46c0      	nop			; (mov r8, r8)
1001343c:	10015360 	.word	0x10015360
10013440:	10015230 	.word	0x10015230
10013444:	10015250 	.word	0x10015250
10013448:	10015270 	.word	0x10015270
1001344c:	fffff35c 	.word	0xfffff35c

10013450 <strlen>:
10013450:	2300      	movs	r3, #0
10013452:	5cc2      	ldrb	r2, [r0, r3]
10013454:	3301      	adds	r3, #1
10013456:	2a00      	cmp	r2, #0
10013458:	d1fb      	bne.n	10013452 <strlen+0x2>
1001345a:	1e58      	subs	r0, r3, #1
1001345c:	4770      	bx	lr

1001345e <strncat>:
1001345e:	0003      	movs	r3, r0
10013460:	b510      	push	{r4, lr}
10013462:	781c      	ldrb	r4, [r3, #0]
10013464:	2c00      	cmp	r4, #0
10013466:	d00a      	beq.n	1001347e <strncat+0x20>
10013468:	3301      	adds	r3, #1
1001346a:	e7fa      	b.n	10013462 <strncat+0x4>
1001346c:	780c      	ldrb	r4, [r1, #0]
1001346e:	701c      	strb	r4, [r3, #0]
10013470:	2c00      	cmp	r4, #0
10013472:	d007      	beq.n	10013484 <strncat+0x26>
10013474:	2a00      	cmp	r2, #0
10013476:	d100      	bne.n	1001347a <strncat+0x1c>
10013478:	705a      	strb	r2, [r3, #1]
1001347a:	3301      	adds	r3, #1
1001347c:	3101      	adds	r1, #1
1001347e:	3a01      	subs	r2, #1
10013480:	1c54      	adds	r4, r2, #1
10013482:	d1f3      	bne.n	1001346c <strncat+0xe>
10013484:	bd10      	pop	{r4, pc}

10013486 <strncmp>:
10013486:	2300      	movs	r3, #0
10013488:	b530      	push	{r4, r5, lr}
1001348a:	429a      	cmp	r2, r3
1001348c:	d00b      	beq.n	100134a6 <strncmp+0x20>
1001348e:	3a01      	subs	r2, #1
10013490:	5cc4      	ldrb	r4, [r0, r3]
10013492:	5ccd      	ldrb	r5, [r1, r3]
10013494:	42ac      	cmp	r4, r5
10013496:	d105      	bne.n	100134a4 <strncmp+0x1e>
10013498:	429a      	cmp	r2, r3
1001349a:	d002      	beq.n	100134a2 <strncmp+0x1c>
1001349c:	3301      	adds	r3, #1
1001349e:	2c00      	cmp	r4, #0
100134a0:	d1f6      	bne.n	10013490 <strncmp+0xa>
100134a2:	0025      	movs	r5, r4
100134a4:	1b63      	subs	r3, r4, r5
100134a6:	0018      	movs	r0, r3
100134a8:	bd30      	pop	{r4, r5, pc}
	...

100134ac <__utoa>:
100134ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100134ae:	b08f      	sub	sp, #60	; 0x3c
100134b0:	0017      	movs	r7, r2
100134b2:	0006      	movs	r6, r0
100134b4:	000c      	movs	r4, r1
100134b6:	2225      	movs	r2, #37	; 0x25
100134b8:	4918      	ldr	r1, [pc, #96]	; (1001351c <__utoa+0x70>)
100134ba:	a804      	add	r0, sp, #16
100134bc:	f7ff fe26 	bl	1001310c <memcpy>
100134c0:	2000      	movs	r0, #0
100134c2:	1ebb      	subs	r3, r7, #2
100134c4:	0005      	movs	r5, r0
100134c6:	2b22      	cmp	r3, #34	; 0x22
100134c8:	d901      	bls.n	100134ce <__utoa+0x22>
100134ca:	7020      	strb	r0, [r4, #0]
100134cc:	e023      	b.n	10013516 <__utoa+0x6a>
100134ce:	1c6b      	adds	r3, r5, #1
100134d0:	9302      	str	r3, [sp, #8]
100134d2:	18e3      	adds	r3, r4, r3
100134d4:	9301      	str	r3, [sp, #4]
100134d6:	0030      	movs	r0, r6
100134d8:	3b01      	subs	r3, #1
100134da:	0039      	movs	r1, r7
100134dc:	9303      	str	r3, [sp, #12]
100134de:	f7fd f9ed 	bl	100108bc <__aeabi_uidivmod>
100134e2:	ab04      	add	r3, sp, #16
100134e4:	5c5b      	ldrb	r3, [r3, r1]
100134e6:	9a03      	ldr	r2, [sp, #12]
100134e8:	0030      	movs	r0, r6
100134ea:	7013      	strb	r3, [r2, #0]
100134ec:	0039      	movs	r1, r7
100134ee:	f7fd f95f 	bl	100107b0 <__aeabi_uidiv>
100134f2:	1e06      	subs	r6, r0, #0
100134f4:	d001      	beq.n	100134fa <__utoa+0x4e>
100134f6:	9d02      	ldr	r5, [sp, #8]
100134f8:	e7e9      	b.n	100134ce <__utoa+0x22>
100134fa:	9b01      	ldr	r3, [sp, #4]
100134fc:	7018      	strb	r0, [r3, #0]
100134fe:	0023      	movs	r3, r4
10013500:	1b1a      	subs	r2, r3, r4
10013502:	4295      	cmp	r5, r2
10013504:	dd06      	ble.n	10013514 <__utoa+0x68>
10013506:	781a      	ldrb	r2, [r3, #0]
10013508:	5d61      	ldrb	r1, [r4, r5]
1001350a:	7019      	strb	r1, [r3, #0]
1001350c:	5562      	strb	r2, [r4, r5]
1001350e:	3301      	adds	r3, #1
10013510:	3d01      	subs	r5, #1
10013512:	e7f5      	b.n	10013500 <__utoa+0x54>
10013514:	0020      	movs	r0, r4
10013516:	b00f      	add	sp, #60	; 0x3c
10013518:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001351a:	46c0      	nop			; (mov r8, r8)
1001351c:	10015208 	.word	0x10015208

10013520 <__swbuf_r>:
10013520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013522:	0005      	movs	r5, r0
10013524:	000f      	movs	r7, r1
10013526:	0014      	movs	r4, r2
10013528:	2800      	cmp	r0, #0
1001352a:	d004      	beq.n	10013536 <__swbuf_r+0x16>
1001352c:	6983      	ldr	r3, [r0, #24]
1001352e:	2b00      	cmp	r3, #0
10013530:	d101      	bne.n	10013536 <__swbuf_r+0x16>
10013532:	f000 f9b7 	bl	100138a4 <__sinit>
10013536:	4b23      	ldr	r3, [pc, #140]	; (100135c4 <__swbuf_r+0xa4>)
10013538:	429c      	cmp	r4, r3
1001353a:	d101      	bne.n	10013540 <__swbuf_r+0x20>
1001353c:	686c      	ldr	r4, [r5, #4]
1001353e:	e008      	b.n	10013552 <__swbuf_r+0x32>
10013540:	4b21      	ldr	r3, [pc, #132]	; (100135c8 <__swbuf_r+0xa8>)
10013542:	429c      	cmp	r4, r3
10013544:	d101      	bne.n	1001354a <__swbuf_r+0x2a>
10013546:	68ac      	ldr	r4, [r5, #8]
10013548:	e003      	b.n	10013552 <__swbuf_r+0x32>
1001354a:	4b20      	ldr	r3, [pc, #128]	; (100135cc <__swbuf_r+0xac>)
1001354c:	429c      	cmp	r4, r3
1001354e:	d100      	bne.n	10013552 <__swbuf_r+0x32>
10013550:	68ec      	ldr	r4, [r5, #12]
10013552:	69a3      	ldr	r3, [r4, #24]
10013554:	60a3      	str	r3, [r4, #8]
10013556:	89a3      	ldrh	r3, [r4, #12]
10013558:	071b      	lsls	r3, r3, #28
1001355a:	d50a      	bpl.n	10013572 <__swbuf_r+0x52>
1001355c:	6923      	ldr	r3, [r4, #16]
1001355e:	2b00      	cmp	r3, #0
10013560:	d007      	beq.n	10013572 <__swbuf_r+0x52>
10013562:	6823      	ldr	r3, [r4, #0]
10013564:	6922      	ldr	r2, [r4, #16]
10013566:	b2fe      	uxtb	r6, r7
10013568:	1a98      	subs	r0, r3, r2
1001356a:	6963      	ldr	r3, [r4, #20]
1001356c:	4298      	cmp	r0, r3
1001356e:	db0f      	blt.n	10013590 <__swbuf_r+0x70>
10013570:	e008      	b.n	10013584 <__swbuf_r+0x64>
10013572:	0021      	movs	r1, r4
10013574:	0028      	movs	r0, r5
10013576:	f000 f82b 	bl	100135d0 <__swsetup_r>
1001357a:	2800      	cmp	r0, #0
1001357c:	d0f1      	beq.n	10013562 <__swbuf_r+0x42>
1001357e:	2001      	movs	r0, #1
10013580:	4240      	negs	r0, r0
10013582:	e01d      	b.n	100135c0 <__swbuf_r+0xa0>
10013584:	0021      	movs	r1, r4
10013586:	0028      	movs	r0, r5
10013588:	f000 f91e 	bl	100137c8 <_fflush_r>
1001358c:	2800      	cmp	r0, #0
1001358e:	d1f6      	bne.n	1001357e <__swbuf_r+0x5e>
10013590:	68a3      	ldr	r3, [r4, #8]
10013592:	3001      	adds	r0, #1
10013594:	3b01      	subs	r3, #1
10013596:	60a3      	str	r3, [r4, #8]
10013598:	6823      	ldr	r3, [r4, #0]
1001359a:	1c5a      	adds	r2, r3, #1
1001359c:	6022      	str	r2, [r4, #0]
1001359e:	701f      	strb	r7, [r3, #0]
100135a0:	6963      	ldr	r3, [r4, #20]
100135a2:	4298      	cmp	r0, r3
100135a4:	d005      	beq.n	100135b2 <__swbuf_r+0x92>
100135a6:	89a3      	ldrh	r3, [r4, #12]
100135a8:	0030      	movs	r0, r6
100135aa:	07db      	lsls	r3, r3, #31
100135ac:	d508      	bpl.n	100135c0 <__swbuf_r+0xa0>
100135ae:	2e0a      	cmp	r6, #10
100135b0:	d106      	bne.n	100135c0 <__swbuf_r+0xa0>
100135b2:	0021      	movs	r1, r4
100135b4:	0028      	movs	r0, r5
100135b6:	f000 f907 	bl	100137c8 <_fflush_r>
100135ba:	2800      	cmp	r0, #0
100135bc:	d1df      	bne.n	1001357e <__swbuf_r+0x5e>
100135be:	0030      	movs	r0, r6
100135c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100135c2:	46c0      	nop			; (mov r8, r8)
100135c4:	10015230 	.word	0x10015230
100135c8:	10015250 	.word	0x10015250
100135cc:	10015270 	.word	0x10015270

100135d0 <__swsetup_r>:
100135d0:	4b36      	ldr	r3, [pc, #216]	; (100136ac <__swsetup_r+0xdc>)
100135d2:	b570      	push	{r4, r5, r6, lr}
100135d4:	681d      	ldr	r5, [r3, #0]
100135d6:	0006      	movs	r6, r0
100135d8:	000c      	movs	r4, r1
100135da:	2d00      	cmp	r5, #0
100135dc:	d005      	beq.n	100135ea <__swsetup_r+0x1a>
100135de:	69ab      	ldr	r3, [r5, #24]
100135e0:	2b00      	cmp	r3, #0
100135e2:	d102      	bne.n	100135ea <__swsetup_r+0x1a>
100135e4:	0028      	movs	r0, r5
100135e6:	f000 f95d 	bl	100138a4 <__sinit>
100135ea:	4b31      	ldr	r3, [pc, #196]	; (100136b0 <__swsetup_r+0xe0>)
100135ec:	429c      	cmp	r4, r3
100135ee:	d101      	bne.n	100135f4 <__swsetup_r+0x24>
100135f0:	686c      	ldr	r4, [r5, #4]
100135f2:	e008      	b.n	10013606 <__swsetup_r+0x36>
100135f4:	4b2f      	ldr	r3, [pc, #188]	; (100136b4 <__swsetup_r+0xe4>)
100135f6:	429c      	cmp	r4, r3
100135f8:	d101      	bne.n	100135fe <__swsetup_r+0x2e>
100135fa:	68ac      	ldr	r4, [r5, #8]
100135fc:	e003      	b.n	10013606 <__swsetup_r+0x36>
100135fe:	4b2e      	ldr	r3, [pc, #184]	; (100136b8 <__swsetup_r+0xe8>)
10013600:	429c      	cmp	r4, r3
10013602:	d100      	bne.n	10013606 <__swsetup_r+0x36>
10013604:	68ec      	ldr	r4, [r5, #12]
10013606:	220c      	movs	r2, #12
10013608:	5ea3      	ldrsh	r3, [r4, r2]
1001360a:	b29a      	uxth	r2, r3
1001360c:	0711      	lsls	r1, r2, #28
1001360e:	d423      	bmi.n	10013658 <__swsetup_r+0x88>
10013610:	06d1      	lsls	r1, r2, #27
10013612:	d407      	bmi.n	10013624 <__swsetup_r+0x54>
10013614:	2209      	movs	r2, #9
10013616:	2001      	movs	r0, #1
10013618:	6032      	str	r2, [r6, #0]
1001361a:	3237      	adds	r2, #55	; 0x37
1001361c:	4313      	orrs	r3, r2
1001361e:	81a3      	strh	r3, [r4, #12]
10013620:	4240      	negs	r0, r0
10013622:	e042      	b.n	100136aa <__swsetup_r+0xda>
10013624:	0753      	lsls	r3, r2, #29
10013626:	d513      	bpl.n	10013650 <__swsetup_r+0x80>
10013628:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001362a:	2900      	cmp	r1, #0
1001362c:	d008      	beq.n	10013640 <__swsetup_r+0x70>
1001362e:	0023      	movs	r3, r4
10013630:	3344      	adds	r3, #68	; 0x44
10013632:	4299      	cmp	r1, r3
10013634:	d002      	beq.n	1001363c <__swsetup_r+0x6c>
10013636:	0030      	movs	r0, r6
10013638:	f000 fa36 	bl	10013aa8 <_free_r>
1001363c:	2300      	movs	r3, #0
1001363e:	6363      	str	r3, [r4, #52]	; 0x34
10013640:	2224      	movs	r2, #36	; 0x24
10013642:	89a3      	ldrh	r3, [r4, #12]
10013644:	4393      	bics	r3, r2
10013646:	81a3      	strh	r3, [r4, #12]
10013648:	2300      	movs	r3, #0
1001364a:	6063      	str	r3, [r4, #4]
1001364c:	6923      	ldr	r3, [r4, #16]
1001364e:	6023      	str	r3, [r4, #0]
10013650:	2208      	movs	r2, #8
10013652:	89a3      	ldrh	r3, [r4, #12]
10013654:	4313      	orrs	r3, r2
10013656:	81a3      	strh	r3, [r4, #12]
10013658:	6923      	ldr	r3, [r4, #16]
1001365a:	2b00      	cmp	r3, #0
1001365c:	d10b      	bne.n	10013676 <__swsetup_r+0xa6>
1001365e:	23a0      	movs	r3, #160	; 0xa0
10013660:	89a2      	ldrh	r2, [r4, #12]
10013662:	009b      	lsls	r3, r3, #2
10013664:	4013      	ands	r3, r2
10013666:	2280      	movs	r2, #128	; 0x80
10013668:	0092      	lsls	r2, r2, #2
1001366a:	4293      	cmp	r3, r2
1001366c:	d003      	beq.n	10013676 <__swsetup_r+0xa6>
1001366e:	0021      	movs	r1, r4
10013670:	0030      	movs	r0, r6
10013672:	f000 f9d1 	bl	10013a18 <__smakebuf_r>
10013676:	2301      	movs	r3, #1
10013678:	89a2      	ldrh	r2, [r4, #12]
1001367a:	4013      	ands	r3, r2
1001367c:	d005      	beq.n	1001368a <__swsetup_r+0xba>
1001367e:	2300      	movs	r3, #0
10013680:	60a3      	str	r3, [r4, #8]
10013682:	6963      	ldr	r3, [r4, #20]
10013684:	425b      	negs	r3, r3
10013686:	61a3      	str	r3, [r4, #24]
10013688:	e003      	b.n	10013692 <__swsetup_r+0xc2>
1001368a:	0792      	lsls	r2, r2, #30
1001368c:	d400      	bmi.n	10013690 <__swsetup_r+0xc0>
1001368e:	6963      	ldr	r3, [r4, #20]
10013690:	60a3      	str	r3, [r4, #8]
10013692:	2000      	movs	r0, #0
10013694:	6923      	ldr	r3, [r4, #16]
10013696:	4283      	cmp	r3, r0
10013698:	d107      	bne.n	100136aa <__swsetup_r+0xda>
1001369a:	220c      	movs	r2, #12
1001369c:	5ea3      	ldrsh	r3, [r4, r2]
1001369e:	061a      	lsls	r2, r3, #24
100136a0:	d503      	bpl.n	100136aa <__swsetup_r+0xda>
100136a2:	2240      	movs	r2, #64	; 0x40
100136a4:	4313      	orrs	r3, r2
100136a6:	81a3      	strh	r3, [r4, #12]
100136a8:	3801      	subs	r0, #1
100136aa:	bd70      	pop	{r4, r5, r6, pc}
100136ac:	10015360 	.word	0x10015360
100136b0:	10015230 	.word	0x10015230
100136b4:	10015250 	.word	0x10015250
100136b8:	10015270 	.word	0x10015270

100136bc <__sflush_r>:
100136bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100136be:	898a      	ldrh	r2, [r1, #12]
100136c0:	0005      	movs	r5, r0
100136c2:	000c      	movs	r4, r1
100136c4:	0713      	lsls	r3, r2, #28
100136c6:	d45a      	bmi.n	1001377e <__sflush_r+0xc2>
100136c8:	684b      	ldr	r3, [r1, #4]
100136ca:	2b00      	cmp	r3, #0
100136cc:	dc02      	bgt.n	100136d4 <__sflush_r+0x18>
100136ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100136d0:	2b00      	cmp	r3, #0
100136d2:	dd19      	ble.n	10013708 <__sflush_r+0x4c>
100136d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100136d6:	2f00      	cmp	r7, #0
100136d8:	d016      	beq.n	10013708 <__sflush_r+0x4c>
100136da:	2300      	movs	r3, #0
100136dc:	682e      	ldr	r6, [r5, #0]
100136de:	602b      	str	r3, [r5, #0]
100136e0:	2380      	movs	r3, #128	; 0x80
100136e2:	015b      	lsls	r3, r3, #5
100136e4:	401a      	ands	r2, r3
100136e6:	d001      	beq.n	100136ec <__sflush_r+0x30>
100136e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
100136ea:	e014      	b.n	10013716 <__sflush_r+0x5a>
100136ec:	2301      	movs	r3, #1
100136ee:	6a21      	ldr	r1, [r4, #32]
100136f0:	0028      	movs	r0, r5
100136f2:	47b8      	blx	r7
100136f4:	1c43      	adds	r3, r0, #1
100136f6:	d10e      	bne.n	10013716 <__sflush_r+0x5a>
100136f8:	682b      	ldr	r3, [r5, #0]
100136fa:	2b00      	cmp	r3, #0
100136fc:	d00b      	beq.n	10013716 <__sflush_r+0x5a>
100136fe:	2b1d      	cmp	r3, #29
10013700:	d001      	beq.n	10013706 <__sflush_r+0x4a>
10013702:	2b16      	cmp	r3, #22
10013704:	d102      	bne.n	1001370c <__sflush_r+0x50>
10013706:	602e      	str	r6, [r5, #0]
10013708:	2000      	movs	r0, #0
1001370a:	e05a      	b.n	100137c2 <__sflush_r+0x106>
1001370c:	2240      	movs	r2, #64	; 0x40
1001370e:	89a3      	ldrh	r3, [r4, #12]
10013710:	4313      	orrs	r3, r2
10013712:	81a3      	strh	r3, [r4, #12]
10013714:	e055      	b.n	100137c2 <__sflush_r+0x106>
10013716:	89a3      	ldrh	r3, [r4, #12]
10013718:	075b      	lsls	r3, r3, #29
1001371a:	d506      	bpl.n	1001372a <__sflush_r+0x6e>
1001371c:	6863      	ldr	r3, [r4, #4]
1001371e:	1ac0      	subs	r0, r0, r3
10013720:	6b63      	ldr	r3, [r4, #52]	; 0x34
10013722:	2b00      	cmp	r3, #0
10013724:	d001      	beq.n	1001372a <__sflush_r+0x6e>
10013726:	6c23      	ldr	r3, [r4, #64]	; 0x40
10013728:	1ac0      	subs	r0, r0, r3
1001372a:	2300      	movs	r3, #0
1001372c:	0002      	movs	r2, r0
1001372e:	6a21      	ldr	r1, [r4, #32]
10013730:	0028      	movs	r0, r5
10013732:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10013734:	47b8      	blx	r7
10013736:	89a3      	ldrh	r3, [r4, #12]
10013738:	1c42      	adds	r2, r0, #1
1001373a:	d106      	bne.n	1001374a <__sflush_r+0x8e>
1001373c:	6829      	ldr	r1, [r5, #0]
1001373e:	291d      	cmp	r1, #29
10013740:	d83a      	bhi.n	100137b8 <__sflush_r+0xfc>
10013742:	4a20      	ldr	r2, [pc, #128]	; (100137c4 <__sflush_r+0x108>)
10013744:	40ca      	lsrs	r2, r1
10013746:	07d2      	lsls	r2, r2, #31
10013748:	d536      	bpl.n	100137b8 <__sflush_r+0xfc>
1001374a:	2200      	movs	r2, #0
1001374c:	6062      	str	r2, [r4, #4]
1001374e:	6922      	ldr	r2, [r4, #16]
10013750:	6022      	str	r2, [r4, #0]
10013752:	04db      	lsls	r3, r3, #19
10013754:	d505      	bpl.n	10013762 <__sflush_r+0xa6>
10013756:	1c43      	adds	r3, r0, #1
10013758:	d102      	bne.n	10013760 <__sflush_r+0xa4>
1001375a:	682b      	ldr	r3, [r5, #0]
1001375c:	2b00      	cmp	r3, #0
1001375e:	d100      	bne.n	10013762 <__sflush_r+0xa6>
10013760:	6560      	str	r0, [r4, #84]	; 0x54
10013762:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013764:	602e      	str	r6, [r5, #0]
10013766:	2900      	cmp	r1, #0
10013768:	d0ce      	beq.n	10013708 <__sflush_r+0x4c>
1001376a:	0023      	movs	r3, r4
1001376c:	3344      	adds	r3, #68	; 0x44
1001376e:	4299      	cmp	r1, r3
10013770:	d002      	beq.n	10013778 <__sflush_r+0xbc>
10013772:	0028      	movs	r0, r5
10013774:	f000 f998 	bl	10013aa8 <_free_r>
10013778:	2000      	movs	r0, #0
1001377a:	6360      	str	r0, [r4, #52]	; 0x34
1001377c:	e021      	b.n	100137c2 <__sflush_r+0x106>
1001377e:	690f      	ldr	r7, [r1, #16]
10013780:	2f00      	cmp	r7, #0
10013782:	d0c1      	beq.n	10013708 <__sflush_r+0x4c>
10013784:	680b      	ldr	r3, [r1, #0]
10013786:	600f      	str	r7, [r1, #0]
10013788:	1bdb      	subs	r3, r3, r7
1001378a:	9301      	str	r3, [sp, #4]
1001378c:	2300      	movs	r3, #0
1001378e:	0792      	lsls	r2, r2, #30
10013790:	d100      	bne.n	10013794 <__sflush_r+0xd8>
10013792:	694b      	ldr	r3, [r1, #20]
10013794:	60a3      	str	r3, [r4, #8]
10013796:	e003      	b.n	100137a0 <__sflush_r+0xe4>
10013798:	9b01      	ldr	r3, [sp, #4]
1001379a:	183f      	adds	r7, r7, r0
1001379c:	1a1b      	subs	r3, r3, r0
1001379e:	9301      	str	r3, [sp, #4]
100137a0:	9b01      	ldr	r3, [sp, #4]
100137a2:	2b00      	cmp	r3, #0
100137a4:	ddb0      	ble.n	10013708 <__sflush_r+0x4c>
100137a6:	9b01      	ldr	r3, [sp, #4]
100137a8:	003a      	movs	r2, r7
100137aa:	6a21      	ldr	r1, [r4, #32]
100137ac:	0028      	movs	r0, r5
100137ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100137b0:	47b0      	blx	r6
100137b2:	2800      	cmp	r0, #0
100137b4:	dcf0      	bgt.n	10013798 <__sflush_r+0xdc>
100137b6:	89a3      	ldrh	r3, [r4, #12]
100137b8:	2240      	movs	r2, #64	; 0x40
100137ba:	2001      	movs	r0, #1
100137bc:	4313      	orrs	r3, r2
100137be:	81a3      	strh	r3, [r4, #12]
100137c0:	4240      	negs	r0, r0
100137c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100137c4:	20400001 	.word	0x20400001

100137c8 <_fflush_r>:
100137c8:	690b      	ldr	r3, [r1, #16]
100137ca:	b570      	push	{r4, r5, r6, lr}
100137cc:	0005      	movs	r5, r0
100137ce:	000c      	movs	r4, r1
100137d0:	2b00      	cmp	r3, #0
100137d2:	d101      	bne.n	100137d8 <_fflush_r+0x10>
100137d4:	2000      	movs	r0, #0
100137d6:	e01c      	b.n	10013812 <_fflush_r+0x4a>
100137d8:	2800      	cmp	r0, #0
100137da:	d004      	beq.n	100137e6 <_fflush_r+0x1e>
100137dc:	6983      	ldr	r3, [r0, #24]
100137de:	2b00      	cmp	r3, #0
100137e0:	d101      	bne.n	100137e6 <_fflush_r+0x1e>
100137e2:	f000 f85f 	bl	100138a4 <__sinit>
100137e6:	4b0b      	ldr	r3, [pc, #44]	; (10013814 <_fflush_r+0x4c>)
100137e8:	429c      	cmp	r4, r3
100137ea:	d101      	bne.n	100137f0 <_fflush_r+0x28>
100137ec:	686c      	ldr	r4, [r5, #4]
100137ee:	e008      	b.n	10013802 <_fflush_r+0x3a>
100137f0:	4b09      	ldr	r3, [pc, #36]	; (10013818 <_fflush_r+0x50>)
100137f2:	429c      	cmp	r4, r3
100137f4:	d101      	bne.n	100137fa <_fflush_r+0x32>
100137f6:	68ac      	ldr	r4, [r5, #8]
100137f8:	e003      	b.n	10013802 <_fflush_r+0x3a>
100137fa:	4b08      	ldr	r3, [pc, #32]	; (1001381c <_fflush_r+0x54>)
100137fc:	429c      	cmp	r4, r3
100137fe:	d100      	bne.n	10013802 <_fflush_r+0x3a>
10013800:	68ec      	ldr	r4, [r5, #12]
10013802:	220c      	movs	r2, #12
10013804:	5ea3      	ldrsh	r3, [r4, r2]
10013806:	2b00      	cmp	r3, #0
10013808:	d0e4      	beq.n	100137d4 <_fflush_r+0xc>
1001380a:	0021      	movs	r1, r4
1001380c:	0028      	movs	r0, r5
1001380e:	f7ff ff55 	bl	100136bc <__sflush_r>
10013812:	bd70      	pop	{r4, r5, r6, pc}
10013814:	10015230 	.word	0x10015230
10013818:	10015250 	.word	0x10015250
1001381c:	10015270 	.word	0x10015270

10013820 <_cleanup_r>:
10013820:	b510      	push	{r4, lr}
10013822:	4902      	ldr	r1, [pc, #8]	; (1001382c <_cleanup_r+0xc>)
10013824:	f000 f8b0 	bl	10013988 <_fwalk_reent>
10013828:	bd10      	pop	{r4, pc}
1001382a:	46c0      	nop			; (mov r8, r8)
1001382c:	100137c9 	.word	0x100137c9

10013830 <std.isra.0>:
10013830:	2300      	movs	r3, #0
10013832:	b510      	push	{r4, lr}
10013834:	0004      	movs	r4, r0
10013836:	6003      	str	r3, [r0, #0]
10013838:	6043      	str	r3, [r0, #4]
1001383a:	6083      	str	r3, [r0, #8]
1001383c:	8181      	strh	r1, [r0, #12]
1001383e:	6643      	str	r3, [r0, #100]	; 0x64
10013840:	81c2      	strh	r2, [r0, #14]
10013842:	6103      	str	r3, [r0, #16]
10013844:	6143      	str	r3, [r0, #20]
10013846:	6183      	str	r3, [r0, #24]
10013848:	0019      	movs	r1, r3
1001384a:	2208      	movs	r2, #8
1001384c:	305c      	adds	r0, #92	; 0x5c
1001384e:	f7ff fc66 	bl	1001311e <memset>
10013852:	4b05      	ldr	r3, [pc, #20]	; (10013868 <std.isra.0+0x38>)
10013854:	6224      	str	r4, [r4, #32]
10013856:	6263      	str	r3, [r4, #36]	; 0x24
10013858:	4b04      	ldr	r3, [pc, #16]	; (1001386c <std.isra.0+0x3c>)
1001385a:	62a3      	str	r3, [r4, #40]	; 0x28
1001385c:	4b04      	ldr	r3, [pc, #16]	; (10013870 <std.isra.0+0x40>)
1001385e:	62e3      	str	r3, [r4, #44]	; 0x2c
10013860:	4b04      	ldr	r3, [pc, #16]	; (10013874 <std.isra.0+0x44>)
10013862:	6323      	str	r3, [r4, #48]	; 0x30
10013864:	bd10      	pop	{r4, pc}
10013866:	46c0      	nop			; (mov r8, r8)
10013868:	10014219 	.word	0x10014219
1001386c:	10014241 	.word	0x10014241
10013870:	10014279 	.word	0x10014279
10013874:	100142a5 	.word	0x100142a5

10013878 <__sfmoreglue>:
10013878:	b570      	push	{r4, r5, r6, lr}
1001387a:	2568      	movs	r5, #104	; 0x68
1001387c:	1e4b      	subs	r3, r1, #1
1001387e:	435d      	muls	r5, r3
10013880:	000e      	movs	r6, r1
10013882:	0029      	movs	r1, r5
10013884:	3174      	adds	r1, #116	; 0x74
10013886:	f000 f955 	bl	10013b34 <_malloc_r>
1001388a:	1e04      	subs	r4, r0, #0
1001388c:	d008      	beq.n	100138a0 <__sfmoreglue+0x28>
1001388e:	2100      	movs	r1, #0
10013890:	002a      	movs	r2, r5
10013892:	6001      	str	r1, [r0, #0]
10013894:	6046      	str	r6, [r0, #4]
10013896:	300c      	adds	r0, #12
10013898:	60a0      	str	r0, [r4, #8]
1001389a:	3268      	adds	r2, #104	; 0x68
1001389c:	f7ff fc3f 	bl	1001311e <memset>
100138a0:	0020      	movs	r0, r4
100138a2:	bd70      	pop	{r4, r5, r6, pc}

100138a4 <__sinit>:
100138a4:	6983      	ldr	r3, [r0, #24]
100138a6:	b513      	push	{r0, r1, r4, lr}
100138a8:	0004      	movs	r4, r0
100138aa:	2b00      	cmp	r3, #0
100138ac:	d128      	bne.n	10013900 <__sinit+0x5c>
100138ae:	6483      	str	r3, [r0, #72]	; 0x48
100138b0:	64c3      	str	r3, [r0, #76]	; 0x4c
100138b2:	6503      	str	r3, [r0, #80]	; 0x50
100138b4:	4b13      	ldr	r3, [pc, #76]	; (10013904 <__sinit+0x60>)
100138b6:	4a14      	ldr	r2, [pc, #80]	; (10013908 <__sinit+0x64>)
100138b8:	681b      	ldr	r3, [r3, #0]
100138ba:	6282      	str	r2, [r0, #40]	; 0x28
100138bc:	9301      	str	r3, [sp, #4]
100138be:	4298      	cmp	r0, r3
100138c0:	d101      	bne.n	100138c6 <__sinit+0x22>
100138c2:	2301      	movs	r3, #1
100138c4:	6183      	str	r3, [r0, #24]
100138c6:	0020      	movs	r0, r4
100138c8:	f000 f820 	bl	1001390c <__sfp>
100138cc:	6060      	str	r0, [r4, #4]
100138ce:	0020      	movs	r0, r4
100138d0:	f000 f81c 	bl	1001390c <__sfp>
100138d4:	60a0      	str	r0, [r4, #8]
100138d6:	0020      	movs	r0, r4
100138d8:	f000 f818 	bl	1001390c <__sfp>
100138dc:	2200      	movs	r2, #0
100138de:	60e0      	str	r0, [r4, #12]
100138e0:	2104      	movs	r1, #4
100138e2:	6860      	ldr	r0, [r4, #4]
100138e4:	f7ff ffa4 	bl	10013830 <std.isra.0>
100138e8:	2201      	movs	r2, #1
100138ea:	2109      	movs	r1, #9
100138ec:	68a0      	ldr	r0, [r4, #8]
100138ee:	f7ff ff9f 	bl	10013830 <std.isra.0>
100138f2:	2202      	movs	r2, #2
100138f4:	2112      	movs	r1, #18
100138f6:	68e0      	ldr	r0, [r4, #12]
100138f8:	f7ff ff9a 	bl	10013830 <std.isra.0>
100138fc:	2301      	movs	r3, #1
100138fe:	61a3      	str	r3, [r4, #24]
10013900:	bd13      	pop	{r0, r1, r4, pc}
10013902:	46c0      	nop			; (mov r8, r8)
10013904:	10015204 	.word	0x10015204
10013908:	10013821 	.word	0x10013821

1001390c <__sfp>:
1001390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001390e:	4b1d      	ldr	r3, [pc, #116]	; (10013984 <__sfp+0x78>)
10013910:	0006      	movs	r6, r0
10013912:	681d      	ldr	r5, [r3, #0]
10013914:	69ab      	ldr	r3, [r5, #24]
10013916:	2b00      	cmp	r3, #0
10013918:	d102      	bne.n	10013920 <__sfp+0x14>
1001391a:	0028      	movs	r0, r5
1001391c:	f7ff ffc2 	bl	100138a4 <__sinit>
10013920:	3548      	adds	r5, #72	; 0x48
10013922:	68ac      	ldr	r4, [r5, #8]
10013924:	686b      	ldr	r3, [r5, #4]
10013926:	3b01      	subs	r3, #1
10013928:	d405      	bmi.n	10013936 <__sfp+0x2a>
1001392a:	220c      	movs	r2, #12
1001392c:	5ea7      	ldrsh	r7, [r4, r2]
1001392e:	2f00      	cmp	r7, #0
10013930:	d010      	beq.n	10013954 <__sfp+0x48>
10013932:	3468      	adds	r4, #104	; 0x68
10013934:	e7f7      	b.n	10013926 <__sfp+0x1a>
10013936:	682b      	ldr	r3, [r5, #0]
10013938:	2b00      	cmp	r3, #0
1001393a:	d001      	beq.n	10013940 <__sfp+0x34>
1001393c:	682d      	ldr	r5, [r5, #0]
1001393e:	e7f0      	b.n	10013922 <__sfp+0x16>
10013940:	2104      	movs	r1, #4
10013942:	0030      	movs	r0, r6
10013944:	f7ff ff98 	bl	10013878 <__sfmoreglue>
10013948:	6028      	str	r0, [r5, #0]
1001394a:	2800      	cmp	r0, #0
1001394c:	d1f6      	bne.n	1001393c <__sfp+0x30>
1001394e:	230c      	movs	r3, #12
10013950:	6033      	str	r3, [r6, #0]
10013952:	e016      	b.n	10013982 <__sfp+0x76>
10013954:	2301      	movs	r3, #1
10013956:	0020      	movs	r0, r4
10013958:	425b      	negs	r3, r3
1001395a:	81e3      	strh	r3, [r4, #14]
1001395c:	3302      	adds	r3, #2
1001395e:	81a3      	strh	r3, [r4, #12]
10013960:	6667      	str	r7, [r4, #100]	; 0x64
10013962:	6027      	str	r7, [r4, #0]
10013964:	60a7      	str	r7, [r4, #8]
10013966:	6067      	str	r7, [r4, #4]
10013968:	6127      	str	r7, [r4, #16]
1001396a:	6167      	str	r7, [r4, #20]
1001396c:	61a7      	str	r7, [r4, #24]
1001396e:	305c      	adds	r0, #92	; 0x5c
10013970:	2208      	movs	r2, #8
10013972:	0039      	movs	r1, r7
10013974:	f7ff fbd3 	bl	1001311e <memset>
10013978:	0020      	movs	r0, r4
1001397a:	6367      	str	r7, [r4, #52]	; 0x34
1001397c:	63a7      	str	r7, [r4, #56]	; 0x38
1001397e:	64a7      	str	r7, [r4, #72]	; 0x48
10013980:	64e7      	str	r7, [r4, #76]	; 0x4c
10013982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013984:	10015204 	.word	0x10015204

10013988 <_fwalk_reent>:
10013988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001398a:	0004      	movs	r4, r0
1001398c:	0007      	movs	r7, r0
1001398e:	2600      	movs	r6, #0
10013990:	9101      	str	r1, [sp, #4]
10013992:	3448      	adds	r4, #72	; 0x48
10013994:	2c00      	cmp	r4, #0
10013996:	d016      	beq.n	100139c6 <_fwalk_reent+0x3e>
10013998:	6863      	ldr	r3, [r4, #4]
1001399a:	68a5      	ldr	r5, [r4, #8]
1001399c:	9300      	str	r3, [sp, #0]
1001399e:	9b00      	ldr	r3, [sp, #0]
100139a0:	3b01      	subs	r3, #1
100139a2:	9300      	str	r3, [sp, #0]
100139a4:	d40d      	bmi.n	100139c2 <_fwalk_reent+0x3a>
100139a6:	89ab      	ldrh	r3, [r5, #12]
100139a8:	2b01      	cmp	r3, #1
100139aa:	d908      	bls.n	100139be <_fwalk_reent+0x36>
100139ac:	220e      	movs	r2, #14
100139ae:	5eab      	ldrsh	r3, [r5, r2]
100139b0:	3301      	adds	r3, #1
100139b2:	d004      	beq.n	100139be <_fwalk_reent+0x36>
100139b4:	0029      	movs	r1, r5
100139b6:	0038      	movs	r0, r7
100139b8:	9b01      	ldr	r3, [sp, #4]
100139ba:	4798      	blx	r3
100139bc:	4306      	orrs	r6, r0
100139be:	3568      	adds	r5, #104	; 0x68
100139c0:	e7ed      	b.n	1001399e <_fwalk_reent+0x16>
100139c2:	6824      	ldr	r4, [r4, #0]
100139c4:	e7e6      	b.n	10013994 <_fwalk_reent+0xc>
100139c6:	0030      	movs	r0, r6
100139c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100139cc <__swhatbuf_r>:
100139cc:	b570      	push	{r4, r5, r6, lr}
100139ce:	000e      	movs	r6, r1
100139d0:	001d      	movs	r5, r3
100139d2:	230e      	movs	r3, #14
100139d4:	5ec9      	ldrsh	r1, [r1, r3]
100139d6:	b090      	sub	sp, #64	; 0x40
100139d8:	0014      	movs	r4, r2
100139da:	2900      	cmp	r1, #0
100139dc:	da06      	bge.n	100139ec <__swhatbuf_r+0x20>
100139de:	2300      	movs	r3, #0
100139e0:	602b      	str	r3, [r5, #0]
100139e2:	89b3      	ldrh	r3, [r6, #12]
100139e4:	061b      	lsls	r3, r3, #24
100139e6:	d50f      	bpl.n	10013a08 <__swhatbuf_r+0x3c>
100139e8:	2340      	movs	r3, #64	; 0x40
100139ea:	e00f      	b.n	10013a0c <__swhatbuf_r+0x40>
100139ec:	aa01      	add	r2, sp, #4
100139ee:	f000 fc85 	bl	100142fc <_fstat_r>
100139f2:	2800      	cmp	r0, #0
100139f4:	dbf3      	blt.n	100139de <__swhatbuf_r+0x12>
100139f6:	23f0      	movs	r3, #240	; 0xf0
100139f8:	9a02      	ldr	r2, [sp, #8]
100139fa:	021b      	lsls	r3, r3, #8
100139fc:	4013      	ands	r3, r2
100139fe:	4a05      	ldr	r2, [pc, #20]	; (10013a14 <__swhatbuf_r+0x48>)
10013a00:	189b      	adds	r3, r3, r2
10013a02:	425a      	negs	r2, r3
10013a04:	4153      	adcs	r3, r2
10013a06:	602b      	str	r3, [r5, #0]
10013a08:	2380      	movs	r3, #128	; 0x80
10013a0a:	00db      	lsls	r3, r3, #3
10013a0c:	2000      	movs	r0, #0
10013a0e:	6023      	str	r3, [r4, #0]
10013a10:	b010      	add	sp, #64	; 0x40
10013a12:	bd70      	pop	{r4, r5, r6, pc}
10013a14:	ffffe000 	.word	0xffffe000

10013a18 <__smakebuf_r>:
10013a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013a1a:	2602      	movs	r6, #2
10013a1c:	898b      	ldrh	r3, [r1, #12]
10013a1e:	0005      	movs	r5, r0
10013a20:	000c      	movs	r4, r1
10013a22:	4233      	tst	r3, r6
10013a24:	d110      	bne.n	10013a48 <__smakebuf_r+0x30>
10013a26:	ab01      	add	r3, sp, #4
10013a28:	466a      	mov	r2, sp
10013a2a:	f7ff ffcf 	bl	100139cc <__swhatbuf_r>
10013a2e:	9900      	ldr	r1, [sp, #0]
10013a30:	0007      	movs	r7, r0
10013a32:	0028      	movs	r0, r5
10013a34:	f000 f87e 	bl	10013b34 <_malloc_r>
10013a38:	2800      	cmp	r0, #0
10013a3a:	d10c      	bne.n	10013a56 <__smakebuf_r+0x3e>
10013a3c:	220c      	movs	r2, #12
10013a3e:	5ea3      	ldrsh	r3, [r4, r2]
10013a40:	059a      	lsls	r2, r3, #22
10013a42:	d423      	bmi.n	10013a8c <__smakebuf_r+0x74>
10013a44:	4333      	orrs	r3, r6
10013a46:	81a3      	strh	r3, [r4, #12]
10013a48:	0023      	movs	r3, r4
10013a4a:	3347      	adds	r3, #71	; 0x47
10013a4c:	6023      	str	r3, [r4, #0]
10013a4e:	6123      	str	r3, [r4, #16]
10013a50:	2301      	movs	r3, #1
10013a52:	6163      	str	r3, [r4, #20]
10013a54:	e01a      	b.n	10013a8c <__smakebuf_r+0x74>
10013a56:	2280      	movs	r2, #128	; 0x80
10013a58:	4b0d      	ldr	r3, [pc, #52]	; (10013a90 <__smakebuf_r+0x78>)
10013a5a:	62ab      	str	r3, [r5, #40]	; 0x28
10013a5c:	89a3      	ldrh	r3, [r4, #12]
10013a5e:	6020      	str	r0, [r4, #0]
10013a60:	4313      	orrs	r3, r2
10013a62:	81a3      	strh	r3, [r4, #12]
10013a64:	9b00      	ldr	r3, [sp, #0]
10013a66:	6120      	str	r0, [r4, #16]
10013a68:	6163      	str	r3, [r4, #20]
10013a6a:	9b01      	ldr	r3, [sp, #4]
10013a6c:	2b00      	cmp	r3, #0
10013a6e:	d00a      	beq.n	10013a86 <__smakebuf_r+0x6e>
10013a70:	230e      	movs	r3, #14
10013a72:	5ee1      	ldrsh	r1, [r4, r3]
10013a74:	0028      	movs	r0, r5
10013a76:	f000 fc53 	bl	10014320 <_isatty_r>
10013a7a:	2800      	cmp	r0, #0
10013a7c:	d003      	beq.n	10013a86 <__smakebuf_r+0x6e>
10013a7e:	2201      	movs	r2, #1
10013a80:	89a3      	ldrh	r3, [r4, #12]
10013a82:	4313      	orrs	r3, r2
10013a84:	81a3      	strh	r3, [r4, #12]
10013a86:	89a3      	ldrh	r3, [r4, #12]
10013a88:	431f      	orrs	r7, r3
10013a8a:	81a7      	strh	r7, [r4, #12]
10013a8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10013a8e:	46c0      	nop			; (mov r8, r8)
10013a90:	10013821 	.word	0x10013821

10013a94 <malloc>:
10013a94:	b510      	push	{r4, lr}
10013a96:	4b03      	ldr	r3, [pc, #12]	; (10013aa4 <malloc+0x10>)
10013a98:	0001      	movs	r1, r0
10013a9a:	6818      	ldr	r0, [r3, #0]
10013a9c:	f000 f84a 	bl	10013b34 <_malloc_r>
10013aa0:	bd10      	pop	{r4, pc}
10013aa2:	46c0      	nop			; (mov r8, r8)
10013aa4:	10015360 	.word	0x10015360

10013aa8 <_free_r>:
10013aa8:	b530      	push	{r4, r5, lr}
10013aaa:	2900      	cmp	r1, #0
10013aac:	d03e      	beq.n	10013b2c <_free_r+0x84>
10013aae:	3904      	subs	r1, #4
10013ab0:	680b      	ldr	r3, [r1, #0]
10013ab2:	2b00      	cmp	r3, #0
10013ab4:	da00      	bge.n	10013ab8 <_free_r+0x10>
10013ab6:	18c9      	adds	r1, r1, r3
10013ab8:	4a1d      	ldr	r2, [pc, #116]	; (10013b30 <_free_r+0x88>)
10013aba:	6813      	ldr	r3, [r2, #0]
10013abc:	0014      	movs	r4, r2
10013abe:	2b00      	cmp	r3, #0
10013ac0:	d102      	bne.n	10013ac8 <_free_r+0x20>
10013ac2:	604b      	str	r3, [r1, #4]
10013ac4:	6011      	str	r1, [r2, #0]
10013ac6:	e031      	b.n	10013b2c <_free_r+0x84>
10013ac8:	428b      	cmp	r3, r1
10013aca:	d90d      	bls.n	10013ae8 <_free_r+0x40>
10013acc:	680a      	ldr	r2, [r1, #0]
10013ace:	1888      	adds	r0, r1, r2
10013ad0:	4283      	cmp	r3, r0
10013ad2:	d103      	bne.n	10013adc <_free_r+0x34>
10013ad4:	6818      	ldr	r0, [r3, #0]
10013ad6:	685b      	ldr	r3, [r3, #4]
10013ad8:	1882      	adds	r2, r0, r2
10013ada:	600a      	str	r2, [r1, #0]
10013adc:	604b      	str	r3, [r1, #4]
10013ade:	6021      	str	r1, [r4, #0]
10013ae0:	e024      	b.n	10013b2c <_free_r+0x84>
10013ae2:	428a      	cmp	r2, r1
10013ae4:	d803      	bhi.n	10013aee <_free_r+0x46>
10013ae6:	0013      	movs	r3, r2
10013ae8:	685a      	ldr	r2, [r3, #4]
10013aea:	2a00      	cmp	r2, #0
10013aec:	d1f9      	bne.n	10013ae2 <_free_r+0x3a>
10013aee:	681d      	ldr	r5, [r3, #0]
10013af0:	195c      	adds	r4, r3, r5
10013af2:	428c      	cmp	r4, r1
10013af4:	d10b      	bne.n	10013b0e <_free_r+0x66>
10013af6:	6809      	ldr	r1, [r1, #0]
10013af8:	1869      	adds	r1, r5, r1
10013afa:	1858      	adds	r0, r3, r1
10013afc:	6019      	str	r1, [r3, #0]
10013afe:	4282      	cmp	r2, r0
10013b00:	d114      	bne.n	10013b2c <_free_r+0x84>
10013b02:	6810      	ldr	r0, [r2, #0]
10013b04:	6852      	ldr	r2, [r2, #4]
10013b06:	1841      	adds	r1, r0, r1
10013b08:	6019      	str	r1, [r3, #0]
10013b0a:	605a      	str	r2, [r3, #4]
10013b0c:	e00e      	b.n	10013b2c <_free_r+0x84>
10013b0e:	428c      	cmp	r4, r1
10013b10:	d902      	bls.n	10013b18 <_free_r+0x70>
10013b12:	230c      	movs	r3, #12
10013b14:	6003      	str	r3, [r0, #0]
10013b16:	e009      	b.n	10013b2c <_free_r+0x84>
10013b18:	6808      	ldr	r0, [r1, #0]
10013b1a:	180c      	adds	r4, r1, r0
10013b1c:	42a2      	cmp	r2, r4
10013b1e:	d103      	bne.n	10013b28 <_free_r+0x80>
10013b20:	6814      	ldr	r4, [r2, #0]
10013b22:	6852      	ldr	r2, [r2, #4]
10013b24:	1820      	adds	r0, r4, r0
10013b26:	6008      	str	r0, [r1, #0]
10013b28:	604a      	str	r2, [r1, #4]
10013b2a:	6059      	str	r1, [r3, #4]
10013b2c:	bd30      	pop	{r4, r5, pc}
10013b2e:	46c0      	nop			; (mov r8, r8)
10013b30:	10016e34 	.word	0x10016e34

10013b34 <_malloc_r>:
10013b34:	2303      	movs	r3, #3
10013b36:	b570      	push	{r4, r5, r6, lr}
10013b38:	1ccd      	adds	r5, r1, #3
10013b3a:	439d      	bics	r5, r3
10013b3c:	3508      	adds	r5, #8
10013b3e:	0006      	movs	r6, r0
10013b40:	2d0c      	cmp	r5, #12
10013b42:	d201      	bcs.n	10013b48 <_malloc_r+0x14>
10013b44:	250c      	movs	r5, #12
10013b46:	e005      	b.n	10013b54 <_malloc_r+0x20>
10013b48:	2d00      	cmp	r5, #0
10013b4a:	da03      	bge.n	10013b54 <_malloc_r+0x20>
10013b4c:	230c      	movs	r3, #12
10013b4e:	2000      	movs	r0, #0
10013b50:	6033      	str	r3, [r6, #0]
10013b52:	e040      	b.n	10013bd6 <_malloc_r+0xa2>
10013b54:	42a9      	cmp	r1, r5
10013b56:	d8f9      	bhi.n	10013b4c <_malloc_r+0x18>
10013b58:	4b1f      	ldr	r3, [pc, #124]	; (10013bd8 <_malloc_r+0xa4>)
10013b5a:	681c      	ldr	r4, [r3, #0]
10013b5c:	001a      	movs	r2, r3
10013b5e:	0021      	movs	r1, r4
10013b60:	2900      	cmp	r1, #0
10013b62:	d013      	beq.n	10013b8c <_malloc_r+0x58>
10013b64:	680b      	ldr	r3, [r1, #0]
10013b66:	1b5b      	subs	r3, r3, r5
10013b68:	d40d      	bmi.n	10013b86 <_malloc_r+0x52>
10013b6a:	2b0b      	cmp	r3, #11
10013b6c:	d902      	bls.n	10013b74 <_malloc_r+0x40>
10013b6e:	600b      	str	r3, [r1, #0]
10013b70:	18cc      	adds	r4, r1, r3
10013b72:	e01e      	b.n	10013bb2 <_malloc_r+0x7e>
10013b74:	428c      	cmp	r4, r1
10013b76:	d102      	bne.n	10013b7e <_malloc_r+0x4a>
10013b78:	6863      	ldr	r3, [r4, #4]
10013b7a:	6013      	str	r3, [r2, #0]
10013b7c:	e01a      	b.n	10013bb4 <_malloc_r+0x80>
10013b7e:	684b      	ldr	r3, [r1, #4]
10013b80:	6063      	str	r3, [r4, #4]
10013b82:	000c      	movs	r4, r1
10013b84:	e016      	b.n	10013bb4 <_malloc_r+0x80>
10013b86:	000c      	movs	r4, r1
10013b88:	6849      	ldr	r1, [r1, #4]
10013b8a:	e7e9      	b.n	10013b60 <_malloc_r+0x2c>
10013b8c:	4c13      	ldr	r4, [pc, #76]	; (10013bdc <_malloc_r+0xa8>)
10013b8e:	6823      	ldr	r3, [r4, #0]
10013b90:	2b00      	cmp	r3, #0
10013b92:	d103      	bne.n	10013b9c <_malloc_r+0x68>
10013b94:	0030      	movs	r0, r6
10013b96:	f000 fb2d 	bl	100141f4 <_sbrk_r>
10013b9a:	6020      	str	r0, [r4, #0]
10013b9c:	0029      	movs	r1, r5
10013b9e:	0030      	movs	r0, r6
10013ba0:	f000 fb28 	bl	100141f4 <_sbrk_r>
10013ba4:	1c43      	adds	r3, r0, #1
10013ba6:	d0d1      	beq.n	10013b4c <_malloc_r+0x18>
10013ba8:	2303      	movs	r3, #3
10013baa:	1cc4      	adds	r4, r0, #3
10013bac:	439c      	bics	r4, r3
10013bae:	42a0      	cmp	r0, r4
10013bb0:	d10a      	bne.n	10013bc8 <_malloc_r+0x94>
10013bb2:	6025      	str	r5, [r4, #0]
10013bb4:	0020      	movs	r0, r4
10013bb6:	2207      	movs	r2, #7
10013bb8:	300b      	adds	r0, #11
10013bba:	1d23      	adds	r3, r4, #4
10013bbc:	4390      	bics	r0, r2
10013bbe:	1ac3      	subs	r3, r0, r3
10013bc0:	d009      	beq.n	10013bd6 <_malloc_r+0xa2>
10013bc2:	425a      	negs	r2, r3
10013bc4:	50e2      	str	r2, [r4, r3]
10013bc6:	e006      	b.n	10013bd6 <_malloc_r+0xa2>
10013bc8:	1a21      	subs	r1, r4, r0
10013bca:	0030      	movs	r0, r6
10013bcc:	f000 fb12 	bl	100141f4 <_sbrk_r>
10013bd0:	1c43      	adds	r3, r0, #1
10013bd2:	d1ee      	bne.n	10013bb2 <_malloc_r+0x7e>
10013bd4:	e7ba      	b.n	10013b4c <_malloc_r+0x18>
10013bd6:	bd70      	pop	{r4, r5, r6, pc}
10013bd8:	10016e34 	.word	0x10016e34
10013bdc:	10016e30 	.word	0x10016e30

10013be0 <__sfputc_r>:
10013be0:	6893      	ldr	r3, [r2, #8]
10013be2:	b510      	push	{r4, lr}
10013be4:	3b01      	subs	r3, #1
10013be6:	6093      	str	r3, [r2, #8]
10013be8:	2b00      	cmp	r3, #0
10013bea:	da05      	bge.n	10013bf8 <__sfputc_r+0x18>
10013bec:	6994      	ldr	r4, [r2, #24]
10013bee:	42a3      	cmp	r3, r4
10013bf0:	db08      	blt.n	10013c04 <__sfputc_r+0x24>
10013bf2:	b2cb      	uxtb	r3, r1
10013bf4:	2b0a      	cmp	r3, #10
10013bf6:	d005      	beq.n	10013c04 <__sfputc_r+0x24>
10013bf8:	6813      	ldr	r3, [r2, #0]
10013bfa:	1c58      	adds	r0, r3, #1
10013bfc:	6010      	str	r0, [r2, #0]
10013bfe:	7019      	strb	r1, [r3, #0]
10013c00:	b2c8      	uxtb	r0, r1
10013c02:	e001      	b.n	10013c08 <__sfputc_r+0x28>
10013c04:	f7ff fc8c 	bl	10013520 <__swbuf_r>
10013c08:	bd10      	pop	{r4, pc}

10013c0a <__sfputs_r>:
10013c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013c0c:	0006      	movs	r6, r0
10013c0e:	000f      	movs	r7, r1
10013c10:	0014      	movs	r4, r2
10013c12:	18d5      	adds	r5, r2, r3
10013c14:	42ac      	cmp	r4, r5
10013c16:	d008      	beq.n	10013c2a <__sfputs_r+0x20>
10013c18:	7821      	ldrb	r1, [r4, #0]
10013c1a:	003a      	movs	r2, r7
10013c1c:	0030      	movs	r0, r6
10013c1e:	f7ff ffdf 	bl	10013be0 <__sfputc_r>
10013c22:	3401      	adds	r4, #1
10013c24:	1c43      	adds	r3, r0, #1
10013c26:	d1f5      	bne.n	10013c14 <__sfputs_r+0xa>
10013c28:	e000      	b.n	10013c2c <__sfputs_r+0x22>
10013c2a:	2000      	movs	r0, #0
10013c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10013c30 <_vfiprintf_r>:
10013c30:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c32:	b09f      	sub	sp, #124	; 0x7c
10013c34:	0006      	movs	r6, r0
10013c36:	000f      	movs	r7, r1
10013c38:	9202      	str	r2, [sp, #8]
10013c3a:	9305      	str	r3, [sp, #20]
10013c3c:	2800      	cmp	r0, #0
10013c3e:	d004      	beq.n	10013c4a <_vfiprintf_r+0x1a>
10013c40:	6983      	ldr	r3, [r0, #24]
10013c42:	2b00      	cmp	r3, #0
10013c44:	d101      	bne.n	10013c4a <_vfiprintf_r+0x1a>
10013c46:	f7ff fe2d 	bl	100138a4 <__sinit>
10013c4a:	4b7f      	ldr	r3, [pc, #508]	; (10013e48 <_vfiprintf_r+0x218>)
10013c4c:	429f      	cmp	r7, r3
10013c4e:	d101      	bne.n	10013c54 <_vfiprintf_r+0x24>
10013c50:	6877      	ldr	r7, [r6, #4]
10013c52:	e008      	b.n	10013c66 <_vfiprintf_r+0x36>
10013c54:	4b7d      	ldr	r3, [pc, #500]	; (10013e4c <_vfiprintf_r+0x21c>)
10013c56:	429f      	cmp	r7, r3
10013c58:	d101      	bne.n	10013c5e <_vfiprintf_r+0x2e>
10013c5a:	68b7      	ldr	r7, [r6, #8]
10013c5c:	e003      	b.n	10013c66 <_vfiprintf_r+0x36>
10013c5e:	4b7c      	ldr	r3, [pc, #496]	; (10013e50 <_vfiprintf_r+0x220>)
10013c60:	429f      	cmp	r7, r3
10013c62:	d100      	bne.n	10013c66 <_vfiprintf_r+0x36>
10013c64:	68f7      	ldr	r7, [r6, #12]
10013c66:	89bb      	ldrh	r3, [r7, #12]
10013c68:	071b      	lsls	r3, r3, #28
10013c6a:	d50a      	bpl.n	10013c82 <_vfiprintf_r+0x52>
10013c6c:	693b      	ldr	r3, [r7, #16]
10013c6e:	2b00      	cmp	r3, #0
10013c70:	d007      	beq.n	10013c82 <_vfiprintf_r+0x52>
10013c72:	2300      	movs	r3, #0
10013c74:	ad06      	add	r5, sp, #24
10013c76:	616b      	str	r3, [r5, #20]
10013c78:	3320      	adds	r3, #32
10013c7a:	766b      	strb	r3, [r5, #25]
10013c7c:	3310      	adds	r3, #16
10013c7e:	76ab      	strb	r3, [r5, #26]
10013c80:	e03d      	b.n	10013cfe <_vfiprintf_r+0xce>
10013c82:	0039      	movs	r1, r7
10013c84:	0030      	movs	r0, r6
10013c86:	f7ff fca3 	bl	100135d0 <__swsetup_r>
10013c8a:	2800      	cmp	r0, #0
10013c8c:	d0f1      	beq.n	10013c72 <_vfiprintf_r+0x42>
10013c8e:	2001      	movs	r0, #1
10013c90:	4240      	negs	r0, r0
10013c92:	e0d6      	b.n	10013e42 <_vfiprintf_r+0x212>
10013c94:	9a05      	ldr	r2, [sp, #20]
10013c96:	1d11      	adds	r1, r2, #4
10013c98:	6812      	ldr	r2, [r2, #0]
10013c9a:	9105      	str	r1, [sp, #20]
10013c9c:	2a00      	cmp	r2, #0
10013c9e:	da00      	bge.n	10013ca2 <_vfiprintf_r+0x72>
10013ca0:	e07f      	b.n	10013da2 <_vfiprintf_r+0x172>
10013ca2:	9209      	str	r2, [sp, #36]	; 0x24
10013ca4:	3401      	adds	r4, #1
10013ca6:	7823      	ldrb	r3, [r4, #0]
10013ca8:	2b2e      	cmp	r3, #46	; 0x2e
10013caa:	d100      	bne.n	10013cae <_vfiprintf_r+0x7e>
10013cac:	e08d      	b.n	10013dca <_vfiprintf_r+0x19a>
10013cae:	7821      	ldrb	r1, [r4, #0]
10013cb0:	2203      	movs	r2, #3
10013cb2:	4868      	ldr	r0, [pc, #416]	; (10013e54 <_vfiprintf_r+0x224>)
10013cb4:	f000 fb5a 	bl	1001436c <memchr>
10013cb8:	2800      	cmp	r0, #0
10013cba:	d007      	beq.n	10013ccc <_vfiprintf_r+0x9c>
10013cbc:	4b65      	ldr	r3, [pc, #404]	; (10013e54 <_vfiprintf_r+0x224>)
10013cbe:	682a      	ldr	r2, [r5, #0]
10013cc0:	1ac0      	subs	r0, r0, r3
10013cc2:	2340      	movs	r3, #64	; 0x40
10013cc4:	4083      	lsls	r3, r0
10013cc6:	4313      	orrs	r3, r2
10013cc8:	602b      	str	r3, [r5, #0]
10013cca:	3401      	adds	r4, #1
10013ccc:	7821      	ldrb	r1, [r4, #0]
10013cce:	1c63      	adds	r3, r4, #1
10013cd0:	2206      	movs	r2, #6
10013cd2:	4861      	ldr	r0, [pc, #388]	; (10013e58 <_vfiprintf_r+0x228>)
10013cd4:	9302      	str	r3, [sp, #8]
10013cd6:	7629      	strb	r1, [r5, #24]
10013cd8:	f000 fb48 	bl	1001436c <memchr>
10013cdc:	2800      	cmp	r0, #0
10013cde:	d100      	bne.n	10013ce2 <_vfiprintf_r+0xb2>
10013ce0:	e09d      	b.n	10013e1e <_vfiprintf_r+0x1ee>
10013ce2:	4b5e      	ldr	r3, [pc, #376]	; (10013e5c <_vfiprintf_r+0x22c>)
10013ce4:	2b00      	cmp	r3, #0
10013ce6:	d000      	beq.n	10013cea <_vfiprintf_r+0xba>
10013ce8:	e090      	b.n	10013e0c <_vfiprintf_r+0x1dc>
10013cea:	2207      	movs	r2, #7
10013cec:	9b05      	ldr	r3, [sp, #20]
10013cee:	3307      	adds	r3, #7
10013cf0:	4393      	bics	r3, r2
10013cf2:	3308      	adds	r3, #8
10013cf4:	9305      	str	r3, [sp, #20]
10013cf6:	696b      	ldr	r3, [r5, #20]
10013cf8:	9a03      	ldr	r2, [sp, #12]
10013cfa:	189b      	adds	r3, r3, r2
10013cfc:	616b      	str	r3, [r5, #20]
10013cfe:	9c02      	ldr	r4, [sp, #8]
10013d00:	7823      	ldrb	r3, [r4, #0]
10013d02:	2b00      	cmp	r3, #0
10013d04:	d104      	bne.n	10013d10 <_vfiprintf_r+0xe0>
10013d06:	9b02      	ldr	r3, [sp, #8]
10013d08:	1ae3      	subs	r3, r4, r3
10013d0a:	9304      	str	r3, [sp, #16]
10013d0c:	d012      	beq.n	10013d34 <_vfiprintf_r+0x104>
10013d0e:	e003      	b.n	10013d18 <_vfiprintf_r+0xe8>
10013d10:	2b25      	cmp	r3, #37	; 0x25
10013d12:	d0f8      	beq.n	10013d06 <_vfiprintf_r+0xd6>
10013d14:	3401      	adds	r4, #1
10013d16:	e7f3      	b.n	10013d00 <_vfiprintf_r+0xd0>
10013d18:	9b04      	ldr	r3, [sp, #16]
10013d1a:	9a02      	ldr	r2, [sp, #8]
10013d1c:	0039      	movs	r1, r7
10013d1e:	0030      	movs	r0, r6
10013d20:	f7ff ff73 	bl	10013c0a <__sfputs_r>
10013d24:	1c43      	adds	r3, r0, #1
10013d26:	d100      	bne.n	10013d2a <_vfiprintf_r+0xfa>
10013d28:	e086      	b.n	10013e38 <_vfiprintf_r+0x208>
10013d2a:	696a      	ldr	r2, [r5, #20]
10013d2c:	9b04      	ldr	r3, [sp, #16]
10013d2e:	4694      	mov	ip, r2
10013d30:	4463      	add	r3, ip
10013d32:	616b      	str	r3, [r5, #20]
10013d34:	7823      	ldrb	r3, [r4, #0]
10013d36:	2b00      	cmp	r3, #0
10013d38:	d07e      	beq.n	10013e38 <_vfiprintf_r+0x208>
10013d3a:	2201      	movs	r2, #1
10013d3c:	2300      	movs	r3, #0
10013d3e:	4252      	negs	r2, r2
10013d40:	606a      	str	r2, [r5, #4]
10013d42:	a902      	add	r1, sp, #8
10013d44:	3254      	adds	r2, #84	; 0x54
10013d46:	1852      	adds	r2, r2, r1
10013d48:	3401      	adds	r4, #1
10013d4a:	602b      	str	r3, [r5, #0]
10013d4c:	60eb      	str	r3, [r5, #12]
10013d4e:	60ab      	str	r3, [r5, #8]
10013d50:	7013      	strb	r3, [r2, #0]
10013d52:	65ab      	str	r3, [r5, #88]	; 0x58
10013d54:	7821      	ldrb	r1, [r4, #0]
10013d56:	2205      	movs	r2, #5
10013d58:	4841      	ldr	r0, [pc, #260]	; (10013e60 <_vfiprintf_r+0x230>)
10013d5a:	f000 fb07 	bl	1001436c <memchr>
10013d5e:	2800      	cmp	r0, #0
10013d60:	d008      	beq.n	10013d74 <_vfiprintf_r+0x144>
10013d62:	4b3f      	ldr	r3, [pc, #252]	; (10013e60 <_vfiprintf_r+0x230>)
10013d64:	682a      	ldr	r2, [r5, #0]
10013d66:	1ac0      	subs	r0, r0, r3
10013d68:	2301      	movs	r3, #1
10013d6a:	4083      	lsls	r3, r0
10013d6c:	4313      	orrs	r3, r2
10013d6e:	602b      	str	r3, [r5, #0]
10013d70:	3401      	adds	r4, #1
10013d72:	e7ef      	b.n	10013d54 <_vfiprintf_r+0x124>
10013d74:	682b      	ldr	r3, [r5, #0]
10013d76:	06da      	lsls	r2, r3, #27
10013d78:	d504      	bpl.n	10013d84 <_vfiprintf_r+0x154>
10013d7a:	2253      	movs	r2, #83	; 0x53
10013d7c:	2120      	movs	r1, #32
10013d7e:	a802      	add	r0, sp, #8
10013d80:	1812      	adds	r2, r2, r0
10013d82:	7011      	strb	r1, [r2, #0]
10013d84:	071a      	lsls	r2, r3, #28
10013d86:	d504      	bpl.n	10013d92 <_vfiprintf_r+0x162>
10013d88:	2253      	movs	r2, #83	; 0x53
10013d8a:	212b      	movs	r1, #43	; 0x2b
10013d8c:	a802      	add	r0, sp, #8
10013d8e:	1812      	adds	r2, r2, r0
10013d90:	7011      	strb	r1, [r2, #0]
10013d92:	7822      	ldrb	r2, [r4, #0]
10013d94:	2a2a      	cmp	r2, #42	; 0x2a
10013d96:	d100      	bne.n	10013d9a <_vfiprintf_r+0x16a>
10013d98:	e77c      	b.n	10013c94 <_vfiprintf_r+0x64>
10013d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013d9c:	2000      	movs	r0, #0
10013d9e:	210a      	movs	r1, #10
10013da0:	e005      	b.n	10013dae <_vfiprintf_r+0x17e>
10013da2:	4252      	negs	r2, r2
10013da4:	60ea      	str	r2, [r5, #12]
10013da6:	2202      	movs	r2, #2
10013da8:	4313      	orrs	r3, r2
10013daa:	602b      	str	r3, [r5, #0]
10013dac:	e77a      	b.n	10013ca4 <_vfiprintf_r+0x74>
10013dae:	7822      	ldrb	r2, [r4, #0]
10013db0:	3a30      	subs	r2, #48	; 0x30
10013db2:	2a09      	cmp	r2, #9
10013db4:	d804      	bhi.n	10013dc0 <_vfiprintf_r+0x190>
10013db6:	434b      	muls	r3, r1
10013db8:	3401      	adds	r4, #1
10013dba:	189b      	adds	r3, r3, r2
10013dbc:	2001      	movs	r0, #1
10013dbe:	e7f6      	b.n	10013dae <_vfiprintf_r+0x17e>
10013dc0:	2800      	cmp	r0, #0
10013dc2:	d100      	bne.n	10013dc6 <_vfiprintf_r+0x196>
10013dc4:	e76f      	b.n	10013ca6 <_vfiprintf_r+0x76>
10013dc6:	9309      	str	r3, [sp, #36]	; 0x24
10013dc8:	e76d      	b.n	10013ca6 <_vfiprintf_r+0x76>
10013dca:	7863      	ldrb	r3, [r4, #1]
10013dcc:	2b2a      	cmp	r3, #42	; 0x2a
10013dce:	d10a      	bne.n	10013de6 <_vfiprintf_r+0x1b6>
10013dd0:	9b05      	ldr	r3, [sp, #20]
10013dd2:	3402      	adds	r4, #2
10013dd4:	1d1a      	adds	r2, r3, #4
10013dd6:	681b      	ldr	r3, [r3, #0]
10013dd8:	9205      	str	r2, [sp, #20]
10013dda:	2b00      	cmp	r3, #0
10013ddc:	da01      	bge.n	10013de2 <_vfiprintf_r+0x1b2>
10013dde:	2301      	movs	r3, #1
10013de0:	425b      	negs	r3, r3
10013de2:	9307      	str	r3, [sp, #28]
10013de4:	e763      	b.n	10013cae <_vfiprintf_r+0x7e>
10013de6:	2300      	movs	r3, #0
10013de8:	200a      	movs	r0, #10
10013dea:	001a      	movs	r2, r3
10013dec:	3401      	adds	r4, #1
10013dee:	606b      	str	r3, [r5, #4]
10013df0:	7821      	ldrb	r1, [r4, #0]
10013df2:	3930      	subs	r1, #48	; 0x30
10013df4:	2909      	cmp	r1, #9
10013df6:	d804      	bhi.n	10013e02 <_vfiprintf_r+0x1d2>
10013df8:	4342      	muls	r2, r0
10013dfa:	3401      	adds	r4, #1
10013dfc:	1852      	adds	r2, r2, r1
10013dfe:	2301      	movs	r3, #1
10013e00:	e7f6      	b.n	10013df0 <_vfiprintf_r+0x1c0>
10013e02:	2b00      	cmp	r3, #0
10013e04:	d100      	bne.n	10013e08 <_vfiprintf_r+0x1d8>
10013e06:	e752      	b.n	10013cae <_vfiprintf_r+0x7e>
10013e08:	9207      	str	r2, [sp, #28]
10013e0a:	e750      	b.n	10013cae <_vfiprintf_r+0x7e>
10013e0c:	ab05      	add	r3, sp, #20
10013e0e:	9300      	str	r3, [sp, #0]
10013e10:	003a      	movs	r2, r7
10013e12:	4b14      	ldr	r3, [pc, #80]	; (10013e64 <_vfiprintf_r+0x234>)
10013e14:	0029      	movs	r1, r5
10013e16:	0030      	movs	r0, r6
10013e18:	e000      	b.n	10013e1c <_vfiprintf_r+0x1ec>
10013e1a:	bf00      	nop
10013e1c:	e007      	b.n	10013e2e <_vfiprintf_r+0x1fe>
10013e1e:	ab05      	add	r3, sp, #20
10013e20:	9300      	str	r3, [sp, #0]
10013e22:	003a      	movs	r2, r7
10013e24:	4b0f      	ldr	r3, [pc, #60]	; (10013e64 <_vfiprintf_r+0x234>)
10013e26:	0029      	movs	r1, r5
10013e28:	0030      	movs	r0, r6
10013e2a:	f000 f88b 	bl	10013f44 <_printf_i>
10013e2e:	9003      	str	r0, [sp, #12]
10013e30:	9b03      	ldr	r3, [sp, #12]
10013e32:	3301      	adds	r3, #1
10013e34:	d000      	beq.n	10013e38 <_vfiprintf_r+0x208>
10013e36:	e75e      	b.n	10013cf6 <_vfiprintf_r+0xc6>
10013e38:	89bb      	ldrh	r3, [r7, #12]
10013e3a:	065b      	lsls	r3, r3, #25
10013e3c:	d500      	bpl.n	10013e40 <_vfiprintf_r+0x210>
10013e3e:	e726      	b.n	10013c8e <_vfiprintf_r+0x5e>
10013e40:	980b      	ldr	r0, [sp, #44]	; 0x2c
10013e42:	b01f      	add	sp, #124	; 0x7c
10013e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013e46:	46c0      	nop			; (mov r8, r8)
10013e48:	10015230 	.word	0x10015230
10013e4c:	10015250 	.word	0x10015250
10013e50:	10015270 	.word	0x10015270
10013e54:	10015296 	.word	0x10015296
10013e58:	1001529a 	.word	0x1001529a
10013e5c:	00000000 	.word	0x00000000
10013e60:	10015290 	.word	0x10015290
10013e64:	10013c0b 	.word	0x10013c0b

10013e68 <_printf_common>:
10013e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013e6a:	0017      	movs	r7, r2
10013e6c:	9301      	str	r3, [sp, #4]
10013e6e:	688a      	ldr	r2, [r1, #8]
10013e70:	690b      	ldr	r3, [r1, #16]
10013e72:	9000      	str	r0, [sp, #0]
10013e74:	000c      	movs	r4, r1
10013e76:	4293      	cmp	r3, r2
10013e78:	da00      	bge.n	10013e7c <_printf_common+0x14>
10013e7a:	0013      	movs	r3, r2
10013e7c:	0022      	movs	r2, r4
10013e7e:	603b      	str	r3, [r7, #0]
10013e80:	3243      	adds	r2, #67	; 0x43
10013e82:	7812      	ldrb	r2, [r2, #0]
10013e84:	2a00      	cmp	r2, #0
10013e86:	d001      	beq.n	10013e8c <_printf_common+0x24>
10013e88:	3301      	adds	r3, #1
10013e8a:	603b      	str	r3, [r7, #0]
10013e8c:	6823      	ldr	r3, [r4, #0]
10013e8e:	069b      	lsls	r3, r3, #26
10013e90:	d502      	bpl.n	10013e98 <_printf_common+0x30>
10013e92:	683b      	ldr	r3, [r7, #0]
10013e94:	3302      	adds	r3, #2
10013e96:	603b      	str	r3, [r7, #0]
10013e98:	2506      	movs	r5, #6
10013e9a:	6823      	ldr	r3, [r4, #0]
10013e9c:	401d      	ands	r5, r3
10013e9e:	d01e      	beq.n	10013ede <_printf_common+0x76>
10013ea0:	0023      	movs	r3, r4
10013ea2:	3343      	adds	r3, #67	; 0x43
10013ea4:	781b      	ldrb	r3, [r3, #0]
10013ea6:	1e5a      	subs	r2, r3, #1
10013ea8:	4193      	sbcs	r3, r2
10013eaa:	6822      	ldr	r2, [r4, #0]
10013eac:	0692      	lsls	r2, r2, #26
10013eae:	d51c      	bpl.n	10013eea <_printf_common+0x82>
10013eb0:	2030      	movs	r0, #48	; 0x30
10013eb2:	18e1      	adds	r1, r4, r3
10013eb4:	3143      	adds	r1, #67	; 0x43
10013eb6:	7008      	strb	r0, [r1, #0]
10013eb8:	0021      	movs	r1, r4
10013eba:	1c5a      	adds	r2, r3, #1
10013ebc:	3145      	adds	r1, #69	; 0x45
10013ebe:	7809      	ldrb	r1, [r1, #0]
10013ec0:	18a2      	adds	r2, r4, r2
10013ec2:	3243      	adds	r2, #67	; 0x43
10013ec4:	3302      	adds	r3, #2
10013ec6:	7011      	strb	r1, [r2, #0]
10013ec8:	e00f      	b.n	10013eea <_printf_common+0x82>
10013eca:	0022      	movs	r2, r4
10013ecc:	2301      	movs	r3, #1
10013ece:	3219      	adds	r2, #25
10013ed0:	9901      	ldr	r1, [sp, #4]
10013ed2:	9800      	ldr	r0, [sp, #0]
10013ed4:	9e08      	ldr	r6, [sp, #32]
10013ed6:	47b0      	blx	r6
10013ed8:	1c43      	adds	r3, r0, #1
10013eda:	d00e      	beq.n	10013efa <_printf_common+0x92>
10013edc:	3501      	adds	r5, #1
10013ede:	68e3      	ldr	r3, [r4, #12]
10013ee0:	683a      	ldr	r2, [r7, #0]
10013ee2:	1a9b      	subs	r3, r3, r2
10013ee4:	429d      	cmp	r5, r3
10013ee6:	dbf0      	blt.n	10013eca <_printf_common+0x62>
10013ee8:	e7da      	b.n	10013ea0 <_printf_common+0x38>
10013eea:	0022      	movs	r2, r4
10013eec:	9901      	ldr	r1, [sp, #4]
10013eee:	3243      	adds	r2, #67	; 0x43
10013ef0:	9800      	ldr	r0, [sp, #0]
10013ef2:	9d08      	ldr	r5, [sp, #32]
10013ef4:	47a8      	blx	r5
10013ef6:	1c43      	adds	r3, r0, #1
10013ef8:	d102      	bne.n	10013f00 <_printf_common+0x98>
10013efa:	2001      	movs	r0, #1
10013efc:	4240      	negs	r0, r0
10013efe:	e020      	b.n	10013f42 <_printf_common+0xda>
10013f00:	2306      	movs	r3, #6
10013f02:	6820      	ldr	r0, [r4, #0]
10013f04:	68e1      	ldr	r1, [r4, #12]
10013f06:	683a      	ldr	r2, [r7, #0]
10013f08:	4003      	ands	r3, r0
10013f0a:	2500      	movs	r5, #0
10013f0c:	2b04      	cmp	r3, #4
10013f0e:	d103      	bne.n	10013f18 <_printf_common+0xb0>
10013f10:	1a8d      	subs	r5, r1, r2
10013f12:	43eb      	mvns	r3, r5
10013f14:	17db      	asrs	r3, r3, #31
10013f16:	401d      	ands	r5, r3
10013f18:	68a3      	ldr	r3, [r4, #8]
10013f1a:	6922      	ldr	r2, [r4, #16]
10013f1c:	4293      	cmp	r3, r2
10013f1e:	dd01      	ble.n	10013f24 <_printf_common+0xbc>
10013f20:	1a9b      	subs	r3, r3, r2
10013f22:	18ed      	adds	r5, r5, r3
10013f24:	2700      	movs	r7, #0
10013f26:	42bd      	cmp	r5, r7
10013f28:	d00a      	beq.n	10013f40 <_printf_common+0xd8>
10013f2a:	0022      	movs	r2, r4
10013f2c:	2301      	movs	r3, #1
10013f2e:	321a      	adds	r2, #26
10013f30:	9901      	ldr	r1, [sp, #4]
10013f32:	9800      	ldr	r0, [sp, #0]
10013f34:	9e08      	ldr	r6, [sp, #32]
10013f36:	47b0      	blx	r6
10013f38:	1c43      	adds	r3, r0, #1
10013f3a:	d0de      	beq.n	10013efa <_printf_common+0x92>
10013f3c:	3701      	adds	r7, #1
10013f3e:	e7f2      	b.n	10013f26 <_printf_common+0xbe>
10013f40:	2000      	movs	r0, #0
10013f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10013f44 <_printf_i>:
10013f44:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f46:	b08b      	sub	sp, #44	; 0x2c
10013f48:	9206      	str	r2, [sp, #24]
10013f4a:	000a      	movs	r2, r1
10013f4c:	3243      	adds	r2, #67	; 0x43
10013f4e:	9307      	str	r3, [sp, #28]
10013f50:	9005      	str	r0, [sp, #20]
10013f52:	9204      	str	r2, [sp, #16]
10013f54:	7e0a      	ldrb	r2, [r1, #24]
10013f56:	000c      	movs	r4, r1
10013f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013f5a:	2a6e      	cmp	r2, #110	; 0x6e
10013f5c:	d100      	bne.n	10013f60 <_printf_i+0x1c>
10013f5e:	e0ab      	b.n	100140b8 <_printf_i+0x174>
10013f60:	d811      	bhi.n	10013f86 <_printf_i+0x42>
10013f62:	2a63      	cmp	r2, #99	; 0x63
10013f64:	d022      	beq.n	10013fac <_printf_i+0x68>
10013f66:	d809      	bhi.n	10013f7c <_printf_i+0x38>
10013f68:	2a00      	cmp	r2, #0
10013f6a:	d100      	bne.n	10013f6e <_printf_i+0x2a>
10013f6c:	e0b5      	b.n	100140da <_printf_i+0x196>
10013f6e:	2a58      	cmp	r2, #88	; 0x58
10013f70:	d000      	beq.n	10013f74 <_printf_i+0x30>
10013f72:	e0c5      	b.n	10014100 <_printf_i+0x1bc>
10013f74:	3145      	adds	r1, #69	; 0x45
10013f76:	700a      	strb	r2, [r1, #0]
10013f78:	4a81      	ldr	r2, [pc, #516]	; (10014180 <_printf_i+0x23c>)
10013f7a:	e04f      	b.n	1001401c <_printf_i+0xd8>
10013f7c:	2a64      	cmp	r2, #100	; 0x64
10013f7e:	d01d      	beq.n	10013fbc <_printf_i+0x78>
10013f80:	2a69      	cmp	r2, #105	; 0x69
10013f82:	d01b      	beq.n	10013fbc <_printf_i+0x78>
10013f84:	e0bc      	b.n	10014100 <_printf_i+0x1bc>
10013f86:	2a73      	cmp	r2, #115	; 0x73
10013f88:	d100      	bne.n	10013f8c <_printf_i+0x48>
10013f8a:	e0aa      	b.n	100140e2 <_printf_i+0x19e>
10013f8c:	d809      	bhi.n	10013fa2 <_printf_i+0x5e>
10013f8e:	2a6f      	cmp	r2, #111	; 0x6f
10013f90:	d029      	beq.n	10013fe6 <_printf_i+0xa2>
10013f92:	2a70      	cmp	r2, #112	; 0x70
10013f94:	d000      	beq.n	10013f98 <_printf_i+0x54>
10013f96:	e0b3      	b.n	10014100 <_printf_i+0x1bc>
10013f98:	2220      	movs	r2, #32
10013f9a:	6809      	ldr	r1, [r1, #0]
10013f9c:	430a      	orrs	r2, r1
10013f9e:	6022      	str	r2, [r4, #0]
10013fa0:	e037      	b.n	10014012 <_printf_i+0xce>
10013fa2:	2a75      	cmp	r2, #117	; 0x75
10013fa4:	d01f      	beq.n	10013fe6 <_printf_i+0xa2>
10013fa6:	2a78      	cmp	r2, #120	; 0x78
10013fa8:	d033      	beq.n	10014012 <_printf_i+0xce>
10013faa:	e0a9      	b.n	10014100 <_printf_i+0x1bc>
10013fac:	000e      	movs	r6, r1
10013fae:	681a      	ldr	r2, [r3, #0]
10013fb0:	3642      	adds	r6, #66	; 0x42
10013fb2:	1d11      	adds	r1, r2, #4
10013fb4:	6019      	str	r1, [r3, #0]
10013fb6:	6813      	ldr	r3, [r2, #0]
10013fb8:	7033      	strb	r3, [r6, #0]
10013fba:	e0a4      	b.n	10014106 <_printf_i+0x1c2>
10013fbc:	6821      	ldr	r1, [r4, #0]
10013fbe:	681a      	ldr	r2, [r3, #0]
10013fc0:	0608      	lsls	r0, r1, #24
10013fc2:	d406      	bmi.n	10013fd2 <_printf_i+0x8e>
10013fc4:	0649      	lsls	r1, r1, #25
10013fc6:	d504      	bpl.n	10013fd2 <_printf_i+0x8e>
10013fc8:	1d11      	adds	r1, r2, #4
10013fca:	6019      	str	r1, [r3, #0]
10013fcc:	2300      	movs	r3, #0
10013fce:	5ed5      	ldrsh	r5, [r2, r3]
10013fd0:	e002      	b.n	10013fd8 <_printf_i+0x94>
10013fd2:	1d11      	adds	r1, r2, #4
10013fd4:	6019      	str	r1, [r3, #0]
10013fd6:	6815      	ldr	r5, [r2, #0]
10013fd8:	2d00      	cmp	r5, #0
10013fda:	da3b      	bge.n	10014054 <_printf_i+0x110>
10013fdc:	232d      	movs	r3, #45	; 0x2d
10013fde:	9a04      	ldr	r2, [sp, #16]
10013fe0:	426d      	negs	r5, r5
10013fe2:	7013      	strb	r3, [r2, #0]
10013fe4:	e036      	b.n	10014054 <_printf_i+0x110>
10013fe6:	6821      	ldr	r1, [r4, #0]
10013fe8:	681a      	ldr	r2, [r3, #0]
10013fea:	0608      	lsls	r0, r1, #24
10013fec:	d406      	bmi.n	10013ffc <_printf_i+0xb8>
10013fee:	0649      	lsls	r1, r1, #25
10013ff0:	d504      	bpl.n	10013ffc <_printf_i+0xb8>
10013ff2:	6815      	ldr	r5, [r2, #0]
10013ff4:	1d11      	adds	r1, r2, #4
10013ff6:	6019      	str	r1, [r3, #0]
10013ff8:	b2ad      	uxth	r5, r5
10013ffa:	e002      	b.n	10014002 <_printf_i+0xbe>
10013ffc:	1d11      	adds	r1, r2, #4
10013ffe:	6019      	str	r1, [r3, #0]
10014000:	6815      	ldr	r5, [r2, #0]
10014002:	4b5f      	ldr	r3, [pc, #380]	; (10014180 <_printf_i+0x23c>)
10014004:	7e22      	ldrb	r2, [r4, #24]
10014006:	9303      	str	r3, [sp, #12]
10014008:	2708      	movs	r7, #8
1001400a:	2a6f      	cmp	r2, #111	; 0x6f
1001400c:	d01d      	beq.n	1001404a <_printf_i+0x106>
1001400e:	270a      	movs	r7, #10
10014010:	e01b      	b.n	1001404a <_printf_i+0x106>
10014012:	0022      	movs	r2, r4
10014014:	2178      	movs	r1, #120	; 0x78
10014016:	3245      	adds	r2, #69	; 0x45
10014018:	7011      	strb	r1, [r2, #0]
1001401a:	4a5a      	ldr	r2, [pc, #360]	; (10014184 <_printf_i+0x240>)
1001401c:	6819      	ldr	r1, [r3, #0]
1001401e:	9203      	str	r2, [sp, #12]
10014020:	1d08      	adds	r0, r1, #4
10014022:	6822      	ldr	r2, [r4, #0]
10014024:	6018      	str	r0, [r3, #0]
10014026:	680d      	ldr	r5, [r1, #0]
10014028:	0610      	lsls	r0, r2, #24
1001402a:	d402      	bmi.n	10014032 <_printf_i+0xee>
1001402c:	0650      	lsls	r0, r2, #25
1001402e:	d500      	bpl.n	10014032 <_printf_i+0xee>
10014030:	b2ad      	uxth	r5, r5
10014032:	07d3      	lsls	r3, r2, #31
10014034:	d502      	bpl.n	1001403c <_printf_i+0xf8>
10014036:	2320      	movs	r3, #32
10014038:	431a      	orrs	r2, r3
1001403a:	6022      	str	r2, [r4, #0]
1001403c:	2710      	movs	r7, #16
1001403e:	2d00      	cmp	r5, #0
10014040:	d103      	bne.n	1001404a <_printf_i+0x106>
10014042:	2320      	movs	r3, #32
10014044:	6822      	ldr	r2, [r4, #0]
10014046:	439a      	bics	r2, r3
10014048:	6022      	str	r2, [r4, #0]
1001404a:	0023      	movs	r3, r4
1001404c:	2200      	movs	r2, #0
1001404e:	3343      	adds	r3, #67	; 0x43
10014050:	701a      	strb	r2, [r3, #0]
10014052:	e002      	b.n	1001405a <_printf_i+0x116>
10014054:	270a      	movs	r7, #10
10014056:	4b4a      	ldr	r3, [pc, #296]	; (10014180 <_printf_i+0x23c>)
10014058:	9303      	str	r3, [sp, #12]
1001405a:	6863      	ldr	r3, [r4, #4]
1001405c:	60a3      	str	r3, [r4, #8]
1001405e:	2b00      	cmp	r3, #0
10014060:	db09      	blt.n	10014076 <_printf_i+0x132>
10014062:	2204      	movs	r2, #4
10014064:	6821      	ldr	r1, [r4, #0]
10014066:	4391      	bics	r1, r2
10014068:	6021      	str	r1, [r4, #0]
1001406a:	2d00      	cmp	r5, #0
1001406c:	d105      	bne.n	1001407a <_printf_i+0x136>
1001406e:	9e04      	ldr	r6, [sp, #16]
10014070:	2b00      	cmp	r3, #0
10014072:	d011      	beq.n	10014098 <_printf_i+0x154>
10014074:	e07b      	b.n	1001416e <_printf_i+0x22a>
10014076:	2d00      	cmp	r5, #0
10014078:	d079      	beq.n	1001416e <_printf_i+0x22a>
1001407a:	9e04      	ldr	r6, [sp, #16]
1001407c:	0028      	movs	r0, r5
1001407e:	0039      	movs	r1, r7
10014080:	f7fc fc1c 	bl	100108bc <__aeabi_uidivmod>
10014084:	9b03      	ldr	r3, [sp, #12]
10014086:	3e01      	subs	r6, #1
10014088:	5c5b      	ldrb	r3, [r3, r1]
1001408a:	0028      	movs	r0, r5
1001408c:	7033      	strb	r3, [r6, #0]
1001408e:	0039      	movs	r1, r7
10014090:	f7fc fb8e 	bl	100107b0 <__aeabi_uidiv>
10014094:	1e05      	subs	r5, r0, #0
10014096:	d1f1      	bne.n	1001407c <_printf_i+0x138>
10014098:	2f08      	cmp	r7, #8
1001409a:	d109      	bne.n	100140b0 <_printf_i+0x16c>
1001409c:	6823      	ldr	r3, [r4, #0]
1001409e:	07db      	lsls	r3, r3, #31
100140a0:	d506      	bpl.n	100140b0 <_printf_i+0x16c>
100140a2:	6863      	ldr	r3, [r4, #4]
100140a4:	6922      	ldr	r2, [r4, #16]
100140a6:	4293      	cmp	r3, r2
100140a8:	dc02      	bgt.n	100140b0 <_printf_i+0x16c>
100140aa:	2330      	movs	r3, #48	; 0x30
100140ac:	3e01      	subs	r6, #1
100140ae:	7033      	strb	r3, [r6, #0]
100140b0:	9b04      	ldr	r3, [sp, #16]
100140b2:	1b9b      	subs	r3, r3, r6
100140b4:	6123      	str	r3, [r4, #16]
100140b6:	e02b      	b.n	10014110 <_printf_i+0x1cc>
100140b8:	6809      	ldr	r1, [r1, #0]
100140ba:	681a      	ldr	r2, [r3, #0]
100140bc:	0608      	lsls	r0, r1, #24
100140be:	d407      	bmi.n	100140d0 <_printf_i+0x18c>
100140c0:	0649      	lsls	r1, r1, #25
100140c2:	d505      	bpl.n	100140d0 <_printf_i+0x18c>
100140c4:	1d11      	adds	r1, r2, #4
100140c6:	6019      	str	r1, [r3, #0]
100140c8:	6813      	ldr	r3, [r2, #0]
100140ca:	8aa2      	ldrh	r2, [r4, #20]
100140cc:	801a      	strh	r2, [r3, #0]
100140ce:	e004      	b.n	100140da <_printf_i+0x196>
100140d0:	1d11      	adds	r1, r2, #4
100140d2:	6019      	str	r1, [r3, #0]
100140d4:	6813      	ldr	r3, [r2, #0]
100140d6:	6962      	ldr	r2, [r4, #20]
100140d8:	601a      	str	r2, [r3, #0]
100140da:	2300      	movs	r3, #0
100140dc:	9e04      	ldr	r6, [sp, #16]
100140de:	6123      	str	r3, [r4, #16]
100140e0:	e016      	b.n	10014110 <_printf_i+0x1cc>
100140e2:	681a      	ldr	r2, [r3, #0]
100140e4:	1d11      	adds	r1, r2, #4
100140e6:	6019      	str	r1, [r3, #0]
100140e8:	6816      	ldr	r6, [r2, #0]
100140ea:	2100      	movs	r1, #0
100140ec:	6862      	ldr	r2, [r4, #4]
100140ee:	0030      	movs	r0, r6
100140f0:	f000 f93c 	bl	1001436c <memchr>
100140f4:	2800      	cmp	r0, #0
100140f6:	d001      	beq.n	100140fc <_printf_i+0x1b8>
100140f8:	1b80      	subs	r0, r0, r6
100140fa:	6060      	str	r0, [r4, #4]
100140fc:	6863      	ldr	r3, [r4, #4]
100140fe:	e003      	b.n	10014108 <_printf_i+0x1c4>
10014100:	0026      	movs	r6, r4
10014102:	3642      	adds	r6, #66	; 0x42
10014104:	7032      	strb	r2, [r6, #0]
10014106:	2301      	movs	r3, #1
10014108:	6123      	str	r3, [r4, #16]
1001410a:	2300      	movs	r3, #0
1001410c:	9a04      	ldr	r2, [sp, #16]
1001410e:	7013      	strb	r3, [r2, #0]
10014110:	9b07      	ldr	r3, [sp, #28]
10014112:	aa09      	add	r2, sp, #36	; 0x24
10014114:	9300      	str	r3, [sp, #0]
10014116:	0021      	movs	r1, r4
10014118:	9b06      	ldr	r3, [sp, #24]
1001411a:	9805      	ldr	r0, [sp, #20]
1001411c:	f7ff fea4 	bl	10013e68 <_printf_common>
10014120:	1c43      	adds	r3, r0, #1
10014122:	d102      	bne.n	1001412a <_printf_i+0x1e6>
10014124:	2001      	movs	r0, #1
10014126:	4240      	negs	r0, r0
10014128:	e027      	b.n	1001417a <_printf_i+0x236>
1001412a:	6923      	ldr	r3, [r4, #16]
1001412c:	0032      	movs	r2, r6
1001412e:	9906      	ldr	r1, [sp, #24]
10014130:	9805      	ldr	r0, [sp, #20]
10014132:	9d07      	ldr	r5, [sp, #28]
10014134:	47a8      	blx	r5
10014136:	1c43      	adds	r3, r0, #1
10014138:	d0f4      	beq.n	10014124 <_printf_i+0x1e0>
1001413a:	6823      	ldr	r3, [r4, #0]
1001413c:	2500      	movs	r5, #0
1001413e:	079b      	lsls	r3, r3, #30
10014140:	d40f      	bmi.n	10014162 <_printf_i+0x21e>
10014142:	9b09      	ldr	r3, [sp, #36]	; 0x24
10014144:	68e0      	ldr	r0, [r4, #12]
10014146:	4298      	cmp	r0, r3
10014148:	da17      	bge.n	1001417a <_printf_i+0x236>
1001414a:	0018      	movs	r0, r3
1001414c:	e015      	b.n	1001417a <_printf_i+0x236>
1001414e:	0022      	movs	r2, r4
10014150:	2301      	movs	r3, #1
10014152:	3219      	adds	r2, #25
10014154:	9906      	ldr	r1, [sp, #24]
10014156:	9805      	ldr	r0, [sp, #20]
10014158:	9e07      	ldr	r6, [sp, #28]
1001415a:	47b0      	blx	r6
1001415c:	1c43      	adds	r3, r0, #1
1001415e:	d0e1      	beq.n	10014124 <_printf_i+0x1e0>
10014160:	3501      	adds	r5, #1
10014162:	68e3      	ldr	r3, [r4, #12]
10014164:	9a09      	ldr	r2, [sp, #36]	; 0x24
10014166:	1a9b      	subs	r3, r3, r2
10014168:	429d      	cmp	r5, r3
1001416a:	dbf0      	blt.n	1001414e <_printf_i+0x20a>
1001416c:	e7e9      	b.n	10014142 <_printf_i+0x1fe>
1001416e:	0026      	movs	r6, r4
10014170:	9b03      	ldr	r3, [sp, #12]
10014172:	3642      	adds	r6, #66	; 0x42
10014174:	781b      	ldrb	r3, [r3, #0]
10014176:	7033      	strb	r3, [r6, #0]
10014178:	e78e      	b.n	10014098 <_printf_i+0x154>
1001417a:	b00b      	add	sp, #44	; 0x2c
1001417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001417e:	46c0      	nop			; (mov r8, r8)
10014180:	100152a1 	.word	0x100152a1
10014184:	100152b2 	.word	0x100152b2

10014188 <_putc_r>:
10014188:	b570      	push	{r4, r5, r6, lr}
1001418a:	0006      	movs	r6, r0
1001418c:	000d      	movs	r5, r1
1001418e:	0014      	movs	r4, r2
10014190:	2800      	cmp	r0, #0
10014192:	d004      	beq.n	1001419e <_putc_r+0x16>
10014194:	6983      	ldr	r3, [r0, #24]
10014196:	2b00      	cmp	r3, #0
10014198:	d101      	bne.n	1001419e <_putc_r+0x16>
1001419a:	f7ff fb83 	bl	100138a4 <__sinit>
1001419e:	4b12      	ldr	r3, [pc, #72]	; (100141e8 <_putc_r+0x60>)
100141a0:	429c      	cmp	r4, r3
100141a2:	d101      	bne.n	100141a8 <_putc_r+0x20>
100141a4:	6874      	ldr	r4, [r6, #4]
100141a6:	e008      	b.n	100141ba <_putc_r+0x32>
100141a8:	4b10      	ldr	r3, [pc, #64]	; (100141ec <_putc_r+0x64>)
100141aa:	429c      	cmp	r4, r3
100141ac:	d101      	bne.n	100141b2 <_putc_r+0x2a>
100141ae:	68b4      	ldr	r4, [r6, #8]
100141b0:	e003      	b.n	100141ba <_putc_r+0x32>
100141b2:	4b0f      	ldr	r3, [pc, #60]	; (100141f0 <_putc_r+0x68>)
100141b4:	429c      	cmp	r4, r3
100141b6:	d100      	bne.n	100141ba <_putc_r+0x32>
100141b8:	68f4      	ldr	r4, [r6, #12]
100141ba:	68a3      	ldr	r3, [r4, #8]
100141bc:	3b01      	subs	r3, #1
100141be:	60a3      	str	r3, [r4, #8]
100141c0:	2b00      	cmp	r3, #0
100141c2:	da05      	bge.n	100141d0 <_putc_r+0x48>
100141c4:	69a2      	ldr	r2, [r4, #24]
100141c6:	4293      	cmp	r3, r2
100141c8:	db08      	blt.n	100141dc <_putc_r+0x54>
100141ca:	b2eb      	uxtb	r3, r5
100141cc:	2b0a      	cmp	r3, #10
100141ce:	d005      	beq.n	100141dc <_putc_r+0x54>
100141d0:	6823      	ldr	r3, [r4, #0]
100141d2:	b2e8      	uxtb	r0, r5
100141d4:	1c5a      	adds	r2, r3, #1
100141d6:	6022      	str	r2, [r4, #0]
100141d8:	701d      	strb	r5, [r3, #0]
100141da:	e004      	b.n	100141e6 <_putc_r+0x5e>
100141dc:	0022      	movs	r2, r4
100141de:	0029      	movs	r1, r5
100141e0:	0030      	movs	r0, r6
100141e2:	f7ff f99d 	bl	10013520 <__swbuf_r>
100141e6:	bd70      	pop	{r4, r5, r6, pc}
100141e8:	10015230 	.word	0x10015230
100141ec:	10015250 	.word	0x10015250
100141f0:	10015270 	.word	0x10015270

100141f4 <_sbrk_r>:
100141f4:	2300      	movs	r3, #0
100141f6:	b570      	push	{r4, r5, r6, lr}
100141f8:	4c06      	ldr	r4, [pc, #24]	; (10014214 <_sbrk_r+0x20>)
100141fa:	0005      	movs	r5, r0
100141fc:	0008      	movs	r0, r1
100141fe:	6023      	str	r3, [r4, #0]
10014200:	f7f5 fa5c 	bl	100096bc <_sbrk>
10014204:	1c43      	adds	r3, r0, #1
10014206:	d103      	bne.n	10014210 <_sbrk_r+0x1c>
10014208:	6823      	ldr	r3, [r4, #0]
1001420a:	2b00      	cmp	r3, #0
1001420c:	d000      	beq.n	10014210 <_sbrk_r+0x1c>
1001420e:	602b      	str	r3, [r5, #0]
10014210:	bd70      	pop	{r4, r5, r6, pc}
10014212:	46c0      	nop			; (mov r8, r8)
10014214:	10018524 	.word	0x10018524

10014218 <__sread>:
10014218:	b570      	push	{r4, r5, r6, lr}
1001421a:	000c      	movs	r4, r1
1001421c:	250e      	movs	r5, #14
1001421e:	5f49      	ldrsh	r1, [r1, r5]
10014220:	f000 f8b0 	bl	10014384 <_read_r>
10014224:	2800      	cmp	r0, #0
10014226:	db03      	blt.n	10014230 <__sread+0x18>
10014228:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001422a:	181b      	adds	r3, r3, r0
1001422c:	6563      	str	r3, [r4, #84]	; 0x54
1001422e:	e003      	b.n	10014238 <__sread+0x20>
10014230:	89a2      	ldrh	r2, [r4, #12]
10014232:	4b02      	ldr	r3, [pc, #8]	; (1001423c <__sread+0x24>)
10014234:	4013      	ands	r3, r2
10014236:	81a3      	strh	r3, [r4, #12]
10014238:	bd70      	pop	{r4, r5, r6, pc}
1001423a:	46c0      	nop			; (mov r8, r8)
1001423c:	ffffefff 	.word	0xffffefff

10014240 <__swrite>:
10014240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014242:	001f      	movs	r7, r3
10014244:	898b      	ldrh	r3, [r1, #12]
10014246:	0005      	movs	r5, r0
10014248:	000c      	movs	r4, r1
1001424a:	0016      	movs	r6, r2
1001424c:	05db      	lsls	r3, r3, #23
1001424e:	d505      	bpl.n	1001425c <__swrite+0x1c>
10014250:	230e      	movs	r3, #14
10014252:	5ec9      	ldrsh	r1, [r1, r3]
10014254:	2200      	movs	r2, #0
10014256:	2302      	movs	r3, #2
10014258:	f000 f874 	bl	10014344 <_lseek_r>
1001425c:	89a2      	ldrh	r2, [r4, #12]
1001425e:	4b05      	ldr	r3, [pc, #20]	; (10014274 <__swrite+0x34>)
10014260:	0028      	movs	r0, r5
10014262:	4013      	ands	r3, r2
10014264:	81a3      	strh	r3, [r4, #12]
10014266:	0032      	movs	r2, r6
10014268:	230e      	movs	r3, #14
1001426a:	5ee1      	ldrsh	r1, [r4, r3]
1001426c:	003b      	movs	r3, r7
1001426e:	f000 f81f 	bl	100142b0 <_write_r>
10014272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014274:	ffffefff 	.word	0xffffefff

10014278 <__sseek>:
10014278:	b570      	push	{r4, r5, r6, lr}
1001427a:	000c      	movs	r4, r1
1001427c:	250e      	movs	r5, #14
1001427e:	5f49      	ldrsh	r1, [r1, r5]
10014280:	f000 f860 	bl	10014344 <_lseek_r>
10014284:	89a3      	ldrh	r3, [r4, #12]
10014286:	1c42      	adds	r2, r0, #1
10014288:	d103      	bne.n	10014292 <__sseek+0x1a>
1001428a:	4a05      	ldr	r2, [pc, #20]	; (100142a0 <__sseek+0x28>)
1001428c:	4013      	ands	r3, r2
1001428e:	81a3      	strh	r3, [r4, #12]
10014290:	e004      	b.n	1001429c <__sseek+0x24>
10014292:	2280      	movs	r2, #128	; 0x80
10014294:	0152      	lsls	r2, r2, #5
10014296:	4313      	orrs	r3, r2
10014298:	81a3      	strh	r3, [r4, #12]
1001429a:	6560      	str	r0, [r4, #84]	; 0x54
1001429c:	bd70      	pop	{r4, r5, r6, pc}
1001429e:	46c0      	nop			; (mov r8, r8)
100142a0:	ffffefff 	.word	0xffffefff

100142a4 <__sclose>:
100142a4:	b510      	push	{r4, lr}
100142a6:	230e      	movs	r3, #14
100142a8:	5ec9      	ldrsh	r1, [r1, r3]
100142aa:	f000 f815 	bl	100142d8 <_close_r>
100142ae:	bd10      	pop	{r4, pc}

100142b0 <_write_r>:
100142b0:	b570      	push	{r4, r5, r6, lr}
100142b2:	0005      	movs	r5, r0
100142b4:	0008      	movs	r0, r1
100142b6:	0011      	movs	r1, r2
100142b8:	2200      	movs	r2, #0
100142ba:	4c06      	ldr	r4, [pc, #24]	; (100142d4 <_write_r+0x24>)
100142bc:	6022      	str	r2, [r4, #0]
100142be:	001a      	movs	r2, r3
100142c0:	f7f5 f9d4 	bl	1000966c <_write>
100142c4:	1c43      	adds	r3, r0, #1
100142c6:	d103      	bne.n	100142d0 <_write_r+0x20>
100142c8:	6823      	ldr	r3, [r4, #0]
100142ca:	2b00      	cmp	r3, #0
100142cc:	d000      	beq.n	100142d0 <_write_r+0x20>
100142ce:	602b      	str	r3, [r5, #0]
100142d0:	bd70      	pop	{r4, r5, r6, pc}
100142d2:	46c0      	nop			; (mov r8, r8)
100142d4:	10018524 	.word	0x10018524

100142d8 <_close_r>:
100142d8:	2300      	movs	r3, #0
100142da:	b570      	push	{r4, r5, r6, lr}
100142dc:	4c06      	ldr	r4, [pc, #24]	; (100142f8 <_close_r+0x20>)
100142de:	0005      	movs	r5, r0
100142e0:	0008      	movs	r0, r1
100142e2:	6023      	str	r3, [r4, #0]
100142e4:	f7f5 f9fc 	bl	100096e0 <_close>
100142e8:	1c43      	adds	r3, r0, #1
100142ea:	d103      	bne.n	100142f4 <_close_r+0x1c>
100142ec:	6823      	ldr	r3, [r4, #0]
100142ee:	2b00      	cmp	r3, #0
100142f0:	d000      	beq.n	100142f4 <_close_r+0x1c>
100142f2:	602b      	str	r3, [r5, #0]
100142f4:	bd70      	pop	{r4, r5, r6, pc}
100142f6:	46c0      	nop			; (mov r8, r8)
100142f8:	10018524 	.word	0x10018524

100142fc <_fstat_r>:
100142fc:	2300      	movs	r3, #0
100142fe:	b570      	push	{r4, r5, r6, lr}
10014300:	4c06      	ldr	r4, [pc, #24]	; (1001431c <_fstat_r+0x20>)
10014302:	0005      	movs	r5, r0
10014304:	0008      	movs	r0, r1
10014306:	0011      	movs	r1, r2
10014308:	6023      	str	r3, [r4, #0]
1001430a:	f7f5 f9ed 	bl	100096e8 <_fstat>
1001430e:	1c43      	adds	r3, r0, #1
10014310:	d103      	bne.n	1001431a <_fstat_r+0x1e>
10014312:	6823      	ldr	r3, [r4, #0]
10014314:	2b00      	cmp	r3, #0
10014316:	d000      	beq.n	1001431a <_fstat_r+0x1e>
10014318:	602b      	str	r3, [r5, #0]
1001431a:	bd70      	pop	{r4, r5, r6, pc}
1001431c:	10018524 	.word	0x10018524

10014320 <_isatty_r>:
10014320:	2300      	movs	r3, #0
10014322:	b570      	push	{r4, r5, r6, lr}
10014324:	4c06      	ldr	r4, [pc, #24]	; (10014340 <_isatty_r+0x20>)
10014326:	0005      	movs	r5, r0
10014328:	0008      	movs	r0, r1
1001432a:	6023      	str	r3, [r4, #0]
1001432c:	f7f5 f9e2 	bl	100096f4 <_isatty>
10014330:	1c43      	adds	r3, r0, #1
10014332:	d103      	bne.n	1001433c <_isatty_r+0x1c>
10014334:	6823      	ldr	r3, [r4, #0]
10014336:	2b00      	cmp	r3, #0
10014338:	d000      	beq.n	1001433c <_isatty_r+0x1c>
1001433a:	602b      	str	r3, [r5, #0]
1001433c:	bd70      	pop	{r4, r5, r6, pc}
1001433e:	46c0      	nop			; (mov r8, r8)
10014340:	10018524 	.word	0x10018524

10014344 <_lseek_r>:
10014344:	b570      	push	{r4, r5, r6, lr}
10014346:	0005      	movs	r5, r0
10014348:	0008      	movs	r0, r1
1001434a:	0011      	movs	r1, r2
1001434c:	2200      	movs	r2, #0
1001434e:	4c06      	ldr	r4, [pc, #24]	; (10014368 <_lseek_r+0x24>)
10014350:	6022      	str	r2, [r4, #0]
10014352:	001a      	movs	r2, r3
10014354:	f7f5 f9d0 	bl	100096f8 <_lseek>
10014358:	1c43      	adds	r3, r0, #1
1001435a:	d103      	bne.n	10014364 <_lseek_r+0x20>
1001435c:	6823      	ldr	r3, [r4, #0]
1001435e:	2b00      	cmp	r3, #0
10014360:	d000      	beq.n	10014364 <_lseek_r+0x20>
10014362:	602b      	str	r3, [r5, #0]
10014364:	bd70      	pop	{r4, r5, r6, pc}
10014366:	46c0      	nop			; (mov r8, r8)
10014368:	10018524 	.word	0x10018524

1001436c <memchr>:
1001436c:	b2c9      	uxtb	r1, r1
1001436e:	1882      	adds	r2, r0, r2
10014370:	4290      	cmp	r0, r2
10014372:	d004      	beq.n	1001437e <memchr+0x12>
10014374:	7803      	ldrb	r3, [r0, #0]
10014376:	428b      	cmp	r3, r1
10014378:	d002      	beq.n	10014380 <memchr+0x14>
1001437a:	3001      	adds	r0, #1
1001437c:	e7f8      	b.n	10014370 <memchr+0x4>
1001437e:	2000      	movs	r0, #0
10014380:	4770      	bx	lr
	...

10014384 <_read_r>:
10014384:	b570      	push	{r4, r5, r6, lr}
10014386:	0005      	movs	r5, r0
10014388:	0008      	movs	r0, r1
1001438a:	0011      	movs	r1, r2
1001438c:	2200      	movs	r2, #0
1001438e:	4c06      	ldr	r4, [pc, #24]	; (100143a8 <_read_r+0x24>)
10014390:	6022      	str	r2, [r4, #0]
10014392:	001a      	movs	r2, r3
10014394:	f7f5 f94a 	bl	1000962c <_read>
10014398:	1c43      	adds	r3, r0, #1
1001439a:	d103      	bne.n	100143a4 <_read_r+0x20>
1001439c:	6823      	ldr	r3, [r4, #0]
1001439e:	2b00      	cmp	r3, #0
100143a0:	d000      	beq.n	100143a4 <_read_r+0x20>
100143a2:	602b      	str	r3, [r5, #0]
100143a4:	bd70      	pop	{r4, r5, r6, pc}
100143a6:	46c0      	nop			; (mov r8, r8)
100143a8:	10018524 	.word	0x10018524

100143ac <__aeabi_lmul>:
100143ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100143ae:	464f      	mov	r7, r9
100143b0:	4646      	mov	r6, r8
100143b2:	b4c0      	push	{r6, r7}
100143b4:	0416      	lsls	r6, r2, #16
100143b6:	0c36      	lsrs	r6, r6, #16
100143b8:	4699      	mov	r9, r3
100143ba:	0033      	movs	r3, r6
100143bc:	0405      	lsls	r5, r0, #16
100143be:	0c2c      	lsrs	r4, r5, #16
100143c0:	0c07      	lsrs	r7, r0, #16
100143c2:	0c15      	lsrs	r5, r2, #16
100143c4:	4363      	muls	r3, r4
100143c6:	437e      	muls	r6, r7
100143c8:	436f      	muls	r7, r5
100143ca:	4365      	muls	r5, r4
100143cc:	0c1c      	lsrs	r4, r3, #16
100143ce:	19ad      	adds	r5, r5, r6
100143d0:	1964      	adds	r4, r4, r5
100143d2:	469c      	mov	ip, r3
100143d4:	42a6      	cmp	r6, r4
100143d6:	d903      	bls.n	100143e0 <__aeabi_lmul+0x34>
100143d8:	2380      	movs	r3, #128	; 0x80
100143da:	025b      	lsls	r3, r3, #9
100143dc:	4698      	mov	r8, r3
100143de:	4447      	add	r7, r8
100143e0:	4663      	mov	r3, ip
100143e2:	0c25      	lsrs	r5, r4, #16
100143e4:	19ef      	adds	r7, r5, r7
100143e6:	041d      	lsls	r5, r3, #16
100143e8:	464b      	mov	r3, r9
100143ea:	434a      	muls	r2, r1
100143ec:	4343      	muls	r3, r0
100143ee:	0c2d      	lsrs	r5, r5, #16
100143f0:	0424      	lsls	r4, r4, #16
100143f2:	1964      	adds	r4, r4, r5
100143f4:	1899      	adds	r1, r3, r2
100143f6:	19c9      	adds	r1, r1, r7
100143f8:	0020      	movs	r0, r4
100143fa:	bc0c      	pop	{r2, r3}
100143fc:	4690      	mov	r8, r2
100143fe:	4699      	mov	r9, r3
10014400:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014402:	46c0      	nop			; (mov r8, r8)
10014404:	10008948 	.word	0x10008948
10014408:	10008956 	.word	0x10008956
1001440c:	10008964 	.word	0x10008964
10014410:	10008972 	.word	0x10008972
10014414:	10008980 	.word	0x10008980
10014418:	1000898e 	.word	0x1000898e
1001441c:	1000899c 	.word	0x1000899c
10014420:	100089ac 	.word	0x100089ac
10014424:	100089bc 	.word	0x100089bc
10014428:	100089cc 	.word	0x100089cc
1001442c:	100089dc 	.word	0x100089dc
10014430:	100089ec 	.word	0x100089ec
10014434:	100089fc 	.word	0x100089fc
10014438:	10008a0c 	.word	0x10008a0c
1001443c:	10008a1c 	.word	0x10008a1c
10014440:	10008a2c 	.word	0x10008a2c
10014444:	10008a3c 	.word	0x10008a3c
10014448:	10008a4c 	.word	0x10008a4c
1001444c:	10008a5c 	.word	0x10008a5c
10014450:	10008a6c 	.word	0x10008a6c
10014454:	10008a7c 	.word	0x10008a7c
10014458:	10008a8c 	.word	0x10008a8c
1001445c:	10008a9c 	.word	0x10008a9c
10014460:	10008aac 	.word	0x10008aac
10014464:	10008abc 	.word	0x10008abc
10014468:	10008acc 	.word	0x10008acc
1001446c:	10008adc 	.word	0x10008adc
10014470:	10008aec 	.word	0x10008aec
10014474:	10008afa 	.word	0x10008afa
10014478:	10008b08 	.word	0x10008b08
1001447c:	10008b16 	.word	0x10008b16
10014480:	10008b24 	.word	0x10008b24
10014484:	10008b32 	.word	0x10008b32
10014488:	10008b40 	.word	0x10008b40
1001448c:	10008b4e 	.word	0x10008b4e
10014490:	10008b5c 	.word	0x10008b5c
10014494:	10008b6c 	.word	0x10008b6c
10014498:	10008b7c 	.word	0x10008b7c
1001449c:	10008b8c 	.word	0x10008b8c
100144a0:	10008b9c 	.word	0x10008b9c
100144a4:	10008bac 	.word	0x10008bac
100144a8:	10008bbc 	.word	0x10008bbc
100144ac:	10008bcc 	.word	0x10008bcc
100144b0:	10008bdc 	.word	0x10008bdc
100144b4:	10008bec 	.word	0x10008bec
100144b8:	10008bfc 	.word	0x10008bfc
100144bc:	10008c0c 	.word	0x10008c0c
100144c0:	10008c1c 	.word	0x10008c1c
100144c4:	10008c2c 	.word	0x10008c2c
100144c8:	10008c3c 	.word	0x10008c3c
100144cc:	10008c4c 	.word	0x10008c4c
100144d0:	10008c5c 	.word	0x10008c5c
100144d4:	10008c6a 	.word	0x10008c6a
100144d8:	10008c78 	.word	0x10008c78
100144dc:	10008cb8 	.word	0x10008cb8
100144e0:	10008ce0 	.word	0x10008ce0
100144e4:	10008d08 	.word	0x10008d08
100144e8:	10008d30 	.word	0x10008d30
100144ec:	10008f70 	.word	0x10008f70
100144f0:	10008d60 	.word	0x10008d60
100144f4:	10008d78 	.word	0x10008d78
100144f8:	10008df0 	.word	0x10008df0
100144fc:	10008e08 	.word	0x10008e08
10014500:	10008d90 	.word	0x10008d90
10014504:	10008da8 	.word	0x10008da8
10014508:	10008dc0 	.word	0x10008dc0
1001450c:	10008dd8 	.word	0x10008dd8
10014510:	10008e20 	.word	0x10008e20
10014514:	100090e4 	.word	0x100090e4
10014518:	100090e4 	.word	0x100090e4
1001451c:	100090e4 	.word	0x100090e4
10014520:	100090e4 	.word	0x100090e4
10014524:	100090e4 	.word	0x100090e4
10014528:	100090e4 	.word	0x100090e4
1001452c:	100090e4 	.word	0x100090e4
10014530:	100090e4 	.word	0x100090e4
10014534:	10008ec8 	.word	0x10008ec8
10014538:	10008ee0 	.word	0x10008ee0
1001453c:	10008ef8 	.word	0x10008ef8
10014540:	10008f86 	.word	0x10008f86
10014544:	10008e50 	.word	0x10008e50
10014548:	100090e4 	.word	0x100090e4
1001454c:	100090e4 	.word	0x100090e4
10014550:	100090e4 	.word	0x100090e4
10014554:	100090e4 	.word	0x100090e4
10014558:	100090e4 	.word	0x100090e4
1001455c:	100090e4 	.word	0x100090e4
10014560:	10008f10 	.word	0x10008f10
10014564:	10008f28 	.word	0x10008f28
10014568:	10008f40 	.word	0x10008f40
1001456c:	10008f58 	.word	0x10008f58
10014570:	100090e4 	.word	0x100090e4
10014574:	1000909c 	.word	0x1000909c
10014578:	100090b4 	.word	0x100090b4
1001457c:	100090e4 	.word	0x100090e4
10014580:	100090e4 	.word	0x100090e4
10014584:	10008fb2 	.word	0x10008fb2
10014588:	10008fc8 	.word	0x10008fc8
1001458c:	10008fde 	.word	0x10008fde
10014590:	10008ff4 	.word	0x10008ff4
10014594:	100090e4 	.word	0x100090e4
10014598:	100090e4 	.word	0x100090e4
1001459c:	100090e4 	.word	0x100090e4
100145a0:	100090e4 	.word	0x100090e4
100145a4:	100090e4 	.word	0x100090e4
100145a8:	100090e4 	.word	0x100090e4
100145ac:	100090e4 	.word	0x100090e4
100145b0:	100090e4 	.word	0x100090e4
100145b4:	10008ca4 	.word	0x10008ca4
100145b8:	10008ccc 	.word	0x10008ccc
100145bc:	10008cf4 	.word	0x10008cf4
100145c0:	10008d1c 	.word	0x10008d1c
100145c4:	10008d48 	.word	0x10008d48
100145c8:	10008e38 	.word	0x10008e38
100145cc:	10008e68 	.word	0x10008e68
100145d0:	10008e80 	.word	0x10008e80
100145d4:	10008e98 	.word	0x10008e98
100145d8:	10008eb0 	.word	0x10008eb0
100145dc:	10008f9c 	.word	0x10008f9c
100145e0:	1000900a 	.word	0x1000900a
100145e4:	10009084 	.word	0x10009084
100145e8:	100090cc 	.word	0x100090cc
100145ec:	a5d5c51b 	.word	0xa5d5c51b
100145f0:	85a60002 	.word	0x85a60002
100145f4:	393511e5 	.word	0x393511e5
100145f8:	fd5abba0 	.word	0xfd5abba0
100145fc:	00000000 	.word	0x00000000

10014600 <csc_gatt_client_handle>:
10014600:	10009711 00000000 10009729 10009741     ........)...A...
10014610:	1000981d 00000000 00000000 00000000     ................
10014620:	10009759 00000000                       Y.......

10014628 <csc_gap_handle>:
	...
1001463c:	100097a1 100096fd 00000000 00000000     ................
1001464c:	100098b5 00000000 00000000 00000000     ................
1001465c:	00000000 100098b5 00000000 00000000     ................
	...
10014674:	0000000d 6c696146 74206465 7473206f     ....Failed to st
10014684:	20747261 76726573 20656369 63736964     art service disc
10014694:	7265766f 73202e79 75746174 203d2073     overy. status = 
100146a4:	00006425 6c696146 206f7420 72617473     %d..Fail to star
100146b4:	69642074 766f6373 63207265 61726168     t discover chara
100146c4:	72657463 69747369 00000063 63736544     cteristic...Desc
100146d4:	74706972 4420726f 6f637369 79726576     riptor Discovery
100146e4:	69614620 0064656c 61460a0d 64656c69      Failed...Failed
100146f4:	206f7420 646e6573 61686320 74636172      to send charact
10014704:	73697265 20636974 74697257 65522065     eristic Write Re
10014714:	73657571 00000074 65766441 73697472     quest...Advertis
10014724:	6e656d65 61642074 73206174 66207465     ement data set f
10014734:	656c6961 65722064 6e6f7361 00642520     ailed reason %d.
10014744:	69766544 53206563 74726174 41206465     Device Started A
10014754:	72657664 65736974 746e656d 00000000     dvertisement....
10014764:	69766544 41206563 72657664 65736974     Device Advertise
10014774:	746e656d 69614620 0064656c              ment Failed.

10014780 <csc_gatt_server_handle>:
10014780:	1000970d 00000000 1000979d 00000000     ................
	...
100147a8:	10009ae4 10009ae6 10009acc 10009acc     ................
100147b8:	10009acc 10009ae4 10009acc 10009acc     ................
100147c8:	1000a332 1000a3a6 1000a31a 1000a3ac     2...............
100147d8:	1000a320 1000a326 1000a32c 1000aa04      ...&...,.......
100147e8:	1000aa04 1000aa04 1000aa04 1000aa04     ................
100147f8:	1000aa04 1000aa04 1000aa04 1000aa04     ................
10014808:	1000aa04 1000aa04 1000aa04 1000aa04     ................
10014818:	1000aa04 1000aa04 1000aa04 1000aa04     ................
10014828:	1000aa04 1000aa04 1000aa22 1000aa22     ........"..."...
10014838:	1000aa22 1000aa22 1000aa22 1000aa22     "..."..."..."...
10014848:	1000aa22 1000aa22 1000aa22 1000aa22     "..."..."..."...
10014858:	1000aa44 1000aa44 1000aa44 1000aa44     D...D...D...D...
10014868:	1000aa44 1000aa44 1000aa44 1000aa44     D...D...D...D...
10014878:	1000aa44 1000aa44 1000aa66 1000aa66     D...D...f...f...
10014888:	1000aa66 1000aa66 1000aa66 1000aa66     f...f...f...f...
10014898:	1000aa80 1000aa80 1000aa80 1000aa80     ................
100148a8:	1000aa80 1000aa80 1000aa80 1000aa80     ................
100148b8:	1000aa80 1000aa9a 1000aa9a 1000aabc     ................
100148c8:	1000aabc 1000aad6 1000aabc 34333231     ............1234
100148d8:	00003635 efcdab00 00efcdab a5d5c51b     56..............
100148e8:	85a60002 393511e5 fd5abba0 00000000     ......59..Z.....
100148f8:	b2d60600 f8f005f0 00000000              ............

10014904 <ble_mgr_gatt_server_handle>:
	...
1001491c:	10009a29 10009a65 10009a2d 00000000     )...e...-.......
1001492c:	6e616353 676e696e 61662020 64656c69     Scanning  failed
1001493c:	00000000 2055544d 6e616843 46206567     ....MTU Change F
1001494c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001495c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001496c:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
1001497c:	64206563 6f637369 63656e6e 20646574     ce disconnected 
1001498c:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
1001499c:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
100149ac:	69747079 66206e6f 656c6961 00000064     yption failed...
100149bc:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
100149cc:	64657465 63757320 73736563 6c6c7566     eted successfull
100149dc:	00000079 20454c42 69766544 6e206563     y...BLE Device n
100149ec:	6620746f 646e756f 636e6520 74707972     ot found encrypt
100149fc:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10014a0c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10014a1c:	206e6163 69766564 72206563 68636165     can device reach
10014a2c:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10014a3c:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10014a4c:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10014a5c:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10014a6c:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10014a7c:	656e6e6f 52207463 65757165 46207473     onnect Request F
10014a8c:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10014a9c:	636f7270 72756465 6f632065 656c706d     procedure comple
10014aac:	20646574 63637573 66737365 796c6c75     ted successfully
10014abc:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10014acc:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10014adc:	68742065 61702065 6e697269 6e692067     e the pairing in
10014aec:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10014afc:	7320746f 74726174 00006465 76616c53     ot started..Slav
10014b0c:	65532065 69727563 52207974 2d207165     e Security Req -
10014b1c:	74754120 746e6568 74616369 206e6f69      Authentication 
10014b2c:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10014b3c:	74736575 41202d20 65687475 6369746e     uest - Authentic
10014b4c:	6f697461 6146206e 64656c69 00000000     ation Failed....
10014b5c:	65746e45 68742072 61502065 656b7373     Enter the Passke
10014b6c:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10014b7c:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10014b8c:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10014b9c:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10014bac:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10014bbc:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10014bcc:	6568746f 65442072 65636976 00003a29     other Device):..
10014bdc:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10014bec:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10014bfc:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10014c0c:	00000064 65746e45 20646572 73736150     d...Entered Pass
10014c1c:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10014c2c:	6f666e69 74616d72 206e6f69 7020666f     information of p
10014c3c:	20726565 69766564 69206563 6f6e2073     eer device is no
10014c4c:	76612074 616c6961 2e656c62 00000000     t available.....
10014c5c:	61656c50 75206573 6961706e 68742072     Please unpair th
10014c6c:	65642065 65636976 6f726620 6570206d     e device from pe
10014c7c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10014c8c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10014c9c:	20646e61 72617473 61702074 6e697269     and start pairin
10014cac:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10014cbc:	52206e6f 65757165 52207473 796c7065     on Request Reply
10014ccc:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10014cdc:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10014cec:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10014cfc:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10014d0c:	63206573 6b636568 65687420 776f7020     se check the pow
10014d1c:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10014d2c:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10014d3c:	7463656e 0000726f 432d5441 00004353     nector..AT-CSC..
10014d4c:	69766544 6e206563 20656d61 20746573     Device name set 
10014d5c:	6c696166 00006465 61204442 65726464     failed..BD addre
10014d6c:	67207373 66207465 656c6961 00000064     ss get failed...
10014d7c:	41204442 65726464 303a7373 32302578     BD Address:0x%02
10014d8c:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
10014d9c:	32302558 41202c58 65726464 54207373     X%02X, Address T
10014dac:	3a657079 00006425 20746553 20454c42     ype:%d..Set BLE 
10014dbc:	69766544 63206563 69666e6f 61727567     Device configura
10014dcc:	6e6f6974 69616620 0064656c 20746553     tion failed.Set 
10014ddc:	20454c42 69766544 41206563 65726464     BLE Device Addre
10014dec:	66207373 656c6961 00000064 6e616353     ss failed...Scan
10014dfc:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10014e0c:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10014e1c:	69727563 72207974 65757165 66207473     curity request f
10014e2c:	656c6961 00000064 6e6e6f43 65746365     ailed...Connecte
10014e3c:	6f742064 65657020 65642072 65636976     d to peer device
10014e4c:	74697720 64612068 73657264 78302073      with address 0x
10014e5c:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10014e6c:	78323025 78323025 00000000 6e6e6f43     %02x%02x....Conn
10014e7c:	69746365 48206e6f 6c646e61 64252065     ection Handle %d
10014e8c:	00000000 6f736552 6e69766c 61522067     ....Resolving Ra
10014e9c:	6d6f646e 64646120 73736572 69616620     ndom address fai
10014eac:	2a64656c 0000002a 2078614d 626d756e     led**...Max numb
10014ebc:	6f207265 6f632066 63656e6e 6e6f6974     er of connection
10014ecc:	61657220 64656863 6425203a 3d3d3d20      reached: %d ===
10014edc:	7369443e 6e6e6f63 69746365 2e2e676e     >Disconnecting..
10014eec:	0000002e 69766544 43206563 656e6e6f     ....Device Conne
10014efc:	6f697463 6146206e 64656c69 53202d20     ction Failed - S
10014f0c:	75746174 25203a73 00000064 20454c42     tatus: %d...BLE 
10014f1c:	65766441 73697472 6e656d65 61642074     Advertisement da
10014f2c:	73206174 66207465 656c6961 00000064     ta set failed...

10014f3c <ble_mgr_gap_handle>:
10014f3c:	10009a25 10009be1 10009a3d 00000000     %.......=.......
10014f4c:	00000000 1000a6cd 10009a95 10009a39     ............9...
10014f5c:	10009d81 10009c61 10009f85 10009d99     ....a...........
10014f6c:	1000a0d9 1000a21d 10009b1d 1000a909     ................
	...
10014f88:	a5d5c51b 85a60002 393511e5 fd5abba0     ..........59..Z.
10014f98:	00000000 a5d5c51b 85a60002 393511e5     ..............59
10014fa8:	fd5abba1 00000000 625f7461 635f656c     ..Z.....at_ble_c
10014fb8:	61726168 72657463 69747369 61765f63     haracteristic_va
10014fc8:	5f65756c 20746567 756c6176 65672065     lue_get value ge
10014fd8:	61662074 64656c69 00000000 625f7461     t failed....at_b
10014fe8:	635f656c 61726168 72657463 69747369     le_characteristi
10014ff8:	61765f63 5f65756c 20746573 756c6176     c_value_set valu
10015008:	65732065 61662074 64656c69 00000000     e set failed....
10015018:	625f7461 6e5f656c 6669746f 74616369     at_ble_notificat
10015028:	5f6e6f69 646e6573 61662020 64656c69     ion_send  failed
10015038:	00000000 00006968 00006948 706f7473     ....hi..Hi..stop
10015048:	00000000 706f7453 00000000 6576654c     ....Stop....Leve
10015058:	6553206c 726f736e 0000203a 0000000a     l Sensor: ......
10015068:	706d6554 74617265 3a657275 00000020     Temperature: ...
10015078:	73696f4d 65727574 0000203a 74696e49     Moisture: ..Init
10015088:	696c6169 676e697a 73754320 206d6f74     ializing Custom 
10015098:	69726553 43206c61 20746168 6c707041     Serial Chat Appl
100150a8:	74616369 006e6f69                       ication.

100150b0 <app_gap_handle>:
	...
100150c4:	1000b869 1000b881 00000000 00000000     i...............
	...
100150fc:	656d7441 6f43206c 022e7072                       Atmel Corp.

10015107 <CSWTCH.45>:
10015107:	00100402                                         ...

1001510a <CSWTCH.47>:
1001510a:	03010300 03030303 03030303 02020303              ...............

10015119 <client_conf_uuid>:
10015119:	29042902                                         .)

1001511b <presentation_format_uuid>:
1001511b:	29012904                                         .)

1001511d <user_desc_uuid>:
1001511d:	29032901                                         .)

1001511f <server_conf_uuid>:
1001511f:	29002903                                         .)

10015121 <extended_props_uuid>:
10015121:	28022900                                         .)

10015123 <include_uuid>:
10015123:	28032802                                         .(

10015125 <char_uuid>:
10015125:	70002803 0000776f 00000000                       .(.pow.....

10015130 <TWO52>:
10015130:	00000000 43300000 00000000 c3300000     ......0C......0.
10015140:	10010e44 10010da2 10010da2 10010da0     D...............
10015150:	10010e36 10010e36 10010e2c 10010da0     6...6...,.......
10015160:	10010e36 10010e2c 10010e36 10010da0     6...,...6.......
10015170:	10010e3c 10010e3c 10010e3c 10010ec6     <...<...<.......
10015180:	10011b78 10011a46 10011b4c 10011a3c     x...F...L...<...
10015190:	10011b4c 10011b56 10011b4c 10011a3c     L...V...L...<...
100151a0:	10011a46 10011a46 10011b56 10011a3c     F...F...V...<...
100151b0:	10011a32 10011a32 10011a32 10011da8     2...2...2.......
100151c0:	100123c0 10012280 10012280 1001227e     .#..."..."..~"..
100151d0:	10012398 10012398 1001238a 1001227e     .#...#...#..~"..
100151e0:	10012398 1001238a 10012398 1001227e     .#...#...#..~"..
100151f0:	100123a0 100123a0 100123a0 100125a0     .#...#...#...%..
10015200:	00000043                                C...

10015204 <_global_impure_ptr>:
10015204:	10015300 33323130 37363534 62613938     .S..0123456789ab
10015214:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
10015224:	76757473 7a797877 00000000              stuvwxyz....

10015230 <__sf_fake_stdin>:
	...

10015250 <__sf_fake_stdout>:
	...

10015270 <__sf_fake_stderr>:
	...
10015290:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100152a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100152b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
100152c0:	00006665                                ef..

100152c4 <_init>:
100152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100152c6:	46c0      	nop			; (mov r8, r8)
100152c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100152ca:	bc08      	pop	{r3}
100152cc:	469e      	mov	lr, r3
100152ce:	4770      	bx	lr

100152d0 <__init_array_start>:
100152d0:	100080b1 	.word	0x100080b1

100152d4 <_fini>:
100152d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100152d6:	46c0      	nop			; (mov r8, r8)
100152d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100152da:	bc08      	pop	{r3}
100152dc:	469e      	mov	lr, r3
100152de:	4770      	bx	lr

100152e0 <__fini_array_start>:
100152e0:	10008089 	.word	0x10008089
